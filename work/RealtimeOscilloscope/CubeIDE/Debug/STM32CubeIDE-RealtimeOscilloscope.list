
STM32CubeIDE-RealtimeOscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ae60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003240  0801b030  0801b030  0002b030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000cc2  0801e270  0801e270  0002e270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000020  0801ef34  0801ef34  0002ef34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0801ef54  0801ef54  000300cc  2**0
                  CONTENTS
  6 .ARM          00000008  0801ef54  0801ef54  0002ef54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0801ef5c  0801ef5c  000300cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000024  0801ef5c  0801ef5c  0002ef5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000018  0801ef80  0801ef80  0002ef80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000000cc  20000000  0801ef98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001dd4  200000cc  0801f064  000300cc  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  20001ea0  0801f064  00031ea0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000c4349  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000181f4  00000000  00000000  000f4445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004680  00000000  00000000  0010c640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000040f8  00000000  00000000  00110cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00041e00  00000000  00000000  00114db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0006adc1  00000000  00000000  00156bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001381d1  00000000  00000000  001c1979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000cf  00000000  00000000  002f9b4a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00014644  00000000  00000000  002f9c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000cc 	.word	0x200000cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801b018 	.word	0x0801b018

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d0 	.word	0x200000d0
 800020c:	0801b018 	.word	0x0801b018

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  //TS_IO_Delay(200);

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005ce:	f000 f9b5 	bl	800093c <ft5336_I2C_InitializeIfRequired>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4603      	mov	r3, r0
 80005e2:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000602:	2300      	movs	r3, #0
 8000604:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000606:	f000 f999 	bl	800093c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800060a:	2300      	movs	r3, #0
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	e010      	b.n	8000632 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	21a8      	movs	r1, #168	; 0xa8
 8000616:	4618      	mov	r0, r3
 8000618:	f00d fca2 	bl	800df60 <TS_IO_Read>
 800061c:	4603      	mov	r3, r0
 800061e:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000620:	7b7b      	ldrb	r3, [r7, #13]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b51      	cmp	r3, #81	; 0x51
 8000626:	d101      	bne.n	800062c <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	3301      	adds	r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d802      	bhi.n	800063e <ft5336_ReadID+0x4e>
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0e8      	beq.n	8000610 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800063e:	7b7b      	ldrb	r3, [r7, #13]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	b29b      	uxth	r3, r3
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f97d 	bl	8000958 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f933 	bl	80008cc <ft5336_TS_DisableIT>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2102      	movs	r1, #2
 8000684:	4618      	mov	r0, r3
 8000686:	f00d fc6b 	bl	800df60 <TS_IO_Read>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	b2db      	uxtb	r3, r3
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	b2db      	uxtb	r3, r3
 8000698:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b05      	cmp	r3, #5
 80006a0:	d901      	bls.n	80006a6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <ft5336_TS_DetectTouch+0x50>)
 80006ac:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <ft5336_TS_DetectTouch+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	b2db      	uxtb	r3, r3
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000e8 	.word	0x200000e8

080006c4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006e6:	4b6d      	ldr	r3, [pc, #436]	; (800089c <ft5336_TS_GetXY+0x1d8>)
 80006e8:	789a      	ldrb	r2, [r3, #2]
 80006ea:	4b6c      	ldr	r3, [pc, #432]	; (800089c <ft5336_TS_GetXY+0x1d8>)
 80006ec:	785b      	ldrb	r3, [r3, #1]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	f080 80cf 	bcs.w	8000892 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006f4:	4b69      	ldr	r3, [pc, #420]	; (800089c <ft5336_TS_GetXY+0x1d8>)
 80006f6:	789b      	ldrb	r3, [r3, #2]
 80006f8:	2b09      	cmp	r3, #9
 80006fa:	d871      	bhi.n	80007e0 <ft5336_TS_GetXY+0x11c>
 80006fc:	a201      	add	r2, pc, #4	; (adr r2, 8000704 <ft5336_TS_GetXY+0x40>)
 80006fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000702:	bf00      	nop
 8000704:	0800072d 	.word	0x0800072d
 8000708:	0800073f 	.word	0x0800073f
 800070c:	08000751 	.word	0x08000751
 8000710:	08000763 	.word	0x08000763
 8000714:	08000775 	.word	0x08000775
 8000718:	08000787 	.word	0x08000787
 800071c:	08000799 	.word	0x08000799
 8000720:	080007ab 	.word	0x080007ab
 8000724:	080007bd 	.word	0x080007bd
 8000728:	080007cf 	.word	0x080007cf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800072c:	2304      	movs	r3, #4
 800072e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000730:	2303      	movs	r3, #3
 8000732:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000734:	2306      	movs	r3, #6
 8000736:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000738:	2305      	movs	r3, #5
 800073a:	753b      	strb	r3, [r7, #20]
      break;
 800073c:	e051      	b.n	80007e2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800073e:	230a      	movs	r3, #10
 8000740:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000742:	2309      	movs	r3, #9
 8000744:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000746:	230c      	movs	r3, #12
 8000748:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800074a:	230b      	movs	r3, #11
 800074c:	753b      	strb	r3, [r7, #20]
      break;
 800074e:	e048      	b.n	80007e2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000750:	2310      	movs	r3, #16
 8000752:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000754:	230f      	movs	r3, #15
 8000756:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000758:	2312      	movs	r3, #18
 800075a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800075c:	2311      	movs	r3, #17
 800075e:	753b      	strb	r3, [r7, #20]
      break;
 8000760:	e03f      	b.n	80007e2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000762:	2316      	movs	r3, #22
 8000764:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000766:	2315      	movs	r3, #21
 8000768:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800076a:	2318      	movs	r3, #24
 800076c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800076e:	2317      	movs	r3, #23
 8000770:	753b      	strb	r3, [r7, #20]
      break;
 8000772:	e036      	b.n	80007e2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000774:	231c      	movs	r3, #28
 8000776:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000778:	231b      	movs	r3, #27
 800077a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800077c:	231e      	movs	r3, #30
 800077e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000780:	231d      	movs	r3, #29
 8000782:	753b      	strb	r3, [r7, #20]
      break;
 8000784:	e02d      	b.n	80007e2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000786:	2322      	movs	r3, #34	; 0x22
 8000788:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800078a:	2321      	movs	r3, #33	; 0x21
 800078c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800078e:	2324      	movs	r3, #36	; 0x24
 8000790:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000792:	2323      	movs	r3, #35	; 0x23
 8000794:	753b      	strb	r3, [r7, #20]
      break;
 8000796:	e024      	b.n	80007e2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000798:	2328      	movs	r3, #40	; 0x28
 800079a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800079c:	2327      	movs	r3, #39	; 0x27
 800079e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007a0:	232a      	movs	r3, #42	; 0x2a
 80007a2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007a4:	2329      	movs	r3, #41	; 0x29
 80007a6:	753b      	strb	r3, [r7, #20]
      break;
 80007a8:	e01b      	b.n	80007e2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80007aa:	232e      	movs	r3, #46	; 0x2e
 80007ac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80007ae:	232d      	movs	r3, #45	; 0x2d
 80007b0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007b2:	2330      	movs	r3, #48	; 0x30
 80007b4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007b6:	232f      	movs	r3, #47	; 0x2f
 80007b8:	753b      	strb	r3, [r7, #20]
      break;
 80007ba:	e012      	b.n	80007e2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007bc:	2334      	movs	r3, #52	; 0x34
 80007be:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007c0:	2333      	movs	r3, #51	; 0x33
 80007c2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007c4:	2336      	movs	r3, #54	; 0x36
 80007c6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007c8:	2335      	movs	r3, #53	; 0x35
 80007ca:	753b      	strb	r3, [r7, #20]
      break;
 80007cc:	e009      	b.n	80007e2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007ce:	233a      	movs	r3, #58	; 0x3a
 80007d0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007d2:	2339      	movs	r3, #57	; 0x39
 80007d4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007d6:	233c      	movs	r3, #60	; 0x3c
 80007d8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007da:	233b      	movs	r3, #59	; 0x3b
 80007dc:	753b      	strb	r3, [r7, #20]
      break;
 80007de:	e000      	b.n	80007e2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007e0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	7dfa      	ldrb	r2, [r7, #23]
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f00d fbb8 	bl	800df60 <TS_IO_Read>
 80007f0:	4603      	mov	r3, r0
 80007f2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007f4:	7cfb      	ldrb	r3, [r7, #19]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <ft5336_TS_GetXY+0x1dc>)
 80007fc:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	7dba      	ldrb	r2, [r7, #22]
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f00d fbaa 	bl	800df60 <TS_IO_Read>
 800080c:	4603      	mov	r3, r0
 800080e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000810:	7cfb      	ldrb	r3, [r7, #19]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800081a:	b21a      	sxth	r2, r3
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29a      	uxth	r2, r3
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <ft5336_TS_GetXY+0x1dc>)
 800082a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <ft5336_TS_GetXY+0x1dc>)
 800082e:	881a      	ldrh	r2, [r3, #0]
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000834:	89fb      	ldrh	r3, [r7, #14]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	7d7a      	ldrb	r2, [r7, #21]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f00d fb8f 	bl	800df60 <TS_IO_Read>
 8000842:	4603      	mov	r3, r0
 8000844:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000846:	7cfb      	ldrb	r3, [r7, #19]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <ft5336_TS_GetXY+0x1dc>)
 800084e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000850:	89fb      	ldrh	r3, [r7, #14]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	7d3a      	ldrb	r2, [r7, #20]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f00d fb81 	bl	800df60 <TS_IO_Read>
 800085e:	4603      	mov	r3, r0
 8000860:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000862:	7cfb      	ldrb	r3, [r7, #19]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800086c:	b21a      	sxth	r2, r3
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21b      	sxth	r3, r3
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <ft5336_TS_GetXY+0x1dc>)
 800087c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <ft5336_TS_GetXY+0x1dc>)
 8000880:	881a      	ldrh	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <ft5336_TS_GetXY+0x1d8>)
 8000888:	789b      	ldrb	r3, [r3, #2]
 800088a:	3301      	adds	r3, #1
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b03      	ldr	r3, [pc, #12]	; (800089c <ft5336_TS_GetXY+0x1d8>)
 8000890:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000e8 	.word	0x200000e8
 80008a0:	200000ec 	.word	0x200000ec

080008a4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008b2:	2301      	movs	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	7bfa      	ldrb	r2, [r7, #15]
 80008bc:	21a4      	movs	r1, #164	; 0xa4
 80008be:	4618      	mov	r0, r3
 80008c0:	f00d fb34 	bl	800df2c <TS_IO_Write>
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	7bfa      	ldrb	r2, [r7, #15]
 80008e4:	21a4      	movs	r1, #164	; 0xa4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f00d fb20 	bl	800df2c <TS_IO_Write>
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800092a:	781b      	ldrb	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	200000e8 	.word	0x200000e8

0800093c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000940:	f7ff fff0 	bl	8000924 <ft5336_Get_I2C_InitializedStatus>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d102      	bne.n	8000950 <ft5336_I2C_InitializeIfRequired+0x14>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800094a:	4b02      	ldr	r3, [pc, #8]	; (8000954 <ft5336_I2C_InitializeIfRequired+0x18>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
  }
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000e8 	.word	0x200000e8

08000958 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <_ZN17ButtonsController11getInstanceEv>:
                      interface::ButtonsControllerCallbackProvider::CallbackMethod> CallbackProvider;

    ButtonsController();
    virtual ~ButtonsController();

    static ButtonsController & getInstance() { assert(_pInstance); return *_pInstance; }    ///< Access to single instance
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <_ZN17ButtonsController11getInstanceEv+0x20>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d105      	bne.n	800098c <_ZN17ButtonsController11getInstanceEv+0x18>
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <_ZN17ButtonsController11getInstanceEv+0x24>)
 8000982:	4a06      	ldr	r2, [pc, #24]	; (800099c <_ZN17ButtonsController11getInstanceEv+0x28>)
 8000984:	211f      	movs	r1, #31
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <_ZN17ButtonsController11getInstanceEv+0x2c>)
 8000988:	f019 f8d8 	bl	8019b3c <__assert_func>
 800098c:	4b01      	ldr	r3, [pc, #4]	; (8000994 <_ZN17ButtonsController11getInstanceEv+0x20>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20001a60 	.word	0x20001a60
 8000998:	0801b030 	.word	0x0801b030
 800099c:	0801b03c 	.word	0x0801b03c
 80009a0:	0801b078 	.word	0x0801b078

080009a4 <HAL_GPIO_EXTI_Callback>:
#include "board/buttonscontroller.h"
#include "main.h"


extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
      switch (GPIO_Pin)
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	2b80      	cmp	r3, #128	; 0x80
 80009b2:	d009      	beq.n	80009c8 <HAL_GPIO_EXTI_Callback+0x24>
 80009b4:	2b80      	cmp	r3, #128	; 0x80
 80009b6:	dc10      	bgt.n	80009da <HAL_GPIO_EXTI_Callback+0x36>
 80009b8:	2b40      	cmp	r3, #64	; 0x40
 80009ba:	d005      	beq.n	80009c8 <HAL_GPIO_EXTI_Callback+0x24>
 80009bc:	2b40      	cmp	r3, #64	; 0x40
 80009be:	dc0c      	bgt.n	80009da <HAL_GPIO_EXTI_Callback+0x36>
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	d001      	beq.n	80009c8 <HAL_GPIO_EXTI_Callback+0x24>
 80009c4:	2b08      	cmp	r3, #8
 80009c6:	d108      	bne.n	80009da <HAL_GPIO_EXTI_Callback+0x36>
      {
        case BUTTON0_Pin:
        case BUTTON1_Pin:
        case BUTTON2_Pin:
        case BUTTON3_Pin:
            ButtonsController::getInstance().onIrq();
 80009c8:	f7ff ffd4 	bl	8000974 <_ZN17ButtonsController11getInstanceEv>
 80009cc:	4603      	mov	r3, r0
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	3208      	adds	r2, #8
 80009d2:	6812      	ldr	r2, [r2, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	4790      	blx	r2
            break;
 80009d8:	e000      	b.n	80009dc <HAL_GPIO_EXTI_Callback+0x38>
        default:
            break;
 80009da:	bf00      	nop
      }
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <HAL_TIM_OC_DelayElapsedCallback>:

extern "C" void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(Timer1Toggle_GPIO_Port, Timer1Toggle_Pin);
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <HAL_ADC_ConvCpltCallback>:

extern "C" void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Timer1Toggle_GPIO_Port, Timer1Toggle_Pin);
 8000a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <HAL_ADC_ConvCpltCallback+0x24>)
 8000a06:	f003 f8f2 	bl	8003bee <HAL_GPIO_TogglePin>
	uint16_t value =HAL_ADC_GetValue(hadc);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f001 ff44 	bl	8002898 <HAL_ADC_GetValue>
 8000a10:	4603      	mov	r3, r0
 8000a12:	81fb      	strh	r3, [r7, #14]
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40021400 	.word	0x40021400

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a24:	f001 fcbb 	bl	800239e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f826 	bl	8000a78 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a2c:	f000 f894 	bl	8000b58 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a30:	f000 fb8c 	bl	800114c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000a34:	f000 f8bc 	bl	8000bb0 <MX_ADC3_Init>
  MX_CRC_Init();
 8000a38:	f000 f90c 	bl	8000c54 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000a3c:	f000 f92c 	bl	8000c98 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000a40:	f000 fb34 	bl	80010ac <MX_FMC_Init>
  MX_I2C3_Init();
 8000a44:	f000 f95a 	bl	8000cfc <MX_I2C3_Init>
  MX_LTDC_Init();
 8000a48:	f000 f998 	bl	8000d7c <MX_LTDC_Init>
  MX_SPI2_Init();
 8000a4c:	f000 fa18 	bl	8000e80 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000a50:	f000 fafc 	bl	800104c <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000a54:	f00e fe52 	bl	800f6fc <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000a58:	f000 fa50 	bl	8000efc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_OC_Start_IT(&htim1);
  //HAL_TIM_Base_Start(&htim1);
  //HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <main+0x50>)
 8000a60:	f007 fd06 	bl	8008470 <HAL_TIM_OC_Start_IT>
  HAL_ADC_Start_IT(&hadc3);
 8000a64:	4803      	ldr	r0, [pc, #12]	; (8000a74 <main+0x54>)
 8000a66:	f001 fd2f 	bl	80024c8 <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a6a:	f00e fe6d 	bl	800f748 <MX_USB_HOST_Process>
 8000a6e:	e7fc      	b.n	8000a6a <main+0x4a>
 8000a70:	200002f4 	.word	0x200002f4
 8000a74:	200000f0 	.word	0x200000f0

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	2230      	movs	r2, #48	; 0x30
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f019 f8f0 	bl	8019c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a9c:	f005 fed4 	bl	8006848 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <SystemClock_Config+0xd8>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a2a      	ldr	r2, [pc, #168]	; (8000b50 <SystemClock_Config+0xd8>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <SystemClock_Config+0xd8>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab8:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a25      	ldr	r2, [pc, #148]	; (8000b54 <SystemClock_Config+0xdc>)
 8000abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <SystemClock_Config+0xdc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ae4:	2319      	movs	r3, #25
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000ae8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000aec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000af2:	2309      	movs	r3, #9
 8000af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	4618      	mov	r0, r3
 8000afc:	f005 ff04 	bl	8006908 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b06:	f000 fec1 	bl	800188c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b0a:	f005 fead 	bl	8006868 <HAL_PWREx_EnableOverDrive>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000b14:	f000 feba 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2106      	movs	r1, #6
 8000b36:	4618      	mov	r0, r3
 8000b38:	f006 f98a 	bl	8006e50 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b42:	f000 fea3 	bl	800188c <Error_Handler>
  }
}
 8000b46:	bf00      	nop
 8000b48:	3750      	adds	r7, #80	; 0x50
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40007000 	.word	0x40007000

08000b58 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0a2      	sub	sp, #136	; 0x88
 8000b5c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2284      	movs	r2, #132	; 0x84
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f019 f881 	bl	8019c6c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <PeriphCommonClock_Config+0x54>)
 8000b6c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000b6e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b72:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000b74:	2305      	movs	r3, #5
 8000b76:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000b8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	4618      	mov	r0, r3
 8000b96:	f006 fb73 	bl	8007280 <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000ba0:	f000 fe74 	bl	800188c <Error_Handler>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3788      	adds	r7, #136	; 0x88
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	00200008 	.word	0x00200008

08000bb0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000bc4:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <MX_ADC3_Init+0xa0>)
 8000bc6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000bca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bce:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000bec:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c12:	480e      	ldr	r0, [pc, #56]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000c14:	f001 fc14 	bl	8002440 <HAL_ADC_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 8000c1e:	f000 fe35 	bl	800188c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c2e:	463b      	mov	r3, r7
 8000c30:	4619      	mov	r1, r3
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <MX_ADC3_Init+0x9c>)
 8000c34:	f001 fe52 	bl	80028dc <HAL_ADC_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 8000c3e:	f000 fe25 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200000f0 	.word	0x200000f0
 8000c50:	40012200 	.word	0x40012200

08000c54 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <MX_CRC_Init+0x3c>)
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <MX_CRC_Init+0x40>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_CRC_Init+0x3c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <MX_CRC_Init+0x3c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_CRC_Init+0x3c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <MX_CRC_Init+0x3c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_CRC_Init+0x3c>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <MX_CRC_Init+0x3c>)
 8000c7e:	f002 f969 	bl	8002f54 <HAL_CRC_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c88:	f000 fe00 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000138 	.word	0x20000138
 8000c94:	40023000 	.word	0x40023000

08000c98 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_DMA2D_Init+0x5c>)
 8000c9e:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <MX_DMA2D_Init+0x60>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_DMA2D_Init+0x5c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_DMA2D_Init+0x5c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_DMA2D_Init+0x5c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_DMA2D_Init+0x5c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_DMA2D_Init+0x5c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_DMA2D_Init+0x5c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_DMA2D_Init+0x5c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <MX_DMA2D_Init+0x5c>)
 8000cce:	f002 fab9 	bl	8003244 <HAL_DMA2D_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000cd8:	f000 fdd8 	bl	800188c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_DMA2D_Init+0x5c>)
 8000ce0:	f002 fc0a 	bl	80034f8 <HAL_DMA2D_ConfigLayer>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000cea:	f000 fdcf 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000015c 	.word	0x2000015c
 8000cf8:	4002b000 	.word	0x4002b000

08000cfc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_I2C3_Init+0x74>)
 8000d02:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <MX_I2C3_Init+0x78>)
 8000d04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_I2C3_Init+0x74>)
 8000d08:	4a1b      	ldr	r2, [pc, #108]	; (8000d78 <MX_I2C3_Init+0x7c>)
 8000d0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_I2C3_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_I2C3_Init+0x74>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_I2C3_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_I2C3_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_I2C3_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_I2C3_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_I2C3_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d36:	480e      	ldr	r0, [pc, #56]	; (8000d70 <MX_I2C3_Init+0x74>)
 8000d38:	f004 fbc2 	bl	80054c0 <HAL_I2C_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d42:	f000 fda3 	bl	800188c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d46:	2100      	movs	r1, #0
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <MX_I2C3_Init+0x74>)
 8000d4a:	f005 f94d 	bl	8005fe8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d54:	f000 fd9a 	bl	800188c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_I2C3_Init+0x74>)
 8000d5c:	f005 f98f 	bl	800607e <HAL_I2CEx_ConfigDigitalFilter>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d66:	f000 fd91 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000019c 	.word	0x2000019c
 8000d74:	40005c00 	.word	0x40005c00
 8000d78:	00c0eaff 	.word	0x00c0eaff

08000d7c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	; 0x38
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2234      	movs	r2, #52	; 0x34
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f018 ff6f 	bl	8019c6c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d8e:	4b3a      	ldr	r3, [pc, #232]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000d90:	4a3a      	ldr	r2, [pc, #232]	; (8000e7c <MX_LTDC_Init+0x100>)
 8000d92:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d94:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d9a:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000da0:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000da6:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000dac:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000dae:	2228      	movs	r2, #40	; 0x28
 8000db0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000db4:	2209      	movs	r2, #9
 8000db6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000db8:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000dba:	2235      	movs	r2, #53	; 0x35
 8000dbc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000dbe:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000dc0:	220b      	movs	r2, #11
 8000dc2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000dc6:	f240 2215 	movw	r2, #533	; 0x215
 8000dca:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000dce:	f240 121b 	movw	r2, #283	; 0x11b
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000dd6:	f240 2235 	movw	r2, #565	; 0x235
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ddc:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000dde:	f240 121d 	movw	r2, #285	; 0x11d
 8000de2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000df4:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000dfc:	481e      	ldr	r0, [pc, #120]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000dfe:	f005 f98b 	bl	8006118 <HAL_LTDC_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000e08:	f000 fd40 	bl	800188c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000e10:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e14:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000e1a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000e1e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000e20:	2302      	movs	r3, #2
 8000e22:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000e24:	23ff      	movs	r3, #255	; 0xff
 8000e26:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e30:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e32:	2307      	movs	r3, #7
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000e36:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000e3c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000e42:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_LTDC_Init+0xfc>)
 8000e62:	f005 fae1 	bl	8006428 <HAL_LTDC_ConfigLayer>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000e6c:	f000 fd0e 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	3738      	adds	r7, #56	; 0x38
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200001e8 	.word	0x200001e8
 8000e7c:	40016800 	.word	0x40016800

08000e80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <MX_SPI2_Init+0x78>)
 8000e88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000e9a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e9e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ece:	2207      	movs	r2, #7
 8000ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000eda:	2208      	movs	r2, #8
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ee0:	f006 fdf2 	bl	8007ac8 <HAL_SPI_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f000 fccf 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000290 	.word	0x20000290
 8000ef8:	40003800 	.word	0x40003800

08000efc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b09a      	sub	sp, #104	; 0x68
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	222c      	movs	r2, #44	; 0x2c
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f018 fe98 	bl	8019c6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f3c:	4b41      	ldr	r3, [pc, #260]	; (8001044 <MX_TIM1_Init+0x148>)
 8000f3e:	4a42      	ldr	r2, [pc, #264]	; (8001048 <MX_TIM1_Init+0x14c>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 199;
 8000f42:	4b40      	ldr	r3, [pc, #256]	; (8001044 <MX_TIM1_Init+0x148>)
 8000f44:	22c7      	movs	r2, #199	; 0xc7
 8000f46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <MX_TIM1_Init+0x148>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000f4e:	4b3d      	ldr	r3, [pc, #244]	; (8001044 <MX_TIM1_Init+0x148>)
 8000f50:	2263      	movs	r2, #99	; 0x63
 8000f52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <MX_TIM1_Init+0x148>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f5a:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <MX_TIM1_Init+0x148>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b38      	ldr	r3, [pc, #224]	; (8001044 <MX_TIM1_Init+0x148>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f66:	4837      	ldr	r0, [pc, #220]	; (8001044 <MX_TIM1_Init+0x148>)
 8000f68:	f007 f950 	bl	800820c <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f72:	f000 fc8b 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f80:	4619      	mov	r1, r3
 8000f82:	4830      	ldr	r0, [pc, #192]	; (8001044 <MX_TIM1_Init+0x148>)
 8000f84:	f007 fd56 	bl	8008a34 <HAL_TIM_ConfigClockSource>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f8e:	f000 fc7d 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000f92:	482c      	ldr	r0, [pc, #176]	; (8001044 <MX_TIM1_Init+0x148>)
 8000f94:	f007 fa0a 	bl	80083ac <HAL_TIM_OC_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f9e:	f000 fc75 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4823      	ldr	r0, [pc, #140]	; (8001044 <MX_TIM1_Init+0x148>)
 8000fb6:	f008 f9e3 	bl	8009380 <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000fc0:	f000 fc64 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fc4:	2330      	movs	r3, #48	; 0x30
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4816      	ldr	r0, [pc, #88]	; (8001044 <MX_TIM1_Init+0x148>)
 8000fea:	f007 fca9 	bl	8008940 <HAL_TIM_OC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000ff4:	f000 fc4a 	bl	800188c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800100c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001010:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800101a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_TIM1_Init+0x148>)
 800102e:	f008 fa35 	bl	800949c <HAL_TIMEx_ConfigBreakDeadTime>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001038:	f000 fc28 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3768      	adds	r7, #104	; 0x68
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200002f4 	.word	0x200002f4
 8001048:	40010000 	.word	0x40010000

0800104c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <MX_USART1_UART_Init+0x5c>)
 8001054:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART1_UART_Init+0x58>)
 8001090:	f008 faa0 	bl	80095d4 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800109a:	f000 fbf7 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000340 	.word	0x20000340
 80010a8:	40011000 	.word	0x40011000

080010ac <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <MX_FMC_Init+0x98>)
 80010c6:	4a20      	ldr	r2, [pc, #128]	; (8001148 <MX_FMC_Init+0x9c>)
 80010c8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <MX_FMC_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <MX_FMC_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_FMC_Init+0x98>)
 80010d8:	2204      	movs	r2, #4
 80010da:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_FMC_Init+0x98>)
 80010de:	2210      	movs	r2, #16
 80010e0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_FMC_Init+0x98>)
 80010e4:	2240      	movs	r2, #64	; 0x40
 80010e6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_FMC_Init+0x98>)
 80010ea:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80010ee:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_FMC_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_FMC_Init+0x98>)
 80010f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010fc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_FMC_Init+0x98>)
 8001100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_FMC_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800110c:	2302      	movs	r3, #2
 800110e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001110:	2307      	movs	r3, #7
 8001112:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001114:	2304      	movs	r3, #4
 8001116:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001118:	2307      	movs	r3, #7
 800111a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800111c:	2303      	movs	r3, #3
 800111e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001124:	2302      	movs	r3, #2
 8001126:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_FMC_Init+0x98>)
 800112e:	f006 fc97 	bl	8007a60 <HAL_SDRAM_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001138:	f000 fba8 	bl	800188c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800113c:	bf00      	nop
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200003c4 	.word	0x200003c4
 8001148:	a0000140 	.word	0xa0000140

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b090      	sub	sp, #64	; 0x40
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001162:	4baf      	ldr	r3, [pc, #700]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4aae      	ldr	r2, [pc, #696]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001168:	f043 0310 	orr.w	r3, r3, #16
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4bac      	ldr	r3, [pc, #688]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
 8001178:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800117a:	4ba9      	ldr	r3, [pc, #676]	; (8001420 <MX_GPIO_Init+0x2d4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4aa8      	ldr	r2, [pc, #672]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4ba6      	ldr	r3, [pc, #664]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4ba3      	ldr	r3, [pc, #652]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4aa2      	ldr	r2, [pc, #648]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4ba0      	ldr	r3, [pc, #640]	; (8001420 <MX_GPIO_Init+0x2d4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	4b9d      	ldr	r3, [pc, #628]	; (8001420 <MX_GPIO_Init+0x2d4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a9c      	ldr	r2, [pc, #624]	; (8001420 <MX_GPIO_Init+0x2d4>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b9a      	ldr	r3, [pc, #616]	; (8001420 <MX_GPIO_Init+0x2d4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	4b97      	ldr	r3, [pc, #604]	; (8001420 <MX_GPIO_Init+0x2d4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a96      	ldr	r2, [pc, #600]	; (8001420 <MX_GPIO_Init+0x2d4>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b94      	ldr	r3, [pc, #592]	; (8001420 <MX_GPIO_Init+0x2d4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b91      	ldr	r3, [pc, #580]	; (8001420 <MX_GPIO_Init+0x2d4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a90      	ldr	r2, [pc, #576]	; (8001420 <MX_GPIO_Init+0x2d4>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b8e      	ldr	r3, [pc, #568]	; (8001420 <MX_GPIO_Init+0x2d4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80011f2:	4b8b      	ldr	r3, [pc, #556]	; (8001420 <MX_GPIO_Init+0x2d4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a8a      	ldr	r2, [pc, #552]	; (8001420 <MX_GPIO_Init+0x2d4>)
 80011f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b88      	ldr	r3, [pc, #544]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800120a:	4b85      	ldr	r3, [pc, #532]	; (8001420 <MX_GPIO_Init+0x2d4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a84      	ldr	r2, [pc, #528]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b82      	ldr	r3, [pc, #520]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001222:	4b7f      	ldr	r3, [pc, #508]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a7e      	ldr	r2, [pc, #504]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001228:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b7c      	ldr	r3, [pc, #496]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123a:	4b79      	ldr	r3, [pc, #484]	; (8001420 <MX_GPIO_Init+0x2d4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a78      	ldr	r2, [pc, #480]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001240:	f043 0320 	orr.w	r3, r3, #32
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b76      	ldr	r3, [pc, #472]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0320 	and.w	r3, r3, #32
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001252:	4b73      	ldr	r3, [pc, #460]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a72      	ldr	r2, [pc, #456]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b70      	ldr	r3, [pc, #448]	; (8001420 <MX_GPIO_Init+0x2d4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2110      	movs	r1, #16
 800126e:	486d      	ldr	r0, [pc, #436]	; (8001424 <MX_GPIO_Init+0x2d8>)
 8001270:	f002 fca4 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800127a:	486b      	ldr	r0, [pc, #428]	; (8001428 <MX_GPIO_Init+0x2dc>)
 800127c:	f002 fc9e 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2120      	movs	r1, #32
 8001284:	4869      	ldr	r0, [pc, #420]	; (800142c <MX_GPIO_Init+0x2e0>)
 8001286:	f002 fc99 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2108      	movs	r1, #8
 800128e:	4868      	ldr	r0, [pc, #416]	; (8001430 <MX_GPIO_Init+0x2e4>)
 8001290:	f002 fc94 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129a:	4866      	ldr	r0, [pc, #408]	; (8001434 <MX_GPIO_Init+0x2e8>)
 800129c:	f002 fc8e 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED1_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80012a6:	4864      	ldr	r0, [pc, #400]	; (8001438 <MX_GPIO_Init+0x2ec>)
 80012a8:	f002 fc88 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Timer1Toggle_GPIO_Port, Timer1Toggle_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b2:	4862      	ldr	r0, [pc, #392]	; (800143c <MX_GPIO_Init+0x2f0>)
 80012b4:	f002 fc82 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2108      	movs	r1, #8
 80012bc:	4860      	ldr	r0, [pc, #384]	; (8001440 <MX_GPIO_Init+0x2f4>)
 80012be:	f002 fc7d 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80012c2:	2308      	movs	r3, #8
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d2:	4619      	mov	r1, r3
 80012d4:	485b      	ldr	r0, [pc, #364]	; (8001444 <MX_GPIO_Init+0x2f8>)
 80012d6:	f002 f9a1 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80012da:	2304      	movs	r3, #4
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012ea:	2309      	movs	r3, #9
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f2:	4619      	mov	r1, r3
 80012f4:	4853      	ldr	r0, [pc, #332]	; (8001444 <MX_GPIO_Init+0x2f8>)
 80012f6:	f002 f991 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80012fa:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800130c:	230b      	movs	r3, #11
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001314:	4619      	mov	r1, r3
 8001316:	484a      	ldr	r0, [pc, #296]	; (8001440 <MX_GPIO_Init+0x2f4>)
 8001318:	f002 f980 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800131c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001322:	2312      	movs	r3, #18
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001326:	2301      	movs	r3, #1
 8001328:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800132e:	2304      	movs	r3, #4
 8001330:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001336:	4619      	mov	r1, r3
 8001338:	483a      	ldr	r0, [pc, #232]	; (8001424 <MX_GPIO_Init+0x2d8>)
 800133a:	f002 f96f 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800133e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001350:	230a      	movs	r3, #10
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001358:	4619      	mov	r1, r3
 800135a:	4832      	ldr	r0, [pc, #200]	; (8001424 <MX_GPIO_Init+0x2d8>)
 800135c:	f002 f95e 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8001360:	2310      	movs	r3, #16
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001374:	4619      	mov	r1, r3
 8001376:	482b      	ldr	r0, [pc, #172]	; (8001424 <MX_GPIO_Init+0x2d8>)
 8001378:	f002 f950 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800138c:	2308      	movs	r3, #8
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001394:	4619      	mov	r1, r3
 8001396:	4825      	ldr	r0, [pc, #148]	; (800142c <MX_GPIO_Init+0x2e0>)
 8001398:	f002 f940 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800139c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013ae:	230c      	movs	r3, #12
 80013b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b6:	4619      	mov	r1, r3
 80013b8:	4823      	ldr	r0, [pc, #140]	; (8001448 <MX_GPIO_Init+0x2fc>)
 80013ba:	f002 f92f 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED2_Pin;
 80013be:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d4:	4619      	mov	r1, r3
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <MX_GPIO_Init+0x2dc>)
 80013d8:	f002 f920 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80013dc:	2360      	movs	r3, #96	; 0x60
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013ec:	230d      	movs	r3, #13
 80013ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f4:	4619      	mov	r1, r3
 80013f6:	4813      	ldr	r0, [pc, #76]	; (8001444 <MX_GPIO_Init+0x2f8>)
 80013f8:	f002 f910 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80013fc:	2340      	movs	r3, #64	; 0x40
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800140c:	230a      	movs	r3, #10
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001414:	4619      	mov	r1, r3
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <MX_GPIO_Init+0x2d8>)
 8001418:	f002 f900 	bl	800361c <HAL_GPIO_Init>
 800141c:	e016      	b.n	800144c <MX_GPIO_Init+0x300>
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40020400 	.word	0x40020400
 8001428:	40020000 	.word	0x40020000
 800142c:	40020c00 	.word	0x40020c00
 8001430:	40022800 	.word	0x40022800
 8001434:	40022000 	.word	0x40022000
 8001438:	40021c00 	.word	0x40021c00
 800143c:	40021400 	.word	0x40021400
 8001440:	40021800 	.word	0x40021800
 8001444:	40021000 	.word	0x40021000
 8001448:	40020800 	.word	0x40020800

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001452:	2300      	movs	r3, #0
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800145e:	4619      	mov	r1, r3
 8001460:	48bc      	ldr	r0, [pc, #752]	; (8001754 <MX_GPIO_Init+0x608>)
 8001462:	f002 f8db 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001466:	23f0      	movs	r3, #240	; 0xf0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001476:	230a      	movs	r3, #10
 8001478:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800147a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800147e:	4619      	mov	r1, r3
 8001480:	48b5      	ldr	r0, [pc, #724]	; (8001758 <MX_GPIO_Init+0x60c>)
 8001482:	f002 f8cb 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001498:	230a      	movs	r3, #10
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a0:	4619      	mov	r1, r3
 80014a2:	48ae      	ldr	r0, [pc, #696]	; (800175c <MX_GPIO_Init+0x610>)
 80014a4:	f002 f8ba 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014a8:	2320      	movs	r3, #32
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014bc:	4619      	mov	r1, r3
 80014be:	48a8      	ldr	r0, [pc, #672]	; (8001760 <MX_GPIO_Init+0x614>)
 80014c0:	f002 f8ac 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80014c4:	2308      	movs	r3, #8
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014d4:	230d      	movs	r3, #13
 80014d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014dc:	4619      	mov	r1, r3
 80014de:	48a0      	ldr	r0, [pc, #640]	; (8001760 <MX_GPIO_Init+0x614>)
 80014e0:	f002 f89c 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON0_Pin;
 80014e4:	230c      	movs	r3, #12
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f6:	4619      	mov	r1, r3
 80014f8:	4897      	ldr	r0, [pc, #604]	; (8001758 <MX_GPIO_Init+0x60c>)
 80014fa:	f002 f88f 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80014fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001510:	4619      	mov	r1, r3
 8001512:	4894      	ldr	r0, [pc, #592]	; (8001764 <MX_GPIO_Init+0x618>)
 8001514:	f002 f882 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001518:	2308      	movs	r3, #8
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152c:	4619      	mov	r1, r3
 800152e:	488e      	ldr	r0, [pc, #568]	; (8001768 <MX_GPIO_Init+0x61c>)
 8001530:	f002 f874 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001546:	230d      	movs	r3, #13
 8001548:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154e:	4619      	mov	r1, r3
 8001550:	4882      	ldr	r0, [pc, #520]	; (800175c <MX_GPIO_Init+0x610>)
 8001552:	f002 f863 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001556:	2310      	movs	r3, #16
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155a:	2300      	movs	r3, #0
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001566:	4619      	mov	r1, r3
 8001568:	487d      	ldr	r0, [pc, #500]	; (8001760 <MX_GPIO_Init+0x614>)
 800156a:	f002 f857 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800156e:	2304      	movs	r3, #4
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800157e:	230c      	movs	r3, #12
 8001580:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001586:	4619      	mov	r1, r3
 8001588:	4875      	ldr	r0, [pc, #468]	; (8001760 <MX_GPIO_Init+0x614>)
 800158a:	f002 f847 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800158e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800159c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a0:	4619      	mov	r1, r3
 80015a2:	4872      	ldr	r0, [pc, #456]	; (800176c <MX_GPIO_Init+0x620>)
 80015a4:	f002 f83a 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80015a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015be:	4619      	mov	r1, r3
 80015c0:	4865      	ldr	r0, [pc, #404]	; (8001758 <MX_GPIO_Init+0x60c>)
 80015c2:	f002 f82b 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED1_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED1_Pin;
 80015c6:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015dc:	4619      	mov	r1, r3
 80015de:	4863      	ldr	r0, [pc, #396]	; (800176c <MX_GPIO_Init+0x620>)
 80015e0:	f002 f81c 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80015e4:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015f6:	230d      	movs	r3, #13
 80015f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fe:	4619      	mov	r1, r3
 8001600:	485a      	ldr	r0, [pc, #360]	; (800176c <MX_GPIO_Init+0x620>)
 8001602:	f002 f80b 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001606:	2301      	movs	r3, #1
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001616:	2302      	movs	r3, #2
 8001618:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161e:	4619      	mov	r1, r3
 8001620:	484d      	ldr	r0, [pc, #308]	; (8001758 <MX_GPIO_Init+0x60c>)
 8001622:	f001 fffb 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800162c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800163a:	4619      	mov	r1, r3
 800163c:	4846      	ldr	r0, [pc, #280]	; (8001758 <MX_GPIO_Init+0x60c>)
 800163e:	f001 ffed 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001642:	23c0      	movs	r3, #192	; 0xc0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001652:	2308      	movs	r3, #8
 8001654:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165a:	4619      	mov	r1, r3
 800165c:	4841      	ldr	r0, [pc, #260]	; (8001764 <MX_GPIO_Init+0x618>)
 800165e:	f001 ffdd 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001662:	2310      	movs	r3, #16
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001672:	230a      	movs	r3, #10
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167a:	4619      	mov	r1, r3
 800167c:	483b      	ldr	r0, [pc, #236]	; (800176c <MX_GPIO_Init+0x620>)
 800167e:	f001 ffcd 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 8001682:	23c0      	movs	r3, #192	; 0xc0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001686:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168c:	2301      	movs	r3, #1
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001690:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001694:	4619      	mov	r1, r3
 8001696:	4831      	ldr	r0, [pc, #196]	; (800175c <MX_GPIO_Init+0x610>)
 8001698:	f001 ffc0 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : Timer1Toggle_Pin */
  GPIO_InitStruct.Pin = Timer1Toggle_Pin;
 800169c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(Timer1Toggle_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b2:	4619      	mov	r1, r3
 80016b4:	482e      	ldr	r0, [pc, #184]	; (8001770 <MX_GPIO_Init+0x624>)
 80016b6:	f001 ffb1 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80016ba:	2305      	movs	r3, #5
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016ca:	230a      	movs	r3, #10
 80016cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d2:	4619      	mov	r1, r3
 80016d4:	4823      	ldr	r0, [pc, #140]	; (8001764 <MX_GPIO_Init+0x618>)
 80016d6:	f001 ffa1 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016da:	2332      	movs	r3, #50	; 0x32
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ea:	230b      	movs	r3, #11
 80016ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f2:	4619      	mov	r1, r3
 80016f4:	481b      	ldr	r0, [pc, #108]	; (8001764 <MX_GPIO_Init+0x618>)
 80016f6:	f001 ff91 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016fa:	2304      	movs	r3, #4
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800170a:	2309      	movs	r3, #9
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001712:	4619      	mov	r1, r3
 8001714:	4817      	ldr	r0, [pc, #92]	; (8001774 <MX_GPIO_Init+0x628>)
 8001716:	f001 ff81 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800171a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800172c:	2309      	movs	r3, #9
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001734:	4619      	mov	r1, r3
 8001736:	480a      	ldr	r0, [pc, #40]	; (8001760 <MX_GPIO_Init+0x614>)
 8001738:	f001 ff70 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800173c:	2308      	movs	r3, #8
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001750:	e012      	b.n	8001778 <MX_GPIO_Init+0x62c>
 8001752:	bf00      	nop
 8001754:	40022400 	.word	0x40022400
 8001758:	40022000 	.word	0x40022000
 800175c:	40021800 	.word	0x40021800
 8001760:	40020c00 	.word	0x40020c00
 8001764:	40020800 	.word	0x40020800
 8001768:	40022800 	.word	0x40022800
 800176c:	40021c00 	.word	0x40021c00
 8001770:	40021400 	.word	0x40021400
 8001774:	40020400 	.word	0x40020400
 8001778:	4619      	mov	r1, r3
 800177a:	482d      	ldr	r0, [pc, #180]	; (8001830 <MX_GPIO_Init+0x6e4>)
 800177c:	f001 ff4e 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001780:	2304      	movs	r3, #4
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001790:	4619      	mov	r1, r3
 8001792:	4827      	ldr	r0, [pc, #156]	; (8001830 <MX_GPIO_Init+0x6e4>)
 8001794:	f001 ff42 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001798:	2386      	movs	r3, #134	; 0x86
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017a8:	230b      	movs	r3, #11
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b0:	4619      	mov	r1, r3
 80017b2:	4820      	ldr	r0, [pc, #128]	; (8001834 <MX_GPIO_Init+0x6e8>)
 80017b4:	f001 ff32 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80017b8:	2350      	movs	r3, #80	; 0x50
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017c8:	230d      	movs	r3, #13
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d0:	4619      	mov	r1, r3
 80017d2:	4818      	ldr	r0, [pc, #96]	; (8001834 <MX_GPIO_Init+0x6e8>)
 80017d4:	f001 ff22 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80017d8:	2328      	movs	r3, #40	; 0x28
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017e8:	230a      	movs	r3, #10
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f0:	4619      	mov	r1, r3
 80017f2:	4810      	ldr	r0, [pc, #64]	; (8001834 <MX_GPIO_Init+0x6e8>)
 80017f4:	f001 ff12 	bl	800361c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	2008      	movs	r0, #8
 80017fe:	f001 fb7f 	bl	8002f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001802:	2008      	movs	r0, #8
 8001804:	f001 fb98 	bl	8002f38 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2009      	movs	r0, #9
 800180e:	f001 fb77 	bl	8002f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001812:	2009      	movs	r0, #9
 8001814:	f001 fb90 	bl	8002f38 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	2017      	movs	r0, #23
 800181e:	f001 fb6f 	bl	8002f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001822:	2017      	movs	r0, #23
 8001824:	f001 fb88 	bl	8002f38 <HAL_NVIC_EnableIRQ>

}
 8001828:	bf00      	nop
 800182a:	3740      	adds	r7, #64	; 0x40
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021800 	.word	0x40021800
 8001834:	40020000 	.word	0x40020000

08001838 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d101      	bne.n	800184e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800184a:	f000 fdb5 	bl	80023b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	#if (PORT_IDF_STM32CUBE != 0)
		if (htim->Instance == TIM6)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d113      	bne.n	8001880 <HAL_TIM_PeriodElapsedCallback+0x48>
		{
			// STM32 HAL tick handler gets called every millisecond (is given by code
			// generated by STM32CubeIDE). Check which interval is needed by the
			// XF (typically slower) and call XF_tick() accordingly.
			if (XF_isRunning() &&
 8001858:	f013 f8b2 	bl	80149c0 <XF_isRunning>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00e      	beq.n	8001880 <HAL_TIM_PeriodElapsedCallback+0x48>
				(HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 8001862:	f000 fdbd 	bl	80023e0 <HAL_GetTick>
 8001866:	4604      	mov	r4, r0
 8001868:	f013 f89d 	bl	80149a6 <XF_tickIntervalInMilliseconds>
 800186c:	4603      	mov	r3, r0
 800186e:	fbb4 f2f3 	udiv	r2, r4, r3
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	1ae3      	subs	r3, r4, r3
			if (XF_isRunning() &&
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_TIM_PeriodElapsedCallback+0x48>
			{
				   XF_tick();
 800187c:	f013 f87c 	bl	8014978 <XF_tick>
			}
		}
	#endif // PORT_IDF_STM32CUBE
  /* USER CODE END Callback 1 */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	40001000 	.word	0x40001000

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>
	...

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_MspInit+0x44>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_MspInit+0x44>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_MspInit+0x44>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x44>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x44>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x44>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a25      	ldr	r2, [pc, #148]	; (8001994 <HAL_ADC_MspInit+0xb4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d144      	bne.n	800198c <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_ADC_MspInit+0xb8>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a24      	ldr	r2, [pc, #144]	; (8001998 <HAL_ADC_MspInit+0xb8>)
 8001908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_ADC_MspInit+0xb8>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <HAL_ADC_MspInit+0xb8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <HAL_ADC_MspInit+0xb8>)
 8001920:	f043 0320 	orr.w	r3, r3, #32
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_ADC_MspInit+0xb8>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_ADC_MspInit+0xb8>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a18      	ldr	r2, [pc, #96]	; (8001998 <HAL_ADC_MspInit+0xb8>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_ADC_MspInit+0xb8>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> ADC3_IN4
    PF10     ------> ADC3_IN8
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A3_Pin;
 800194a:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001950:	2303      	movs	r3, #3
 8001952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	480f      	ldr	r0, [pc, #60]	; (800199c <HAL_ADC_MspInit+0xbc>)
 8001960:	f001 fe5c 	bl	800361c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001964:	2301      	movs	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001968:	2303      	movs	r3, #3
 800196a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	480a      	ldr	r0, [pc, #40]	; (80019a0 <HAL_ADC_MspInit+0xc0>)
 8001978:	f001 fe50 	bl	800361c <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	2012      	movs	r0, #18
 8001982:	f001 fabd 	bl	8002f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001986:	2012      	movs	r0, #18
 8001988:	f001 fad6 	bl	8002f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40012200 	.word	0x40012200
 8001998:	40023800 	.word	0x40023800
 800199c:	40021400 	.word	0x40021400
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_CRC_MspInit+0x38>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10b      	bne.n	80019ce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_CRC_MspInit+0x3c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_CRC_MspInit+0x3c>)
 80019bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <HAL_CRC_MspInit+0x3c>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40023000 	.word	0x40023000
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <HAL_DMA2D_MspInit+0x44>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d113      	bne.n	8001a1e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_DMA2D_MspInit+0x48>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <HAL_DMA2D_MspInit+0x48>)
 80019fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_DMA2D_MspInit+0x48>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	205a      	movs	r0, #90	; 0x5a
 8001a14:	f001 fa74 	bl	8002f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001a18:	205a      	movs	r0, #90	; 0x5a
 8001a1a:	f001 fa8d 	bl	8002f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	4002b000 	.word	0x4002b000
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0aa      	sub	sp, #168	; 0xa8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	2284      	movs	r2, #132	; 0x84
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f018 f90b 	bl	8019c6c <memset>
  if(hi2c->Instance==I2C3)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a22      	ldr	r2, [pc, #136]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d13c      	bne.n	8001ada <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f005 fc06 	bl	8007280 <HAL_RCCEx_PeriphCLKConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a7a:	f7ff ff07 	bl	800188c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_I2C_MspInit+0xb8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_I2C_MspInit+0xb8>)
 8001a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <HAL_I2C_MspInit+0xb8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001a96:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9e:	2312      	movs	r3, #18
 8001aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ab6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001aba:	4619      	mov	r1, r3
 8001abc:	480b      	ldr	r0, [pc, #44]	; (8001aec <HAL_I2C_MspInit+0xbc>)
 8001abe:	f001 fdad 	bl	800361c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_I2C_MspInit+0xb8>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_I2C_MspInit+0xb8>)
 8001ac8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_I2C_MspInit+0xb8>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	37a8      	adds	r7, #168	; 0xa8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40005c00 	.word	0x40005c00
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40021c00 	.word	0x40021c00

08001af0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_I2C_MspDeInit+0x38>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10e      	bne.n	8001b20 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_I2C_MspDeInit+0x3c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_I2C_MspDeInit+0x3c>)
 8001b08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001b0e:	2180      	movs	r1, #128	; 0x80
 8001b10:	4807      	ldr	r0, [pc, #28]	; (8001b30 <HAL_I2C_MspDeInit+0x40>)
 8001b12:	f001 ff2f 	bl	8003974 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8001b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_I2C_MspDeInit+0x40>)
 8001b1c:	f001 ff2a 	bl	8003974 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40005c00 	.word	0x40005c00
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40021c00 	.word	0x40021c00

08001b34 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08e      	sub	sp, #56	; 0x38
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a55      	ldr	r2, [pc, #340]	; (8001ca8 <HAL_LTDC_MspInit+0x174>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	f040 80a3 	bne.w	8001c9e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b58:	4b54      	ldr	r3, [pc, #336]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	4a53      	ldr	r2, [pc, #332]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b62:	6453      	str	r3, [r2, #68]	; 0x44
 8001b64:	4b51      	ldr	r3, [pc, #324]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b6c:	623b      	str	r3, [r7, #32]
 8001b6e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b70:	4b4e      	ldr	r3, [pc, #312]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a4d      	ldr	r2, [pc, #308]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001b76:	f043 0310 	orr.w	r3, r3, #16
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b4b      	ldr	r3, [pc, #300]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b88:	4b48      	ldr	r3, [pc, #288]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b92:	6313      	str	r3, [r2, #48]	; 0x30
 8001b94:	4b45      	ldr	r3, [pc, #276]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ba0:	4b42      	ldr	r3, [pc, #264]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	4a41      	ldr	r2, [pc, #260]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001baa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bac:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bb8:	4b3c      	ldr	r3, [pc, #240]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	4a3b      	ldr	r2, [pc, #236]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc4:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001bd0:	4b36      	ldr	r3, [pc, #216]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	4a35      	ldr	r2, [pc, #212]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bda:	6313      	str	r3, [r2, #48]	; 0x30
 8001bdc:	4b33      	ldr	r3, [pc, #204]	; (8001cac <HAL_LTDC_MspInit+0x178>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001be8:	2310      	movs	r3, #16
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bf8:	230e      	movs	r3, #14
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	4619      	mov	r1, r3
 8001c02:	482b      	ldr	r0, [pc, #172]	; (8001cb0 <HAL_LTDC_MspInit+0x17c>)
 8001c04:	f001 fd0a 	bl	800361c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001c08:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c1a:	230e      	movs	r3, #14
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c22:	4619      	mov	r1, r3
 8001c24:	4823      	ldr	r0, [pc, #140]	; (8001cb4 <HAL_LTDC_MspInit+0x180>)
 8001c26:	f001 fcf9 	bl	800361c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001c2a:	23f7      	movs	r3, #247	; 0xf7
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c3a:	230e      	movs	r3, #14
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c42:	4619      	mov	r1, r3
 8001c44:	481c      	ldr	r0, [pc, #112]	; (8001cb8 <HAL_LTDC_MspInit+0x184>)
 8001c46:	f001 fce9 	bl	800361c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c5c:	2309      	movs	r3, #9
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c64:	4619      	mov	r1, r3
 8001c66:	4815      	ldr	r0, [pc, #84]	; (8001cbc <HAL_LTDC_MspInit+0x188>)
 8001c68:	f001 fcd8 	bl	800361c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001c6c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c7e:	230e      	movs	r3, #14
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	4619      	mov	r1, r3
 8001c88:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <HAL_LTDC_MspInit+0x18c>)
 8001c8a:	f001 fcc7 	bl	800361c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	2058      	movs	r0, #88	; 0x58
 8001c94:	f001 f934 	bl	8002f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001c98:	2058      	movs	r0, #88	; 0x58
 8001c9a:	f001 f94d 	bl	8002f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3738      	adds	r7, #56	; 0x38
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40016800 	.word	0x40016800
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40022400 	.word	0x40022400
 8001cb8:	40022800 	.word	0x40022800
 8001cbc:	40021800 	.word	0x40021800
 8001cc0:	40022000 	.word	0x40022000

08001cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a25      	ldr	r2, [pc, #148]	; (8001d78 <HAL_SPI_MspInit+0xb4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d144      	bne.n	8001d70 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ce6:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_SPI_MspInit+0xb8>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <HAL_SPI_MspInit+0xb8>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_SPI_MspInit+0xb8>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_SPI_MspInit+0xb8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <HAL_SPI_MspInit+0xb8>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_SPI_MspInit+0xb8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_SPI_MspInit+0xb8>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <HAL_SPI_MspInit+0xb8>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_SPI_MspInit+0xb8>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d3e:	2305      	movs	r3, #5
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <HAL_SPI_MspInit+0xbc>)
 8001d4a:	f001 fc67 	bl	800361c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001d4e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d60:	2305      	movs	r3, #5
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4806      	ldr	r0, [pc, #24]	; (8001d84 <HAL_SPI_MspInit+0xc0>)
 8001d6c:	f001 fc56 	bl	800361c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40003800 	.word	0x40003800
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40020400 	.word	0x40020400

08001d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_TIM_Base_MspInit+0x38>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d10b      	bne.n	8001db2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4a09      	ldr	r2, [pc, #36]	; (8001dc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b0ac      	sub	sp, #176	; 0xb0
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de0:	f107 0318 	add.w	r3, r7, #24
 8001de4:	2284      	movs	r2, #132	; 0x84
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f017 ff3f 	bl	8019c6c <memset>
  if(huart->Instance==USART1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a32      	ldr	r2, [pc, #200]	; (8001ebc <HAL_UART_MspInit+0xf4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d15c      	bne.n	8001eb2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001df8:	2340      	movs	r3, #64	; 0x40
 8001dfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e00:	f107 0318 	add.w	r3, r7, #24
 8001e04:	4618      	mov	r0, r3
 8001e06:	f005 fa3b 	bl	8007280 <HAL_RCCEx_PeriphCLKConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e10:	f7ff fd3c 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e14:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_UART_MspInit+0xf8>)
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	4a29      	ldr	r2, [pc, #164]	; (8001ec0 <HAL_UART_MspInit+0xf8>)
 8001e1a:	f043 0310 	orr.w	r3, r3, #16
 8001e1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_UART_MspInit+0xf8>)
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_UART_MspInit+0xf8>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	4a23      	ldr	r2, [pc, #140]	; (8001ec0 <HAL_UART_MspInit+0xf8>)
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	6313      	str	r3, [r2, #48]	; 0x30
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <HAL_UART_MspInit+0xf8>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_UART_MspInit+0xf8>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <HAL_UART_MspInit+0xf8>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_UART_MspInit+0xf8>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e74:	2307      	movs	r3, #7
 8001e76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4810      	ldr	r0, [pc, #64]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001e82:	f001 fbcb 	bl	800361c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <HAL_UART_MspInit+0x100>)
 8001eae:	f001 fbb5 	bl	800361c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001eb2:	bf00      	nop
 8001eb4:	37b0      	adds	r7, #176	; 0xb0
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40011000 	.word	0x40011000
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020000 	.word	0x40020000

08001ecc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_FMC_MspInit+0x100>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d16d      	bne.n	8001fc4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001ee8:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_FMC_MspInit+0x100>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <HAL_FMC_MspInit+0x104>)
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	4a37      	ldr	r2, [pc, #220]	; (8001fd0 <HAL_FMC_MspInit+0x104>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6393      	str	r3, [r2, #56]	; 0x38
 8001efa:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <HAL_FMC_MspInit+0x104>)
 8001efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001f06:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001f0a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f18:	230c      	movs	r3, #12
 8001f1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	482c      	ldr	r0, [pc, #176]	; (8001fd4 <HAL_FMC_MspInit+0x108>)
 8001f22:	f001 fb7b 	bl	800361c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001f26:	f248 1333 	movw	r3, #33075	; 0x8133
 8001f2a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f38:	230c      	movs	r3, #12
 8001f3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4825      	ldr	r0, [pc, #148]	; (8001fd8 <HAL_FMC_MspInit+0x10c>)
 8001f42:	f001 fb6b 	bl	800361c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001f46:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001f4a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f58:	230c      	movs	r3, #12
 8001f5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	481e      	ldr	r0, [pc, #120]	; (8001fdc <HAL_FMC_MspInit+0x110>)
 8001f62:	f001 fb5b 	bl	800361c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001f66:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001f6a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f78:	230c      	movs	r3, #12
 8001f7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4817      	ldr	r0, [pc, #92]	; (8001fe0 <HAL_FMC_MspInit+0x114>)
 8001f82:	f001 fb4b 	bl	800361c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001f86:	2328      	movs	r3, #40	; 0x28
 8001f88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f96:	230c      	movs	r3, #12
 8001f98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4811      	ldr	r0, [pc, #68]	; (8001fe4 <HAL_FMC_MspInit+0x118>)
 8001fa0:	f001 fb3c 	bl	800361c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	4619      	mov	r1, r3
 8001fbc:	480a      	ldr	r0, [pc, #40]	; (8001fe8 <HAL_FMC_MspInit+0x11c>)
 8001fbe:	f001 fb2d 	bl	800361c <HAL_GPIO_Init>
 8001fc2:	e000      	b.n	8001fc6 <HAL_FMC_MspInit+0xfa>
    return;
 8001fc4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200003f8 	.word	0x200003f8
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40021800 	.word	0x40021800
 8001fdc:	40020c00 	.word	0x40020c00
 8001fe0:	40021400 	.word	0x40021400
 8001fe4:	40021c00 	.word	0x40021c00
 8001fe8:	40020800 	.word	0x40020800

08001fec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ff4:	f7ff ff6a 	bl	8001ecc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002010:	2200      	movs	r2, #0
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	2036      	movs	r0, #54	; 0x36
 8002016:	f000 ff73 	bl	8002f00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800201a:	2036      	movs	r0, #54	; 0x36
 800201c:	f000 ff8c 	bl	8002f38 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <HAL_InitTick+0xa0>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <HAL_InitTick+0xa0>)
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6413      	str	r3, [r2, #64]	; 0x40
 800202c:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_InitTick+0xa0>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002038:	f107 0210 	add.w	r2, r7, #16
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f005 f8ea 	bl	800721c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002048:	f005 f8c0 	bl	80071cc <HAL_RCC_GetPCLK1Freq>
 800204c:	4603      	mov	r3, r0
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002054:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <HAL_InitTick+0xa4>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0c9b      	lsrs	r3, r3, #18
 800205c:	3b01      	subs	r3, #1
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_InitTick+0xa8>)
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <HAL_InitTick+0xac>)
 8002064:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_InitTick+0xa8>)
 8002068:	f240 32e7 	movw	r2, #999	; 0x3e7
 800206c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800206e:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <HAL_InitTick+0xa8>)
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_InitTick+0xa8>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_InitTick+0xa8>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002080:	4809      	ldr	r0, [pc, #36]	; (80020a8 <HAL_InitTick+0xa8>)
 8002082:	f006 f8c3 	bl	800820c <HAL_TIM_Base_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d104      	bne.n	8002096 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800208c:	4806      	ldr	r0, [pc, #24]	; (80020a8 <HAL_InitTick+0xa8>)
 800208e:	f006 f915 	bl	80082bc <HAL_TIM_Base_Start_IT>
 8002092:	4603      	mov	r3, r0
 8002094:	e000      	b.n	8002098 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	3730      	adds	r7, #48	; 0x30
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800
 80020a4:	431bde83 	.word	0x431bde83
 80020a8:	200003fc 	.word	0x200003fc
 80020ac:	40001000 	.word	0x40001000

080020b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <NMI_Handler+0x4>

080020b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <HardFault_Handler+0x4>

080020bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <MemManage_Handler+0x4>

080020c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <BusFault_Handler+0x4>

080020c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <UsageFault_Handler+0x4>

080020ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON0_Pin);
 800210a:	2004      	movs	r0, #4
 800210c:	f001 fd8a 	bl	8003c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}

08002114 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8002118:	2008      	movs	r0, #8
 800211a:	f001 fd83 	bl	8003c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <ADC_IRQHandler+0x10>)
 800212a:	f000 faa5 	bl	8002678 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200000f0 	.word	0x200000f0

08002138 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800213c:	2040      	movs	r0, #64	; 0x40
 800213e:	f001 fd71 	bl	8003c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8002142:	2080      	movs	r0, #128	; 0x80
 8002144:	f001 fd6e 	bl	8003c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <TIM6_DAC_IRQHandler+0x10>)
 8002152:	f006 fad5 	bl	8008700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200003fc 	.word	0x200003fc

08002160 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <OTG_FS_IRQHandler+0x10>)
 8002166:	f001 ffdf 	bl	8004128 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200015e8 	.word	0x200015e8

08002174 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <LTDC_IRQHandler+0x10>)
 800217a:	f004 f89d 	bl	80062b8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200001e8 	.word	0x200001e8

08002188 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <DMA2D_IRQHandler+0x10>)
 800218e:	f001 f8a3 	bl	80032d8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000015c 	.word	0x2000015c

0800219c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
	return 1;
 80021a0:	2301      	movs	r3, #1
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_kill>:

int _kill(int pid, int sig)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021b6:	f017 fce5 	bl	8019b84 <__errno>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2216      	movs	r2, #22
 80021be:	601a      	str	r2, [r3, #0]
	return -1;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_exit>:

void _exit (int status)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ffe7 	bl	80021ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80021de:	e7fe      	b.n	80021de <_exit+0x12>

080021e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	e00a      	b.n	8002208 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021f2:	f3af 8000 	nop.w
 80021f6:	4601      	mov	r1, r0
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	60ba      	str	r2, [r7, #8]
 80021fe:	b2ca      	uxtb	r2, r1
 8002200:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3301      	adds	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	429a      	cmp	r2, r3
 800220e:	dbf0      	blt.n	80021f2 <_read+0x12>
	}

return len;
 8002210:	687b      	ldr	r3, [r7, #4]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e009      	b.n	8002240 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	60ba      	str	r2, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3301      	adds	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	dbf1      	blt.n	800222c <_write+0x12>
	}
	return len;
 8002248:	687b      	ldr	r3, [r7, #4]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_close>:

int _close(int file)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
	return -1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800227a:	605a      	str	r2, [r3, #4]
	return 0;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <_isatty>:

int _isatty(int file)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
	return 1;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
	return 0;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <_sbrk+0x5c>)
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <_sbrk+0x60>)
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <_sbrk+0x64>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <_sbrk+0x64>)
 80022da:	4a12      	ldr	r2, [pc, #72]	; (8002324 <_sbrk+0x68>)
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d207      	bcs.n	80022fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ec:	f017 fc4a 	bl	8019b84 <__errno>
 80022f0:	4603      	mov	r3, r0
 80022f2:	220c      	movs	r2, #12
 80022f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	e009      	b.n	8002310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <_sbrk+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <_sbrk+0x64>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <_sbrk+0x64>)
 800230c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230e:	68fb      	ldr	r3, [r7, #12]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20050000 	.word	0x20050000
 800231c:	00001000 	.word	0x00001000
 8002320:	20000448 	.word	0x20000448
 8002324:	20001ea0 	.word	0x20001ea0

08002328 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <SystemInit+0x20>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	4a05      	ldr	r2, [pc, #20]	; (8002348 <SystemInit+0x20>)
 8002334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800234c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002384 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002350:	480d      	ldr	r0, [pc, #52]	; (8002388 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002352:	490e      	ldr	r1, [pc, #56]	; (800238c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002354:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002368:	4c0b      	ldr	r4, [pc, #44]	; (8002398 <LoopFillZerobss+0x26>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002376:	f7ff ffd7 	bl	8002328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237a:	f017 fc1b 	bl	8019bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237e:	f7fe fb4f 	bl	8000a20 <main>
  bx  lr    
 8002382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002384:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800238c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002390:	0801ef98 	.word	0x0801ef98
  ldr r2, =_sbss
 8002394:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002398:	20001ea0 	.word	0x20001ea0

0800239c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800239c:	e7fe      	b.n	800239c <CAN1_RX0_IRQHandler>

0800239e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a2:	2003      	movs	r0, #3
 80023a4:	f000 fda1 	bl	8002eea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023a8:	200f      	movs	r0, #15
 80023aa:	f7ff fe29 	bl	8002000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ae:	f7ff fa73 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_IncTick+0x20>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_IncTick+0x24>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_IncTick+0x24>)
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000030 	.word	0x20000030
 80023dc:	2000044c 	.word	0x2000044c

080023e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_GetTick+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	2000044c 	.word	0x2000044c

080023f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff ffee 	bl	80023e0 <HAL_GetTick>
 8002404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d005      	beq.n	800241e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_Delay+0x44>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800241e:	bf00      	nop
 8002420:	f7ff ffde 	bl	80023e0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	429a      	cmp	r2, r3
 800242e:	d8f7      	bhi.n	8002420 <HAL_Delay+0x28>
  {
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000030 	.word	0x20000030

08002440 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e031      	b.n	80024ba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff fa3e 	bl	80018e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b00      	cmp	r3, #0
 800247c:	d116      	bne.n	80024ac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_ADC_Init+0x84>)
 8002484:	4013      	ands	r3, r2
 8002486:	f043 0202 	orr.w	r2, r3, #2
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fb7a 	bl	8002b88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
 80024aa:	e001      	b.n	80024b0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	ffffeefd 	.word	0xffffeefd

080024c8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_Start_IT+0x1a>
 80024de:	2302      	movs	r3, #2
 80024e0:	e0b5      	b.n	800264e <HAL_ADC_Start_IT+0x186>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d018      	beq.n	800252a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002508:	4b54      	ldr	r3, [pc, #336]	; (800265c <HAL_ADC_Start_IT+0x194>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a54      	ldr	r2, [pc, #336]	; (8002660 <HAL_ADC_Start_IT+0x198>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0c9a      	lsrs	r2, r3, #18
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800251c:	e002      	b.n	8002524 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3b01      	subs	r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f9      	bne.n	800251e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d17d      	bne.n	8002634 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253c:	4b49      	ldr	r3, [pc, #292]	; (8002664 <HAL_ADC_Start_IT+0x19c>)
 800253e:	4013      	ands	r3, r2
 8002540:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800255e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002572:	d106      	bne.n	8002582 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f023 0206 	bic.w	r2, r3, #6
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
 8002580:	e002      	b.n	8002588 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002598:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b30      	ldr	r3, [pc, #192]	; (8002668 <HAL_ADC_Start_IT+0x1a0>)
 80025a6:	430b      	orrs	r3, r1
 80025a8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80025aa:	4b30      	ldr	r3, [pc, #192]	; (800266c <HAL_ADC_Start_IT+0x1a4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d143      	bne.n	800264c <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	e03a      	b.n	800264c <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a25      	ldr	r2, [pc, #148]	; (8002670 <HAL_ADC_Start_IT+0x1a8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d10e      	bne.n	80025fe <HAL_ADC_Start_IT+0x136>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d107      	bne.n	80025fe <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025fc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80025fe:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_ADC_Start_IT+0x1a4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d120      	bne.n	800264c <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a19      	ldr	r2, [pc, #100]	; (8002674 <HAL_ADC_Start_IT+0x1ac>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d11b      	bne.n	800264c <HAL_ADC_Start_IT+0x184>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d114      	bne.n	800264c <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	e00b      	b.n	800264c <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f043 0210 	orr.w	r2, r3, #16
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	f043 0201 	orr.w	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000028 	.word	0x20000028
 8002660:	431bde83 	.word	0x431bde83
 8002664:	fffff8fe 	.word	0xfffff8fe
 8002668:	04000020 	.word	0x04000020
 800266c:	40012300 	.word	0x40012300
 8002670:	40012000 	.word	0x40012000
 8002674:	40012200 	.word	0x40012200

08002678 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d049      	beq.n	8002742 <HAL_ADC_IRQHandler+0xca>
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d046      	beq.n	8002742 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d12b      	bne.n	8002732 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d127      	bne.n	8002732 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d119      	bne.n	8002732 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0220 	bic.w	r2, r2, #32
 800270c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe f960 	bl	80009f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0212 	mvn.w	r2, #18
 8002740:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d057      	beq.n	8002808 <HAL_ADC_IRQHandler+0x190>
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d054      	beq.n	8002808 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d139      	bne.n	80027f8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800279c:	2b00      	cmp	r3, #0
 800279e:	d12b      	bne.n	80027f8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d124      	bne.n	80027f8 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d11d      	bne.n	80027f8 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d119      	bne.n	80027f8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fabf 	bl	8002d7c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f06f 020c 	mvn.w	r2, #12
 8002806:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d017      	beq.n	800284e <HAL_ADC_IRQHandler+0x1d6>
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d014      	beq.n	800284e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d10d      	bne.n	800284e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f837 	bl	80028b2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0201 	mvn.w	r2, #1
 800284c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800285c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d015      	beq.n	8002890 <HAL_ADC_IRQHandler+0x218>
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d012      	beq.n	8002890 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f06f 0220 	mvn.w	r2, #32
 800287e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f820 	bl	80028c6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f06f 0220 	mvn.w	r2, #32
 800288e:	601a      	str	r2, [r3, #0]
  }
}
 8002890:	bf00      	nop
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x1c>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e136      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x28a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b09      	cmp	r3, #9
 8002906:	d93a      	bls.n	800297e <HAL_ADC_ConfigChannel+0xa2>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002910:	d035      	beq.n	800297e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68d9      	ldr	r1, [r3, #12]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	3b1e      	subs	r3, #30
 8002928:	2207      	movs	r2, #7
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	400a      	ands	r2, r1
 8002936:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a8d      	ldr	r2, [pc, #564]	; (8002b74 <HAL_ADC_ConfigChannel+0x298>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10a      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68d9      	ldr	r1, [r3, #12]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	061a      	lsls	r2, r3, #24
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002956:	e035      	b.n	80029c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68d9      	ldr	r1, [r3, #12]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	4618      	mov	r0, r3
 800296a:	4603      	mov	r3, r0
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4403      	add	r3, r0
 8002970:	3b1e      	subs	r3, #30
 8002972:	409a      	lsls	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800297c:	e022      	b.n	80029c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6919      	ldr	r1, [r3, #16]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	2207      	movs	r2, #7
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43da      	mvns	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	400a      	ands	r2, r1
 80029a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6919      	ldr	r1, [r3, #16]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	4603      	mov	r3, r0
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4403      	add	r3, r0
 80029ba:	409a      	lsls	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b06      	cmp	r3, #6
 80029ca:	d824      	bhi.n	8002a16 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	3b05      	subs	r3, #5
 80029de:	221f      	movs	r2, #31
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43da      	mvns	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	400a      	ands	r2, r1
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	3b05      	subs	r3, #5
 8002a08:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	635a      	str	r2, [r3, #52]	; 0x34
 8002a14:	e04c      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d824      	bhi.n	8002a68 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b23      	subs	r3, #35	; 0x23
 8002a30:	221f      	movs	r2, #31
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	3b23      	subs	r3, #35	; 0x23
 8002a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
 8002a66:	e023      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	3b41      	subs	r3, #65	; 0x41
 8002a7a:	221f      	movs	r2, #31
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43da      	mvns	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	400a      	ands	r2, r1
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3b41      	subs	r3, #65	; 0x41
 8002aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a30      	ldr	r2, [pc, #192]	; (8002b78 <HAL_ADC_ConfigChannel+0x29c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10a      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x1f4>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ac2:	d105      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a2c      	ldr	r2, [pc, #176]	; (8002b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002aca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002ace:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <HAL_ADC_ConfigChannel+0x29c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d10f      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x21e>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b12      	cmp	r3, #18
 8002ae0:	d10b      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002ae2:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ae8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002aee:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002af4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002af8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <HAL_ADC_ConfigChannel+0x29c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d12b      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x280>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1a      	ldr	r2, [pc, #104]	; (8002b74 <HAL_ADC_ConfigChannel+0x298>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d003      	beq.n	8002b16 <HAL_ADC_ConfigChannel+0x23a>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b11      	cmp	r3, #17
 8002b14:	d122      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4a18      	ldr	r2, [pc, #96]	; (8002b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002b1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b20:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b22:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002b28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b2c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <HAL_ADC_ConfigChannel+0x298>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d111      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_ADC_ConfigChannel+0x2a4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	0c9a      	lsrs	r2, r3, #18
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b4e:	e002      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f9      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	10000012 	.word	0x10000012
 8002b78:	40012000 	.word	0x40012000
 8002b7c:	40012300 	.word	0x40012300
 8002b80:	20000028 	.word	0x20000028
 8002b84:	431bde83 	.word	0x431bde83

08002b88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b90:	4b78      	ldr	r3, [pc, #480]	; (8002d74 <ADC_Init+0x1ec>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a77      	ldr	r2, [pc, #476]	; (8002d74 <ADC_Init+0x1ec>)
 8002b96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b9a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b9c:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <ADC_Init+0x1ec>)
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4973      	ldr	r1, [pc, #460]	; (8002d74 <ADC_Init+0x1ec>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	021a      	lsls	r2, r3, #8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <ADC_Init+0x1f0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6899      	ldr	r1, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	e00f      	b.n	8002c82 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0202 	bic.w	r2, r2, #2
 8002c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6899      	ldr	r1, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	005a      	lsls	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01b      	beq.n	8002ce8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	035a      	lsls	r2, r3, #13
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	e007      	b.n	8002cf8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	051a      	lsls	r2, r3, #20
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d3a:	025a      	lsls	r2, r3, #9
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6899      	ldr	r1, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	029a      	lsls	r2, r3, #10
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40012300 	.word	0x40012300
 8002d78:	0f000001 	.word	0x0f000001

08002d7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dac:	4013      	ands	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dbe:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	60d3      	str	r3, [r2, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000ed00 	.word	0xe000ed00
 8002dd4:	05fa0000 	.word	0x05fa0000

08002dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	f003 0307 	and.w	r3, r3, #7
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	db0b      	blt.n	8002e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	4907      	ldr	r1, [pc, #28]	; (8002e2c <__NVIC_EnableIRQ+0x38>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2001      	movs	r0, #1
 8002e16:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	; (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	; (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
         );
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ff4c 	bl	8002d90 <__NVIC_SetPriorityGrouping>
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f12:	f7ff ff61 	bl	8002dd8 <__NVIC_GetPriorityGrouping>
 8002f16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	6978      	ldr	r0, [r7, #20]
 8002f1e:	f7ff ffb1 	bl	8002e84 <NVIC_EncodePriority>
 8002f22:	4602      	mov	r2, r0
 8002f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff80 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f30:	bf00      	nop
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ff54 	bl	8002df4 <__NVIC_EnableIRQ>
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e054      	b.n	8003010 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7f5b      	ldrb	r3, [r3, #29]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d105      	bne.n	8002f7c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fe fd14 	bl	80019a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	791b      	ldrb	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10c      	bne.n	8002fa4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a22      	ldr	r2, [pc, #136]	; (8003018 <HAL_CRC_Init+0xc4>)
 8002f90:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0218 	bic.w	r2, r2, #24
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	e00c      	b.n	8002fbe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	461a      	mov	r2, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f834 	bl	800301c <HAL_CRCEx_Polynomial_Set>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e028      	b.n	8003010 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	795b      	ldrb	r3, [r3, #5]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d105      	bne.n	8002fd2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f04f 32ff 	mov.w	r2, #4294967295
 8002fce:	611a      	str	r2, [r3, #16]
 8002fd0:	e004      	b.n	8002fdc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6912      	ldr	r2, [r2, #16]
 8002fda:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	04c11db7 	.word	0x04c11db7

0800301c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800302c:	231f      	movs	r3, #31
 800302e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003030:	bf00      	nop
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1e5a      	subs	r2, r3, #1
 8003036:	613a      	str	r2, [r7, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d009      	beq.n	8003050 <HAL_CRCEx_Polynomial_Set+0x34>
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b18      	cmp	r3, #24
 8003054:	d846      	bhi.n	80030e4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003056:	a201      	add	r2, pc, #4	; (adr r2, 800305c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	080030eb 	.word	0x080030eb
 8003060:	080030e5 	.word	0x080030e5
 8003064:	080030e5 	.word	0x080030e5
 8003068:	080030e5 	.word	0x080030e5
 800306c:	080030e5 	.word	0x080030e5
 8003070:	080030e5 	.word	0x080030e5
 8003074:	080030e5 	.word	0x080030e5
 8003078:	080030e5 	.word	0x080030e5
 800307c:	080030d9 	.word	0x080030d9
 8003080:	080030e5 	.word	0x080030e5
 8003084:	080030e5 	.word	0x080030e5
 8003088:	080030e5 	.word	0x080030e5
 800308c:	080030e5 	.word	0x080030e5
 8003090:	080030e5 	.word	0x080030e5
 8003094:	080030e5 	.word	0x080030e5
 8003098:	080030e5 	.word	0x080030e5
 800309c:	080030cd 	.word	0x080030cd
 80030a0:	080030e5 	.word	0x080030e5
 80030a4:	080030e5 	.word	0x080030e5
 80030a8:	080030e5 	.word	0x080030e5
 80030ac:	080030e5 	.word	0x080030e5
 80030b0:	080030e5 	.word	0x080030e5
 80030b4:	080030e5 	.word	0x080030e5
 80030b8:	080030e5 	.word	0x080030e5
 80030bc:	080030c1 	.word	0x080030c1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d913      	bls.n	80030ee <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80030ca:	e010      	b.n	80030ee <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	2b07      	cmp	r3, #7
 80030d0:	d90f      	bls.n	80030f2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80030d6:	e00c      	b.n	80030f2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b0f      	cmp	r3, #15
 80030dc:	d90b      	bls.n	80030f6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80030e2:	e008      	b.n	80030f6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	75fb      	strb	r3, [r7, #23]
      break;
 80030e8:	e006      	b.n	80030f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80030ea:	bf00      	nop
 80030ec:	e004      	b.n	80030f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80030ee:	bf00      	nop
 80030f0:	e002      	b.n	80030f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80030f6:	bf00      	nop
  }
  if (status == HAL_OK)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10d      	bne.n	800311a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f023 0118 	bic.w	r1, r3, #24
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	430a      	orrs	r2, r1
 8003118:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800311a:	7dfb      	ldrb	r3, [r7, #23]
}
 800311c:	4618      	mov	r0, r3
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_DMA_Start_IT+0x26>
 800314a:	2302      	movs	r3, #2
 800314c:	e048      	b.n	80031e0 <HAL_DMA_Start_IT+0xb8>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d137      	bne.n	80031d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f836 	bl	80031e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	223f      	movs	r2, #63	; 0x3f
 8003182:	409a      	lsls	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0216 	orr.w	r2, r2, #22
 8003196:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031a6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0208 	orr.w	r2, r2, #8
 80031be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e005      	b.n	80031de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031da:	2302      	movs	r3, #2
 80031dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003204:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d108      	bne.n	8003228 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003226:	e007      	b.n	8003238 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e039      	b.n	80032ca <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fe fbba 	bl	80019e4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003294:	f023 0107 	bic.w	r1, r3, #7
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <HAL_DMA2D_Init+0x90>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68d1      	ldr	r1, [r2, #12]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	430b      	orrs	r3, r1
 80032b8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	ffffc000 	.word	0xffffc000

080032d8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d026      	beq.n	8003348 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d021      	beq.n	8003348 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003312:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2201      	movs	r2, #1
 8003326:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2204      	movs	r2, #4
 800332c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d026      	beq.n	80033a0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d021      	beq.n	80033a0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800336a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2220      	movs	r2, #32
 8003372:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003378:	f043 0202 	orr.w	r2, r3, #2
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2204      	movs	r2, #4
 8003384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d026      	beq.n	80033f8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d021      	beq.n	80033f8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2208      	movs	r2, #8
 80033ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	f043 0204 	orr.w	r2, r3, #4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2204      	movs	r2, #4
 80033dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d013      	beq.n	800342a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00e      	beq.n	800342a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2204      	movs	r2, #4
 8003422:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f853 	bl	80034d0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d024      	beq.n	800347e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343a:	2b00      	cmp	r3, #0
 800343c:	d01f      	beq.n	800347e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800344c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2202      	movs	r2, #2
 8003454:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01f      	beq.n	80034c8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d01a      	beq.n	80034c8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034a0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2210      	movs	r2, #16
 80034a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f80e 	bl	80034e4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_DMA2D_ConfigLayer+0x20>
 8003514:	2302      	movs	r3, #2
 8003516:	e079      	b.n	800360c <HAL_DMA2D_ConfigLayer+0x114>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	3318      	adds	r3, #24
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003542:	4b35      	ldr	r3, [pc, #212]	; (8003618 <HAL_DMA2D_ConfigLayer+0x120>)
 8003544:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b0a      	cmp	r3, #10
 800354c:	d003      	beq.n	8003556 <HAL_DMA2D_ConfigLayer+0x5e>
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b09      	cmp	r3, #9
 8003554:	d107      	bne.n	8003566 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	e005      	b.n	8003572 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d120      	bne.n	80035ba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	43db      	mvns	r3, r3
 8003582:	ea02 0103 	and.w	r1, r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	430a      	orrs	r2, r1
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b0a      	cmp	r3, #10
 80035a0:	d003      	beq.n	80035aa <HAL_DMA2D_ConfigLayer+0xb2>
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b09      	cmp	r3, #9
 80035a8:	d127      	bne.n	80035fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28
 80035b8:	e01f      	b.n	80035fa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	ea02 0103 	and.w	r1, r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b0a      	cmp	r3, #10
 80035e2:	d003      	beq.n	80035ec <HAL_DMA2D_ConfigLayer+0xf4>
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b09      	cmp	r3, #9
 80035ea:	d106      	bne.n	80035fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80035f8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	371c      	adds	r7, #28
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	ff03000f 	.word	0xff03000f

0800361c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	e175      	b.n	8003928 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800363c:	2201      	movs	r2, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	429a      	cmp	r2, r3
 8003656:	f040 8164 	bne.w	8003922 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d005      	beq.n	8003672 <HAL_GPIO_Init+0x56>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d130      	bne.n	80036d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	2203      	movs	r2, #3
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036a8:	2201      	movs	r2, #1
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 0201 	and.w	r2, r3, #1
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d017      	beq.n	8003710 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d123      	bne.n	8003764 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	08da      	lsrs	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3208      	adds	r2, #8
 8003724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	220f      	movs	r2, #15
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	08da      	lsrs	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3208      	adds	r2, #8
 800375e:	69b9      	ldr	r1, [r7, #24]
 8003760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	2203      	movs	r2, #3
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0203 	and.w	r2, r3, #3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80be 	beq.w	8003922 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a6:	4b66      	ldr	r3, [pc, #408]	; (8003940 <HAL_GPIO_Init+0x324>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	4a65      	ldr	r2, [pc, #404]	; (8003940 <HAL_GPIO_Init+0x324>)
 80037ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b0:	6453      	str	r3, [r2, #68]	; 0x44
 80037b2:	4b63      	ldr	r3, [pc, #396]	; (8003940 <HAL_GPIO_Init+0x324>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037be:	4a61      	ldr	r2, [pc, #388]	; (8003944 <HAL_GPIO_Init+0x328>)
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	089b      	lsrs	r3, r3, #2
 80037c4:	3302      	adds	r3, #2
 80037c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	220f      	movs	r2, #15
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a58      	ldr	r2, [pc, #352]	; (8003948 <HAL_GPIO_Init+0x32c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d037      	beq.n	800385a <HAL_GPIO_Init+0x23e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a57      	ldr	r2, [pc, #348]	; (800394c <HAL_GPIO_Init+0x330>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d031      	beq.n	8003856 <HAL_GPIO_Init+0x23a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a56      	ldr	r2, [pc, #344]	; (8003950 <HAL_GPIO_Init+0x334>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d02b      	beq.n	8003852 <HAL_GPIO_Init+0x236>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a55      	ldr	r2, [pc, #340]	; (8003954 <HAL_GPIO_Init+0x338>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d025      	beq.n	800384e <HAL_GPIO_Init+0x232>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a54      	ldr	r2, [pc, #336]	; (8003958 <HAL_GPIO_Init+0x33c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01f      	beq.n	800384a <HAL_GPIO_Init+0x22e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a53      	ldr	r2, [pc, #332]	; (800395c <HAL_GPIO_Init+0x340>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d019      	beq.n	8003846 <HAL_GPIO_Init+0x22a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a52      	ldr	r2, [pc, #328]	; (8003960 <HAL_GPIO_Init+0x344>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_GPIO_Init+0x226>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a51      	ldr	r2, [pc, #324]	; (8003964 <HAL_GPIO_Init+0x348>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00d      	beq.n	800383e <HAL_GPIO_Init+0x222>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a50      	ldr	r2, [pc, #320]	; (8003968 <HAL_GPIO_Init+0x34c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d007      	beq.n	800383a <HAL_GPIO_Init+0x21e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a4f      	ldr	r2, [pc, #316]	; (800396c <HAL_GPIO_Init+0x350>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d101      	bne.n	8003836 <HAL_GPIO_Init+0x21a>
 8003832:	2309      	movs	r3, #9
 8003834:	e012      	b.n	800385c <HAL_GPIO_Init+0x240>
 8003836:	230a      	movs	r3, #10
 8003838:	e010      	b.n	800385c <HAL_GPIO_Init+0x240>
 800383a:	2308      	movs	r3, #8
 800383c:	e00e      	b.n	800385c <HAL_GPIO_Init+0x240>
 800383e:	2307      	movs	r3, #7
 8003840:	e00c      	b.n	800385c <HAL_GPIO_Init+0x240>
 8003842:	2306      	movs	r3, #6
 8003844:	e00a      	b.n	800385c <HAL_GPIO_Init+0x240>
 8003846:	2305      	movs	r3, #5
 8003848:	e008      	b.n	800385c <HAL_GPIO_Init+0x240>
 800384a:	2304      	movs	r3, #4
 800384c:	e006      	b.n	800385c <HAL_GPIO_Init+0x240>
 800384e:	2303      	movs	r3, #3
 8003850:	e004      	b.n	800385c <HAL_GPIO_Init+0x240>
 8003852:	2302      	movs	r3, #2
 8003854:	e002      	b.n	800385c <HAL_GPIO_Init+0x240>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_GPIO_Init+0x240>
 800385a:	2300      	movs	r3, #0
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	f002 0203 	and.w	r2, r2, #3
 8003862:	0092      	lsls	r2, r2, #2
 8003864:	4093      	lsls	r3, r2
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800386c:	4935      	ldr	r1, [pc, #212]	; (8003944 <HAL_GPIO_Init+0x328>)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	3302      	adds	r3, #2
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800387a:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <HAL_GPIO_Init+0x354>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800389e:	4a34      	ldr	r2, [pc, #208]	; (8003970 <HAL_GPIO_Init+0x354>)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038a4:	4b32      	ldr	r3, [pc, #200]	; (8003970 <HAL_GPIO_Init+0x354>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038c8:	4a29      	ldr	r2, [pc, #164]	; (8003970 <HAL_GPIO_Init+0x354>)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038ce:	4b28      	ldr	r3, [pc, #160]	; (8003970 <HAL_GPIO_Init+0x354>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4013      	ands	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038f2:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <HAL_GPIO_Init+0x354>)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_GPIO_Init+0x354>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800391c:	4a14      	ldr	r2, [pc, #80]	; (8003970 <HAL_GPIO_Init+0x354>)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3301      	adds	r3, #1
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2b0f      	cmp	r3, #15
 800392c:	f67f ae86 	bls.w	800363c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	3724      	adds	r7, #36	; 0x24
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40023800 	.word	0x40023800
 8003944:	40013800 	.word	0x40013800
 8003948:	40020000 	.word	0x40020000
 800394c:	40020400 	.word	0x40020400
 8003950:	40020800 	.word	0x40020800
 8003954:	40020c00 	.word	0x40020c00
 8003958:	40021000 	.word	0x40021000
 800395c:	40021400 	.word	0x40021400
 8003960:	40021800 	.word	0x40021800
 8003964:	40021c00 	.word	0x40021c00
 8003968:	40022000 	.word	0x40022000
 800396c:	40022400 	.word	0x40022400
 8003970:	40013c00 	.word	0x40013c00

08003974 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e0d9      	b.n	8003b44 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003990:	2201      	movs	r2, #1
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4013      	ands	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	f040 80c9 	bne.w	8003b3e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80039ac:	4a6b      	ldr	r2, [pc, #428]	; (8003b5c <HAL_GPIO_DeInit+0x1e8>)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	3302      	adds	r3, #2
 80039b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	220f      	movs	r2, #15
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	4013      	ands	r3, r2
 80039cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a63      	ldr	r2, [pc, #396]	; (8003b60 <HAL_GPIO_DeInit+0x1ec>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d037      	beq.n	8003a46 <HAL_GPIO_DeInit+0xd2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a62      	ldr	r2, [pc, #392]	; (8003b64 <HAL_GPIO_DeInit+0x1f0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d031      	beq.n	8003a42 <HAL_GPIO_DeInit+0xce>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a61      	ldr	r2, [pc, #388]	; (8003b68 <HAL_GPIO_DeInit+0x1f4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d02b      	beq.n	8003a3e <HAL_GPIO_DeInit+0xca>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a60      	ldr	r2, [pc, #384]	; (8003b6c <HAL_GPIO_DeInit+0x1f8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d025      	beq.n	8003a3a <HAL_GPIO_DeInit+0xc6>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a5f      	ldr	r2, [pc, #380]	; (8003b70 <HAL_GPIO_DeInit+0x1fc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01f      	beq.n	8003a36 <HAL_GPIO_DeInit+0xc2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a5e      	ldr	r2, [pc, #376]	; (8003b74 <HAL_GPIO_DeInit+0x200>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d019      	beq.n	8003a32 <HAL_GPIO_DeInit+0xbe>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a5d      	ldr	r2, [pc, #372]	; (8003b78 <HAL_GPIO_DeInit+0x204>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_GPIO_DeInit+0xba>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a5c      	ldr	r2, [pc, #368]	; (8003b7c <HAL_GPIO_DeInit+0x208>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00d      	beq.n	8003a2a <HAL_GPIO_DeInit+0xb6>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a5b      	ldr	r2, [pc, #364]	; (8003b80 <HAL_GPIO_DeInit+0x20c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <HAL_GPIO_DeInit+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a5a      	ldr	r2, [pc, #360]	; (8003b84 <HAL_GPIO_DeInit+0x210>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_GPIO_DeInit+0xae>
 8003a1e:	2309      	movs	r3, #9
 8003a20:	e012      	b.n	8003a48 <HAL_GPIO_DeInit+0xd4>
 8003a22:	230a      	movs	r3, #10
 8003a24:	e010      	b.n	8003a48 <HAL_GPIO_DeInit+0xd4>
 8003a26:	2308      	movs	r3, #8
 8003a28:	e00e      	b.n	8003a48 <HAL_GPIO_DeInit+0xd4>
 8003a2a:	2307      	movs	r3, #7
 8003a2c:	e00c      	b.n	8003a48 <HAL_GPIO_DeInit+0xd4>
 8003a2e:	2306      	movs	r3, #6
 8003a30:	e00a      	b.n	8003a48 <HAL_GPIO_DeInit+0xd4>
 8003a32:	2305      	movs	r3, #5
 8003a34:	e008      	b.n	8003a48 <HAL_GPIO_DeInit+0xd4>
 8003a36:	2304      	movs	r3, #4
 8003a38:	e006      	b.n	8003a48 <HAL_GPIO_DeInit+0xd4>
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e004      	b.n	8003a48 <HAL_GPIO_DeInit+0xd4>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e002      	b.n	8003a48 <HAL_GPIO_DeInit+0xd4>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_GPIO_DeInit+0xd4>
 8003a46:	2300      	movs	r3, #0
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	f002 0203 	and.w	r2, r2, #3
 8003a4e:	0092      	lsls	r2, r2, #2
 8003a50:	4093      	lsls	r3, r2
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d132      	bne.n	8003abe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a58:	4b4b      	ldr	r3, [pc, #300]	; (8003b88 <HAL_GPIO_DeInit+0x214>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	4949      	ldr	r1, [pc, #292]	; (8003b88 <HAL_GPIO_DeInit+0x214>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a66:	4b48      	ldr	r3, [pc, #288]	; (8003b88 <HAL_GPIO_DeInit+0x214>)
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	4946      	ldr	r1, [pc, #280]	; (8003b88 <HAL_GPIO_DeInit+0x214>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a74:	4b44      	ldr	r3, [pc, #272]	; (8003b88 <HAL_GPIO_DeInit+0x214>)
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	4942      	ldr	r1, [pc, #264]	; (8003b88 <HAL_GPIO_DeInit+0x214>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a82:	4b41      	ldr	r3, [pc, #260]	; (8003b88 <HAL_GPIO_DeInit+0x214>)
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	493f      	ldr	r1, [pc, #252]	; (8003b88 <HAL_GPIO_DeInit+0x214>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	220f      	movs	r2, #15
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003aa0:	4a2e      	ldr	r2, [pc, #184]	; (8003b5c <HAL_GPIO_DeInit+0x1e8>)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	482a      	ldr	r0, [pc, #168]	; (8003b5c <HAL_GPIO_DeInit+0x1e8>)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	089b      	lsrs	r3, r3, #2
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	3302      	adds	r3, #2
 8003aba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	2103      	movs	r1, #3
 8003ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	401a      	ands	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	08da      	lsrs	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3208      	adds	r2, #8
 8003adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	220f      	movs	r2, #15
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	08d2      	lsrs	r2, r2, #3
 8003af4:	4019      	ands	r1, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3208      	adds	r2, #8
 8003afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	2103      	movs	r1, #3
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	401a      	ands	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	2101      	movs	r1, #1
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	401a      	ands	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2103      	movs	r1, #3
 8003b32:	fa01 f303 	lsl.w	r3, r1, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	401a      	ands	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3301      	adds	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	f67f af22 	bls.w	8003990 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40013800 	.word	0x40013800
 8003b60:	40020000 	.word	0x40020000
 8003b64:	40020400 	.word	0x40020400
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	40020c00 	.word	0x40020c00
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40021400 	.word	0x40021400
 8003b78:	40021800 	.word	0x40021800
 8003b7c:	40021c00 	.word	0x40021c00
 8003b80:	40022000 	.word	0x40022000
 8003b84:	40022400 	.word	0x40022400
 8003b88:	40013c00 	.word	0x40013c00

08003b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	887b      	ldrh	r3, [r7, #2]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e001      	b.n	8003bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003baa:	2300      	movs	r3, #0
 8003bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bcc:	787b      	ldrb	r3, [r7, #1]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd2:	887a      	ldrh	r2, [r7, #2]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003bd8:	e003      	b.n	8003be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	041a      	lsls	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	619a      	str	r2, [r3, #24]
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c00:	887a      	ldrh	r2, [r7, #2]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4013      	ands	r3, r2
 8003c06:	041a      	lsls	r2, r3, #16
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	43d9      	mvns	r1, r3
 8003c0c:	887b      	ldrh	r3, [r7, #2]
 8003c0e:	400b      	ands	r3, r1
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	619a      	str	r2, [r3, #24]
}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c3a:	4a05      	ldr	r2, [pc, #20]	; (8003c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fc feae 	bl	80009a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40013c00 	.word	0x40013c00

08003c54 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c56:	b08f      	sub	sp, #60	; 0x3c
 8003c58:	af0a      	add	r7, sp, #40	; 0x28
 8003c5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e054      	b.n	8003d10 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d106      	bne.n	8003c86 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f00b fd99 	bl	800f7b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2203      	movs	r2, #3
 8003c8a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f006 fc72 	bl	800a58e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	687e      	ldr	r6, [r7, #4]
 8003cb2:	466d      	mov	r5, sp
 8003cb4:	f106 0410 	add.w	r4, r6, #16
 8003cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cc8:	1d33      	adds	r3, r6, #4
 8003cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ccc:	6838      	ldr	r0, [r7, #0]
 8003cce:	f006 fbf5 	bl	800a4bc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f006 fc69 	bl	800a5b0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	687e      	ldr	r6, [r7, #4]
 8003ce6:	466d      	mov	r5, sp
 8003ce8:	f106 0410 	add.w	r4, r6, #16
 8003cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cfc:	1d33      	adds	r3, r6, #4
 8003cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d00:	6838      	ldr	r0, [r7, #0]
 8003d02:	f006 fdeb 	bl	800a8dc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d18 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af04      	add	r7, sp, #16
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	4608      	mov	r0, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	70fb      	strb	r3, [r7, #3]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	70bb      	strb	r3, [r7, #2]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_HCD_HC_Init+0x28>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e076      	b.n	8003e2e <HAL_HCD_HC_Init+0x116>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	333d      	adds	r3, #61	; 0x3d
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	212c      	movs	r1, #44	; 0x2c
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	3338      	adds	r3, #56	; 0x38
 8003d68:	787a      	ldrb	r2, [r7, #1]
 8003d6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	212c      	movs	r1, #44	; 0x2c
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	3340      	adds	r3, #64	; 0x40
 8003d7a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d7c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	212c      	movs	r1, #44	; 0x2c
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	3339      	adds	r3, #57	; 0x39
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	212c      	movs	r1, #44	; 0x2c
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	333f      	adds	r3, #63	; 0x3f
 8003d9e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003da2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	78ba      	ldrb	r2, [r7, #2]
 8003da8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dac:	b2d0      	uxtb	r0, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	212c      	movs	r1, #44	; 0x2c
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	333a      	adds	r3, #58	; 0x3a
 8003dba:	4602      	mov	r2, r0
 8003dbc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003dbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da09      	bge.n	8003dda <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	333b      	adds	r3, #59	; 0x3b
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	e008      	b.n	8003dec <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	212c      	movs	r1, #44	; 0x2c
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	333b      	adds	r3, #59	; 0x3b
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	212c      	movs	r1, #44	; 0x2c
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	333c      	adds	r3, #60	; 0x3c
 8003dfa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003dfe:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	787c      	ldrb	r4, [r7, #1]
 8003e06:	78ba      	ldrb	r2, [r7, #2]
 8003e08:	78f9      	ldrb	r1, [r7, #3]
 8003e0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e0c:	9302      	str	r3, [sp, #8]
 8003e0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	4623      	mov	r3, r4
 8003e1c:	f006 fed8 	bl	800abd0 <USB_HC_Init>
 8003e20:	4603      	mov	r3, r0
 8003e22:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd90      	pop	{r4, r7, pc}

08003e36 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_HCD_HC_Halt+0x1e>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e00f      	b.n	8003e74 <HAL_HCD_HC_Halt+0x3e>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f007 f924 	bl	800b0b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	4608      	mov	r0, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	70fb      	strb	r3, [r7, #3]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	70bb      	strb	r3, [r7, #2]
 8003e92:	4613      	mov	r3, r2
 8003e94:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	212c      	movs	r1, #44	; 0x2c
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	333b      	adds	r3, #59	; 0x3b
 8003ea4:	78ba      	ldrb	r2, [r7, #2]
 8003ea6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	212c      	movs	r1, #44	; 0x2c
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	333f      	adds	r3, #63	; 0x3f
 8003eb6:	787a      	ldrb	r2, [r7, #1]
 8003eb8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003eba:	7c3b      	ldrb	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d112      	bne.n	8003ee6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3342      	adds	r3, #66	; 0x42
 8003ece:	2203      	movs	r2, #3
 8003ed0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	212c      	movs	r1, #44	; 0x2c
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	333d      	adds	r3, #61	; 0x3d
 8003ee0:	7f3a      	ldrb	r2, [r7, #28]
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e008      	b.n	8003ef8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3342      	adds	r3, #66	; 0x42
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003ef8:	787b      	ldrb	r3, [r7, #1]
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	f200 80c6 	bhi.w	800408c <HAL_HCD_HC_SubmitRequest+0x210>
 8003f00:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08004079 	.word	0x08004079
 8003f10:	08003f7d 	.word	0x08003f7d
 8003f14:	08003ffb 	.word	0x08003ffb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003f18:	7c3b      	ldrb	r3, [r7, #16]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	f040 80b8 	bne.w	8004090 <HAL_HCD_HC_SubmitRequest+0x214>
 8003f20:	78bb      	ldrb	r3, [r7, #2]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f040 80b4 	bne.w	8004090 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003f28:	8b3b      	ldrh	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d108      	bne.n	8003f40 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	212c      	movs	r1, #44	; 0x2c
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	3355      	adds	r3, #85	; 0x55
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	212c      	movs	r1, #44	; 0x2c
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3355      	adds	r3, #85	; 0x55
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	212c      	movs	r1, #44	; 0x2c
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	3342      	adds	r3, #66	; 0x42
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003f66:	e093      	b.n	8004090 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	3342      	adds	r3, #66	; 0x42
 8003f76:	2202      	movs	r2, #2
 8003f78:	701a      	strb	r2, [r3, #0]
      break;
 8003f7a:	e089      	b.n	8004090 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003f7c:	78bb      	ldrb	r3, [r7, #2]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d11d      	bne.n	8003fbe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	212c      	movs	r1, #44	; 0x2c
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3355      	adds	r3, #85	; 0x55
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d109      	bne.n	8003faa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	212c      	movs	r1, #44	; 0x2c
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3342      	adds	r3, #66	; 0x42
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003fa8:	e073      	b.n	8004092 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3342      	adds	r3, #66	; 0x42
 8003fb8:	2202      	movs	r2, #2
 8003fba:	701a      	strb	r2, [r3, #0]
      break;
 8003fbc:	e069      	b.n	8004092 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	3354      	adds	r3, #84	; 0x54
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	3342      	adds	r3, #66	; 0x42
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
      break;
 8003fe4:	e055      	b.n	8004092 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	212c      	movs	r1, #44	; 0x2c
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	3342      	adds	r3, #66	; 0x42
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	701a      	strb	r2, [r3, #0]
      break;
 8003ff8:	e04b      	b.n	8004092 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003ffa:	78bb      	ldrb	r3, [r7, #2]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d11d      	bne.n	800403c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	212c      	movs	r1, #44	; 0x2c
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	4413      	add	r3, r2
 800400c:	3355      	adds	r3, #85	; 0x55
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	212c      	movs	r1, #44	; 0x2c
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	4413      	add	r3, r2
 8004020:	3342      	adds	r3, #66	; 0x42
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004026:	e034      	b.n	8004092 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	212c      	movs	r1, #44	; 0x2c
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	4413      	add	r3, r2
 8004034:	3342      	adds	r3, #66	; 0x42
 8004036:	2202      	movs	r2, #2
 8004038:	701a      	strb	r2, [r3, #0]
      break;
 800403a:	e02a      	b.n	8004092 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	212c      	movs	r1, #44	; 0x2c
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4413      	add	r3, r2
 8004048:	3354      	adds	r3, #84	; 0x54
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	212c      	movs	r1, #44	; 0x2c
 8004056:	fb01 f303 	mul.w	r3, r1, r3
 800405a:	4413      	add	r3, r2
 800405c:	3342      	adds	r3, #66	; 0x42
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
      break;
 8004062:	e016      	b.n	8004092 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	212c      	movs	r1, #44	; 0x2c
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	4413      	add	r3, r2
 8004070:	3342      	adds	r3, #66	; 0x42
 8004072:	2202      	movs	r2, #2
 8004074:	701a      	strb	r2, [r3, #0]
      break;
 8004076:	e00c      	b.n	8004092 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	3342      	adds	r3, #66	; 0x42
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
      break;
 800408a:	e002      	b.n	8004092 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800408c:	bf00      	nop
 800408e:	e000      	b.n	8004092 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004090:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	212c      	movs	r1, #44	; 0x2c
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	4413      	add	r3, r2
 800409e:	3344      	adds	r3, #68	; 0x44
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	8b3a      	ldrh	r2, [r7, #24]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	202c      	movs	r0, #44	; 0x2c
 80040ac:	fb00 f303 	mul.w	r3, r0, r3
 80040b0:	440b      	add	r3, r1
 80040b2:	334c      	adds	r3, #76	; 0x4c
 80040b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	212c      	movs	r1, #44	; 0x2c
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	3360      	adds	r3, #96	; 0x60
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	212c      	movs	r1, #44	; 0x2c
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	3350      	adds	r3, #80	; 0x50
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	212c      	movs	r1, #44	; 0x2c
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	3339      	adds	r3, #57	; 0x39
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	212c      	movs	r1, #44	; 0x2c
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	3361      	adds	r3, #97	; 0x61
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	222c      	movs	r2, #44	; 0x2c
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	3338      	adds	r3, #56	; 0x38
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	18d1      	adds	r1, r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	f006 fe78 	bl	800ae0c <USB_HC_StartXfer>
 800411c:	4603      	mov	r3, r0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop

08004128 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f006 fb8b 	bl	800a85a <USB_GetMode>
 8004144:	4603      	mov	r3, r0
 8004146:	2b01      	cmp	r3, #1
 8004148:	f040 80f6 	bne.w	8004338 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f006 fb6f 	bl	800a834 <USB_ReadInterrupts>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80ec 	beq.w	8004336 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f006 fb66 	bl	800a834 <USB_ReadInterrupts>
 8004168:	4603      	mov	r3, r0
 800416a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800416e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004172:	d104      	bne.n	800417e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800417c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f006 fb56 	bl	800a834 <USB_ReadInterrupts>
 8004188:	4603      	mov	r3, r0
 800418a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800418e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004192:	d104      	bne.n	800419e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800419c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f006 fb46 	bl	800a834 <USB_ReadInterrupts>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041b2:	d104      	bne.n	80041be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80041bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f006 fb36 	bl	800a834 <USB_ReadInterrupts>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d103      	bne.n	80041da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2202      	movs	r2, #2
 80041d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f006 fb28 	bl	800a834 <USB_ReadInterrupts>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ee:	d11c      	bne.n	800422a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80041f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800420a:	2110      	movs	r1, #16
 800420c:	6938      	ldr	r0, [r7, #16]
 800420e:	f006 fa1b 	bl	800a648 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004212:	6938      	ldr	r0, [r7, #16]
 8004214:	f006 fa4a 	bl	800a6ac <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2101      	movs	r1, #1
 800421e:	4618      	mov	r0, r3
 8004220:	f006 fc10 	bl	800aa44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f00b fb39 	bl	800f89c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f006 fb00 	bl	800a834 <USB_ReadInterrupts>
 8004234:	4603      	mov	r3, r0
 8004236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800423a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800423e:	d102      	bne.n	8004246 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f001 f8ca 	bl	80053da <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f006 faf2 	bl	800a834 <USB_ReadInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b08      	cmp	r3, #8
 8004258:	d106      	bne.n	8004268 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f00b fb02 	bl	800f864 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2208      	movs	r2, #8
 8004266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f006 fae1 	bl	800a834 <USB_ReadInterrupts>
 8004272:	4603      	mov	r3, r0
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b10      	cmp	r3, #16
 800427a:	d101      	bne.n	8004280 <HAL_HCD_IRQHandler+0x158>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <HAL_HCD_IRQHandler+0x15a>
 8004280:	2300      	movs	r3, #0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d012      	beq.n	80042ac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0210 	bic.w	r2, r2, #16
 8004294:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 ffcd 	bl	8005236 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0210 	orr.w	r2, r2, #16
 80042aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f006 fabf 	bl	800a834 <USB_ReadInterrupts>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042c0:	d13a      	bne.n	8004338 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f006 fee2 	bl	800b090 <USB_HC_ReadInterrupt>
 80042cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e025      	b.n	8004320 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d018      	beq.n	800431a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fe:	d106      	bne.n	800430e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8ab 	bl	8004462 <HCD_HC_IN_IRQHandler>
 800430c:	e005      	b.n	800431a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	4619      	mov	r1, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fc25 	bl	8004b64 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	3301      	adds	r3, #1
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	429a      	cmp	r2, r3
 8004328:	d3d4      	bcc.n	80042d4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004332:	615a      	str	r2, [r3, #20]
 8004334:	e000      	b.n	8004338 <HAL_HCD_IRQHandler+0x210>
      return;
 8004336:	bf00      	nop
    }
  }
}
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_HCD_Start+0x16>
 8004350:	2302      	movs	r3, #2
 8004352:	e013      	b.n	800437c <HAL_HCD_Start+0x3e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2101      	movs	r1, #1
 8004362:	4618      	mov	r0, r3
 8004364:	f006 fbd2 	bl	800ab0c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f006 f8fd 	bl	800a56c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_HCD_Stop+0x16>
 8004396:	2302      	movs	r3, #2
 8004398:	e00d      	b.n	80043b6 <HAL_HCD_Stop+0x32>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f006 ffba 	bl	800b320 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f006 fb74 	bl	800aab8 <USB_ResetPort>
 80043d0:	4603      	mov	r3, r0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	212c      	movs	r1, #44	; 0x2c
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	3360      	adds	r3, #96	; 0x60
 80043f4:	781b      	ldrb	r3, [r3, #0]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	460b      	mov	r3, r1
 800440c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	212c      	movs	r1, #44	; 0x2c
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	3350      	adds	r3, #80	; 0x50
 800441c:	681b      	ldr	r3, [r3, #0]
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f006 fbb8 	bl	800abac <USB_GetCurrentFrame>
 800443c:	4603      	mov	r3, r0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f006 fb93 	bl	800ab7e <USB_GetHostSpeed>
 8004458:	4603      	mov	r3, r0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b04      	cmp	r3, #4
 8004490:	d11a      	bne.n	80044c8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4413      	add	r3, r2
 800449a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449e:	461a      	mov	r2, r3
 80044a0:	2304      	movs	r3, #4
 80044a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	212c      	movs	r1, #44	; 0x2c
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	3361      	adds	r3, #97	; 0x61
 80044b2:	2206      	movs	r2, #6
 80044b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	4611      	mov	r1, r2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f006 fdf6 	bl	800b0b2 <USB_HC_Halt>
 80044c6:	e0af      	b.n	8004628 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044de:	d11b      	bne.n	8004518 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ec:	461a      	mov	r2, r3
 80044ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	212c      	movs	r1, #44	; 0x2c
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	3361      	adds	r3, #97	; 0x61
 8004502:	2207      	movs	r2, #7
 8004504:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	4611      	mov	r1, r2
 8004510:	4618      	mov	r0, r3
 8004512:	f006 fdce 	bl	800b0b2 <USB_HC_Halt>
 8004516:	e087      	b.n	8004628 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b20      	cmp	r3, #32
 800452c:	d109      	bne.n	8004542 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4413      	add	r3, r2
 8004536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453a:	461a      	mov	r2, r3
 800453c:	2320      	movs	r3, #32
 800453e:	6093      	str	r3, [r2, #8]
 8004540:	e072      	b.n	8004628 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	4413      	add	r3, r2
 800454a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b08      	cmp	r3, #8
 8004556:	d11a      	bne.n	800458e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004564:	461a      	mov	r2, r3
 8004566:	2308      	movs	r3, #8
 8004568:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	212c      	movs	r1, #44	; 0x2c
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	4413      	add	r3, r2
 8004576:	3361      	adds	r3, #97	; 0x61
 8004578:	2205      	movs	r2, #5
 800457a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	4611      	mov	r1, r2
 8004586:	4618      	mov	r0, r3
 8004588:	f006 fd93 	bl	800b0b2 <USB_HC_Halt>
 800458c:	e04c      	b.n	8004628 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a4:	d11b      	bne.n	80045de <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b2:	461a      	mov	r2, r3
 80045b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	212c      	movs	r1, #44	; 0x2c
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	3361      	adds	r3, #97	; 0x61
 80045c8:	2208      	movs	r2, #8
 80045ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	4611      	mov	r1, r2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f006 fd6b 	bl	800b0b2 <USB_HC_Halt>
 80045dc:	e024      	b.n	8004628 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f0:	2b80      	cmp	r3, #128	; 0x80
 80045f2:	d119      	bne.n	8004628 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004600:	461a      	mov	r2, r3
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	212c      	movs	r1, #44	; 0x2c
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	4413      	add	r3, r2
 8004612:	3361      	adds	r3, #97	; 0x61
 8004614:	2206      	movs	r2, #6
 8004616:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f006 fd45 	bl	800b0b2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800463a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463e:	d112      	bne.n	8004666 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	4611      	mov	r1, r2
 800464a:	4618      	mov	r0, r3
 800464c:	f006 fd31 	bl	800b0b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4413      	add	r3, r2
 8004658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465c:	461a      	mov	r2, r3
 800465e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004662:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004664:	e27a      	b.n	8004b5c <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	f040 810b 	bne.w	8004894 <HCD_HC_IN_IRQHandler+0x432>
    if (hhcd->Init.dma_enable != 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d019      	beq.n	80046ba <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	212c      	movs	r1, #44	; 0x2c
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	3348      	adds	r3, #72	; 0x48
 8004694:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	0159      	lsls	r1, r3, #5
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	440b      	add	r3, r1
 800469e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80046a8:	1ad2      	subs	r2, r2, r3
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	202c      	movs	r0, #44	; 0x2c
 80046b0:	fb00 f303 	mul.w	r3, r0, r3
 80046b4:	440b      	add	r3, r1
 80046b6:	3350      	adds	r3, #80	; 0x50
 80046b8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	212c      	movs	r1, #44	; 0x2c
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	4413      	add	r3, r2
 80046c6:	3361      	adds	r3, #97	; 0x61
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	212c      	movs	r1, #44	; 0x2c
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	4413      	add	r3, r2
 80046d8:	335c      	adds	r3, #92	; 0x5c
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ea:	461a      	mov	r2, r3
 80046ec:	2301      	movs	r3, #1
 80046ee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	212c      	movs	r1, #44	; 0x2c
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	4413      	add	r3, r2
 80046fc:	333f      	adds	r3, #63	; 0x3f
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d009      	beq.n	8004718 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	212c      	movs	r1, #44	; 0x2c
 800470a:	fb01 f303 	mul.w	r3, r1, r3
 800470e:	4413      	add	r3, r2
 8004710:	333f      	adds	r3, #63	; 0x3f
 8004712:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004714:	2b02      	cmp	r3, #2
 8004716:	d111      	bne.n	800473c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	4611      	mov	r1, r2
 8004722:	4618      	mov	r0, r3
 8004724:	f006 fcc5 	bl	800b0b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004734:	461a      	mov	r2, r3
 8004736:	2310      	movs	r3, #16
 8004738:	6093      	str	r3, [r2, #8]
 800473a:	e066      	b.n	800480a <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	212c      	movs	r1, #44	; 0x2c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	333f      	adds	r3, #63	; 0x3f
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d127      	bne.n	80047a0 <HCD_HC_IN_IRQHandler+0x33e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4413      	add	r3, r2
 8004758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	440a      	add	r2, r1
 8004766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800476a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800476e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	212c      	movs	r1, #44	; 0x2c
 8004776:	fb01 f303 	mul.w	r3, r1, r3
 800477a:	4413      	add	r3, r2
 800477c:	3360      	adds	r3, #96	; 0x60
 800477e:	2201      	movs	r2, #1
 8004780:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	b2d9      	uxtb	r1, r3
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	202c      	movs	r0, #44	; 0x2c
 800478c:	fb00 f303 	mul.w	r3, r0, r3
 8004790:	4413      	add	r3, r2
 8004792:	3360      	adds	r3, #96	; 0x60
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f00b f88d 	bl	800f8b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800479e:	e034      	b.n	800480a <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	212c      	movs	r1, #44	; 0x2c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	333f      	adds	r3, #63	; 0x3f
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d12a      	bne.n	800480a <HCD_HC_IN_IRQHandler+0x3a8>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	3360      	adds	r3, #96	; 0x60
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	212c      	movs	r1, #44	; 0x2c
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	3354      	adds	r3, #84	; 0x54
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	f083 0301 	eor.w	r3, r3, #1
 80047da:	b2d8      	uxtb	r0, r3
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	212c      	movs	r1, #44	; 0x2c
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	4413      	add	r3, r2
 80047e8:	3354      	adds	r3, #84	; 0x54
 80047ea:	4602      	mov	r2, r0
 80047ec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	b2d9      	uxtb	r1, r3
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	202c      	movs	r0, #44	; 0x2c
 80047f8:	fb00 f303 	mul.w	r3, r0, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	3360      	adds	r3, #96	; 0x60
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f00b f857 	bl	800f8b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d12b      	bne.n	800486a <HCD_HC_IN_IRQHandler+0x408>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	212c      	movs	r1, #44	; 0x2c
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	4413      	add	r3, r2
 800481e:	3348      	adds	r3, #72	; 0x48
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	202c      	movs	r0, #44	; 0x2c
 8004828:	fb00 f202 	mul.w	r2, r0, r2
 800482c:	440a      	add	r2, r1
 800482e:	3240      	adds	r2, #64	; 0x40
 8004830:	8812      	ldrh	r2, [r2, #0]
 8004832:	fbb3 f3f2 	udiv	r3, r3, r2
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 818e 	beq.w	8004b5c <HCD_HC_IN_IRQHandler+0x6fa>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	212c      	movs	r1, #44	; 0x2c
 8004846:	fb01 f303 	mul.w	r3, r1, r3
 800484a:	4413      	add	r3, r2
 800484c:	3354      	adds	r3, #84	; 0x54
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	f083 0301 	eor.w	r3, r3, #1
 8004854:	b2d8      	uxtb	r0, r3
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	212c      	movs	r1, #44	; 0x2c
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	4413      	add	r3, r2
 8004862:	3354      	adds	r3, #84	; 0x54
 8004864:	4602      	mov	r2, r0
 8004866:	701a      	strb	r2, [r3, #0]
}
 8004868:	e178      	b.n	8004b5c <HCD_HC_IN_IRQHandler+0x6fa>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	212c      	movs	r1, #44	; 0x2c
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	4413      	add	r3, r2
 8004876:	3354      	adds	r3, #84	; 0x54
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	f083 0301 	eor.w	r3, r3, #1
 800487e:	b2d8      	uxtb	r0, r3
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	212c      	movs	r1, #44	; 0x2c
 8004886:	fb01 f303 	mul.w	r3, r1, r3
 800488a:	4413      	add	r3, r2
 800488c:	3354      	adds	r3, #84	; 0x54
 800488e:	4602      	mov	r2, r0
 8004890:	701a      	strb	r2, [r3, #0]
}
 8004892:	e163      	b.n	8004b5c <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4413      	add	r3, r2
 800489c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	f040 80f6 	bne.w	8004a98 <HCD_HC_IN_IRQHandler+0x636>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	212c      	movs	r1, #44	; 0x2c
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	3361      	adds	r3, #97	; 0x61
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d109      	bne.n	80048d4 <HCD_HC_IN_IRQHandler+0x472>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	212c      	movs	r1, #44	; 0x2c
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	3360      	adds	r3, #96	; 0x60
 80048ce:	2201      	movs	r2, #1
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e0c9      	b.n	8004a68 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	212c      	movs	r1, #44	; 0x2c
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	4413      	add	r3, r2
 80048e0:	3361      	adds	r3, #97	; 0x61
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d109      	bne.n	80048fc <HCD_HC_IN_IRQHandler+0x49a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	212c      	movs	r1, #44	; 0x2c
 80048ee:	fb01 f303 	mul.w	r3, r1, r3
 80048f2:	4413      	add	r3, r2
 80048f4:	3360      	adds	r3, #96	; 0x60
 80048f6:	2205      	movs	r2, #5
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	e0b5      	b.n	8004a68 <HCD_HC_IN_IRQHandler+0x606>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	212c      	movs	r1, #44	; 0x2c
 8004902:	fb01 f303 	mul.w	r3, r1, r3
 8004906:	4413      	add	r3, r2
 8004908:	3361      	adds	r3, #97	; 0x61
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b06      	cmp	r3, #6
 800490e:	d009      	beq.n	8004924 <HCD_HC_IN_IRQHandler+0x4c2>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	212c      	movs	r1, #44	; 0x2c
 8004916:	fb01 f303 	mul.w	r3, r1, r3
 800491a:	4413      	add	r3, r2
 800491c:	3361      	adds	r3, #97	; 0x61
 800491e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004920:	2b08      	cmp	r3, #8
 8004922:	d150      	bne.n	80049c6 <HCD_HC_IN_IRQHandler+0x564>
      hhcd->hc[ch_num].ErrCnt++;
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	212c      	movs	r1, #44	; 0x2c
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	4413      	add	r3, r2
 8004930:	335c      	adds	r3, #92	; 0x5c
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	202c      	movs	r0, #44	; 0x2c
 800493c:	fb00 f303 	mul.w	r3, r0, r3
 8004940:	440b      	add	r3, r1
 8004942:	335c      	adds	r3, #92	; 0x5c
 8004944:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	212c      	movs	r1, #44	; 0x2c
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	4413      	add	r3, r2
 8004952:	335c      	adds	r3, #92	; 0x5c
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d912      	bls.n	8004980 <HCD_HC_IN_IRQHandler+0x51e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	212c      	movs	r1, #44	; 0x2c
 8004960:	fb01 f303 	mul.w	r3, r1, r3
 8004964:	4413      	add	r3, r2
 8004966:	335c      	adds	r3, #92	; 0x5c
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	212c      	movs	r1, #44	; 0x2c
 8004972:	fb01 f303 	mul.w	r3, r1, r3
 8004976:	4413      	add	r3, r2
 8004978:	3360      	adds	r3, #96	; 0x60
 800497a:	2204      	movs	r2, #4
 800497c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800497e:	e073      	b.n	8004a68 <HCD_HC_IN_IRQHandler+0x606>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	212c      	movs	r1, #44	; 0x2c
 8004986:	fb01 f303 	mul.w	r3, r1, r3
 800498a:	4413      	add	r3, r2
 800498c:	3360      	adds	r3, #96	; 0x60
 800498e:	2202      	movs	r2, #2
 8004990:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4413      	add	r3, r2
 800499a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049a8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049b0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049be:	461a      	mov	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049c4:	e050      	b.n	8004a68 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	212c      	movs	r1, #44	; 0x2c
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	3361      	adds	r3, #97	; 0x61
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d122      	bne.n	8004a20 <HCD_HC_IN_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	212c      	movs	r1, #44	; 0x2c
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	3360      	adds	r3, #96	; 0x60
 80049e8:	2202      	movs	r2, #2
 80049ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a02:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a0a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e023      	b.n	8004a68 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	212c      	movs	r1, #44	; 0x2c
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3361      	adds	r3, #97	; 0x61
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b07      	cmp	r3, #7
 8004a32:	d119      	bne.n	8004a68 <HCD_HC_IN_IRQHandler+0x606>
      hhcd->hc[ch_num].ErrCnt++;
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	212c      	movs	r1, #44	; 0x2c
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	4413      	add	r3, r2
 8004a40:	335c      	adds	r3, #92	; 0x5c
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	202c      	movs	r0, #44	; 0x2c
 8004a4c:	fb00 f303 	mul.w	r3, r0, r3
 8004a50:	440b      	add	r3, r1
 8004a52:	335c      	adds	r3, #92	; 0x5c
 8004a54:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	212c      	movs	r1, #44	; 0x2c
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	4413      	add	r3, r2
 8004a62:	3360      	adds	r3, #96	; 0x60
 8004a64:	2204      	movs	r2, #4
 8004a66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a74:	461a      	mov	r2, r3
 8004a76:	2302      	movs	r3, #2
 8004a78:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	b2d9      	uxtb	r1, r3
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	202c      	movs	r0, #44	; 0x2c
 8004a84:	fb00 f303 	mul.w	r3, r0, r3
 8004a88:	4413      	add	r3, r2
 8004a8a:	3360      	adds	r3, #96	; 0x60
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f00a ff11 	bl	800f8b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004a96:	e061      	b.n	8004b5c <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b10      	cmp	r3, #16
 8004aac:	d156      	bne.n	8004b5c <HCD_HC_IN_IRQHandler+0x6fa>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	212c      	movs	r1, #44	; 0x2c
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	333f      	adds	r3, #63	; 0x3f
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d111      	bne.n	8004ae6 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	212c      	movs	r1, #44	; 0x2c
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	335c      	adds	r3, #92	; 0x5c
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	4611      	mov	r1, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f006 fae7 	bl	800b0b2 <USB_HC_Halt>
 8004ae4:	e031      	b.n	8004b4a <HCD_HC_IN_IRQHandler+0x6e8>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	212c      	movs	r1, #44	; 0x2c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	333f      	adds	r3, #63	; 0x3f
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <HCD_HC_IN_IRQHandler+0x6ac>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	212c      	movs	r1, #44	; 0x2c
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	333f      	adds	r3, #63	; 0x3f
 8004b08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d11d      	bne.n	8004b4a <HCD_HC_IN_IRQHandler+0x6e8>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	212c      	movs	r1, #44	; 0x2c
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	335c      	adds	r3, #92	; 0x5c
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d110      	bne.n	8004b4a <HCD_HC_IN_IRQHandler+0x6e8>
        hhcd->hc[ch_num].state = HC_NAK;
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	212c      	movs	r1, #44	; 0x2c
 8004b2e:	fb01 f303 	mul.w	r3, r1, r3
 8004b32:	4413      	add	r3, r2
 8004b34:	3361      	adds	r3, #97	; 0x61
 8004b36:	2203      	movs	r2, #3
 8004b38:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f006 fab4 	bl	800b0b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b56:	461a      	mov	r2, r3
 8004b58:	2310      	movs	r3, #16
 8004b5a:	6093      	str	r3, [r2, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004b7a:	78fb      	ldrb	r3, [r7, #3]
 8004b7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d11a      	bne.n	8004bca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	212c      	movs	r1, #44	; 0x2c
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3361      	adds	r3, #97	; 0x61
 8004bb4:	2206      	movs	r2, #6
 8004bb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f006 fa75 	bl	800b0b2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004bc8:	e331      	b.n	800522e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d12e      	bne.n	8004c3e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bec:	461a      	mov	r2, r3
 8004bee:	2320      	movs	r3, #32
 8004bf0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	212c      	movs	r1, #44	; 0x2c
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	333d      	adds	r3, #61	; 0x3d
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	f040 8313 	bne.w	800522e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	212c      	movs	r1, #44	; 0x2c
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	4413      	add	r3, r2
 8004c14:	333d      	adds	r3, #61	; 0x3d
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	3360      	adds	r3, #96	; 0x60
 8004c28:	2202      	movs	r2, #2
 8004c2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f006 fa3b 	bl	800b0b2 <USB_HC_Halt>
}
 8004c3c:	e2f7      	b.n	800522e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c54:	d112      	bne.n	8004c7c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c62:	461a      	mov	r2, r3
 8004c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	4611      	mov	r1, r2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f006 fa1c 	bl	800b0b2 <USB_HC_Halt>
}
 8004c7a:	e2d8      	b.n	800522e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d140      	bne.n	8004d14 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	212c      	movs	r1, #44	; 0x2c
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	335c      	adds	r3, #92	; 0x5c
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d111      	bne.n	8004cde <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	333d      	adds	r3, #61	; 0x3d
 8004cc8:	2201      	movs	r2, #1
 8004cca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2340      	movs	r3, #64	; 0x40
 8004cdc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cea:	461a      	mov	r2, r3
 8004cec:	2301      	movs	r3, #1
 8004cee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	212c      	movs	r1, #44	; 0x2c
 8004cf6:	fb01 f303 	mul.w	r3, r1, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3361      	adds	r3, #97	; 0x61
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f006 f9d0 	bl	800b0b2 <USB_HC_Halt>
}
 8004d12:	e28c      	b.n	800522e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d12c      	bne.n	8004d84 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	3361      	adds	r3, #97	; 0x61
 8004d38:	2204      	movs	r2, #4
 8004d3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	212c      	movs	r1, #44	; 0x2c
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	333d      	adds	r3, #61	; 0x3d
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	212c      	movs	r1, #44	; 0x2c
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	4413      	add	r3, r2
 8004d5a:	335c      	adds	r3, #92	; 0x5c
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	4611      	mov	r1, r2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f006 f9a1 	bl	800b0b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2340      	movs	r3, #64	; 0x40
 8004d80:	6093      	str	r3, [r2, #8]
}
 8004d82:	e254      	b.n	800522e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d11a      	bne.n	8004dd0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da6:	461a      	mov	r2, r3
 8004da8:	2308      	movs	r3, #8
 8004daa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	212c      	movs	r1, #44	; 0x2c
 8004db2:	fb01 f303 	mul.w	r3, r1, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	3361      	adds	r3, #97	; 0x61
 8004dba:	2205      	movs	r2, #5
 8004dbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f006 f972 	bl	800b0b2 <USB_HC_Halt>
}
 8004dce:	e22e      	b.n	800522e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b10      	cmp	r3, #16
 8004de4:	d140      	bne.n	8004e68 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	212c      	movs	r1, #44	; 0x2c
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	4413      	add	r3, r2
 8004df2:	335c      	adds	r3, #92	; 0x5c
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	212c      	movs	r1, #44	; 0x2c
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	3361      	adds	r3, #97	; 0x61
 8004e06:	2203      	movs	r2, #3
 8004e08:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	212c      	movs	r1, #44	; 0x2c
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	4413      	add	r3, r2
 8004e16:	333d      	adds	r3, #61	; 0x3d
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d112      	bne.n	8004e44 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	212c      	movs	r1, #44	; 0x2c
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	4413      	add	r3, r2
 8004e2a:	333c      	adds	r3, #60	; 0x3c
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d108      	bne.n	8004e44 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	212c      	movs	r1, #44	; 0x2c
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	333d      	adds	r3, #61	; 0x3d
 8004e40:	2201      	movs	r2, #1
 8004e42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f006 f92f 	bl	800b0b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e60:	461a      	mov	r2, r3
 8004e62:	2310      	movs	r3, #16
 8004e64:	6093      	str	r3, [r2, #8]
}
 8004e66:	e1e2      	b.n	800522e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7a:	2b80      	cmp	r3, #128	; 0x80
 8004e7c:	d164      	bne.n	8004f48 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d111      	bne.n	8004eaa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	212c      	movs	r1, #44	; 0x2c
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	3361      	adds	r3, #97	; 0x61
 8004e94:	2206      	movs	r2, #6
 8004e96:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f006 f905 	bl	800b0b2 <USB_HC_Halt>
 8004ea8:	e044      	b.n	8004f34 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	212c      	movs	r1, #44	; 0x2c
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	335c      	adds	r3, #92	; 0x5c
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	202c      	movs	r0, #44	; 0x2c
 8004ec2:	fb00 f303 	mul.w	r3, r0, r3
 8004ec6:	440b      	add	r3, r1
 8004ec8:	335c      	adds	r3, #92	; 0x5c
 8004eca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	212c      	movs	r1, #44	; 0x2c
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	335c      	adds	r3, #92	; 0x5c
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d920      	bls.n	8004f22 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	212c      	movs	r1, #44	; 0x2c
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	4413      	add	r3, r2
 8004eec:	335c      	adds	r3, #92	; 0x5c
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	212c      	movs	r1, #44	; 0x2c
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	4413      	add	r3, r2
 8004efe:	3360      	adds	r3, #96	; 0x60
 8004f00:	2204      	movs	r2, #4
 8004f02:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	b2d9      	uxtb	r1, r3
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	202c      	movs	r0, #44	; 0x2c
 8004f0e:	fb00 f303 	mul.w	r3, r0, r3
 8004f12:	4413      	add	r3, r2
 8004f14:	3360      	adds	r3, #96	; 0x60
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f00a fccc 	bl	800f8b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f20:	e008      	b.n	8004f34 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	212c      	movs	r1, #44	; 0x2c
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3360      	adds	r3, #96	; 0x60
 8004f30:	2202      	movs	r2, #2
 8004f32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f40:	461a      	mov	r2, r3
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	6093      	str	r3, [r2, #8]
}
 8004f46:	e172      	b.n	800522e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5e:	d11b      	bne.n	8004f98 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	212c      	movs	r1, #44	; 0x2c
 8004f66:	fb01 f303 	mul.w	r3, r1, r3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3361      	adds	r3, #97	; 0x61
 8004f6e:	2208      	movs	r2, #8
 8004f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f006 f898 	bl	800b0b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f94:	6093      	str	r3, [r2, #8]
}
 8004f96:	e14a      	b.n	800522e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	f040 813f 	bne.w	800522e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	212c      	movs	r1, #44	; 0x2c
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	3361      	adds	r3, #97	; 0x61
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d17d      	bne.n	80050c0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	212c      	movs	r1, #44	; 0x2c
 8004fca:	fb01 f303 	mul.w	r3, r1, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	3360      	adds	r3, #96	; 0x60
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	212c      	movs	r1, #44	; 0x2c
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	333f      	adds	r3, #63	; 0x3f
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d00a      	beq.n	8005000 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	212c      	movs	r1, #44	; 0x2c
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	333f      	adds	r3, #63	; 0x3f
 8004ff8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	f040 8100 	bne.w	8005200 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d113      	bne.n	8005030 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	212c      	movs	r1, #44	; 0x2c
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	4413      	add	r3, r2
 8005014:	3355      	adds	r3, #85	; 0x55
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	f083 0301 	eor.w	r3, r3, #1
 800501c:	b2d8      	uxtb	r0, r3
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	212c      	movs	r1, #44	; 0x2c
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	4413      	add	r3, r2
 800502a:	3355      	adds	r3, #85	; 0x55
 800502c:	4602      	mov	r2, r0
 800502e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2b01      	cmp	r3, #1
 8005036:	f040 80e3 	bne.w	8005200 <HCD_HC_OUT_IRQHandler+0x69c>
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	212c      	movs	r1, #44	; 0x2c
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	4413      	add	r3, r2
 8005046:	334c      	adds	r3, #76	; 0x4c
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80d8 	beq.w	8005200 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	212c      	movs	r1, #44	; 0x2c
 8005056:	fb01 f303 	mul.w	r3, r1, r3
 800505a:	4413      	add	r3, r2
 800505c:	334c      	adds	r3, #76	; 0x4c
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	202c      	movs	r0, #44	; 0x2c
 8005066:	fb00 f202 	mul.w	r2, r0, r2
 800506a:	440a      	add	r2, r1
 800506c:	3240      	adds	r2, #64	; 0x40
 800506e:	8812      	ldrh	r2, [r2, #0]
 8005070:	4413      	add	r3, r2
 8005072:	3b01      	subs	r3, #1
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	202c      	movs	r0, #44	; 0x2c
 800507a:	fb00 f202 	mul.w	r2, r0, r2
 800507e:	440a      	add	r2, r1
 8005080:	3240      	adds	r2, #64	; 0x40
 8005082:	8812      	ldrh	r2, [r2, #0]
 8005084:	fbb3 f3f2 	udiv	r3, r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80b5 	beq.w	8005200 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	212c      	movs	r1, #44	; 0x2c
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	4413      	add	r3, r2
 80050a2:	3355      	adds	r3, #85	; 0x55
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	f083 0301 	eor.w	r3, r3, #1
 80050aa:	b2d8      	uxtb	r0, r3
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	212c      	movs	r1, #44	; 0x2c
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	3355      	adds	r3, #85	; 0x55
 80050ba:	4602      	mov	r2, r0
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e09f      	b.n	8005200 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	212c      	movs	r1, #44	; 0x2c
 80050c6:	fb01 f303 	mul.w	r3, r1, r3
 80050ca:	4413      	add	r3, r2
 80050cc:	3361      	adds	r3, #97	; 0x61
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d109      	bne.n	80050e8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	212c      	movs	r1, #44	; 0x2c
 80050da:	fb01 f303 	mul.w	r3, r1, r3
 80050de:	4413      	add	r3, r2
 80050e0:	3360      	adds	r3, #96	; 0x60
 80050e2:	2202      	movs	r2, #2
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	e08b      	b.n	8005200 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	212c      	movs	r1, #44	; 0x2c
 80050ee:	fb01 f303 	mul.w	r3, r1, r3
 80050f2:	4413      	add	r3, r2
 80050f4:	3361      	adds	r3, #97	; 0x61
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d109      	bne.n	8005110 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	212c      	movs	r1, #44	; 0x2c
 8005102:	fb01 f303 	mul.w	r3, r1, r3
 8005106:	4413      	add	r3, r2
 8005108:	3360      	adds	r3, #96	; 0x60
 800510a:	2202      	movs	r2, #2
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e077      	b.n	8005200 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	212c      	movs	r1, #44	; 0x2c
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	4413      	add	r3, r2
 800511c:	3361      	adds	r3, #97	; 0x61
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b05      	cmp	r3, #5
 8005122:	d109      	bne.n	8005138 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	212c      	movs	r1, #44	; 0x2c
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	3360      	adds	r3, #96	; 0x60
 8005132:	2205      	movs	r2, #5
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e063      	b.n	8005200 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	212c      	movs	r1, #44	; 0x2c
 800513e:	fb01 f303 	mul.w	r3, r1, r3
 8005142:	4413      	add	r3, r2
 8005144:	3361      	adds	r3, #97	; 0x61
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b06      	cmp	r3, #6
 800514a:	d009      	beq.n	8005160 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	212c      	movs	r1, #44	; 0x2c
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	4413      	add	r3, r2
 8005158:	3361      	adds	r3, #97	; 0x61
 800515a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800515c:	2b08      	cmp	r3, #8
 800515e:	d14f      	bne.n	8005200 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	212c      	movs	r1, #44	; 0x2c
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	335c      	adds	r3, #92	; 0x5c
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	202c      	movs	r0, #44	; 0x2c
 8005178:	fb00 f303 	mul.w	r3, r0, r3
 800517c:	440b      	add	r3, r1
 800517e:	335c      	adds	r3, #92	; 0x5c
 8005180:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	212c      	movs	r1, #44	; 0x2c
 8005188:	fb01 f303 	mul.w	r3, r1, r3
 800518c:	4413      	add	r3, r2
 800518e:	335c      	adds	r3, #92	; 0x5c
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d912      	bls.n	80051bc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	212c      	movs	r1, #44	; 0x2c
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	4413      	add	r3, r2
 80051a2:	335c      	adds	r3, #92	; 0x5c
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	212c      	movs	r1, #44	; 0x2c
 80051ae:	fb01 f303 	mul.w	r3, r1, r3
 80051b2:	4413      	add	r3, r2
 80051b4:	3360      	adds	r3, #96	; 0x60
 80051b6:	2204      	movs	r2, #4
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	e021      	b.n	8005200 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	212c      	movs	r1, #44	; 0x2c
 80051c2:	fb01 f303 	mul.w	r3, r1, r3
 80051c6:	4413      	add	r3, r2
 80051c8:	3360      	adds	r3, #96	; 0x60
 80051ca:	2202      	movs	r2, #2
 80051cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051e4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051ec:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	461a      	mov	r2, r3
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	4413      	add	r3, r2
 8005208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520c:	461a      	mov	r2, r3
 800520e:	2302      	movs	r3, #2
 8005210:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	b2d9      	uxtb	r1, r3
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	202c      	movs	r0, #44	; 0x2c
 800521c:	fb00 f303 	mul.w	r3, r0, r3
 8005220:	4413      	add	r3, r2
 8005222:	3360      	adds	r3, #96	; 0x60
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f00a fb45 	bl	800f8b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800522e:	bf00      	nop
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b08a      	sub	sp, #40	; 0x28
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	0c5b      	lsrs	r3, r3, #17
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800526a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d004      	beq.n	800527c <HCD_RXQLVL_IRQHandler+0x46>
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b05      	cmp	r3, #5
 8005276:	f000 80a9 	beq.w	80053cc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800527a:	e0aa      	b.n	80053d2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 80a6 	beq.w	80053d0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	212c      	movs	r1, #44	; 0x2c
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	4413      	add	r3, r2
 8005290:	3344      	adds	r3, #68	; 0x44
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 809b 	beq.w	80053d0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	212c      	movs	r1, #44	; 0x2c
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	4413      	add	r3, r2
 80052a6:	3350      	adds	r3, #80	; 0x50
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	441a      	add	r2, r3
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	202c      	movs	r0, #44	; 0x2c
 80052b4:	fb00 f303 	mul.w	r3, r0, r3
 80052b8:	440b      	add	r3, r1
 80052ba:	334c      	adds	r3, #76	; 0x4c
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d87a      	bhi.n	80053b8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	212c      	movs	r1, #44	; 0x2c
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	4413      	add	r3, r2
 80052d2:	3344      	adds	r3, #68	; 0x44
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	b292      	uxth	r2, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	f005 fa52 	bl	800a784 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	212c      	movs	r1, #44	; 0x2c
 80052e6:	fb01 f303 	mul.w	r3, r1, r3
 80052ea:	4413      	add	r3, r2
 80052ec:	3344      	adds	r3, #68	; 0x44
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	441a      	add	r2, r3
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	202c      	movs	r0, #44	; 0x2c
 80052fa:	fb00 f303 	mul.w	r3, r0, r3
 80052fe:	440b      	add	r3, r1
 8005300:	3344      	adds	r3, #68	; 0x44
 8005302:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	212c      	movs	r1, #44	; 0x2c
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	4413      	add	r3, r2
 8005310:	3350      	adds	r3, #80	; 0x50
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	441a      	add	r2, r3
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	202c      	movs	r0, #44	; 0x2c
 800531e:	fb00 f303 	mul.w	r3, r0, r3
 8005322:	440b      	add	r3, r1
 8005324:	3350      	adds	r3, #80	; 0x50
 8005326:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	0cdb      	lsrs	r3, r3, #19
 8005338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800533c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	212c      	movs	r1, #44	; 0x2c
 8005344:	fb01 f303 	mul.w	r3, r1, r3
 8005348:	4413      	add	r3, r2
 800534a:	3340      	adds	r3, #64	; 0x40
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4293      	cmp	r3, r2
 8005354:	d13c      	bne.n	80053d0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d039      	beq.n	80053d0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005372:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800537a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005388:	461a      	mov	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	212c      	movs	r1, #44	; 0x2c
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	4413      	add	r3, r2
 800539a:	3354      	adds	r3, #84	; 0x54
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	f083 0301 	eor.w	r3, r3, #1
 80053a2:	b2d8      	uxtb	r0, r3
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	212c      	movs	r1, #44	; 0x2c
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	4413      	add	r3, r2
 80053b0:	3354      	adds	r3, #84	; 0x54
 80053b2:	4602      	mov	r2, r0
 80053b4:	701a      	strb	r2, [r3, #0]
      break;
 80053b6:	e00b      	b.n	80053d0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	212c      	movs	r1, #44	; 0x2c
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4413      	add	r3, r2
 80053c4:	3360      	adds	r3, #96	; 0x60
 80053c6:	2204      	movs	r2, #4
 80053c8:	701a      	strb	r2, [r3, #0]
      break;
 80053ca:	e001      	b.n	80053d0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80053cc:	bf00      	nop
 80053ce:	e000      	b.n	80053d2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80053d0:	bf00      	nop
  }
}
 80053d2:	bf00      	nop
 80053d4:	3728      	adds	r7, #40	; 0x28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005406:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b02      	cmp	r3, #2
 8005410:	d10b      	bne.n	800542a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b01      	cmp	r3, #1
 800541a:	d102      	bne.n	8005422 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f00a fa2f 	bl	800f880 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f043 0302 	orr.w	r3, r3, #2
 8005428:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b08      	cmp	r3, #8
 8005432:	d132      	bne.n	800549a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f043 0308 	orr.w	r3, r3, #8
 800543a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d126      	bne.n	8005494 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d113      	bne.n	8005476 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005454:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005458:	d106      	bne.n	8005468 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2102      	movs	r1, #2
 8005460:	4618      	mov	r0, r3
 8005462:	f005 faef 	bl	800aa44 <USB_InitFSLSPClkSel>
 8005466:	e011      	b.n	800548c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2101      	movs	r1, #1
 800546e:	4618      	mov	r0, r3
 8005470:	f005 fae8 	bl	800aa44 <USB_InitFSLSPClkSel>
 8005474:	e00a      	b.n	800548c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d106      	bne.n	800548c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005484:	461a      	mov	r2, r3
 8005486:	f64e 2360 	movw	r3, #60000	; 0xea60
 800548a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f00a fa21 	bl	800f8d4 <HAL_HCD_PortEnabled_Callback>
 8005492:	e002      	b.n	800549a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f00a fa2b 	bl	800f8f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d103      	bne.n	80054ac <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f043 0320 	orr.w	r3, r3, #32
 80054aa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054b2:	461a      	mov	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6013      	str	r3, [r2, #0]
}
 80054b8:	bf00      	nop
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e07f      	b.n	80055d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fc faa2 	bl	8001a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2224      	movs	r2, #36	; 0x24
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0201 	bic.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005510:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005520:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d107      	bne.n	800553a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005536:	609a      	str	r2, [r3, #8]
 8005538:	e006      	b.n	8005548 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005546:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d104      	bne.n	800555a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005558:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6859      	ldr	r1, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <HAL_I2C_Init+0x11c>)
 8005566:	430b      	orrs	r3, r1
 8005568:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005578:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	69d9      	ldr	r1, [r3, #28]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1a      	ldr	r2, [r3, #32]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	02008000 	.word	0x02008000

080055e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e021      	b.n	8005636 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2224      	movs	r2, #36	; 0x24
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fc fa70 	bl	8001af0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	4608      	mov	r0, r1
 800564a:	4611      	mov	r1, r2
 800564c:	461a      	mov	r2, r3
 800564e:	4603      	mov	r3, r0
 8005650:	817b      	strh	r3, [r7, #10]
 8005652:	460b      	mov	r3, r1
 8005654:	813b      	strh	r3, [r7, #8]
 8005656:	4613      	mov	r3, r2
 8005658:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b20      	cmp	r3, #32
 8005664:	f040 80f9 	bne.w	800585a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_I2C_Mem_Write+0x34>
 800566e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005670:	2b00      	cmp	r3, #0
 8005672:	d105      	bne.n	8005680 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0ed      	b.n	800585c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_I2C_Mem_Write+0x4e>
 800568a:	2302      	movs	r3, #2
 800568c:	e0e6      	b.n	800585c <HAL_I2C_Mem_Write+0x21c>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005696:	f7fc fea3 	bl	80023e0 <HAL_GetTick>
 800569a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	2319      	movs	r3, #25
 80056a2:	2201      	movs	r2, #1
 80056a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 fac3 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e0d1      	b.n	800585c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2221      	movs	r2, #33	; 0x21
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2240      	movs	r2, #64	; 0x40
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a3a      	ldr	r2, [r7, #32]
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056e0:	88f8      	ldrh	r0, [r7, #6]
 80056e2:	893a      	ldrh	r2, [r7, #8]
 80056e4:	8979      	ldrh	r1, [r7, #10]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	4603      	mov	r3, r0
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f9d3 	bl	8005a9c <I2C_RequestMemoryWrite>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0a9      	b.n	800585c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	2bff      	cmp	r3, #255	; 0xff
 8005710:	d90e      	bls.n	8005730 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	22ff      	movs	r2, #255	; 0xff
 8005716:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571c:	b2da      	uxtb	r2, r3
 800571e:	8979      	ldrh	r1, [r7, #10]
 8005720:	2300      	movs	r3, #0
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 fc2b 	bl	8005f84 <I2C_TransferConfig>
 800572e:	e00f      	b.n	8005750 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573e:	b2da      	uxtb	r2, r3
 8005740:	8979      	ldrh	r1, [r7, #10]
 8005742:	2300      	movs	r3, #0
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 fc1a 	bl	8005f84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 faad 	bl	8005cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e07b      	b.n	800585c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d034      	beq.n	8005808 <HAL_I2C_Mem_Write+0x1c8>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d130      	bne.n	8005808 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	2200      	movs	r2, #0
 80057ae:	2180      	movs	r1, #128	; 0x80
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 fa3f 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e04d      	b.n	800585c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2bff      	cmp	r3, #255	; 0xff
 80057c8:	d90e      	bls.n	80057e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	22ff      	movs	r2, #255	; 0xff
 80057ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	8979      	ldrh	r1, [r7, #10]
 80057d8:	2300      	movs	r3, #0
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fbcf 	bl	8005f84 <I2C_TransferConfig>
 80057e6:	e00f      	b.n	8005808 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	8979      	ldrh	r1, [r7, #10]
 80057fa:	2300      	movs	r3, #0
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fbbe 	bl	8005f84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d19e      	bne.n	8005750 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fa8c 	bl	8005d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e01a      	b.n	800585c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2220      	movs	r2, #32
 800582c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6859      	ldr	r1, [r3, #4]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <HAL_I2C_Mem_Write+0x224>)
 800583a:	400b      	ands	r3, r1
 800583c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	e000      	b.n	800585c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800585a:	2302      	movs	r3, #2
  }
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	fe00e800 	.word	0xfe00e800

08005868 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af02      	add	r7, sp, #8
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	4608      	mov	r0, r1
 8005872:	4611      	mov	r1, r2
 8005874:	461a      	mov	r2, r3
 8005876:	4603      	mov	r3, r0
 8005878:	817b      	strh	r3, [r7, #10]
 800587a:	460b      	mov	r3, r1
 800587c:	813b      	strh	r3, [r7, #8]
 800587e:	4613      	mov	r3, r2
 8005880:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b20      	cmp	r3, #32
 800588c:	f040 80fd 	bne.w	8005a8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_I2C_Mem_Read+0x34>
 8005896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005898:	2b00      	cmp	r3, #0
 800589a:	d105      	bne.n	80058a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0f1      	b.n	8005a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_I2C_Mem_Read+0x4e>
 80058b2:	2302      	movs	r3, #2
 80058b4:	e0ea      	b.n	8005a8c <HAL_I2C_Mem_Read+0x224>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058be:	f7fc fd8f 	bl	80023e0 <HAL_GetTick>
 80058c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	2319      	movs	r3, #25
 80058ca:	2201      	movs	r2, #1
 80058cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 f9af 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0d5      	b.n	8005a8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2222      	movs	r2, #34	; 0x22
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2240      	movs	r2, #64	; 0x40
 80058ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a3a      	ldr	r2, [r7, #32]
 80058fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005900:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005908:	88f8      	ldrh	r0, [r7, #6]
 800590a:	893a      	ldrh	r2, [r7, #8]
 800590c:	8979      	ldrh	r1, [r7, #10]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	4603      	mov	r3, r0
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f913 	bl	8005b44 <I2C_RequestMemoryRead>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0ad      	b.n	8005a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	2bff      	cmp	r3, #255	; 0xff
 8005938:	d90e      	bls.n	8005958 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	22ff      	movs	r2, #255	; 0xff
 800593e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005944:	b2da      	uxtb	r2, r3
 8005946:	8979      	ldrh	r1, [r7, #10]
 8005948:	4b52      	ldr	r3, [pc, #328]	; (8005a94 <HAL_I2C_Mem_Read+0x22c>)
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 fb17 	bl	8005f84 <I2C_TransferConfig>
 8005956:	e00f      	b.n	8005978 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005966:	b2da      	uxtb	r2, r3
 8005968:	8979      	ldrh	r1, [r7, #10]
 800596a:	4b4a      	ldr	r3, [pc, #296]	; (8005a94 <HAL_I2C_Mem_Read+0x22c>)
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 fb06 	bl	8005f84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	2200      	movs	r2, #0
 8005980:	2104      	movs	r1, #4
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f956 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e07c      	b.n	8005a8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d034      	beq.n	8005a38 <HAL_I2C_Mem_Read+0x1d0>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d130      	bne.n	8005a38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	2200      	movs	r2, #0
 80059de:	2180      	movs	r1, #128	; 0x80
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f927 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e04d      	b.n	8005a8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2bff      	cmp	r3, #255	; 0xff
 80059f8:	d90e      	bls.n	8005a18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	22ff      	movs	r2, #255	; 0xff
 80059fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	8979      	ldrh	r1, [r7, #10]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fab7 	bl	8005f84 <I2C_TransferConfig>
 8005a16:	e00f      	b.n	8005a38 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	8979      	ldrh	r1, [r7, #10]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 faa6 	bl	8005f84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d19a      	bne.n	8005978 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 f974 	bl	8005d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e01a      	b.n	8005a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6859      	ldr	r1, [r3, #4]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <HAL_I2C_Mem_Read+0x230>)
 8005a6a:	400b      	ands	r3, r1
 8005a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	e000      	b.n	8005a8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005a8a:	2302      	movs	r3, #2
  }
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	80002400 	.word	0x80002400
 8005a98:	fe00e800 	.word	0xfe00e800

08005a9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	817b      	strh	r3, [r7, #10]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	813b      	strh	r3, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	8979      	ldrh	r1, [r7, #10]
 8005abc:	4b20      	ldr	r3, [pc, #128]	; (8005b40 <I2C_RequestMemoryWrite+0xa4>)
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fa5d 	bl	8005f84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	69b9      	ldr	r1, [r7, #24]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 f8f0 	bl	8005cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e02c      	b.n	8005b38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d105      	bne.n	8005af0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ae4:	893b      	ldrh	r3, [r7, #8]
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	629a      	str	r2, [r3, #40]	; 0x28
 8005aee:	e015      	b.n	8005b1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005af0:	893b      	ldrh	r3, [r7, #8]
 8005af2:	0a1b      	lsrs	r3, r3, #8
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	69b9      	ldr	r1, [r7, #24]
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 f8d6 	bl	8005cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e012      	b.n	8005b38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b12:	893b      	ldrh	r3, [r7, #8]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	2200      	movs	r2, #0
 8005b24:	2180      	movs	r1, #128	; 0x80
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f884 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	80002000 	.word	0x80002000

08005b44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	4608      	mov	r0, r1
 8005b4e:	4611      	mov	r1, r2
 8005b50:	461a      	mov	r2, r3
 8005b52:	4603      	mov	r3, r0
 8005b54:	817b      	strh	r3, [r7, #10]
 8005b56:	460b      	mov	r3, r1
 8005b58:	813b      	strh	r3, [r7, #8]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	8979      	ldrh	r1, [r7, #10]
 8005b64:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <I2C_RequestMemoryRead+0xa4>)
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fa0a 	bl	8005f84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	69b9      	ldr	r1, [r7, #24]
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f89d 	bl	8005cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e02c      	b.n	8005bde <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d105      	bne.n	8005b96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b8a:	893b      	ldrh	r3, [r7, #8]
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	629a      	str	r2, [r3, #40]	; 0x28
 8005b94:	e015      	b.n	8005bc2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b96:	893b      	ldrh	r3, [r7, #8]
 8005b98:	0a1b      	lsrs	r3, r3, #8
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	69b9      	ldr	r1, [r7, #24]
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f883 	bl	8005cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e012      	b.n	8005bde <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb8:	893b      	ldrh	r3, [r7, #8]
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2140      	movs	r1, #64	; 0x40
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f831 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	80002000 	.word	0x80002000

08005bec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d103      	bne.n	8005c0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2200      	movs	r2, #0
 8005c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d007      	beq.n	8005c28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	619a      	str	r2, [r3, #24]
  }
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c44:	e022      	b.n	8005c8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4c:	d01e      	beq.n	8005c8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4e:	f7fc fbc7 	bl	80023e0 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d302      	bcc.n	8005c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d113      	bne.n	8005c8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c68:	f043 0220 	orr.w	r2, r3, #32
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e00f      	b.n	8005cac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4013      	ands	r3, r2
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d0cd      	beq.n	8005c46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cc0:	e02c      	b.n	8005d1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f870 	bl	8005dac <I2C_IsErrorOccurred>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e02a      	b.n	8005d2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d01e      	beq.n	8005d1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cde:	f7fc fb7f 	bl	80023e0 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d302      	bcc.n	8005cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d113      	bne.n	8005d1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e007      	b.n	8005d2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d1cb      	bne.n	8005cc2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d40:	e028      	b.n	8005d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f830 	bl	8005dac <I2C_IsErrorOccurred>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e026      	b.n	8005da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d56:	f7fc fb43 	bl	80023e0 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d113      	bne.n	8005d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d70:	f043 0220 	orr.w	r2, r3, #32
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e007      	b.n	8005da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d1cf      	bne.n	8005d42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08a      	sub	sp, #40	; 0x28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d075      	beq.n	8005ec4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2210      	movs	r2, #16
 8005dde:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005de0:	e056      	b.n	8005e90 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de8:	d052      	beq.n	8005e90 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005dea:	f7fc faf9 	bl	80023e0 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d302      	bcc.n	8005e00 <I2C_IsErrorOccurred+0x54>
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d147      	bne.n	8005e90 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e22:	d12e      	bne.n	8005e82 <I2C_IsErrorOccurred+0xd6>
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e2a:	d02a      	beq.n	8005e82 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005e2c:	7cfb      	ldrb	r3, [r7, #19]
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d027      	beq.n	8005e82 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e40:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e42:	f7fc facd 	bl	80023e0 <HAL_GetTick>
 8005e46:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e48:	e01b      	b.n	8005e82 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e4a:	f7fc fac9 	bl	80023e0 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b19      	cmp	r3, #25
 8005e56:	d914      	bls.n	8005e82 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5c:	f043 0220 	orr.w	r2, r3, #32
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d1dc      	bne.n	8005e4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d003      	beq.n	8005ea6 <I2C_IsErrorOccurred+0xfa>
 8005e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d09d      	beq.n	8005de2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	f043 0304 	orr.w	r3, r3, #4
 8005ebc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00b      	beq.n	8005eee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	f043 0301 	orr.w	r3, r3, #1
 8005edc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	f043 0308 	orr.w	r3, r3, #8
 8005efe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00b      	beq.n	8005f32 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	f043 0302 	orr.w	r3, r3, #2
 8005f20:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01c      	beq.n	8005f74 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f7ff fe56 	bl	8005bec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6859      	ldr	r1, [r3, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <I2C_IsErrorOccurred+0x1d4>)
 8005f4c:	400b      	ands	r3, r1
 8005f4e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3728      	adds	r7, #40	; 0x28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	fe00e800 	.word	0xfe00e800

08005f84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	607b      	str	r3, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	817b      	strh	r3, [r7, #10]
 8005f92:	4613      	mov	r3, r2
 8005f94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f96:	897b      	ldrh	r3, [r7, #10]
 8005f98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f9c:	7a7b      	ldrb	r3, [r7, #9]
 8005f9e:	041b      	lsls	r3, r3, #16
 8005fa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fa4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fb2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	0d5b      	lsrs	r3, r3, #21
 8005fbe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005fc2:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <I2C_TransferConfig+0x60>)
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	ea02 0103 	and.w	r1, r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005fd6:	bf00      	nop
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	03ff63ff 	.word	0x03ff63ff

08005fe8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d138      	bne.n	8006070 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006008:	2302      	movs	r3, #2
 800600a:	e032      	b.n	8006072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2224      	movs	r2, #36	; 0x24
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0201 	bic.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800603a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6819      	ldr	r1, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	e000      	b.n	8006072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006070:	2302      	movs	r3, #2
  }
}
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800607e:	b480      	push	{r7}
 8006080:	b085      	sub	sp, #20
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b20      	cmp	r3, #32
 8006092:	d139      	bne.n	8006108 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800609e:	2302      	movs	r3, #2
 80060a0:	e033      	b.n	800610a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2224      	movs	r2, #36	; 0x24
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	e000      	b.n	800610a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006108:	2302      	movs	r3, #2
  }
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e0bf      	b.n	80062aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fb fcf8 	bl	8001b34 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800615a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6999      	ldr	r1, [r3, #24]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006170:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6899      	ldr	r1, [r3, #8]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b4a      	ldr	r3, [pc, #296]	; (80062b4 <HAL_LTDC_Init+0x19c>)
 800618c:	400b      	ands	r3, r1
 800618e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	041b      	lsls	r3, r3, #16
 8006196:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6899      	ldr	r1, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68d9      	ldr	r1, [r3, #12]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b3e      	ldr	r3, [pc, #248]	; (80062b4 <HAL_LTDC_Init+0x19c>)
 80061ba:	400b      	ands	r3, r1
 80061bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	041b      	lsls	r3, r3, #16
 80061c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68d9      	ldr	r1, [r3, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a1a      	ldr	r2, [r3, #32]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6919      	ldr	r1, [r3, #16]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b33      	ldr	r3, [pc, #204]	; (80062b4 <HAL_LTDC_Init+0x19c>)
 80061e8:	400b      	ands	r3, r1
 80061ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	041b      	lsls	r3, r3, #16
 80061f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6919      	ldr	r1, [r3, #16]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6959      	ldr	r1, [r3, #20]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	4b27      	ldr	r3, [pc, #156]	; (80062b4 <HAL_LTDC_Init+0x19c>)
 8006216:	400b      	ands	r3, r1
 8006218:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	041b      	lsls	r3, r3, #16
 8006220:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6959      	ldr	r1, [r3, #20]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006248:	041b      	lsls	r3, r3, #16
 800624a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800625a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0206 	orr.w	r2, r2, #6
 8006286:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	f000f800 	.word	0xf000f800

080062b8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d023      	beq.n	8006322 <HAL_LTDC_IRQHandler+0x6a>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01e      	beq.n	8006322 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0204 	bic.w	r2, r2, #4
 80062f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2204      	movs	r2, #4
 80062fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006302:	f043 0201 	orr.w	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2204      	movs	r2, #4
 8006310:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f86f 	bl	8006400 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d023      	beq.n	8006374 <HAL_LTDC_IRQHandler+0xbc>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01e      	beq.n	8006374 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0202 	bic.w	r2, r2, #2
 8006344:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2202      	movs	r2, #2
 800634c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006354:	f043 0202 	orr.w	r2, r3, #2
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2204      	movs	r2, #4
 8006362:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f846 	bl	8006400 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01b      	beq.n	80063b6 <HAL_LTDC_IRQHandler+0xfe>
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d016      	beq.n	80063b6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0201 	bic.w	r2, r2, #1
 8006396:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2201      	movs	r2, #1
 800639e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f009 f963 	bl	800f67c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01b      	beq.n	80063f8 <HAL_LTDC_IRQHandler+0x140>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0208 	bic.w	r2, r2, #8
 80063d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2208      	movs	r2, #8
 80063e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f80e 	bl	8006414 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006428:	b5b0      	push	{r4, r5, r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800643a:	2b01      	cmp	r3, #1
 800643c:	d101      	bne.n	8006442 <HAL_LTDC_ConfigLayer+0x1a>
 800643e:	2302      	movs	r3, #2
 8006440:	e02c      	b.n	800649c <HAL_LTDC_ConfigLayer+0x74>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2134      	movs	r1, #52	; 0x34
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	4413      	add	r3, r2
 800645e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4614      	mov	r4, r2
 8006466:	461d      	mov	r5, r3
 8006468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800646a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800646c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800646e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f849 	bl	8006514 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2201      	movs	r2, #1
 8006488:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bdb0      	pop	{r4, r5, r7, pc}

080064a4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <HAL_LTDC_ProgramLineEvent+0x18>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e023      	b.n	8006504 <HAL_LTDC_ProgramLineEvent+0x60>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80064dc:	4a0c      	ldr	r2, [pc, #48]	; (8006510 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f042 0201 	orr.w	r2, r2, #1
 80064f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	40016800 	.word	0x40016800

08006514 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006514:	b480      	push	{r7}
 8006516:	b089      	sub	sp, #36	; 0x24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	0c1b      	lsrs	r3, r3, #16
 800652c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006530:	4413      	add	r3, r2
 8006532:	041b      	lsls	r3, r3, #16
 8006534:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	01db      	lsls	r3, r3, #7
 8006540:	4413      	add	r3, r2
 8006542:	3384      	adds	r3, #132	; 0x84
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	4611      	mov	r1, r2
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	01d2      	lsls	r2, r2, #7
 8006550:	440a      	add	r2, r1
 8006552:	3284      	adds	r2, #132	; 0x84
 8006554:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006558:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	0c1b      	lsrs	r3, r3, #16
 8006566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800656a:	4413      	add	r3, r2
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4619      	mov	r1, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	01db      	lsls	r3, r3, #7
 8006578:	440b      	add	r3, r1
 800657a:	3384      	adds	r3, #132	; 0x84
 800657c:	4619      	mov	r1, r3
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4313      	orrs	r3, r2
 8006582:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006592:	4413      	add	r3, r2
 8006594:	041b      	lsls	r3, r3, #16
 8006596:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	01db      	lsls	r3, r3, #7
 80065a2:	4413      	add	r3, r2
 80065a4:	3384      	adds	r3, #132	; 0x84
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	4611      	mov	r1, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	01d2      	lsls	r2, r2, #7
 80065b2:	440a      	add	r2, r1
 80065b4:	3284      	adds	r2, #132	; 0x84
 80065b6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80065ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065ca:	4413      	add	r3, r2
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4619      	mov	r1, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	01db      	lsls	r3, r3, #7
 80065d8:	440b      	add	r3, r1
 80065da:	3384      	adds	r3, #132	; 0x84
 80065dc:	4619      	mov	r1, r3
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	01db      	lsls	r3, r3, #7
 80065ee:	4413      	add	r3, r2
 80065f0:	3384      	adds	r3, #132	; 0x84
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	6812      	ldr	r2, [r2, #0]
 80065f8:	4611      	mov	r1, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	01d2      	lsls	r2, r2, #7
 80065fe:	440a      	add	r2, r1
 8006600:	3284      	adds	r2, #132	; 0x84
 8006602:	f023 0307 	bic.w	r3, r3, #7
 8006606:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	01db      	lsls	r3, r3, #7
 8006612:	4413      	add	r3, r2
 8006614:	3384      	adds	r3, #132	; 0x84
 8006616:	461a      	mov	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800662e:	041b      	lsls	r3, r3, #16
 8006630:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	061b      	lsls	r3, r3, #24
 8006638:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	01db      	lsls	r3, r3, #7
 8006644:	4413      	add	r3, r2
 8006646:	3384      	adds	r3, #132	; 0x84
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	01db      	lsls	r3, r3, #7
 8006654:	4413      	add	r3, r2
 8006656:	3384      	adds	r3, #132	; 0x84
 8006658:	461a      	mov	r2, r3
 800665a:	2300      	movs	r3, #0
 800665c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006664:	461a      	mov	r2, r3
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	431a      	orrs	r2, r3
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	431a      	orrs	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4619      	mov	r1, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	01db      	lsls	r3, r3, #7
 8006678:	440b      	add	r3, r1
 800667a:	3384      	adds	r3, #132	; 0x84
 800667c:	4619      	mov	r1, r3
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	01db      	lsls	r3, r3, #7
 800668e:	4413      	add	r3, r2
 8006690:	3384      	adds	r3, #132	; 0x84
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	6812      	ldr	r2, [r2, #0]
 8006698:	4611      	mov	r1, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	01d2      	lsls	r2, r2, #7
 800669e:	440a      	add	r2, r1
 80066a0:	3284      	adds	r2, #132	; 0x84
 80066a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	01db      	lsls	r3, r3, #7
 80066b2:	4413      	add	r3, r2
 80066b4:	3384      	adds	r3, #132	; 0x84
 80066b6:	461a      	mov	r2, r3
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	01db      	lsls	r3, r3, #7
 80066c8:	4413      	add	r3, r2
 80066ca:	3384      	adds	r3, #132	; 0x84
 80066cc:	69da      	ldr	r2, [r3, #28]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4619      	mov	r1, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	01db      	lsls	r3, r3, #7
 80066d8:	440b      	add	r3, r1
 80066da:	3384      	adds	r3, #132	; 0x84
 80066dc:	4619      	mov	r1, r3
 80066de:	4b58      	ldr	r3, [pc, #352]	; (8006840 <LTDC_SetConfig+0x32c>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	68f9      	ldr	r1, [r7, #12]
 80066ee:	6809      	ldr	r1, [r1, #0]
 80066f0:	4608      	mov	r0, r1
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	01c9      	lsls	r1, r1, #7
 80066f6:	4401      	add	r1, r0
 80066f8:	3184      	adds	r1, #132	; 0x84
 80066fa:	4313      	orrs	r3, r2
 80066fc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	01db      	lsls	r3, r3, #7
 8006708:	4413      	add	r3, r2
 800670a:	3384      	adds	r3, #132	; 0x84
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	461a      	mov	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	01db      	lsls	r3, r3, #7
 8006718:	4413      	add	r3, r2
 800671a:	3384      	adds	r3, #132	; 0x84
 800671c:	461a      	mov	r2, r3
 800671e:	2300      	movs	r3, #0
 8006720:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	01db      	lsls	r3, r3, #7
 800672c:	4413      	add	r3, r2
 800672e:	3384      	adds	r3, #132	; 0x84
 8006730:	461a      	mov	r2, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d102      	bne.n	8006746 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006740:	2304      	movs	r3, #4
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	e01b      	b.n	800677e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d102      	bne.n	8006754 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800674e:	2303      	movs	r3, #3
 8006750:	61fb      	str	r3, [r7, #28]
 8006752:	e014      	b.n	800677e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	2b04      	cmp	r3, #4
 800675a:	d00b      	beq.n	8006774 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006760:	2b02      	cmp	r3, #2
 8006762:	d007      	beq.n	8006774 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006768:	2b03      	cmp	r3, #3
 800676a:	d003      	beq.n	8006774 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006770:	2b07      	cmp	r3, #7
 8006772:	d102      	bne.n	800677a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006774:	2302      	movs	r3, #2
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	e001      	b.n	800677e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800677a:	2301      	movs	r3, #1
 800677c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	01db      	lsls	r3, r3, #7
 8006788:	4413      	add	r3, r2
 800678a:	3384      	adds	r3, #132	; 0x84
 800678c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	4611      	mov	r1, r2
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	01d2      	lsls	r2, r2, #7
 8006798:	440a      	add	r2, r1
 800679a:	3284      	adds	r2, #132	; 0x84
 800679c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80067a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	69fa      	ldr	r2, [r7, #28]
 80067a8:	fb02 f303 	mul.w	r3, r2, r3
 80067ac:	041a      	lsls	r2, r3, #16
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6859      	ldr	r1, [r3, #4]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	1acb      	subs	r3, r1, r3
 80067b8:	69f9      	ldr	r1, [r7, #28]
 80067ba:	fb01 f303 	mul.w	r3, r1, r3
 80067be:	3303      	adds	r3, #3
 80067c0:	68f9      	ldr	r1, [r7, #12]
 80067c2:	6809      	ldr	r1, [r1, #0]
 80067c4:	4608      	mov	r0, r1
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	01c9      	lsls	r1, r1, #7
 80067ca:	4401      	add	r1, r0
 80067cc:	3184      	adds	r1, #132	; 0x84
 80067ce:	4313      	orrs	r3, r2
 80067d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	01db      	lsls	r3, r3, #7
 80067dc:	4413      	add	r3, r2
 80067de:	3384      	adds	r3, #132	; 0x84
 80067e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4619      	mov	r1, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	01db      	lsls	r3, r3, #7
 80067ec:	440b      	add	r3, r1
 80067ee:	3384      	adds	r3, #132	; 0x84
 80067f0:	4619      	mov	r1, r3
 80067f2:	4b14      	ldr	r3, [pc, #80]	; (8006844 <LTDC_SetConfig+0x330>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	01db      	lsls	r3, r3, #7
 8006802:	4413      	add	r3, r2
 8006804:	3384      	adds	r3, #132	; 0x84
 8006806:	461a      	mov	r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	01db      	lsls	r3, r3, #7
 8006818:	4413      	add	r3, r2
 800681a:	3384      	adds	r3, #132	; 0x84
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	4611      	mov	r1, r2
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	01d2      	lsls	r2, r2, #7
 8006828:	440a      	add	r2, r1
 800682a:	3284      	adds	r2, #132	; 0x84
 800682c:	f043 0301 	orr.w	r3, r3, #1
 8006830:	6013      	str	r3, [r2, #0]
}
 8006832:	bf00      	nop
 8006834:	3724      	adds	r7, #36	; 0x24
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	fffff8f8 	.word	0xfffff8f8
 8006844:	fffff800 	.word	0xfffff800

08006848 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800684c:	4b05      	ldr	r3, [pc, #20]	; (8006864 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a04      	ldr	r2, [pc, #16]	; (8006864 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006856:	6013      	str	r3, [r2, #0]
}
 8006858:	bf00      	nop
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40007000 	.word	0x40007000

08006868 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800686e:	2300      	movs	r3, #0
 8006870:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006872:	4b23      	ldr	r3, [pc, #140]	; (8006900 <HAL_PWREx_EnableOverDrive+0x98>)
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	4a22      	ldr	r2, [pc, #136]	; (8006900 <HAL_PWREx_EnableOverDrive+0x98>)
 8006878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800687c:	6413      	str	r3, [r2, #64]	; 0x40
 800687e:	4b20      	ldr	r3, [pc, #128]	; (8006900 <HAL_PWREx_EnableOverDrive+0x98>)
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800688a:	4b1e      	ldr	r3, [pc, #120]	; (8006904 <HAL_PWREx_EnableOverDrive+0x9c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a1d      	ldr	r2, [pc, #116]	; (8006904 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006894:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006896:	f7fb fda3 	bl	80023e0 <HAL_GetTick>
 800689a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800689c:	e009      	b.n	80068b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800689e:	f7fb fd9f 	bl	80023e0 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ac:	d901      	bls.n	80068b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e022      	b.n	80068f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80068b2:	4b14      	ldr	r3, [pc, #80]	; (8006904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068be:	d1ee      	bne.n	800689e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80068c0:	4b10      	ldr	r3, [pc, #64]	; (8006904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a0f      	ldr	r2, [pc, #60]	; (8006904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068cc:	f7fb fd88 	bl	80023e0 <HAL_GetTick>
 80068d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068d2:	e009      	b.n	80068e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80068d4:	f7fb fd84 	bl	80023e0 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068e2:	d901      	bls.n	80068e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e007      	b.n	80068f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068f4:	d1ee      	bne.n	80068d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40023800 	.word	0x40023800
 8006904:	40007000 	.word	0x40007000

08006908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006910:	2300      	movs	r3, #0
 8006912:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e291      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 8087 	beq.w	8006a3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800692c:	4b96      	ldr	r3, [pc, #600]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 030c 	and.w	r3, r3, #12
 8006934:	2b04      	cmp	r3, #4
 8006936:	d00c      	beq.n	8006952 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006938:	4b93      	ldr	r3, [pc, #588]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f003 030c 	and.w	r3, r3, #12
 8006940:	2b08      	cmp	r3, #8
 8006942:	d112      	bne.n	800696a <HAL_RCC_OscConfig+0x62>
 8006944:	4b90      	ldr	r3, [pc, #576]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800694c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006950:	d10b      	bne.n	800696a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006952:	4b8d      	ldr	r3, [pc, #564]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d06c      	beq.n	8006a38 <HAL_RCC_OscConfig+0x130>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d168      	bne.n	8006a38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e26b      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006972:	d106      	bne.n	8006982 <HAL_RCC_OscConfig+0x7a>
 8006974:	4b84      	ldr	r3, [pc, #528]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a83      	ldr	r2, [pc, #524]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 800697a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	e02e      	b.n	80069e0 <HAL_RCC_OscConfig+0xd8>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10c      	bne.n	80069a4 <HAL_RCC_OscConfig+0x9c>
 800698a:	4b7f      	ldr	r3, [pc, #508]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a7e      	ldr	r2, [pc, #504]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	4b7c      	ldr	r3, [pc, #496]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a7b      	ldr	r2, [pc, #492]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 800699c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	e01d      	b.n	80069e0 <HAL_RCC_OscConfig+0xd8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069ac:	d10c      	bne.n	80069c8 <HAL_RCC_OscConfig+0xc0>
 80069ae:	4b76      	ldr	r3, [pc, #472]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a75      	ldr	r2, [pc, #468]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 80069b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	4b73      	ldr	r3, [pc, #460]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a72      	ldr	r2, [pc, #456]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 80069c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	e00b      	b.n	80069e0 <HAL_RCC_OscConfig+0xd8>
 80069c8:	4b6f      	ldr	r3, [pc, #444]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a6e      	ldr	r2, [pc, #440]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 80069ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	4b6c      	ldr	r3, [pc, #432]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a6b      	ldr	r2, [pc, #428]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 80069da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d013      	beq.n	8006a10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e8:	f7fb fcfa 	bl	80023e0 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069f0:	f7fb fcf6 	bl	80023e0 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b64      	cmp	r3, #100	; 0x64
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e21f      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a02:	4b61      	ldr	r3, [pc, #388]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0xe8>
 8006a0e:	e014      	b.n	8006a3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fb fce6 	bl	80023e0 <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a18:	f7fb fce2 	bl	80023e0 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b64      	cmp	r3, #100	; 0x64
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e20b      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a2a:	4b57      	ldr	r3, [pc, #348]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1f0      	bne.n	8006a18 <HAL_RCC_OscConfig+0x110>
 8006a36:	e000      	b.n	8006a3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d069      	beq.n	8006b1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a46:	4b50      	ldr	r3, [pc, #320]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 030c 	and.w	r3, r3, #12
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00b      	beq.n	8006a6a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a52:	4b4d      	ldr	r3, [pc, #308]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 030c 	and.w	r3, r3, #12
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d11c      	bne.n	8006a98 <HAL_RCC_OscConfig+0x190>
 8006a5e:	4b4a      	ldr	r3, [pc, #296]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d116      	bne.n	8006a98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a6a:	4b47      	ldr	r3, [pc, #284]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <HAL_RCC_OscConfig+0x17a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d001      	beq.n	8006a82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e1df      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a82:	4b41      	ldr	r3, [pc, #260]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	493d      	ldr	r1, [pc, #244]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a96:	e040      	b.n	8006b1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d023      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006aa0:	4b39      	ldr	r3, [pc, #228]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a38      	ldr	r2, [pc, #224]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fb fc98 	bl	80023e0 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab4:	f7fb fc94 	bl	80023e0 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e1bd      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac6:	4b30      	ldr	r3, [pc, #192]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0f0      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad2:	4b2d      	ldr	r3, [pc, #180]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	4929      	ldr	r1, [pc, #164]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	600b      	str	r3, [r1, #0]
 8006ae6:	e018      	b.n	8006b1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ae8:	4b27      	ldr	r3, [pc, #156]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a26      	ldr	r2, [pc, #152]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006aee:	f023 0301 	bic.w	r3, r3, #1
 8006af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fb fc74 	bl	80023e0 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006afc:	f7fb fc70 	bl	80023e0 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e199      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b0e:	4b1e      	ldr	r3, [pc, #120]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1f0      	bne.n	8006afc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0308 	and.w	r3, r3, #8
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d038      	beq.n	8006b98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d019      	beq.n	8006b62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b2e:	4b16      	ldr	r3, [pc, #88]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b32:	4a15      	ldr	r2, [pc, #84]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006b34:	f043 0301 	orr.w	r3, r3, #1
 8006b38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3a:	f7fb fc51 	bl	80023e0 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b42:	f7fb fc4d 	bl	80023e0 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e176      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b54:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCC_OscConfig+0x23a>
 8006b60:	e01a      	b.n	8006b98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b62:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b66:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <HAL_RCC_OscConfig+0x280>)
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6e:	f7fb fc37 	bl	80023e0 <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b74:	e00a      	b.n	8006b8c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b76:	f7fb fc33 	bl	80023e0 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d903      	bls.n	8006b8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e15c      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
 8006b88:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b8c:	4b91      	ldr	r3, [pc, #580]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1ee      	bne.n	8006b76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80a4 	beq.w	8006cee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ba6:	4b8b      	ldr	r3, [pc, #556]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10d      	bne.n	8006bce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bb2:	4b88      	ldr	r3, [pc, #544]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	4a87      	ldr	r2, [pc, #540]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006bbe:	4b85      	ldr	r3, [pc, #532]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	60bb      	str	r3, [r7, #8]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bce:	4b82      	ldr	r3, [pc, #520]	; (8006dd8 <HAL_RCC_OscConfig+0x4d0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d118      	bne.n	8006c0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006bda:	4b7f      	ldr	r3, [pc, #508]	; (8006dd8 <HAL_RCC_OscConfig+0x4d0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a7e      	ldr	r2, [pc, #504]	; (8006dd8 <HAL_RCC_OscConfig+0x4d0>)
 8006be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006be6:	f7fb fbfb 	bl	80023e0 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bee:	f7fb fbf7 	bl	80023e0 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b64      	cmp	r3, #100	; 0x64
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e120      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c00:	4b75      	ldr	r3, [pc, #468]	; (8006dd8 <HAL_RCC_OscConfig+0x4d0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0f0      	beq.n	8006bee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d106      	bne.n	8006c22 <HAL_RCC_OscConfig+0x31a>
 8006c14:	4b6f      	ldr	r3, [pc, #444]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c18:	4a6e      	ldr	r2, [pc, #440]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c20:	e02d      	b.n	8006c7e <HAL_RCC_OscConfig+0x376>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10c      	bne.n	8006c44 <HAL_RCC_OscConfig+0x33c>
 8006c2a:	4b6a      	ldr	r3, [pc, #424]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	4a69      	ldr	r2, [pc, #420]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	6713      	str	r3, [r2, #112]	; 0x70
 8006c36:	4b67      	ldr	r3, [pc, #412]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3a:	4a66      	ldr	r2, [pc, #408]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c3c:	f023 0304 	bic.w	r3, r3, #4
 8006c40:	6713      	str	r3, [r2, #112]	; 0x70
 8006c42:	e01c      	b.n	8006c7e <HAL_RCC_OscConfig+0x376>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	2b05      	cmp	r3, #5
 8006c4a:	d10c      	bne.n	8006c66 <HAL_RCC_OscConfig+0x35e>
 8006c4c:	4b61      	ldr	r3, [pc, #388]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c50:	4a60      	ldr	r2, [pc, #384]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c52:	f043 0304 	orr.w	r3, r3, #4
 8006c56:	6713      	str	r3, [r2, #112]	; 0x70
 8006c58:	4b5e      	ldr	r3, [pc, #376]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5c:	4a5d      	ldr	r2, [pc, #372]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c5e:	f043 0301 	orr.w	r3, r3, #1
 8006c62:	6713      	str	r3, [r2, #112]	; 0x70
 8006c64:	e00b      	b.n	8006c7e <HAL_RCC_OscConfig+0x376>
 8006c66:	4b5b      	ldr	r3, [pc, #364]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6a:	4a5a      	ldr	r2, [pc, #360]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	6713      	str	r3, [r2, #112]	; 0x70
 8006c72:	4b58      	ldr	r3, [pc, #352]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c76:	4a57      	ldr	r2, [pc, #348]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006c78:	f023 0304 	bic.w	r3, r3, #4
 8006c7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d015      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c86:	f7fb fbab 	bl	80023e0 <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c8c:	e00a      	b.n	8006ca4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c8e:	f7fb fba7 	bl	80023e0 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e0ce      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca4:	4b4b      	ldr	r3, [pc, #300]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0ee      	beq.n	8006c8e <HAL_RCC_OscConfig+0x386>
 8006cb0:	e014      	b.n	8006cdc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb2:	f7fb fb95 	bl	80023e0 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cb8:	e00a      	b.n	8006cd0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cba:	f7fb fb91 	bl	80023e0 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e0b8      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cd0:	4b40      	ldr	r3, [pc, #256]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1ee      	bne.n	8006cba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d105      	bne.n	8006cee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ce2:	4b3c      	ldr	r3, [pc, #240]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	4a3b      	ldr	r2, [pc, #236]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 80a4 	beq.w	8006e40 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cf8:	4b36      	ldr	r3, [pc, #216]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 030c 	and.w	r3, r3, #12
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d06b      	beq.n	8006ddc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d149      	bne.n	8006da0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d0c:	4b31      	ldr	r3, [pc, #196]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a30      	ldr	r2, [pc, #192]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d18:	f7fb fb62 	bl	80023e0 <HAL_GetTick>
 8006d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d20:	f7fb fb5e 	bl	80023e0 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e087      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d32:	4b28      	ldr	r3, [pc, #160]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f0      	bne.n	8006d20 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69da      	ldr	r2, [r3, #28]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	431a      	orrs	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	019b      	lsls	r3, r3, #6
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d54:	085b      	lsrs	r3, r3, #1
 8006d56:	3b01      	subs	r3, #1
 8006d58:	041b      	lsls	r3, r3, #16
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	061b      	lsls	r3, r3, #24
 8006d62:	4313      	orrs	r3, r2
 8006d64:	4a1b      	ldr	r2, [pc, #108]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006d66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d6a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d6c:	4b19      	ldr	r3, [pc, #100]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a18      	ldr	r2, [pc, #96]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d78:	f7fb fb32 	bl	80023e0 <HAL_GetTick>
 8006d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d80:	f7fb fb2e 	bl	80023e0 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e057      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d92:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0f0      	beq.n	8006d80 <HAL_RCC_OscConfig+0x478>
 8006d9e:	e04f      	b.n	8006e40 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da0:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a0b      	ldr	r2, [pc, #44]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dac:	f7fb fb18 	bl	80023e0 <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db4:	f7fb fb14 	bl	80023e0 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e03d      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc6:	4b03      	ldr	r3, [pc, #12]	; (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f0      	bne.n	8006db4 <HAL_RCC_OscConfig+0x4ac>
 8006dd2:	e035      	b.n	8006e40 <HAL_RCC_OscConfig+0x538>
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006ddc:	4b1b      	ldr	r3, [pc, #108]	; (8006e4c <HAL_RCC_OscConfig+0x544>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d028      	beq.n	8006e3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d121      	bne.n	8006e3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d11a      	bne.n	8006e3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d111      	bne.n	8006e3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	085b      	lsrs	r3, r3, #1
 8006e24:	3b01      	subs	r3, #1
 8006e26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d107      	bne.n	8006e3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d001      	beq.n	8006e40 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e000      	b.n	8006e42 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40023800 	.word	0x40023800

08006e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e0d0      	b.n	800700a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e68:	4b6a      	ldr	r3, [pc, #424]	; (8007014 <HAL_RCC_ClockConfig+0x1c4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 030f 	and.w	r3, r3, #15
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d910      	bls.n	8006e98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e76:	4b67      	ldr	r3, [pc, #412]	; (8007014 <HAL_RCC_ClockConfig+0x1c4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f023 020f 	bic.w	r2, r3, #15
 8006e7e:	4965      	ldr	r1, [pc, #404]	; (8007014 <HAL_RCC_ClockConfig+0x1c4>)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e86:	4b63      	ldr	r3, [pc, #396]	; (8007014 <HAL_RCC_ClockConfig+0x1c4>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 030f 	and.w	r3, r3, #15
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d001      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0b8      	b.n	800700a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d020      	beq.n	8006ee6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006eb0:	4b59      	ldr	r3, [pc, #356]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	4a58      	ldr	r2, [pc, #352]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006eba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ec8:	4b53      	ldr	r3, [pc, #332]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	4a52      	ldr	r2, [pc, #328]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ed2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ed4:	4b50      	ldr	r3, [pc, #320]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	494d      	ldr	r1, [pc, #308]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d040      	beq.n	8006f74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d107      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efa:	4b47      	ldr	r3, [pc, #284]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d115      	bne.n	8006f32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e07f      	b.n	800700a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d107      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f12:	4b41      	ldr	r3, [pc, #260]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d109      	bne.n	8006f32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e073      	b.n	800700a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f22:	4b3d      	ldr	r3, [pc, #244]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e06b      	b.n	800700a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f32:	4b39      	ldr	r3, [pc, #228]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f023 0203 	bic.w	r2, r3, #3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	4936      	ldr	r1, [pc, #216]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f44:	f7fb fa4c 	bl	80023e0 <HAL_GetTick>
 8006f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f4a:	e00a      	b.n	8006f62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f4c:	f7fb fa48 	bl	80023e0 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e053      	b.n	800700a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f62:	4b2d      	ldr	r3, [pc, #180]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 020c 	and.w	r2, r3, #12
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d1eb      	bne.n	8006f4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f74:	4b27      	ldr	r3, [pc, #156]	; (8007014 <HAL_RCC_ClockConfig+0x1c4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d210      	bcs.n	8006fa4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f82:	4b24      	ldr	r3, [pc, #144]	; (8007014 <HAL_RCC_ClockConfig+0x1c4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f023 020f 	bic.w	r2, r3, #15
 8006f8a:	4922      	ldr	r1, [pc, #136]	; (8007014 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f92:	4b20      	ldr	r3, [pc, #128]	; (8007014 <HAL_RCC_ClockConfig+0x1c4>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d001      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e032      	b.n	800700a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d008      	beq.n	8006fc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fb0:	4b19      	ldr	r3, [pc, #100]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4916      	ldr	r1, [pc, #88]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fce:	4b12      	ldr	r3, [pc, #72]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	490e      	ldr	r1, [pc, #56]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fe2:	f000 f821 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <HAL_RCC_ClockConfig+0x1c8>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	091b      	lsrs	r3, r3, #4
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	490a      	ldr	r1, [pc, #40]	; (800701c <HAL_RCC_ClockConfig+0x1cc>)
 8006ff4:	5ccb      	ldrb	r3, [r1, r3]
 8006ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffa:	4a09      	ldr	r2, [pc, #36]	; (8007020 <HAL_RCC_ClockConfig+0x1d0>)
 8006ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ffe:	4b09      	ldr	r3, [pc, #36]	; (8007024 <HAL_RCC_ClockConfig+0x1d4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f7fa fffc 	bl	8002000 <HAL_InitTick>

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	40023c00 	.word	0x40023c00
 8007018:	40023800 	.word	0x40023800
 800701c:	0801c1f4 	.word	0x0801c1f4
 8007020:	20000028 	.word	0x20000028
 8007024:	2000002c 	.word	0x2000002c

08007028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800702c:	b090      	sub	sp, #64	; 0x40
 800702e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
 8007034:	2300      	movs	r3, #0
 8007036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007038:	2300      	movs	r3, #0
 800703a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007040:	4b59      	ldr	r3, [pc, #356]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 030c 	and.w	r3, r3, #12
 8007048:	2b08      	cmp	r3, #8
 800704a:	d00d      	beq.n	8007068 <HAL_RCC_GetSysClockFreq+0x40>
 800704c:	2b08      	cmp	r3, #8
 800704e:	f200 80a1 	bhi.w	8007194 <HAL_RCC_GetSysClockFreq+0x16c>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_RCC_GetSysClockFreq+0x34>
 8007056:	2b04      	cmp	r3, #4
 8007058:	d003      	beq.n	8007062 <HAL_RCC_GetSysClockFreq+0x3a>
 800705a:	e09b      	b.n	8007194 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800705c:	4b53      	ldr	r3, [pc, #332]	; (80071ac <HAL_RCC_GetSysClockFreq+0x184>)
 800705e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007060:	e09b      	b.n	800719a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007062:	4b53      	ldr	r3, [pc, #332]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007064:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007066:	e098      	b.n	800719a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007068:	4b4f      	ldr	r3, [pc, #316]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007070:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007072:	4b4d      	ldr	r3, [pc, #308]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d028      	beq.n	80070d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800707e:	4b4a      	ldr	r3, [pc, #296]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	099b      	lsrs	r3, r3, #6
 8007084:	2200      	movs	r2, #0
 8007086:	623b      	str	r3, [r7, #32]
 8007088:	627a      	str	r2, [r7, #36]	; 0x24
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007090:	2100      	movs	r1, #0
 8007092:	4b47      	ldr	r3, [pc, #284]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007094:	fb03 f201 	mul.w	r2, r3, r1
 8007098:	2300      	movs	r3, #0
 800709a:	fb00 f303 	mul.w	r3, r0, r3
 800709e:	4413      	add	r3, r2
 80070a0:	4a43      	ldr	r2, [pc, #268]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80070a2:	fba0 1202 	umull	r1, r2, r0, r2
 80070a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070a8:	460a      	mov	r2, r1
 80070aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80070ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ae:	4413      	add	r3, r2
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b4:	2200      	movs	r2, #0
 80070b6:	61bb      	str	r3, [r7, #24]
 80070b8:	61fa      	str	r2, [r7, #28]
 80070ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80070c2:	f7f9 f8fd 	bl	80002c0 <__aeabi_uldivmod>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4613      	mov	r3, r2
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ce:	e053      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070d0:	4b35      	ldr	r3, [pc, #212]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	099b      	lsrs	r3, r3, #6
 80070d6:	2200      	movs	r2, #0
 80070d8:	613b      	str	r3, [r7, #16]
 80070da:	617a      	str	r2, [r7, #20]
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80070e2:	f04f 0b00 	mov.w	fp, #0
 80070e6:	4652      	mov	r2, sl
 80070e8:	465b      	mov	r3, fp
 80070ea:	f04f 0000 	mov.w	r0, #0
 80070ee:	f04f 0100 	mov.w	r1, #0
 80070f2:	0159      	lsls	r1, r3, #5
 80070f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070f8:	0150      	lsls	r0, r2, #5
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	ebb2 080a 	subs.w	r8, r2, sl
 8007102:	eb63 090b 	sbc.w	r9, r3, fp
 8007106:	f04f 0200 	mov.w	r2, #0
 800710a:	f04f 0300 	mov.w	r3, #0
 800710e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007112:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007116:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800711a:	ebb2 0408 	subs.w	r4, r2, r8
 800711e:	eb63 0509 	sbc.w	r5, r3, r9
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	00eb      	lsls	r3, r5, #3
 800712c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007130:	00e2      	lsls	r2, r4, #3
 8007132:	4614      	mov	r4, r2
 8007134:	461d      	mov	r5, r3
 8007136:	eb14 030a 	adds.w	r3, r4, sl
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	eb45 030b 	adc.w	r3, r5, fp
 8007140:	607b      	str	r3, [r7, #4]
 8007142:	f04f 0200 	mov.w	r2, #0
 8007146:	f04f 0300 	mov.w	r3, #0
 800714a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800714e:	4629      	mov	r1, r5
 8007150:	028b      	lsls	r3, r1, #10
 8007152:	4621      	mov	r1, r4
 8007154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007158:	4621      	mov	r1, r4
 800715a:	028a      	lsls	r2, r1, #10
 800715c:	4610      	mov	r0, r2
 800715e:	4619      	mov	r1, r3
 8007160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007162:	2200      	movs	r2, #0
 8007164:	60bb      	str	r3, [r7, #8]
 8007166:	60fa      	str	r2, [r7, #12]
 8007168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800716c:	f7f9 f8a8 	bl	80002c0 <__aeabi_uldivmod>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4613      	mov	r3, r2
 8007176:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007178:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	0c1b      	lsrs	r3, r3, #16
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	3301      	adds	r3, #1
 8007184:	005b      	lsls	r3, r3, #1
 8007186:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007190:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007192:	e002      	b.n	800719a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007194:	4b05      	ldr	r3, [pc, #20]	; (80071ac <HAL_RCC_GetSysClockFreq+0x184>)
 8007196:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800719c:	4618      	mov	r0, r3
 800719e:	3740      	adds	r7, #64	; 0x40
 80071a0:	46bd      	mov	sp, r7
 80071a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071a6:	bf00      	nop
 80071a8:	40023800 	.word	0x40023800
 80071ac:	00f42400 	.word	0x00f42400
 80071b0:	017d7840 	.word	0x017d7840

080071b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071b8:	4b03      	ldr	r3, [pc, #12]	; (80071c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80071ba:	681b      	ldr	r3, [r3, #0]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	20000028 	.word	0x20000028

080071cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071d0:	f7ff fff0 	bl	80071b4 <HAL_RCC_GetHCLKFreq>
 80071d4:	4602      	mov	r2, r0
 80071d6:	4b05      	ldr	r3, [pc, #20]	; (80071ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	0a9b      	lsrs	r3, r3, #10
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	4903      	ldr	r1, [pc, #12]	; (80071f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071e2:	5ccb      	ldrb	r3, [r1, r3]
 80071e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	40023800 	.word	0x40023800
 80071f0:	0801c204 	.word	0x0801c204

080071f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071f8:	f7ff ffdc 	bl	80071b4 <HAL_RCC_GetHCLKFreq>
 80071fc:	4602      	mov	r2, r0
 80071fe:	4b05      	ldr	r3, [pc, #20]	; (8007214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	0b5b      	lsrs	r3, r3, #13
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	4903      	ldr	r1, [pc, #12]	; (8007218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800720a:	5ccb      	ldrb	r3, [r1, r3]
 800720c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007210:	4618      	mov	r0, r3
 8007212:	bd80      	pop	{r7, pc}
 8007214:	40023800 	.word	0x40023800
 8007218:	0801c204 	.word	0x0801c204

0800721c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	220f      	movs	r2, #15
 800722a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800722c:	4b12      	ldr	r3, [pc, #72]	; (8007278 <HAL_RCC_GetClockConfig+0x5c>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0203 	and.w	r2, r3, #3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007238:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <HAL_RCC_GetClockConfig+0x5c>)
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007244:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <HAL_RCC_GetClockConfig+0x5c>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007250:	4b09      	ldr	r3, [pc, #36]	; (8007278 <HAL_RCC_GetClockConfig+0x5c>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	08db      	lsrs	r3, r3, #3
 8007256:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800725e:	4b07      	ldr	r3, [pc, #28]	; (800727c <HAL_RCC_GetClockConfig+0x60>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 020f 	and.w	r2, r3, #15
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	601a      	str	r2, [r3, #0]
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40023800 	.word	0x40023800
 800727c:	40023c00 	.word	0x40023c00

08007280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d012      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072a8:	4b69      	ldr	r3, [pc, #420]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	4a68      	ldr	r2, [pc, #416]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80072b2:	6093      	str	r3, [r2, #8]
 80072b4:	4b66      	ldr	r3, [pc, #408]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072bc:	4964      	ldr	r1, [pc, #400]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80072ca:	2301      	movs	r3, #1
 80072cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d017      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072da:	4b5d      	ldr	r3, [pc, #372]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e8:	4959      	ldr	r1, [pc, #356]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072f8:	d101      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80072fa:	2301      	movs	r3, #1
 80072fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007306:	2301      	movs	r3, #1
 8007308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d017      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007316:	4b4e      	ldr	r3, [pc, #312]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800731c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007324:	494a      	ldr	r1, [pc, #296]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007334:	d101      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007336:	2301      	movs	r3, #1
 8007338:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007342:	2301      	movs	r3, #1
 8007344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007352:	2301      	movs	r3, #1
 8007354:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 808b 	beq.w	800747a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007364:	4b3a      	ldr	r3, [pc, #232]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	4a39      	ldr	r2, [pc, #228]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800736a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800736e:	6413      	str	r3, [r2, #64]	; 0x40
 8007370:	4b37      	ldr	r3, [pc, #220]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007378:	60bb      	str	r3, [r7, #8]
 800737a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800737c:	4b35      	ldr	r3, [pc, #212]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a34      	ldr	r2, [pc, #208]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007388:	f7fb f82a 	bl	80023e0 <HAL_GetTick>
 800738c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800738e:	e008      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007390:	f7fb f826 	bl	80023e0 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b64      	cmp	r3, #100	; 0x64
 800739c:	d901      	bls.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e357      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80073a2:	4b2c      	ldr	r3, [pc, #176]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0f0      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073ae:	4b28      	ldr	r3, [pc, #160]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d035      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d02e      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073cc:	4b20      	ldr	r3, [pc, #128]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073d6:	4b1e      	ldr	r3, [pc, #120]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073da:	4a1d      	ldr	r2, [pc, #116]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073e2:	4b1b      	ldr	r3, [pc, #108]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e6:	4a1a      	ldr	r2, [pc, #104]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80073ee:	4a18      	ldr	r2, [pc, #96]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073f4:	4b16      	ldr	r3, [pc, #88]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d114      	bne.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007400:	f7fa ffee 	bl	80023e0 <HAL_GetTick>
 8007404:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007406:	e00a      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007408:	f7fa ffea 	bl	80023e0 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	f241 3288 	movw	r2, #5000	; 0x1388
 8007416:	4293      	cmp	r3, r2
 8007418:	d901      	bls.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e319      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800741e:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0ee      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007436:	d111      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007438:	4b05      	ldr	r3, [pc, #20]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007444:	4b04      	ldr	r3, [pc, #16]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007446:	400b      	ands	r3, r1
 8007448:	4901      	ldr	r1, [pc, #4]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800744a:	4313      	orrs	r3, r2
 800744c:	608b      	str	r3, [r1, #8]
 800744e:	e00b      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007450:	40023800 	.word	0x40023800
 8007454:	40007000 	.word	0x40007000
 8007458:	0ffffcff 	.word	0x0ffffcff
 800745c:	4baa      	ldr	r3, [pc, #680]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	4aa9      	ldr	r2, [pc, #676]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007462:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007466:	6093      	str	r3, [r2, #8]
 8007468:	4ba7      	ldr	r3, [pc, #668]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800746a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007474:	49a4      	ldr	r1, [pc, #656]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007476:	4313      	orrs	r3, r2
 8007478:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	2b00      	cmp	r3, #0
 8007484:	d010      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007486:	4ba0      	ldr	r3, [pc, #640]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800748c:	4a9e      	ldr	r2, [pc, #632]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800748e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007492:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007496:	4b9c      	ldr	r3, [pc, #624]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007498:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	4999      	ldr	r1, [pc, #612]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00a      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074b4:	4b94      	ldr	r3, [pc, #592]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c2:	4991      	ldr	r1, [pc, #580]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074d6:	4b8c      	ldr	r3, [pc, #560]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074e4:	4988      	ldr	r1, [pc, #544]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074f8:	4b83      	ldr	r3, [pc, #524]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007506:	4980      	ldr	r1, [pc, #512]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007508:	4313      	orrs	r3, r2
 800750a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800751a:	4b7b      	ldr	r3, [pc, #492]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800751c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007528:	4977      	ldr	r1, [pc, #476]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800752a:	4313      	orrs	r3, r2
 800752c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800753c:	4b72      	ldr	r3, [pc, #456]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800753e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007542:	f023 0203 	bic.w	r2, r3, #3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754a:	496f      	ldr	r1, [pc, #444]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800754c:	4313      	orrs	r3, r2
 800754e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800755e:	4b6a      	ldr	r3, [pc, #424]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007564:	f023 020c 	bic.w	r2, r3, #12
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800756c:	4966      	ldr	r1, [pc, #408]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800756e:	4313      	orrs	r3, r2
 8007570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00a      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007580:	4b61      	ldr	r3, [pc, #388]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007586:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758e:	495e      	ldr	r1, [pc, #376]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007590:	4313      	orrs	r3, r2
 8007592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075a2:	4b59      	ldr	r3, [pc, #356]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b0:	4955      	ldr	r1, [pc, #340]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80075c4:	4b50      	ldr	r3, [pc, #320]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d2:	494d      	ldr	r1, [pc, #308]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80075e6:	4b48      	ldr	r3, [pc, #288]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f4:	4944      	ldr	r1, [pc, #272]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007608:	4b3f      	ldr	r3, [pc, #252]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800760a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007616:	493c      	ldr	r1, [pc, #240]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007618:	4313      	orrs	r3, r2
 800761a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800762a:	4b37      	ldr	r3, [pc, #220]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800762c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007638:	4933      	ldr	r1, [pc, #204]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800763a:	4313      	orrs	r3, r2
 800763c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800764c:	4b2e      	ldr	r3, [pc, #184]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007652:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800765a:	492b      	ldr	r1, [pc, #172]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800765c:	4313      	orrs	r3, r2
 800765e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d011      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800766e:	4b26      	ldr	r3, [pc, #152]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007674:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800767c:	4922      	ldr	r1, [pc, #136]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800768c:	d101      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800768e:	2301      	movs	r3, #1
 8007690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800769e:	2301      	movs	r3, #1
 80076a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076ae:	4b16      	ldr	r3, [pc, #88]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076bc:	4912      	ldr	r1, [pc, #72]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80076d0:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076e0:	4909      	ldr	r1, [pc, #36]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d006      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 80d9 	beq.w	80078ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076fc:	4b02      	ldr	r3, [pc, #8]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a01      	ldr	r2, [pc, #4]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007706:	e001      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007708:	40023800 	.word	0x40023800
 800770c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800770e:	f7fa fe67 	bl	80023e0 <HAL_GetTick>
 8007712:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007714:	e008      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007716:	f7fa fe63 	bl	80023e0 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b64      	cmp	r3, #100	; 0x64
 8007722:	d901      	bls.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e194      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007728:	4b6c      	ldr	r3, [pc, #432]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1f0      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d021      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007744:	2b00      	cmp	r3, #0
 8007746:	d11d      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007748:	4b64      	ldr	r3, [pc, #400]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800774a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800774e:	0c1b      	lsrs	r3, r3, #16
 8007750:	f003 0303 	and.w	r3, r3, #3
 8007754:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007756:	4b61      	ldr	r3, [pc, #388]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800775c:	0e1b      	lsrs	r3, r3, #24
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	019a      	lsls	r2, r3, #6
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	041b      	lsls	r3, r3, #16
 800776e:	431a      	orrs	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	061b      	lsls	r3, r3, #24
 8007774:	431a      	orrs	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	071b      	lsls	r3, r3, #28
 800777c:	4957      	ldr	r1, [pc, #348]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800777e:	4313      	orrs	r3, r2
 8007780:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d004      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007798:	d00a      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d02e      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077ae:	d129      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80077b0:	4b4a      	ldr	r3, [pc, #296]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077b6:	0c1b      	lsrs	r3, r3, #16
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80077be:	4b47      	ldr	r3, [pc, #284]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c4:	0f1b      	lsrs	r3, r3, #28
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	019a      	lsls	r2, r3, #6
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	041b      	lsls	r3, r3, #16
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	061b      	lsls	r3, r3, #24
 80077de:	431a      	orrs	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	071b      	lsls	r3, r3, #28
 80077e4:	493d      	ldr	r1, [pc, #244]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80077ec:	4b3b      	ldr	r3, [pc, #236]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077f2:	f023 021f 	bic.w	r2, r3, #31
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	3b01      	subs	r3, #1
 80077fc:	4937      	ldr	r1, [pc, #220]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01d      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007810:	4b32      	ldr	r3, [pc, #200]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007816:	0e1b      	lsrs	r3, r3, #24
 8007818:	f003 030f 	and.w	r3, r3, #15
 800781c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800781e:	4b2f      	ldr	r3, [pc, #188]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007824:	0f1b      	lsrs	r3, r3, #28
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	019a      	lsls	r2, r3, #6
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	041b      	lsls	r3, r3, #16
 8007838:	431a      	orrs	r2, r3
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	061b      	lsls	r3, r3, #24
 800783e:	431a      	orrs	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	071b      	lsls	r3, r3, #28
 8007844:	4925      	ldr	r1, [pc, #148]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007846:	4313      	orrs	r3, r2
 8007848:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d011      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	019a      	lsls	r2, r3, #6
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	041b      	lsls	r3, r3, #16
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	061b      	lsls	r3, r3, #24
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	071b      	lsls	r3, r3, #28
 8007874:	4919      	ldr	r1, [pc, #100]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007876:	4313      	orrs	r3, r2
 8007878:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800787c:	4b17      	ldr	r3, [pc, #92]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a16      	ldr	r2, [pc, #88]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007886:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007888:	f7fa fdaa 	bl	80023e0 <HAL_GetTick>
 800788c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800788e:	e008      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007890:	f7fa fda6 	bl	80023e0 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b64      	cmp	r3, #100	; 0x64
 800789c:	d901      	bls.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e0d7      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80078a2:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0f0      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	f040 80cd 	bne.w	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80078b6:	4b09      	ldr	r3, [pc, #36]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a08      	ldr	r2, [pc, #32]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c2:	f7fa fd8d 	bl	80023e0 <HAL_GetTick>
 80078c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078c8:	e00a      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80078ca:	f7fa fd89 	bl	80023e0 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	2b64      	cmp	r3, #100	; 0x64
 80078d6:	d903      	bls.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e0ba      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80078dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078e0:	4b5e      	ldr	r3, [pc, #376]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ec:	d0ed      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d009      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800790a:	2b00      	cmp	r3, #0
 800790c:	d02e      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d12a      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007916:	4b51      	ldr	r3, [pc, #324]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791c:	0c1b      	lsrs	r3, r3, #16
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007924:	4b4d      	ldr	r3, [pc, #308]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792a:	0f1b      	lsrs	r3, r3, #28
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	019a      	lsls	r2, r3, #6
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	041b      	lsls	r3, r3, #16
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	061b      	lsls	r3, r3, #24
 8007944:	431a      	orrs	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	071b      	lsls	r3, r3, #28
 800794a:	4944      	ldr	r1, [pc, #272]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800794c:	4313      	orrs	r3, r2
 800794e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007952:	4b42      	ldr	r3, [pc, #264]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007958:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007960:	3b01      	subs	r3, #1
 8007962:	021b      	lsls	r3, r3, #8
 8007964:	493d      	ldr	r1, [pc, #244]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007966:	4313      	orrs	r3, r2
 8007968:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d022      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800797c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007980:	d11d      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007982:	4b36      	ldr	r3, [pc, #216]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007988:	0e1b      	lsrs	r3, r3, #24
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007990:	4b32      	ldr	r3, [pc, #200]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007996:	0f1b      	lsrs	r3, r3, #28
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	019a      	lsls	r2, r3, #6
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	041b      	lsls	r3, r3, #16
 80079aa:	431a      	orrs	r2, r3
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	061b      	lsls	r3, r3, #24
 80079b0:	431a      	orrs	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	071b      	lsls	r3, r3, #28
 80079b6:	4929      	ldr	r1, [pc, #164]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0308 	and.w	r3, r3, #8
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d028      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80079ca:	4b24      	ldr	r3, [pc, #144]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d0:	0e1b      	lsrs	r3, r3, #24
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80079d8:	4b20      	ldr	r3, [pc, #128]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079de:	0c1b      	lsrs	r3, r3, #16
 80079e0:	f003 0303 	and.w	r3, r3, #3
 80079e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	019a      	lsls	r2, r3, #6
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	041b      	lsls	r3, r3, #16
 80079f0:	431a      	orrs	r2, r3
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	061b      	lsls	r3, r3, #24
 80079f6:	431a      	orrs	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	071b      	lsls	r3, r3, #28
 80079fe:	4917      	ldr	r1, [pc, #92]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007a06:	4b15      	ldr	r3, [pc, #84]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	4911      	ldr	r1, [pc, #68]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a1c:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a0e      	ldr	r2, [pc, #56]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a28:	f7fa fcda 	bl	80023e0 <HAL_GetTick>
 8007a2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a2e:	e008      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a30:	f7fa fcd6 	bl	80023e0 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b64      	cmp	r3, #100	; 0x64
 8007a3c:	d901      	bls.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e007      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a42:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a4e:	d1ef      	bne.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	40023800 	.word	0x40023800

08007a60 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e025      	b.n	8007ac0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7fa faaf 	bl	8001fec <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2202      	movs	r2, #2
 8007a92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	f002 fc45 	bl	800a330 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	f002 fc99 	bl	800a3e8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e09d      	b.n	8007c16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d108      	bne.n	8007af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aea:	d009      	beq.n	8007b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	61da      	str	r2, [r3, #28]
 8007af2:	e005      	b.n	8007b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fa f8d2 	bl	8001cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b40:	d902      	bls.n	8007b48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	e002      	b.n	8007b4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007b56:	d007      	beq.n	8007b68 <HAL_SPI_Init+0xa0>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b60:	d002      	beq.n	8007b68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007baa:	ea42 0103 	orr.w	r1, r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	0c1b      	lsrs	r3, r3, #16
 8007bc4:	f003 0204 	and.w	r2, r3, #4
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	f003 0310 	and.w	r3, r3, #16
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd6:	f003 0308 	and.w	r3, r3, #8
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007be4:	ea42 0103 	orr.w	r1, r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69da      	ldr	r2, [r3, #28]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b088      	sub	sp, #32
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	603b      	str	r3, [r7, #0]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d101      	bne.n	8007c40 <HAL_SPI_Transmit+0x22>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	e158      	b.n	8007ef2 <HAL_SPI_Transmit+0x2d4>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c48:	f7fa fbca 	bl	80023e0 <HAL_GetTick>
 8007c4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c4e:	88fb      	ldrh	r3, [r7, #6]
 8007c50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d002      	beq.n	8007c64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c5e:	2302      	movs	r3, #2
 8007c60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c62:	e13d      	b.n	8007ee0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <HAL_SPI_Transmit+0x52>
 8007c6a:	88fb      	ldrh	r3, [r7, #6]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d102      	bne.n	8007c76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c74:	e134      	b.n	8007ee0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2203      	movs	r2, #3
 8007c7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	88fa      	ldrh	r2, [r7, #6]
 8007c8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	88fa      	ldrh	r2, [r7, #6]
 8007c94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc0:	d10f      	bne.n	8007ce2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ce0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cec:	2b40      	cmp	r3, #64	; 0x40
 8007cee:	d007      	beq.n	8007d00 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d08:	d94b      	bls.n	8007da2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <HAL_SPI_Transmit+0xfa>
 8007d12:	8afb      	ldrh	r3, [r7, #22]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d13e      	bne.n	8007d96 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	881a      	ldrh	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d28:	1c9a      	adds	r2, r3, #2
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d3c:	e02b      	b.n	8007d96 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d112      	bne.n	8007d72 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	881a      	ldrh	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	1c9a      	adds	r2, r3, #2
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d70:	e011      	b.n	8007d96 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d72:	f7fa fb35 	bl	80023e0 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d803      	bhi.n	8007d8a <HAL_SPI_Transmit+0x16c>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d88:	d102      	bne.n	8007d90 <HAL_SPI_Transmit+0x172>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d102      	bne.n	8007d96 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d94:	e0a4      	b.n	8007ee0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1ce      	bne.n	8007d3e <HAL_SPI_Transmit+0x120>
 8007da0:	e07c      	b.n	8007e9c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HAL_SPI_Transmit+0x192>
 8007daa:	8afb      	ldrh	r3, [r7, #22]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d170      	bne.n	8007e92 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d912      	bls.n	8007de0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	881a      	ldrh	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dca:	1c9a      	adds	r2, r3, #2
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	3b02      	subs	r3, #2
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007dde:	e058      	b.n	8007e92 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	330c      	adds	r3, #12
 8007dea:	7812      	ldrb	r2, [r2, #0]
 8007dec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	1c5a      	adds	r2, r3, #1
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007e06:	e044      	b.n	8007e92 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d12b      	bne.n	8007e6e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d912      	bls.n	8007e46 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e24:	881a      	ldrh	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e30:	1c9a      	adds	r2, r3, #2
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	3b02      	subs	r3, #2
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e44:	e025      	b.n	8007e92 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	330c      	adds	r3, #12
 8007e50:	7812      	ldrb	r2, [r2, #0]
 8007e52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	3b01      	subs	r3, #1
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e6c:	e011      	b.n	8007e92 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e6e:	f7fa fab7 	bl	80023e0 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d803      	bhi.n	8007e86 <HAL_SPI_Transmit+0x268>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e84:	d102      	bne.n	8007e8c <HAL_SPI_Transmit+0x26e>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d102      	bne.n	8007e92 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e90:	e026      	b.n	8007ee0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1b5      	bne.n	8007e08 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 f949 	bl	8008138 <SPI_EndRxTxTransaction>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10a      	bne.n	8007ed0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eba:	2300      	movs	r3, #0
 8007ebc:	613b      	str	r3, [r7, #16]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	613b      	str	r3, [r7, #16]
 8007ece:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	77fb      	strb	r3, [r7, #31]
 8007edc:	e000      	b.n	8007ee0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007ede:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ef0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3720      	adds	r7, #32
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f0c:	f7fa fa68 	bl	80023e0 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	4413      	add	r3, r2
 8007f1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f1c:	f7fa fa60 	bl	80023e0 <HAL_GetTick>
 8007f20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f22:	4b39      	ldr	r3, [pc, #228]	; (8008008 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	015b      	lsls	r3, r3, #5
 8007f28:	0d1b      	lsrs	r3, r3, #20
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	fb02 f303 	mul.w	r3, r2, r3
 8007f30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f32:	e054      	b.n	8007fde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3a:	d050      	beq.n	8007fde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f3c:	f7fa fa50 	bl	80023e0 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d902      	bls.n	8007f52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d13d      	bne.n	8007fce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f6a:	d111      	bne.n	8007f90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f74:	d004      	beq.n	8007f80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f7e:	d107      	bne.n	8007f90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f98:	d10f      	bne.n	8007fba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e017      	b.n	8007ffe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	bf0c      	ite	eq
 8007fee:	2301      	moveq	r3, #1
 8007ff0:	2300      	movne	r3, #0
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d19b      	bne.n	8007f34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3720      	adds	r7, #32
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20000028 	.word	0x20000028

0800800c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08a      	sub	sp, #40	; 0x28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800801e:	f7fa f9df 	bl	80023e0 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	1a9b      	subs	r3, r3, r2
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	4413      	add	r3, r2
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800802e:	f7fa f9d7 	bl	80023e0 <HAL_GetTick>
 8008032:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	330c      	adds	r3, #12
 800803a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800803c:	4b3d      	ldr	r3, [pc, #244]	; (8008134 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	4613      	mov	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	00da      	lsls	r2, r3, #3
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	0d1b      	lsrs	r3, r3, #20
 800804c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800804e:	fb02 f303 	mul.w	r3, r2, r3
 8008052:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008054:	e060      	b.n	8008118 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800805c:	d107      	bne.n	800806e <SPI_WaitFifoStateUntilTimeout+0x62>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	b2db      	uxtb	r3, r3
 800806a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800806c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008074:	d050      	beq.n	8008118 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008076:	f7fa f9b3 	bl	80023e0 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008082:	429a      	cmp	r2, r3
 8008084:	d902      	bls.n	800808c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	d13d      	bne.n	8008108 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800809a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080a4:	d111      	bne.n	80080ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ae:	d004      	beq.n	80080ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b8:	d107      	bne.n	80080ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d2:	d10f      	bne.n	80080f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e010      	b.n	800812a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	3b01      	subs	r3, #1
 8008116:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689a      	ldr	r2, [r3, #8]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	4013      	ands	r3, r2
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	429a      	cmp	r2, r3
 8008126:	d196      	bne.n	8008056 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3728      	adds	r7, #40	; 0x28
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20000028 	.word	0x20000028

08008138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f7ff ff5b 	bl	800800c <SPI_WaitFifoStateUntilTimeout>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008160:	f043 0220 	orr.w	r2, r3, #32
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e046      	b.n	80081fa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800816c:	4b25      	ldr	r3, [pc, #148]	; (8008204 <SPI_EndRxTxTransaction+0xcc>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a25      	ldr	r2, [pc, #148]	; (8008208 <SPI_EndRxTxTransaction+0xd0>)
 8008172:	fba2 2303 	umull	r2, r3, r2, r3
 8008176:	0d5b      	lsrs	r3, r3, #21
 8008178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800817c:	fb02 f303 	mul.w	r3, r2, r3
 8008180:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800818a:	d112      	bne.n	80081b2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	2200      	movs	r2, #0
 8008194:	2180      	movs	r1, #128	; 0x80
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff feb0 	bl	8007efc <SPI_WaitFlagStateUntilTimeout>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d016      	beq.n	80081d0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a6:	f043 0220 	orr.w	r2, r3, #32
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e023      	b.n	80081fa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c8:	2b80      	cmp	r3, #128	; 0x80
 80081ca:	d0f2      	beq.n	80081b2 <SPI_EndRxTxTransaction+0x7a>
 80081cc:	e000      	b.n	80081d0 <SPI_EndRxTxTransaction+0x98>
        break;
 80081ce:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f7ff ff15 	bl	800800c <SPI_WaitFifoStateUntilTimeout>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d007      	beq.n	80081f8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ec:	f043 0220 	orr.w	r2, r3, #32
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e000      	b.n	80081fa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20000028 	.word	0x20000028
 8008208:	165e9f81 	.word	0x165e9f81

0800820c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e049      	b.n	80082b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d106      	bne.n	8008238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7f9 fda8 	bl	8001d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3304      	adds	r3, #4
 8008248:	4619      	mov	r1, r3
 800824a:	4610      	mov	r0, r2
 800824c:	f000 fcda 	bl	8008c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d001      	beq.n	80082d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e054      	b.n	800837e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2202      	movs	r2, #2
 80082d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0201 	orr.w	r2, r2, #1
 80082ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a26      	ldr	r2, [pc, #152]	; (800838c <HAL_TIM_Base_Start_IT+0xd0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d022      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x80>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082fe:	d01d      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x80>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a22      	ldr	r2, [pc, #136]	; (8008390 <HAL_TIM_Base_Start_IT+0xd4>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d018      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x80>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a21      	ldr	r2, [pc, #132]	; (8008394 <HAL_TIM_Base_Start_IT+0xd8>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d013      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x80>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a1f      	ldr	r2, [pc, #124]	; (8008398 <HAL_TIM_Base_Start_IT+0xdc>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00e      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x80>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a1e      	ldr	r2, [pc, #120]	; (800839c <HAL_TIM_Base_Start_IT+0xe0>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d009      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x80>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a1c      	ldr	r2, [pc, #112]	; (80083a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x80>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1b      	ldr	r2, [pc, #108]	; (80083a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d115      	bne.n	8008368 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	4b19      	ldr	r3, [pc, #100]	; (80083a8 <HAL_TIM_Base_Start_IT+0xec>)
 8008344:	4013      	ands	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b06      	cmp	r3, #6
 800834c:	d015      	beq.n	800837a <HAL_TIM_Base_Start_IT+0xbe>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008354:	d011      	beq.n	800837a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f042 0201 	orr.w	r2, r2, #1
 8008364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008366:	e008      	b.n	800837a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0201 	orr.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	e000      	b.n	800837c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800837a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40010000 	.word	0x40010000
 8008390:	40000400 	.word	0x40000400
 8008394:	40000800 	.word	0x40000800
 8008398:	40000c00 	.word	0x40000c00
 800839c:	40010400 	.word	0x40010400
 80083a0:	40014000 	.word	0x40014000
 80083a4:	40001800 	.word	0x40001800
 80083a8:	00010007 	.word	0x00010007

080083ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e049      	b.n	8008452 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d106      	bne.n	80083d8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f841 	bl	800845a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4619      	mov	r1, r3
 80083ea:	4610      	mov	r0, r2
 80083ec:	f000 fc0a 	bl	8008c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
	...

08008470 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d109      	bne.n	8008498 <HAL_TIM_OC_Start_IT+0x28>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b01      	cmp	r3, #1
 800848e:	bf14      	ite	ne
 8008490:	2301      	movne	r3, #1
 8008492:	2300      	moveq	r3, #0
 8008494:	b2db      	uxtb	r3, r3
 8008496:	e03c      	b.n	8008512 <HAL_TIM_OC_Start_IT+0xa2>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b04      	cmp	r3, #4
 800849c:	d109      	bne.n	80084b2 <HAL_TIM_OC_Start_IT+0x42>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	bf14      	ite	ne
 80084aa:	2301      	movne	r3, #1
 80084ac:	2300      	moveq	r3, #0
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	e02f      	b.n	8008512 <HAL_TIM_OC_Start_IT+0xa2>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d109      	bne.n	80084cc <HAL_TIM_OC_Start_IT+0x5c>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	bf14      	ite	ne
 80084c4:	2301      	movne	r3, #1
 80084c6:	2300      	moveq	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	e022      	b.n	8008512 <HAL_TIM_OC_Start_IT+0xa2>
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	2b0c      	cmp	r3, #12
 80084d0:	d109      	bne.n	80084e6 <HAL_TIM_OC_Start_IT+0x76>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b01      	cmp	r3, #1
 80084dc:	bf14      	ite	ne
 80084de:	2301      	movne	r3, #1
 80084e0:	2300      	moveq	r3, #0
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	e015      	b.n	8008512 <HAL_TIM_OC_Start_IT+0xa2>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b10      	cmp	r3, #16
 80084ea:	d109      	bne.n	8008500 <HAL_TIM_OC_Start_IT+0x90>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	bf14      	ite	ne
 80084f8:	2301      	movne	r3, #1
 80084fa:	2300      	moveq	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	e008      	b.n	8008512 <HAL_TIM_OC_Start_IT+0xa2>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b01      	cmp	r3, #1
 800850a:	bf14      	ite	ne
 800850c:	2301      	movne	r3, #1
 800850e:	2300      	moveq	r3, #0
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e0dd      	b.n	80086d6 <HAL_TIM_OC_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d104      	bne.n	800852a <HAL_TIM_OC_Start_IT+0xba>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2202      	movs	r2, #2
 8008524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008528:	e023      	b.n	8008572 <HAL_TIM_OC_Start_IT+0x102>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b04      	cmp	r3, #4
 800852e:	d104      	bne.n	800853a <HAL_TIM_OC_Start_IT+0xca>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008538:	e01b      	b.n	8008572 <HAL_TIM_OC_Start_IT+0x102>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b08      	cmp	r3, #8
 800853e:	d104      	bne.n	800854a <HAL_TIM_OC_Start_IT+0xda>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008548:	e013      	b.n	8008572 <HAL_TIM_OC_Start_IT+0x102>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b0c      	cmp	r3, #12
 800854e:	d104      	bne.n	800855a <HAL_TIM_OC_Start_IT+0xea>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2202      	movs	r2, #2
 8008554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008558:	e00b      	b.n	8008572 <HAL_TIM_OC_Start_IT+0x102>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b10      	cmp	r3, #16
 800855e:	d104      	bne.n	800856a <HAL_TIM_OC_Start_IT+0xfa>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008568:	e003      	b.n	8008572 <HAL_TIM_OC_Start_IT+0x102>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2202      	movs	r2, #2
 800856e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b0c      	cmp	r3, #12
 8008576:	d841      	bhi.n	80085fc <HAL_TIM_OC_Start_IT+0x18c>
 8008578:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <HAL_TIM_OC_Start_IT+0x110>)
 800857a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857e:	bf00      	nop
 8008580:	080085b5 	.word	0x080085b5
 8008584:	080085fd 	.word	0x080085fd
 8008588:	080085fd 	.word	0x080085fd
 800858c:	080085fd 	.word	0x080085fd
 8008590:	080085c7 	.word	0x080085c7
 8008594:	080085fd 	.word	0x080085fd
 8008598:	080085fd 	.word	0x080085fd
 800859c:	080085fd 	.word	0x080085fd
 80085a0:	080085d9 	.word	0x080085d9
 80085a4:	080085fd 	.word	0x080085fd
 80085a8:	080085fd 	.word	0x080085fd
 80085ac:	080085fd 	.word	0x080085fd
 80085b0:	080085eb 	.word	0x080085eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f042 0202 	orr.w	r2, r2, #2
 80085c2:	60da      	str	r2, [r3, #12]
      break;
 80085c4:	e01d      	b.n	8008602 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68da      	ldr	r2, [r3, #12]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f042 0204 	orr.w	r2, r2, #4
 80085d4:	60da      	str	r2, [r3, #12]
      break;
 80085d6:	e014      	b.n	8008602 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f042 0208 	orr.w	r2, r2, #8
 80085e6:	60da      	str	r2, [r3, #12]
      break;
 80085e8:	e00b      	b.n	8008602 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f042 0210 	orr.w	r2, r2, #16
 80085f8:	60da      	str	r2, [r3, #12]
      break;
 80085fa:	e002      	b.n	8008602 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008600:	bf00      	nop
  }

  if (status == HAL_OK)
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d165      	bne.n	80086d4 <HAL_TIM_OC_Start_IT+0x264>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2201      	movs	r2, #1
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fe8f 	bl	8009334 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a31      	ldr	r2, [pc, #196]	; (80086e0 <HAL_TIM_OC_Start_IT+0x270>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d004      	beq.n	800862a <HAL_TIM_OC_Start_IT+0x1ba>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a2f      	ldr	r2, [pc, #188]	; (80086e4 <HAL_TIM_OC_Start_IT+0x274>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d101      	bne.n	800862e <HAL_TIM_OC_Start_IT+0x1be>
 800862a:	2301      	movs	r3, #1
 800862c:	e000      	b.n	8008630 <HAL_TIM_OC_Start_IT+0x1c0>
 800862e:	2300      	movs	r3, #0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d007      	beq.n	8008644 <HAL_TIM_OC_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008642:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a25      	ldr	r2, [pc, #148]	; (80086e0 <HAL_TIM_OC_Start_IT+0x270>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d022      	beq.n	8008694 <HAL_TIM_OC_Start_IT+0x224>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008656:	d01d      	beq.n	8008694 <HAL_TIM_OC_Start_IT+0x224>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a22      	ldr	r2, [pc, #136]	; (80086e8 <HAL_TIM_OC_Start_IT+0x278>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d018      	beq.n	8008694 <HAL_TIM_OC_Start_IT+0x224>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a21      	ldr	r2, [pc, #132]	; (80086ec <HAL_TIM_OC_Start_IT+0x27c>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d013      	beq.n	8008694 <HAL_TIM_OC_Start_IT+0x224>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a1f      	ldr	r2, [pc, #124]	; (80086f0 <HAL_TIM_OC_Start_IT+0x280>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00e      	beq.n	8008694 <HAL_TIM_OC_Start_IT+0x224>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a1a      	ldr	r2, [pc, #104]	; (80086e4 <HAL_TIM_OC_Start_IT+0x274>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d009      	beq.n	8008694 <HAL_TIM_OC_Start_IT+0x224>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a1b      	ldr	r2, [pc, #108]	; (80086f4 <HAL_TIM_OC_Start_IT+0x284>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d004      	beq.n	8008694 <HAL_TIM_OC_Start_IT+0x224>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1a      	ldr	r2, [pc, #104]	; (80086f8 <HAL_TIM_OC_Start_IT+0x288>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d115      	bne.n	80086c0 <HAL_TIM_OC_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	4b18      	ldr	r3, [pc, #96]	; (80086fc <HAL_TIM_OC_Start_IT+0x28c>)
 800869c:	4013      	ands	r3, r2
 800869e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b06      	cmp	r3, #6
 80086a4:	d015      	beq.n	80086d2 <HAL_TIM_OC_Start_IT+0x262>
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ac:	d011      	beq.n	80086d2 <HAL_TIM_OC_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0201 	orr.w	r2, r2, #1
 80086bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086be:	e008      	b.n	80086d2 <HAL_TIM_OC_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f042 0201 	orr.w	r2, r2, #1
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	e000      	b.n	80086d4 <HAL_TIM_OC_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	40010000 	.word	0x40010000
 80086e4:	40010400 	.word	0x40010400
 80086e8:	40000400 	.word	0x40000400
 80086ec:	40000800 	.word	0x40000800
 80086f0:	40000c00 	.word	0x40000c00
 80086f4:	40014000 	.word	0x40014000
 80086f8:	40001800 	.word	0x40001800
 80086fc:	00010007 	.word	0x00010007

08008700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b02      	cmp	r3, #2
 8008714:	d122      	bne.n	800875c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b02      	cmp	r3, #2
 8008722:	d11b      	bne.n	800875c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f06f 0202 	mvn.w	r2, #2
 800872c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f003 0303 	and.w	r3, r3, #3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa40 	bl	8008bc8 <HAL_TIM_IC_CaptureCallback>
 8008748:	e005      	b.n	8008756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7f8 f94a 	bl	80009e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fa43 	bl	8008bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f003 0304 	and.w	r3, r3, #4
 8008766:	2b04      	cmp	r3, #4
 8008768:	d122      	bne.n	80087b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f003 0304 	and.w	r3, r3, #4
 8008774:	2b04      	cmp	r3, #4
 8008776:	d11b      	bne.n	80087b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f06f 0204 	mvn.w	r2, #4
 8008780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2202      	movs	r2, #2
 8008786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fa16 	bl	8008bc8 <HAL_TIM_IC_CaptureCallback>
 800879c:	e005      	b.n	80087aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7f8 f920 	bl	80009e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fa19 	bl	8008bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	f003 0308 	and.w	r3, r3, #8
 80087ba:	2b08      	cmp	r3, #8
 80087bc:	d122      	bne.n	8008804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	f003 0308 	and.w	r3, r3, #8
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d11b      	bne.n	8008804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f06f 0208 	mvn.w	r2, #8
 80087d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2204      	movs	r2, #4
 80087da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	f003 0303 	and.w	r3, r3, #3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f9ec 	bl	8008bc8 <HAL_TIM_IC_CaptureCallback>
 80087f0:	e005      	b.n	80087fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7f8 f8f6 	bl	80009e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f9ef 	bl	8008bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	f003 0310 	and.w	r3, r3, #16
 800880e:	2b10      	cmp	r3, #16
 8008810:	d122      	bne.n	8008858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	2b10      	cmp	r3, #16
 800881e:	d11b      	bne.n	8008858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f06f 0210 	mvn.w	r2, #16
 8008828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2208      	movs	r2, #8
 800882e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f9c2 	bl	8008bc8 <HAL_TIM_IC_CaptureCallback>
 8008844:	e005      	b.n	8008852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7f8 f8cc 	bl	80009e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f9c5 	bl	8008bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b01      	cmp	r3, #1
 8008864:	d10e      	bne.n	8008884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b01      	cmp	r3, #1
 8008872:	d107      	bne.n	8008884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f06f 0201 	mvn.w	r2, #1
 800887c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7f8 ffda 	bl	8001838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888e:	2b80      	cmp	r3, #128	; 0x80
 8008890:	d10e      	bne.n	80088b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889c:	2b80      	cmp	r3, #128	; 0x80
 800889e:	d107      	bne.n	80088b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fe7e 	bl	80095ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088be:	d10e      	bne.n	80088de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ca:	2b80      	cmp	r3, #128	; 0x80
 80088cc:	d107      	bne.n	80088de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fe71 	bl	80095c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e8:	2b40      	cmp	r3, #64	; 0x40
 80088ea:	d10e      	bne.n	800890a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f6:	2b40      	cmp	r3, #64	; 0x40
 80088f8:	d107      	bne.n	800890a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f973 	bl	8008bf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f003 0320 	and.w	r3, r3, #32
 8008914:	2b20      	cmp	r3, #32
 8008916:	d10e      	bne.n	8008936 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f003 0320 	and.w	r3, r3, #32
 8008922:	2b20      	cmp	r3, #32
 8008924:	d107      	bne.n	8008936 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f06f 0220 	mvn.w	r2, #32
 800892e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fe31 	bl	8009598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008936:	bf00      	nop
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008956:	2b01      	cmp	r3, #1
 8008958:	d101      	bne.n	800895e <HAL_TIM_OC_ConfigChannel+0x1e>
 800895a:	2302      	movs	r3, #2
 800895c:	e066      	b.n	8008a2c <HAL_TIM_OC_ConfigChannel+0xec>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b14      	cmp	r3, #20
 800896a:	d857      	bhi.n	8008a1c <HAL_TIM_OC_ConfigChannel+0xdc>
 800896c:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <HAL_TIM_OC_ConfigChannel+0x34>)
 800896e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008972:	bf00      	nop
 8008974:	080089c9 	.word	0x080089c9
 8008978:	08008a1d 	.word	0x08008a1d
 800897c:	08008a1d 	.word	0x08008a1d
 8008980:	08008a1d 	.word	0x08008a1d
 8008984:	080089d7 	.word	0x080089d7
 8008988:	08008a1d 	.word	0x08008a1d
 800898c:	08008a1d 	.word	0x08008a1d
 8008990:	08008a1d 	.word	0x08008a1d
 8008994:	080089e5 	.word	0x080089e5
 8008998:	08008a1d 	.word	0x08008a1d
 800899c:	08008a1d 	.word	0x08008a1d
 80089a0:	08008a1d 	.word	0x08008a1d
 80089a4:	080089f3 	.word	0x080089f3
 80089a8:	08008a1d 	.word	0x08008a1d
 80089ac:	08008a1d 	.word	0x08008a1d
 80089b0:	08008a1d 	.word	0x08008a1d
 80089b4:	08008a01 	.word	0x08008a01
 80089b8:	08008a1d 	.word	0x08008a1d
 80089bc:	08008a1d 	.word	0x08008a1d
 80089c0:	08008a1d 	.word	0x08008a1d
 80089c4:	08008a0f 	.word	0x08008a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 f9b8 	bl	8008d44 <TIM_OC1_SetConfig>
      break;
 80089d4:	e025      	b.n	8008a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68b9      	ldr	r1, [r7, #8]
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 fa23 	bl	8008e28 <TIM_OC2_SetConfig>
      break;
 80089e2:	e01e      	b.n	8008a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68b9      	ldr	r1, [r7, #8]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 fa94 	bl	8008f18 <TIM_OC3_SetConfig>
      break;
 80089f0:	e017      	b.n	8008a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68b9      	ldr	r1, [r7, #8]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fb03 	bl	8009004 <TIM_OC4_SetConfig>
      break;
 80089fe:	e010      	b.n	8008a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68b9      	ldr	r1, [r7, #8]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 fb54 	bl	80090b4 <TIM_OC5_SetConfig>
      break;
 8008a0c:	e009      	b.n	8008a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fb9f 	bl	8009158 <TIM_OC6_SetConfig>
      break;
 8008a1a:	e002      	b.n	8008a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d101      	bne.n	8008a50 <HAL_TIM_ConfigClockSource+0x1c>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e0b4      	b.n	8008bba <HAL_TIM_ConfigClockSource+0x186>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	4b56      	ldr	r3, [pc, #344]	; (8008bc4 <HAL_TIM_ConfigClockSource+0x190>)
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a88:	d03e      	beq.n	8008b08 <HAL_TIM_ConfigClockSource+0xd4>
 8008a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a8e:	f200 8087 	bhi.w	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a96:	f000 8086 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x172>
 8008a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9e:	d87f      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008aa0:	2b70      	cmp	r3, #112	; 0x70
 8008aa2:	d01a      	beq.n	8008ada <HAL_TIM_ConfigClockSource+0xa6>
 8008aa4:	2b70      	cmp	r3, #112	; 0x70
 8008aa6:	d87b      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008aa8:	2b60      	cmp	r3, #96	; 0x60
 8008aaa:	d050      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x11a>
 8008aac:	2b60      	cmp	r3, #96	; 0x60
 8008aae:	d877      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ab0:	2b50      	cmp	r3, #80	; 0x50
 8008ab2:	d03c      	beq.n	8008b2e <HAL_TIM_ConfigClockSource+0xfa>
 8008ab4:	2b50      	cmp	r3, #80	; 0x50
 8008ab6:	d873      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ab8:	2b40      	cmp	r3, #64	; 0x40
 8008aba:	d058      	beq.n	8008b6e <HAL_TIM_ConfigClockSource+0x13a>
 8008abc:	2b40      	cmp	r3, #64	; 0x40
 8008abe:	d86f      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ac0:	2b30      	cmp	r3, #48	; 0x30
 8008ac2:	d064      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0x15a>
 8008ac4:	2b30      	cmp	r3, #48	; 0x30
 8008ac6:	d86b      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	d060      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0x15a>
 8008acc:	2b20      	cmp	r3, #32
 8008ace:	d867      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d05c      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0x15a>
 8008ad4:	2b10      	cmp	r3, #16
 8008ad6:	d05a      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0x15a>
 8008ad8:	e062      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	6899      	ldr	r1, [r3, #8]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f000 fc03 	bl	80092f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	609a      	str	r2, [r3, #8]
      break;
 8008b06:	e04f      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	6899      	ldr	r1, [r3, #8]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	f000 fbec 	bl	80092f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689a      	ldr	r2, [r3, #8]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b2a:	609a      	str	r2, [r3, #8]
      break;
 8008b2c:	e03c      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	6859      	ldr	r1, [r3, #4]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f000 fb60 	bl	8009200 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2150      	movs	r1, #80	; 0x50
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fbb9 	bl	80092be <TIM_ITRx_SetConfig>
      break;
 8008b4c:	e02c      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	6859      	ldr	r1, [r3, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f000 fb7f 	bl	800925e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2160      	movs	r1, #96	; 0x60
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fba9 	bl	80092be <TIM_ITRx_SetConfig>
      break;
 8008b6c:	e01c      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6818      	ldr	r0, [r3, #0]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	6859      	ldr	r1, [r3, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f000 fb40 	bl	8009200 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2140      	movs	r1, #64	; 0x40
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fb99 	bl	80092be <TIM_ITRx_SetConfig>
      break;
 8008b8c:	e00c      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4619      	mov	r1, r3
 8008b98:	4610      	mov	r0, r2
 8008b9a:	f000 fb90 	bl	80092be <TIM_ITRx_SetConfig>
      break;
 8008b9e:	e003      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba4:	e000      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	fffeff88 	.word	0xfffeff88

08008bc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a40      	ldr	r2, [pc, #256]	; (8008d18 <TIM_Base_SetConfig+0x114>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d013      	beq.n	8008c44 <TIM_Base_SetConfig+0x40>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c22:	d00f      	beq.n	8008c44 <TIM_Base_SetConfig+0x40>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a3d      	ldr	r2, [pc, #244]	; (8008d1c <TIM_Base_SetConfig+0x118>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d00b      	beq.n	8008c44 <TIM_Base_SetConfig+0x40>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a3c      	ldr	r2, [pc, #240]	; (8008d20 <TIM_Base_SetConfig+0x11c>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d007      	beq.n	8008c44 <TIM_Base_SetConfig+0x40>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a3b      	ldr	r2, [pc, #236]	; (8008d24 <TIM_Base_SetConfig+0x120>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d003      	beq.n	8008c44 <TIM_Base_SetConfig+0x40>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a3a      	ldr	r2, [pc, #232]	; (8008d28 <TIM_Base_SetConfig+0x124>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d108      	bne.n	8008c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a2f      	ldr	r2, [pc, #188]	; (8008d18 <TIM_Base_SetConfig+0x114>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d02b      	beq.n	8008cb6 <TIM_Base_SetConfig+0xb2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c64:	d027      	beq.n	8008cb6 <TIM_Base_SetConfig+0xb2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a2c      	ldr	r2, [pc, #176]	; (8008d1c <TIM_Base_SetConfig+0x118>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d023      	beq.n	8008cb6 <TIM_Base_SetConfig+0xb2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a2b      	ldr	r2, [pc, #172]	; (8008d20 <TIM_Base_SetConfig+0x11c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d01f      	beq.n	8008cb6 <TIM_Base_SetConfig+0xb2>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a2a      	ldr	r2, [pc, #168]	; (8008d24 <TIM_Base_SetConfig+0x120>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d01b      	beq.n	8008cb6 <TIM_Base_SetConfig+0xb2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a29      	ldr	r2, [pc, #164]	; (8008d28 <TIM_Base_SetConfig+0x124>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d017      	beq.n	8008cb6 <TIM_Base_SetConfig+0xb2>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a28      	ldr	r2, [pc, #160]	; (8008d2c <TIM_Base_SetConfig+0x128>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d013      	beq.n	8008cb6 <TIM_Base_SetConfig+0xb2>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a27      	ldr	r2, [pc, #156]	; (8008d30 <TIM_Base_SetConfig+0x12c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00f      	beq.n	8008cb6 <TIM_Base_SetConfig+0xb2>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a26      	ldr	r2, [pc, #152]	; (8008d34 <TIM_Base_SetConfig+0x130>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d00b      	beq.n	8008cb6 <TIM_Base_SetConfig+0xb2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a25      	ldr	r2, [pc, #148]	; (8008d38 <TIM_Base_SetConfig+0x134>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d007      	beq.n	8008cb6 <TIM_Base_SetConfig+0xb2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a24      	ldr	r2, [pc, #144]	; (8008d3c <TIM_Base_SetConfig+0x138>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d003      	beq.n	8008cb6 <TIM_Base_SetConfig+0xb2>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a23      	ldr	r2, [pc, #140]	; (8008d40 <TIM_Base_SetConfig+0x13c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d108      	bne.n	8008cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689a      	ldr	r2, [r3, #8]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a0a      	ldr	r2, [pc, #40]	; (8008d18 <TIM_Base_SetConfig+0x114>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d003      	beq.n	8008cfc <TIM_Base_SetConfig+0xf8>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a0c      	ldr	r2, [pc, #48]	; (8008d28 <TIM_Base_SetConfig+0x124>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d103      	bne.n	8008d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	691a      	ldr	r2, [r3, #16]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	615a      	str	r2, [r3, #20]
}
 8008d0a:	bf00      	nop
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	40010000 	.word	0x40010000
 8008d1c:	40000400 	.word	0x40000400
 8008d20:	40000800 	.word	0x40000800
 8008d24:	40000c00 	.word	0x40000c00
 8008d28:	40010400 	.word	0x40010400
 8008d2c:	40014000 	.word	0x40014000
 8008d30:	40014400 	.word	0x40014400
 8008d34:	40014800 	.word	0x40014800
 8008d38:	40001800 	.word	0x40001800
 8008d3c:	40001c00 	.word	0x40001c00
 8008d40:	40002000 	.word	0x40002000

08008d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	f023 0201 	bic.w	r2, r3, #1
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4b2b      	ldr	r3, [pc, #172]	; (8008e1c <TIM_OC1_SetConfig+0xd8>)
 8008d70:	4013      	ands	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f023 0303 	bic.w	r3, r3, #3
 8008d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f023 0302 	bic.w	r3, r3, #2
 8008d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a21      	ldr	r2, [pc, #132]	; (8008e20 <TIM_OC1_SetConfig+0xdc>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d003      	beq.n	8008da8 <TIM_OC1_SetConfig+0x64>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a20      	ldr	r2, [pc, #128]	; (8008e24 <TIM_OC1_SetConfig+0xe0>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d10c      	bne.n	8008dc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f023 0308 	bic.w	r3, r3, #8
 8008dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f023 0304 	bic.w	r3, r3, #4
 8008dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a16      	ldr	r2, [pc, #88]	; (8008e20 <TIM_OC1_SetConfig+0xdc>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d003      	beq.n	8008dd2 <TIM_OC1_SetConfig+0x8e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a15      	ldr	r2, [pc, #84]	; (8008e24 <TIM_OC1_SetConfig+0xe0>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d111      	bne.n	8008df6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	621a      	str	r2, [r3, #32]
}
 8008e10:	bf00      	nop
 8008e12:	371c      	adds	r7, #28
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	fffeff8f 	.word	0xfffeff8f
 8008e20:	40010000 	.word	0x40010000
 8008e24:	40010400 	.word	0x40010400

08008e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	f023 0210 	bic.w	r2, r3, #16
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	4b2e      	ldr	r3, [pc, #184]	; (8008f0c <TIM_OC2_SetConfig+0xe4>)
 8008e54:	4013      	ands	r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f023 0320 	bic.w	r3, r3, #32
 8008e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a23      	ldr	r2, [pc, #140]	; (8008f10 <TIM_OC2_SetConfig+0xe8>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d003      	beq.n	8008e90 <TIM_OC2_SetConfig+0x68>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a22      	ldr	r2, [pc, #136]	; (8008f14 <TIM_OC2_SetConfig+0xec>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d10d      	bne.n	8008eac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	011b      	lsls	r3, r3, #4
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a18      	ldr	r2, [pc, #96]	; (8008f10 <TIM_OC2_SetConfig+0xe8>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d003      	beq.n	8008ebc <TIM_OC2_SetConfig+0x94>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a17      	ldr	r2, [pc, #92]	; (8008f14 <TIM_OC2_SetConfig+0xec>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d113      	bne.n	8008ee4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	621a      	str	r2, [r3, #32]
}
 8008efe:	bf00      	nop
 8008f00:	371c      	adds	r7, #28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	feff8fff 	.word	0xfeff8fff
 8008f10:	40010000 	.word	0x40010000
 8008f14:	40010400 	.word	0x40010400

08008f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4b2d      	ldr	r3, [pc, #180]	; (8008ff8 <TIM_OC3_SetConfig+0xe0>)
 8008f44:	4013      	ands	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f023 0303 	bic.w	r3, r3, #3
 8008f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	021b      	lsls	r3, r3, #8
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a22      	ldr	r2, [pc, #136]	; (8008ffc <TIM_OC3_SetConfig+0xe4>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d003      	beq.n	8008f7e <TIM_OC3_SetConfig+0x66>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a21      	ldr	r2, [pc, #132]	; (8009000 <TIM_OC3_SetConfig+0xe8>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d10d      	bne.n	8008f9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	021b      	lsls	r3, r3, #8
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a17      	ldr	r2, [pc, #92]	; (8008ffc <TIM_OC3_SetConfig+0xe4>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d003      	beq.n	8008faa <TIM_OC3_SetConfig+0x92>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a16      	ldr	r2, [pc, #88]	; (8009000 <TIM_OC3_SetConfig+0xe8>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d113      	bne.n	8008fd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	621a      	str	r2, [r3, #32]
}
 8008fec:	bf00      	nop
 8008fee:	371c      	adds	r7, #28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	fffeff8f 	.word	0xfffeff8f
 8008ffc:	40010000 	.word	0x40010000
 8009000:	40010400 	.word	0x40010400

08009004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	4b1e      	ldr	r3, [pc, #120]	; (80090a8 <TIM_OC4_SetConfig+0xa4>)
 8009030:	4013      	ands	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800903a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	021b      	lsls	r3, r3, #8
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	4313      	orrs	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800904e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	031b      	lsls	r3, r3, #12
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	4313      	orrs	r3, r2
 800905a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a13      	ldr	r2, [pc, #76]	; (80090ac <TIM_OC4_SetConfig+0xa8>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d003      	beq.n	800906c <TIM_OC4_SetConfig+0x68>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a12      	ldr	r2, [pc, #72]	; (80090b0 <TIM_OC4_SetConfig+0xac>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d109      	bne.n	8009080 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	019b      	lsls	r3, r3, #6
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	4313      	orrs	r3, r2
 800907e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	621a      	str	r2, [r3, #32]
}
 800909a:	bf00      	nop
 800909c:	371c      	adds	r7, #28
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	feff8fff 	.word	0xfeff8fff
 80090ac:	40010000 	.word	0x40010000
 80090b0:	40010400 	.word	0x40010400

080090b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	4b1b      	ldr	r3, [pc, #108]	; (800914c <TIM_OC5_SetConfig+0x98>)
 80090e0:	4013      	ands	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80090f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	041b      	lsls	r3, r3, #16
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	4313      	orrs	r3, r2
 8009100:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a12      	ldr	r2, [pc, #72]	; (8009150 <TIM_OC5_SetConfig+0x9c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d003      	beq.n	8009112 <TIM_OC5_SetConfig+0x5e>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a11      	ldr	r2, [pc, #68]	; (8009154 <TIM_OC5_SetConfig+0xa0>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d109      	bne.n	8009126 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009118:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	021b      	lsls	r3, r3, #8
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	4313      	orrs	r3, r2
 8009124:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	621a      	str	r2, [r3, #32]
}
 8009140:	bf00      	nop
 8009142:	371c      	adds	r7, #28
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	fffeff8f 	.word	0xfffeff8f
 8009150:	40010000 	.word	0x40010000
 8009154:	40010400 	.word	0x40010400

08009158 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009158:	b480      	push	{r7}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4b1c      	ldr	r3, [pc, #112]	; (80091f4 <TIM_OC6_SetConfig+0x9c>)
 8009184:	4013      	ands	r3, r2
 8009186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	021b      	lsls	r3, r3, #8
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	4313      	orrs	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800919a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	051b      	lsls	r3, r3, #20
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a13      	ldr	r2, [pc, #76]	; (80091f8 <TIM_OC6_SetConfig+0xa0>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d003      	beq.n	80091b8 <TIM_OC6_SetConfig+0x60>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a12      	ldr	r2, [pc, #72]	; (80091fc <TIM_OC6_SetConfig+0xa4>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d109      	bne.n	80091cc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	029b      	lsls	r3, r3, #10
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	621a      	str	r2, [r3, #32]
}
 80091e6:	bf00      	nop
 80091e8:	371c      	adds	r7, #28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	feff8fff 	.word	0xfeff8fff
 80091f8:	40010000 	.word	0x40010000
 80091fc:	40010400 	.word	0x40010400

08009200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	f023 0201 	bic.w	r2, r3, #1
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800922a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	011b      	lsls	r3, r3, #4
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	4313      	orrs	r3, r2
 8009234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f023 030a 	bic.w	r3, r3, #10
 800923c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4313      	orrs	r3, r2
 8009244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	621a      	str	r2, [r3, #32]
}
 8009252:	bf00      	nop
 8009254:	371c      	adds	r7, #28
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800925e:	b480      	push	{r7}
 8009260:	b087      	sub	sp, #28
 8009262:	af00      	add	r7, sp, #0
 8009264:	60f8      	str	r0, [r7, #12]
 8009266:	60b9      	str	r1, [r7, #8]
 8009268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	f023 0210 	bic.w	r2, r3, #16
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6a1b      	ldr	r3, [r3, #32]
 8009280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	031b      	lsls	r3, r3, #12
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	4313      	orrs	r3, r2
 8009292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800929a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	621a      	str	r2, [r3, #32]
}
 80092b2:	bf00      	nop
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092be:	b480      	push	{r7}
 80092c0:	b085      	sub	sp, #20
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4313      	orrs	r3, r2
 80092dc:	f043 0307 	orr.w	r3, r3, #7
 80092e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	609a      	str	r2, [r3, #8]
}
 80092e8:	bf00      	nop
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b087      	sub	sp, #28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
 8009300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800930e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	021a      	lsls	r2, r3, #8
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	431a      	orrs	r2, r3
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	4313      	orrs	r3, r2
 800931c:	697a      	ldr	r2, [r7, #20]
 800931e:	4313      	orrs	r3, r2
 8009320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	609a      	str	r2, [r3, #8]
}
 8009328:	bf00      	nop
 800932a:	371c      	adds	r7, #28
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f003 031f 	and.w	r3, r3, #31
 8009346:	2201      	movs	r2, #1
 8009348:	fa02 f303 	lsl.w	r3, r2, r3
 800934c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a1a      	ldr	r2, [r3, #32]
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	43db      	mvns	r3, r3
 8009356:	401a      	ands	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6a1a      	ldr	r2, [r3, #32]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f003 031f 	and.w	r3, r3, #31
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	fa01 f303 	lsl.w	r3, r1, r3
 800936c:	431a      	orrs	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	621a      	str	r2, [r3, #32]
}
 8009372:	bf00      	nop
 8009374:	371c      	adds	r7, #28
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
	...

08009380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009394:	2302      	movs	r3, #2
 8009396:	e06d      	b.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a30      	ldr	r2, [pc, #192]	; (8009480 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d004      	beq.n	80093cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a2f      	ldr	r2, [pc, #188]	; (8009484 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d108      	bne.n	80093de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	4313      	orrs	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a20      	ldr	r2, [pc, #128]	; (8009480 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d022      	beq.n	8009448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800940a:	d01d      	beq.n	8009448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a1d      	ldr	r2, [pc, #116]	; (8009488 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d018      	beq.n	8009448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a1c      	ldr	r2, [pc, #112]	; (800948c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d013      	beq.n	8009448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a1a      	ldr	r2, [pc, #104]	; (8009490 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d00e      	beq.n	8009448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a15      	ldr	r2, [pc, #84]	; (8009484 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d009      	beq.n	8009448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a16      	ldr	r2, [pc, #88]	; (8009494 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d004      	beq.n	8009448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a15      	ldr	r2, [pc, #84]	; (8009498 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d10c      	bne.n	8009462 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800944e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	4313      	orrs	r3, r2
 8009458:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2201      	movs	r2, #1
 8009466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	40010000 	.word	0x40010000
 8009484:	40010400 	.word	0x40010400
 8009488:	40000400 	.word	0x40000400
 800948c:	40000800 	.word	0x40000800
 8009490:	40000c00 	.word	0x40000c00
 8009494:	40014000 	.word	0x40014000
 8009498:	40001800 	.word	0x40001800

0800949c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80094b4:	2302      	movs	r3, #2
 80094b6:	e065      	b.n	8009584 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	4313      	orrs	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	4313      	orrs	r3, r2
 8009512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951e:	4313      	orrs	r3, r2
 8009520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	041b      	lsls	r3, r3, #16
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a16      	ldr	r2, [pc, #88]	; (8009590 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d004      	beq.n	8009546 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a14      	ldr	r2, [pc, #80]	; (8009594 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d115      	bne.n	8009572 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	051b      	lsls	r3, r3, #20
 8009552:	4313      	orrs	r3, r2
 8009554:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	4313      	orrs	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	40010000 	.word	0x40010000
 8009594:	40010400 	.word	0x40010400

08009598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e040      	b.n	8009668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d106      	bne.n	80095fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7f8 fbe6 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2224      	movs	r2, #36	; 0x24
 8009600:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 0201 	bic.w	r2, r2, #1
 8009610:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f96e 	bl	80098f4 <UART_SetConfig>
 8009618:	4603      	mov	r3, r0
 800961a:	2b01      	cmp	r3, #1
 800961c:	d101      	bne.n	8009622 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e022      	b.n	8009668 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fbc6 	bl	8009dbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800963e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800964e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f042 0201 	orr.w	r2, r2, #1
 800965e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fc4d 	bl	8009f00 <UART_CheckIdleState>
 8009666:	4603      	mov	r3, r0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08a      	sub	sp, #40	; 0x28
 8009674:	af02      	add	r7, sp, #8
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	4613      	mov	r3, r2
 800967e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009684:	2b20      	cmp	r3, #32
 8009686:	f040 8081 	bne.w	800978c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <HAL_UART_Transmit+0x26>
 8009690:	88fb      	ldrh	r3, [r7, #6]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e079      	b.n	800978e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d101      	bne.n	80096a8 <HAL_UART_Transmit+0x38>
 80096a4:	2302      	movs	r3, #2
 80096a6:	e072      	b.n	800978e <HAL_UART_Transmit+0x11e>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2221      	movs	r2, #33	; 0x21
 80096bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096be:	f7f8 fe8f 	bl	80023e0 <HAL_GetTick>
 80096c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	88fa      	ldrh	r2, [r7, #6]
 80096c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	88fa      	ldrh	r2, [r7, #6]
 80096d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096dc:	d108      	bne.n	80096f0 <HAL_UART_Transmit+0x80>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d104      	bne.n	80096f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80096e6:	2300      	movs	r3, #0
 80096e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	61bb      	str	r3, [r7, #24]
 80096ee:	e003      	b.n	80096f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096f4:	2300      	movs	r3, #0
 80096f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009700:	e02c      	b.n	800975c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2200      	movs	r2, #0
 800970a:	2180      	movs	r1, #128	; 0x80
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 fc2a 	bl	8009f66 <UART_WaitOnFlagUntilTimeout>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e038      	b.n	800978e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10b      	bne.n	800973a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009730:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	3302      	adds	r3, #2
 8009736:	61bb      	str	r3, [r7, #24]
 8009738:	e007      	b.n	800974a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	781a      	ldrb	r2, [r3, #0]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	3301      	adds	r3, #1
 8009748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009750:	b29b      	uxth	r3, r3
 8009752:	3b01      	subs	r3, #1
 8009754:	b29a      	uxth	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009762:	b29b      	uxth	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1cc      	bne.n	8009702 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	2200      	movs	r2, #0
 8009770:	2140      	movs	r1, #64	; 0x40
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 fbf7 	bl	8009f66 <UART_WaitOnFlagUntilTimeout>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e005      	b.n	800978e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2220      	movs	r2, #32
 8009786:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	e000      	b.n	800978e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800978c:	2302      	movs	r3, #2
  }
}
 800978e:	4618      	mov	r0, r3
 8009790:	3720      	adds	r7, #32
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	; 0x28
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	4613      	mov	r3, r2
 80097a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	d178      	bne.n	80098a0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <HAL_UART_Transmit_DMA+0x22>
 80097b4:	88fb      	ldrh	r3, [r7, #6]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e071      	b.n	80098a2 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d101      	bne.n	80097cc <HAL_UART_Transmit_DMA+0x34>
 80097c8:	2302      	movs	r3, #2
 80097ca:	e06a      	b.n	80098a2 <HAL_UART_Transmit_DMA+0x10a>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	88fa      	ldrh	r2, [r7, #6]
 80097de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	88fa      	ldrh	r2, [r7, #6]
 80097e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2221      	movs	r2, #33	; 0x21
 80097f6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d02b      	beq.n	8009858 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009804:	4a29      	ldr	r2, [pc, #164]	; (80098ac <HAL_UART_Transmit_DMA+0x114>)
 8009806:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800980c:	4a28      	ldr	r2, [pc, #160]	; (80098b0 <HAL_UART_Transmit_DMA+0x118>)
 800980e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009814:	4a27      	ldr	r2, [pc, #156]	; (80098b4 <HAL_UART_Transmit_DMA+0x11c>)
 8009816:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800981c:	2200      	movs	r2, #0
 800981e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009828:	4619      	mov	r1, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3328      	adds	r3, #40	; 0x28
 8009830:	461a      	mov	r2, r3
 8009832:	88fb      	ldrh	r3, [r7, #6]
 8009834:	f7f9 fc78 	bl	8003128 <HAL_DMA_Start_IT>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00c      	beq.n	8009858 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2210      	movs	r2, #16
 8009842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2220      	movs	r2, #32
 8009852:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e024      	b.n	80098a2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2240      	movs	r2, #64	; 0x40
 800985e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	3308      	adds	r3, #8
 800986e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	e853 3f00 	ldrex	r3, [r3]
 8009876:	613b      	str	r3, [r7, #16]
   return(result);
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800987e:	627b      	str	r3, [r7, #36]	; 0x24
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3308      	adds	r3, #8
 8009886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009888:	623a      	str	r2, [r7, #32]
 800988a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988c:	69f9      	ldr	r1, [r7, #28]
 800988e:	6a3a      	ldr	r2, [r7, #32]
 8009890:	e841 2300 	strex	r3, r2, [r1]
 8009894:	61bb      	str	r3, [r7, #24]
   return(result);
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1e5      	bne.n	8009868 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	e000      	b.n	80098a2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80098a0:	2302      	movs	r3, #2
  }
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3728      	adds	r7, #40	; 0x28
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	0800a201 	.word	0x0800a201
 80098b0:	0800a297 	.word	0x0800a297
 80098b4:	0800a2b3 	.word	0x0800a2b3

080098b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b088      	sub	sp, #32
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	689a      	ldr	r2, [r3, #8]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	431a      	orrs	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	431a      	orrs	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	4ba6      	ldr	r3, [pc, #664]	; (8009bb8 <UART_SetConfig+0x2c4>)
 8009920:	4013      	ands	r3, r2
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6812      	ldr	r2, [r2, #0]
 8009926:	6979      	ldr	r1, [r7, #20]
 8009928:	430b      	orrs	r3, r1
 800992a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	430a      	orrs	r2, r1
 8009940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	430a      	orrs	r2, r1
 8009964:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a94      	ldr	r2, [pc, #592]	; (8009bbc <UART_SetConfig+0x2c8>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d120      	bne.n	80099b2 <UART_SetConfig+0xbe>
 8009970:	4b93      	ldr	r3, [pc, #588]	; (8009bc0 <UART_SetConfig+0x2cc>)
 8009972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009976:	f003 0303 	and.w	r3, r3, #3
 800997a:	2b03      	cmp	r3, #3
 800997c:	d816      	bhi.n	80099ac <UART_SetConfig+0xb8>
 800997e:	a201      	add	r2, pc, #4	; (adr r2, 8009984 <UART_SetConfig+0x90>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	08009995 	.word	0x08009995
 8009988:	080099a1 	.word	0x080099a1
 800998c:	0800999b 	.word	0x0800999b
 8009990:	080099a7 	.word	0x080099a7
 8009994:	2301      	movs	r3, #1
 8009996:	77fb      	strb	r3, [r7, #31]
 8009998:	e150      	b.n	8009c3c <UART_SetConfig+0x348>
 800999a:	2302      	movs	r3, #2
 800999c:	77fb      	strb	r3, [r7, #31]
 800999e:	e14d      	b.n	8009c3c <UART_SetConfig+0x348>
 80099a0:	2304      	movs	r3, #4
 80099a2:	77fb      	strb	r3, [r7, #31]
 80099a4:	e14a      	b.n	8009c3c <UART_SetConfig+0x348>
 80099a6:	2308      	movs	r3, #8
 80099a8:	77fb      	strb	r3, [r7, #31]
 80099aa:	e147      	b.n	8009c3c <UART_SetConfig+0x348>
 80099ac:	2310      	movs	r3, #16
 80099ae:	77fb      	strb	r3, [r7, #31]
 80099b0:	e144      	b.n	8009c3c <UART_SetConfig+0x348>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a83      	ldr	r2, [pc, #524]	; (8009bc4 <UART_SetConfig+0x2d0>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d132      	bne.n	8009a22 <UART_SetConfig+0x12e>
 80099bc:	4b80      	ldr	r3, [pc, #512]	; (8009bc0 <UART_SetConfig+0x2cc>)
 80099be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099c2:	f003 030c 	and.w	r3, r3, #12
 80099c6:	2b0c      	cmp	r3, #12
 80099c8:	d828      	bhi.n	8009a1c <UART_SetConfig+0x128>
 80099ca:	a201      	add	r2, pc, #4	; (adr r2, 80099d0 <UART_SetConfig+0xdc>)
 80099cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d0:	08009a05 	.word	0x08009a05
 80099d4:	08009a1d 	.word	0x08009a1d
 80099d8:	08009a1d 	.word	0x08009a1d
 80099dc:	08009a1d 	.word	0x08009a1d
 80099e0:	08009a11 	.word	0x08009a11
 80099e4:	08009a1d 	.word	0x08009a1d
 80099e8:	08009a1d 	.word	0x08009a1d
 80099ec:	08009a1d 	.word	0x08009a1d
 80099f0:	08009a0b 	.word	0x08009a0b
 80099f4:	08009a1d 	.word	0x08009a1d
 80099f8:	08009a1d 	.word	0x08009a1d
 80099fc:	08009a1d 	.word	0x08009a1d
 8009a00:	08009a17 	.word	0x08009a17
 8009a04:	2300      	movs	r3, #0
 8009a06:	77fb      	strb	r3, [r7, #31]
 8009a08:	e118      	b.n	8009c3c <UART_SetConfig+0x348>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	77fb      	strb	r3, [r7, #31]
 8009a0e:	e115      	b.n	8009c3c <UART_SetConfig+0x348>
 8009a10:	2304      	movs	r3, #4
 8009a12:	77fb      	strb	r3, [r7, #31]
 8009a14:	e112      	b.n	8009c3c <UART_SetConfig+0x348>
 8009a16:	2308      	movs	r3, #8
 8009a18:	77fb      	strb	r3, [r7, #31]
 8009a1a:	e10f      	b.n	8009c3c <UART_SetConfig+0x348>
 8009a1c:	2310      	movs	r3, #16
 8009a1e:	77fb      	strb	r3, [r7, #31]
 8009a20:	e10c      	b.n	8009c3c <UART_SetConfig+0x348>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a68      	ldr	r2, [pc, #416]	; (8009bc8 <UART_SetConfig+0x2d4>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d120      	bne.n	8009a6e <UART_SetConfig+0x17a>
 8009a2c:	4b64      	ldr	r3, [pc, #400]	; (8009bc0 <UART_SetConfig+0x2cc>)
 8009a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009a36:	2b30      	cmp	r3, #48	; 0x30
 8009a38:	d013      	beq.n	8009a62 <UART_SetConfig+0x16e>
 8009a3a:	2b30      	cmp	r3, #48	; 0x30
 8009a3c:	d814      	bhi.n	8009a68 <UART_SetConfig+0x174>
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d009      	beq.n	8009a56 <UART_SetConfig+0x162>
 8009a42:	2b20      	cmp	r3, #32
 8009a44:	d810      	bhi.n	8009a68 <UART_SetConfig+0x174>
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <UART_SetConfig+0x15c>
 8009a4a:	2b10      	cmp	r3, #16
 8009a4c:	d006      	beq.n	8009a5c <UART_SetConfig+0x168>
 8009a4e:	e00b      	b.n	8009a68 <UART_SetConfig+0x174>
 8009a50:	2300      	movs	r3, #0
 8009a52:	77fb      	strb	r3, [r7, #31]
 8009a54:	e0f2      	b.n	8009c3c <UART_SetConfig+0x348>
 8009a56:	2302      	movs	r3, #2
 8009a58:	77fb      	strb	r3, [r7, #31]
 8009a5a:	e0ef      	b.n	8009c3c <UART_SetConfig+0x348>
 8009a5c:	2304      	movs	r3, #4
 8009a5e:	77fb      	strb	r3, [r7, #31]
 8009a60:	e0ec      	b.n	8009c3c <UART_SetConfig+0x348>
 8009a62:	2308      	movs	r3, #8
 8009a64:	77fb      	strb	r3, [r7, #31]
 8009a66:	e0e9      	b.n	8009c3c <UART_SetConfig+0x348>
 8009a68:	2310      	movs	r3, #16
 8009a6a:	77fb      	strb	r3, [r7, #31]
 8009a6c:	e0e6      	b.n	8009c3c <UART_SetConfig+0x348>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a56      	ldr	r2, [pc, #344]	; (8009bcc <UART_SetConfig+0x2d8>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d120      	bne.n	8009aba <UART_SetConfig+0x1c6>
 8009a78:	4b51      	ldr	r3, [pc, #324]	; (8009bc0 <UART_SetConfig+0x2cc>)
 8009a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a82:	2bc0      	cmp	r3, #192	; 0xc0
 8009a84:	d013      	beq.n	8009aae <UART_SetConfig+0x1ba>
 8009a86:	2bc0      	cmp	r3, #192	; 0xc0
 8009a88:	d814      	bhi.n	8009ab4 <UART_SetConfig+0x1c0>
 8009a8a:	2b80      	cmp	r3, #128	; 0x80
 8009a8c:	d009      	beq.n	8009aa2 <UART_SetConfig+0x1ae>
 8009a8e:	2b80      	cmp	r3, #128	; 0x80
 8009a90:	d810      	bhi.n	8009ab4 <UART_SetConfig+0x1c0>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d002      	beq.n	8009a9c <UART_SetConfig+0x1a8>
 8009a96:	2b40      	cmp	r3, #64	; 0x40
 8009a98:	d006      	beq.n	8009aa8 <UART_SetConfig+0x1b4>
 8009a9a:	e00b      	b.n	8009ab4 <UART_SetConfig+0x1c0>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	77fb      	strb	r3, [r7, #31]
 8009aa0:	e0cc      	b.n	8009c3c <UART_SetConfig+0x348>
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	77fb      	strb	r3, [r7, #31]
 8009aa6:	e0c9      	b.n	8009c3c <UART_SetConfig+0x348>
 8009aa8:	2304      	movs	r3, #4
 8009aaa:	77fb      	strb	r3, [r7, #31]
 8009aac:	e0c6      	b.n	8009c3c <UART_SetConfig+0x348>
 8009aae:	2308      	movs	r3, #8
 8009ab0:	77fb      	strb	r3, [r7, #31]
 8009ab2:	e0c3      	b.n	8009c3c <UART_SetConfig+0x348>
 8009ab4:	2310      	movs	r3, #16
 8009ab6:	77fb      	strb	r3, [r7, #31]
 8009ab8:	e0c0      	b.n	8009c3c <UART_SetConfig+0x348>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a44      	ldr	r2, [pc, #272]	; (8009bd0 <UART_SetConfig+0x2dc>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d125      	bne.n	8009b10 <UART_SetConfig+0x21c>
 8009ac4:	4b3e      	ldr	r3, [pc, #248]	; (8009bc0 <UART_SetConfig+0x2cc>)
 8009ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ad2:	d017      	beq.n	8009b04 <UART_SetConfig+0x210>
 8009ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ad8:	d817      	bhi.n	8009b0a <UART_SetConfig+0x216>
 8009ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ade:	d00b      	beq.n	8009af8 <UART_SetConfig+0x204>
 8009ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ae4:	d811      	bhi.n	8009b0a <UART_SetConfig+0x216>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <UART_SetConfig+0x1fe>
 8009aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aee:	d006      	beq.n	8009afe <UART_SetConfig+0x20a>
 8009af0:	e00b      	b.n	8009b0a <UART_SetConfig+0x216>
 8009af2:	2300      	movs	r3, #0
 8009af4:	77fb      	strb	r3, [r7, #31]
 8009af6:	e0a1      	b.n	8009c3c <UART_SetConfig+0x348>
 8009af8:	2302      	movs	r3, #2
 8009afa:	77fb      	strb	r3, [r7, #31]
 8009afc:	e09e      	b.n	8009c3c <UART_SetConfig+0x348>
 8009afe:	2304      	movs	r3, #4
 8009b00:	77fb      	strb	r3, [r7, #31]
 8009b02:	e09b      	b.n	8009c3c <UART_SetConfig+0x348>
 8009b04:	2308      	movs	r3, #8
 8009b06:	77fb      	strb	r3, [r7, #31]
 8009b08:	e098      	b.n	8009c3c <UART_SetConfig+0x348>
 8009b0a:	2310      	movs	r3, #16
 8009b0c:	77fb      	strb	r3, [r7, #31]
 8009b0e:	e095      	b.n	8009c3c <UART_SetConfig+0x348>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a2f      	ldr	r2, [pc, #188]	; (8009bd4 <UART_SetConfig+0x2e0>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d125      	bne.n	8009b66 <UART_SetConfig+0x272>
 8009b1a:	4b29      	ldr	r3, [pc, #164]	; (8009bc0 <UART_SetConfig+0x2cc>)
 8009b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009b24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b28:	d017      	beq.n	8009b5a <UART_SetConfig+0x266>
 8009b2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b2e:	d817      	bhi.n	8009b60 <UART_SetConfig+0x26c>
 8009b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b34:	d00b      	beq.n	8009b4e <UART_SetConfig+0x25a>
 8009b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b3a:	d811      	bhi.n	8009b60 <UART_SetConfig+0x26c>
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d003      	beq.n	8009b48 <UART_SetConfig+0x254>
 8009b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b44:	d006      	beq.n	8009b54 <UART_SetConfig+0x260>
 8009b46:	e00b      	b.n	8009b60 <UART_SetConfig+0x26c>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	77fb      	strb	r3, [r7, #31]
 8009b4c:	e076      	b.n	8009c3c <UART_SetConfig+0x348>
 8009b4e:	2302      	movs	r3, #2
 8009b50:	77fb      	strb	r3, [r7, #31]
 8009b52:	e073      	b.n	8009c3c <UART_SetConfig+0x348>
 8009b54:	2304      	movs	r3, #4
 8009b56:	77fb      	strb	r3, [r7, #31]
 8009b58:	e070      	b.n	8009c3c <UART_SetConfig+0x348>
 8009b5a:	2308      	movs	r3, #8
 8009b5c:	77fb      	strb	r3, [r7, #31]
 8009b5e:	e06d      	b.n	8009c3c <UART_SetConfig+0x348>
 8009b60:	2310      	movs	r3, #16
 8009b62:	77fb      	strb	r3, [r7, #31]
 8009b64:	e06a      	b.n	8009c3c <UART_SetConfig+0x348>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a1b      	ldr	r2, [pc, #108]	; (8009bd8 <UART_SetConfig+0x2e4>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d138      	bne.n	8009be2 <UART_SetConfig+0x2ee>
 8009b70:	4b13      	ldr	r3, [pc, #76]	; (8009bc0 <UART_SetConfig+0x2cc>)
 8009b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b76:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009b7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b7e:	d017      	beq.n	8009bb0 <UART_SetConfig+0x2bc>
 8009b80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b84:	d82a      	bhi.n	8009bdc <UART_SetConfig+0x2e8>
 8009b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b8a:	d00b      	beq.n	8009ba4 <UART_SetConfig+0x2b0>
 8009b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b90:	d824      	bhi.n	8009bdc <UART_SetConfig+0x2e8>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d003      	beq.n	8009b9e <UART_SetConfig+0x2aa>
 8009b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b9a:	d006      	beq.n	8009baa <UART_SetConfig+0x2b6>
 8009b9c:	e01e      	b.n	8009bdc <UART_SetConfig+0x2e8>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	77fb      	strb	r3, [r7, #31]
 8009ba2:	e04b      	b.n	8009c3c <UART_SetConfig+0x348>
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	77fb      	strb	r3, [r7, #31]
 8009ba8:	e048      	b.n	8009c3c <UART_SetConfig+0x348>
 8009baa:	2304      	movs	r3, #4
 8009bac:	77fb      	strb	r3, [r7, #31]
 8009bae:	e045      	b.n	8009c3c <UART_SetConfig+0x348>
 8009bb0:	2308      	movs	r3, #8
 8009bb2:	77fb      	strb	r3, [r7, #31]
 8009bb4:	e042      	b.n	8009c3c <UART_SetConfig+0x348>
 8009bb6:	bf00      	nop
 8009bb8:	efff69f3 	.word	0xefff69f3
 8009bbc:	40011000 	.word	0x40011000
 8009bc0:	40023800 	.word	0x40023800
 8009bc4:	40004400 	.word	0x40004400
 8009bc8:	40004800 	.word	0x40004800
 8009bcc:	40004c00 	.word	0x40004c00
 8009bd0:	40005000 	.word	0x40005000
 8009bd4:	40011400 	.word	0x40011400
 8009bd8:	40007800 	.word	0x40007800
 8009bdc:	2310      	movs	r3, #16
 8009bde:	77fb      	strb	r3, [r7, #31]
 8009be0:	e02c      	b.n	8009c3c <UART_SetConfig+0x348>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a72      	ldr	r2, [pc, #456]	; (8009db0 <UART_SetConfig+0x4bc>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d125      	bne.n	8009c38 <UART_SetConfig+0x344>
 8009bec:	4b71      	ldr	r3, [pc, #452]	; (8009db4 <UART_SetConfig+0x4c0>)
 8009bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bf2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009bf6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009bfa:	d017      	beq.n	8009c2c <UART_SetConfig+0x338>
 8009bfc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009c00:	d817      	bhi.n	8009c32 <UART_SetConfig+0x33e>
 8009c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c06:	d00b      	beq.n	8009c20 <UART_SetConfig+0x32c>
 8009c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c0c:	d811      	bhi.n	8009c32 <UART_SetConfig+0x33e>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <UART_SetConfig+0x326>
 8009c12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c16:	d006      	beq.n	8009c26 <UART_SetConfig+0x332>
 8009c18:	e00b      	b.n	8009c32 <UART_SetConfig+0x33e>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	77fb      	strb	r3, [r7, #31]
 8009c1e:	e00d      	b.n	8009c3c <UART_SetConfig+0x348>
 8009c20:	2302      	movs	r3, #2
 8009c22:	77fb      	strb	r3, [r7, #31]
 8009c24:	e00a      	b.n	8009c3c <UART_SetConfig+0x348>
 8009c26:	2304      	movs	r3, #4
 8009c28:	77fb      	strb	r3, [r7, #31]
 8009c2a:	e007      	b.n	8009c3c <UART_SetConfig+0x348>
 8009c2c:	2308      	movs	r3, #8
 8009c2e:	77fb      	strb	r3, [r7, #31]
 8009c30:	e004      	b.n	8009c3c <UART_SetConfig+0x348>
 8009c32:	2310      	movs	r3, #16
 8009c34:	77fb      	strb	r3, [r7, #31]
 8009c36:	e001      	b.n	8009c3c <UART_SetConfig+0x348>
 8009c38:	2310      	movs	r3, #16
 8009c3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c44:	d15b      	bne.n	8009cfe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009c46:	7ffb      	ldrb	r3, [r7, #31]
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d828      	bhi.n	8009c9e <UART_SetConfig+0x3aa>
 8009c4c:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <UART_SetConfig+0x360>)
 8009c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c52:	bf00      	nop
 8009c54:	08009c79 	.word	0x08009c79
 8009c58:	08009c81 	.word	0x08009c81
 8009c5c:	08009c89 	.word	0x08009c89
 8009c60:	08009c9f 	.word	0x08009c9f
 8009c64:	08009c8f 	.word	0x08009c8f
 8009c68:	08009c9f 	.word	0x08009c9f
 8009c6c:	08009c9f 	.word	0x08009c9f
 8009c70:	08009c9f 	.word	0x08009c9f
 8009c74:	08009c97 	.word	0x08009c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c78:	f7fd faa8 	bl	80071cc <HAL_RCC_GetPCLK1Freq>
 8009c7c:	61b8      	str	r0, [r7, #24]
        break;
 8009c7e:	e013      	b.n	8009ca8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c80:	f7fd fab8 	bl	80071f4 <HAL_RCC_GetPCLK2Freq>
 8009c84:	61b8      	str	r0, [r7, #24]
        break;
 8009c86:	e00f      	b.n	8009ca8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c88:	4b4b      	ldr	r3, [pc, #300]	; (8009db8 <UART_SetConfig+0x4c4>)
 8009c8a:	61bb      	str	r3, [r7, #24]
        break;
 8009c8c:	e00c      	b.n	8009ca8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c8e:	f7fd f9cb 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 8009c92:	61b8      	str	r0, [r7, #24]
        break;
 8009c94:	e008      	b.n	8009ca8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c9a:	61bb      	str	r3, [r7, #24]
        break;
 8009c9c:	e004      	b.n	8009ca8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	77bb      	strb	r3, [r7, #30]
        break;
 8009ca6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d074      	beq.n	8009d98 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	005a      	lsls	r2, r3, #1
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	085b      	lsrs	r3, r3, #1
 8009cb8:	441a      	add	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	2b0f      	cmp	r3, #15
 8009cc8:	d916      	bls.n	8009cf8 <UART_SetConfig+0x404>
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd0:	d212      	bcs.n	8009cf8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	f023 030f 	bic.w	r3, r3, #15
 8009cda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	085b      	lsrs	r3, r3, #1
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	89fb      	ldrh	r3, [r7, #14]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	89fa      	ldrh	r2, [r7, #14]
 8009cf4:	60da      	str	r2, [r3, #12]
 8009cf6:	e04f      	b.n	8009d98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	77bb      	strb	r3, [r7, #30]
 8009cfc:	e04c      	b.n	8009d98 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cfe:	7ffb      	ldrb	r3, [r7, #31]
 8009d00:	2b08      	cmp	r3, #8
 8009d02:	d828      	bhi.n	8009d56 <UART_SetConfig+0x462>
 8009d04:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <UART_SetConfig+0x418>)
 8009d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0a:	bf00      	nop
 8009d0c:	08009d31 	.word	0x08009d31
 8009d10:	08009d39 	.word	0x08009d39
 8009d14:	08009d41 	.word	0x08009d41
 8009d18:	08009d57 	.word	0x08009d57
 8009d1c:	08009d47 	.word	0x08009d47
 8009d20:	08009d57 	.word	0x08009d57
 8009d24:	08009d57 	.word	0x08009d57
 8009d28:	08009d57 	.word	0x08009d57
 8009d2c:	08009d4f 	.word	0x08009d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d30:	f7fd fa4c 	bl	80071cc <HAL_RCC_GetPCLK1Freq>
 8009d34:	61b8      	str	r0, [r7, #24]
        break;
 8009d36:	e013      	b.n	8009d60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d38:	f7fd fa5c 	bl	80071f4 <HAL_RCC_GetPCLK2Freq>
 8009d3c:	61b8      	str	r0, [r7, #24]
        break;
 8009d3e:	e00f      	b.n	8009d60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d40:	4b1d      	ldr	r3, [pc, #116]	; (8009db8 <UART_SetConfig+0x4c4>)
 8009d42:	61bb      	str	r3, [r7, #24]
        break;
 8009d44:	e00c      	b.n	8009d60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d46:	f7fd f96f 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 8009d4a:	61b8      	str	r0, [r7, #24]
        break;
 8009d4c:	e008      	b.n	8009d60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d52:	61bb      	str	r3, [r7, #24]
        break;
 8009d54:	e004      	b.n	8009d60 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	77bb      	strb	r3, [r7, #30]
        break;
 8009d5e:	bf00      	nop
    }

    if (pclk != 0U)
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d018      	beq.n	8009d98 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	085a      	lsrs	r2, r3, #1
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	441a      	add	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	2b0f      	cmp	r3, #15
 8009d7e:	d909      	bls.n	8009d94 <UART_SetConfig+0x4a0>
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d86:	d205      	bcs.n	8009d94 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	60da      	str	r2, [r3, #12]
 8009d92:	e001      	b.n	8009d98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009da4:	7fbb      	ldrb	r3, [r7, #30]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3720      	adds	r7, #32
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	40007c00 	.word	0x40007c00
 8009db4:	40023800 	.word	0x40023800
 8009db8:	00f42400 	.word	0x00f42400

08009dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00a      	beq.n	8009de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dea:	f003 0302 	and.w	r3, r3, #2
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00a      	beq.n	8009e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0c:	f003 0304 	and.w	r3, r3, #4
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00a      	beq.n	8009e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	f003 0308 	and.w	r3, r3, #8
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00a      	beq.n	8009e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e50:	f003 0310 	and.w	r3, r3, #16
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00a      	beq.n	8009e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	f003 0320 	and.w	r3, r3, #32
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d01a      	beq.n	8009ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eba:	d10a      	bne.n	8009ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00a      	beq.n	8009ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	605a      	str	r2, [r3, #4]
  }
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af02      	add	r7, sp, #8
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f10:	f7f8 fa66 	bl	80023e0 <HAL_GetTick>
 8009f14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0308 	and.w	r3, r3, #8
 8009f20:	2b08      	cmp	r3, #8
 8009f22:	d10e      	bne.n	8009f42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f817 	bl	8009f66 <UART_WaitOnFlagUntilTimeout>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e00d      	b.n	8009f5e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2220      	movs	r2, #32
 8009f4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b09c      	sub	sp, #112	; 0x70
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	603b      	str	r3, [r7, #0]
 8009f72:	4613      	mov	r3, r2
 8009f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f76:	e0a5      	b.n	800a0c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7e:	f000 80a1 	beq.w	800a0c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f82:	f7f8 fa2d 	bl	80023e0 <HAL_GetTick>
 8009f86:	4602      	mov	r2, r0
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d302      	bcc.n	8009f98 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d13e      	bne.n	800a016 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fa0:	e853 3f00 	ldrex	r3, [r3]
 8009fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009fac:	667b      	str	r3, [r7, #100]	; 0x64
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fbe:	e841 2300 	strex	r3, r2, [r1]
 8009fc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1e6      	bne.n	8009f98 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3308      	adds	r3, #8
 8009fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fdc:	f023 0301 	bic.w	r3, r3, #1
 8009fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fea:	64ba      	str	r2, [r7, #72]	; 0x48
 8009fec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e5      	bne.n	8009fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2220      	movs	r2, #32
 800a002:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2220      	movs	r2, #32
 800a008:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e067      	b.n	800a0e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	2b00      	cmp	r3, #0
 800a022:	d04f      	beq.n	800a0c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	69db      	ldr	r3, [r3, #28]
 800a02a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a02e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a032:	d147      	bne.n	800a0c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a03c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a052:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	461a      	mov	r2, r3
 800a05a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a05c:	637b      	str	r3, [r7, #52]	; 0x34
 800a05e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e6      	bne.n	800a03e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3308      	adds	r3, #8
 800a076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	613b      	str	r3, [r7, #16]
   return(result);
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	f023 0301 	bic.w	r3, r3, #1
 800a086:	66bb      	str	r3, [r7, #104]	; 0x68
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	3308      	adds	r3, #8
 800a08e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a090:	623a      	str	r2, [r7, #32]
 800a092:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	69f9      	ldr	r1, [r7, #28]
 800a096:	6a3a      	ldr	r2, [r7, #32]
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e5      	bne.n	800a070 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2220      	movs	r2, #32
 800a0ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e010      	b.n	800a0e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	69da      	ldr	r2, [r3, #28]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	bf0c      	ite	eq
 800a0d4:	2301      	moveq	r3, #1
 800a0d6:	2300      	movne	r3, #0
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	461a      	mov	r2, r3
 800a0dc:	79fb      	ldrb	r3, [r7, #7]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	f43f af4a 	beq.w	8009f78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3770      	adds	r7, #112	; 0x70
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b089      	sub	sp, #36	; 0x24
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	e853 3f00 	ldrex	r3, [r3]
 800a102:	60bb      	str	r3, [r7, #8]
   return(result);
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a10a:	61fb      	str	r3, [r7, #28]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	461a      	mov	r2, r3
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	61bb      	str	r3, [r7, #24]
 800a116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a118:	6979      	ldr	r1, [r7, #20]
 800a11a:	69ba      	ldr	r2, [r7, #24]
 800a11c:	e841 2300 	strex	r3, r2, [r1]
 800a120:	613b      	str	r3, [r7, #16]
   return(result);
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1e6      	bne.n	800a0f6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2220      	movs	r2, #32
 800a12c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a12e:	bf00      	nop
 800a130:	3724      	adds	r7, #36	; 0x24
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b095      	sub	sp, #84	; 0x54
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14a:	e853 3f00 	ldrex	r3, [r3]
 800a14e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a152:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a156:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	461a      	mov	r2, r3
 800a15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a160:	643b      	str	r3, [r7, #64]	; 0x40
 800a162:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a164:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a166:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a168:	e841 2300 	strex	r3, r2, [r1]
 800a16c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1e6      	bne.n	800a142 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3308      	adds	r3, #8
 800a17a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	e853 3f00 	ldrex	r3, [r3]
 800a182:	61fb      	str	r3, [r7, #28]
   return(result);
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	f023 0301 	bic.w	r3, r3, #1
 800a18a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3308      	adds	r3, #8
 800a192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a194:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a19a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a19c:	e841 2300 	strex	r3, r2, [r1]
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1e5      	bne.n	800a174 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d118      	bne.n	800a1e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	e853 3f00 	ldrex	r3, [r3]
 800a1bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	f023 0310 	bic.w	r3, r3, #16
 800a1c4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1ce:	61bb      	str	r3, [r7, #24]
 800a1d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d2:	6979      	ldr	r1, [r7, #20]
 800a1d4:	69ba      	ldr	r2, [r7, #24]
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	613b      	str	r3, [r7, #16]
   return(result);
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1e6      	bne.n	800a1b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a1f4:	bf00      	nop
 800a1f6:	3754      	adds	r7, #84	; 0x54
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b090      	sub	sp, #64	; 0x40
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a216:	d037      	beq.n	800a288 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a21a:	2200      	movs	r2, #0
 800a21c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3308      	adds	r3, #8
 800a226:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	e853 3f00 	ldrex	r3, [r3]
 800a22e:	623b      	str	r3, [r7, #32]
   return(result);
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a236:	63bb      	str	r3, [r7, #56]	; 0x38
 800a238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3308      	adds	r3, #8
 800a23e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a240:	633a      	str	r2, [r7, #48]	; 0x30
 800a242:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a248:	e841 2300 	strex	r3, r2, [r1]
 800a24c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e5      	bne.n	800a220 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	e853 3f00 	ldrex	r3, [r3]
 800a260:	60fb      	str	r3, [r7, #12]
   return(result);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a268:	637b      	str	r3, [r7, #52]	; 0x34
 800a26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	461a      	mov	r2, r3
 800a270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a272:	61fb      	str	r3, [r7, #28]
 800a274:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a276:	69b9      	ldr	r1, [r7, #24]
 800a278:	69fa      	ldr	r2, [r7, #28]
 800a27a:	e841 2300 	strex	r3, r2, [r1]
 800a27e:	617b      	str	r3, [r7, #20]
   return(result);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1e6      	bne.n	800a254 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a286:	e002      	b.n	800a28e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a288:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a28a:	f7ff fb15 	bl	80098b8 <HAL_UART_TxCpltCallback>
}
 800a28e:	bf00      	nop
 800a290:	3740      	adds	r7, #64	; 0x40
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b084      	sub	sp, #16
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f7ff fb11 	bl	80098cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b086      	sub	sp, #24
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2d6:	2b80      	cmp	r3, #128	; 0x80
 800a2d8:	d109      	bne.n	800a2ee <UART_DMAError+0x3c>
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	2b21      	cmp	r3, #33	; 0x21
 800a2de:	d106      	bne.n	800a2ee <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a2e8:	6978      	ldr	r0, [r7, #20]
 800a2ea:	f7ff ff00 	bl	800a0ee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f8:	2b40      	cmp	r3, #64	; 0x40
 800a2fa:	d109      	bne.n	800a310 <UART_DMAError+0x5e>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b22      	cmp	r3, #34	; 0x22
 800a300:	d106      	bne.n	800a310 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2200      	movs	r2, #0
 800a306:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a30a:	6978      	ldr	r0, [r7, #20]
 800a30c:	f7ff ff15 	bl	800a13a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a316:	f043 0210 	orr.w	r2, r3, #16
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a320:	6978      	ldr	r0, [r7, #20]
 800a322:	f7ff fadd 	bl	80098e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a326:	bf00      	nop
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
	...

0800a330 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d121      	bne.n	800a386 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	4b27      	ldr	r3, [pc, #156]	; (800a3e4 <FMC_SDRAM_Init+0xb4>)
 800a348:	4013      	ands	r3, r2
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	6851      	ldr	r1, [r2, #4]
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	6892      	ldr	r2, [r2, #8]
 800a352:	4311      	orrs	r1, r2
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	68d2      	ldr	r2, [r2, #12]
 800a358:	4311      	orrs	r1, r2
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	6912      	ldr	r2, [r2, #16]
 800a35e:	4311      	orrs	r1, r2
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	6952      	ldr	r2, [r2, #20]
 800a364:	4311      	orrs	r1, r2
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	6992      	ldr	r2, [r2, #24]
 800a36a:	4311      	orrs	r1, r2
 800a36c:	683a      	ldr	r2, [r7, #0]
 800a36e:	69d2      	ldr	r2, [r2, #28]
 800a370:	4311      	orrs	r1, r2
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	6a12      	ldr	r2, [r2, #32]
 800a376:	4311      	orrs	r1, r2
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a37c:	430a      	orrs	r2, r1
 800a37e:	431a      	orrs	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	601a      	str	r2, [r3, #0]
 800a384:	e026      	b.n	800a3d4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	69d9      	ldr	r1, [r3, #28]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	4319      	orrs	r1, r3
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	430b      	orrs	r3, r1
 800a39e:	431a      	orrs	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	4b0e      	ldr	r3, [pc, #56]	; (800a3e4 <FMC_SDRAM_Init+0xb4>)
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	6851      	ldr	r1, [r2, #4]
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	6892      	ldr	r2, [r2, #8]
 800a3b4:	4311      	orrs	r1, r2
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	68d2      	ldr	r2, [r2, #12]
 800a3ba:	4311      	orrs	r1, r2
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	6912      	ldr	r2, [r2, #16]
 800a3c0:	4311      	orrs	r1, r2
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	6952      	ldr	r2, [r2, #20]
 800a3c6:	4311      	orrs	r1, r2
 800a3c8:	683a      	ldr	r2, [r7, #0]
 800a3ca:	6992      	ldr	r2, [r2, #24]
 800a3cc:	430a      	orrs	r2, r1
 800a3ce:	431a      	orrs	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	ffff8000 	.word	0xffff8000

0800a3e8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d128      	bne.n	800a44c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	1e59      	subs	r1, r3, #1
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	3b01      	subs	r3, #1
 800a40e:	011b      	lsls	r3, r3, #4
 800a410:	4319      	orrs	r1, r3
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	3b01      	subs	r3, #1
 800a418:	021b      	lsls	r3, r3, #8
 800a41a:	4319      	orrs	r1, r3
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	3b01      	subs	r3, #1
 800a422:	031b      	lsls	r3, r3, #12
 800a424:	4319      	orrs	r1, r3
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	041b      	lsls	r3, r3, #16
 800a42e:	4319      	orrs	r1, r3
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	3b01      	subs	r3, #1
 800a436:	051b      	lsls	r3, r3, #20
 800a438:	4319      	orrs	r1, r3
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	3b01      	subs	r3, #1
 800a440:	061b      	lsls	r3, r3, #24
 800a442:	430b      	orrs	r3, r1
 800a444:	431a      	orrs	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	609a      	str	r2, [r3, #8]
 800a44a:	e02d      	b.n	800a4a8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	4b19      	ldr	r3, [pc, #100]	; (800a4b8 <FMC_SDRAM_Timing_Init+0xd0>)
 800a452:	4013      	ands	r3, r2
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	68d2      	ldr	r2, [r2, #12]
 800a458:	3a01      	subs	r2, #1
 800a45a:	0311      	lsls	r1, r2, #12
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	6952      	ldr	r2, [r2, #20]
 800a460:	3a01      	subs	r2, #1
 800a462:	0512      	lsls	r2, r2, #20
 800a464:	430a      	orrs	r2, r1
 800a466:	431a      	orrs	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	1e59      	subs	r1, r3, #1
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	3b01      	subs	r3, #1
 800a480:	011b      	lsls	r3, r3, #4
 800a482:	4319      	orrs	r1, r3
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	3b01      	subs	r3, #1
 800a48a:	021b      	lsls	r3, r3, #8
 800a48c:	4319      	orrs	r1, r3
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	3b01      	subs	r3, #1
 800a494:	041b      	lsls	r3, r3, #16
 800a496:	4319      	orrs	r1, r3
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	3b01      	subs	r3, #1
 800a49e:	061b      	lsls	r3, r3, #24
 800a4a0:	430b      	orrs	r3, r1
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	ff0f0fff 	.word	0xff0f0fff

0800a4bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4bc:	b084      	sub	sp, #16
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	f107 001c 	add.w	r0, r7, #28
 800a4ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d120      	bne.n	800a516 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	68da      	ldr	r2, [r3, #12]
 800a4e4:	4b20      	ldr	r3, [pc, #128]	; (800a568 <USB_CoreInit+0xac>)
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a4f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d105      	bne.n	800a50a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f9b4 	bl	800a878 <USB_CoreReset>
 800a510:	4603      	mov	r3, r0
 800a512:	73fb      	strb	r3, [r7, #15]
 800a514:	e010      	b.n	800a538 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f9a8 	bl	800a878 <USB_CoreReset>
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a530:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d10b      	bne.n	800a556 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f043 0206 	orr.w	r2, r3, #6
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f043 0220 	orr.w	r2, r3, #32
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a562:	b004      	add	sp, #16
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	ffbdffbf 	.word	0xffbdffbf

0800a56c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f043 0201 	orr.w	r2, r3, #1
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	370c      	adds	r7, #12
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a58e:	b480      	push	{r7}
 800a590:	b083      	sub	sp, #12
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	f023 0201 	bic.w	r2, r3, #1
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a5cc:	78fb      	ldrb	r3, [r7, #3]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d115      	bne.n	800a5fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5de:	2001      	movs	r0, #1
 800a5e0:	f7f7 ff0a 	bl	80023f8 <HAL_Delay>
      ms++;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f935 	bl	800a85a <USB_GetMode>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d01e      	beq.n	800a634 <USB_SetCurrentMode+0x84>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b31      	cmp	r3, #49	; 0x31
 800a5fa:	d9f0      	bls.n	800a5de <USB_SetCurrentMode+0x2e>
 800a5fc:	e01a      	b.n	800a634 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d115      	bne.n	800a630 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a610:	2001      	movs	r0, #1
 800a612:	f7f7 fef1 	bl	80023f8 <HAL_Delay>
      ms++;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3301      	adds	r3, #1
 800a61a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f91c 	bl	800a85a <USB_GetMode>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d005      	beq.n	800a634 <USB_SetCurrentMode+0x84>
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2b31      	cmp	r3, #49	; 0x31
 800a62c:	d9f0      	bls.n	800a610 <USB_SetCurrentMode+0x60>
 800a62e:	e001      	b.n	800a634 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e005      	b.n	800a640 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b32      	cmp	r3, #50	; 0x32
 800a638:	d101      	bne.n	800a63e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e000      	b.n	800a640 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a652:	2300      	movs	r3, #0
 800a654:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3301      	adds	r3, #1
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	4a12      	ldr	r2, [pc, #72]	; (800a6a8 <USB_FlushTxFifo+0x60>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d901      	bls.n	800a666 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e01a      	b.n	800a69c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	daf3      	bge.n	800a656 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a66e:	2300      	movs	r3, #0
 800a670:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	019b      	lsls	r3, r3, #6
 800a676:	f043 0220 	orr.w	r2, r3, #32
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	3301      	adds	r3, #1
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	4a08      	ldr	r2, [pc, #32]	; (800a6a8 <USB_FlushTxFifo+0x60>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d901      	bls.n	800a68e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e006      	b.n	800a69c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	f003 0320 	and.w	r3, r3, #32
 800a696:	2b20      	cmp	r3, #32
 800a698:	d0f1      	beq.n	800a67e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr
 800a6a8:	00030d40 	.word	0x00030d40

0800a6ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	60fb      	str	r3, [r7, #12]
 800a6be:	4a11      	ldr	r2, [pc, #68]	; (800a704 <USB_FlushRxFifo+0x58>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d901      	bls.n	800a6c8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	e017      	b.n	800a6f8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	daf3      	bge.n	800a6b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2210      	movs	r2, #16
 800a6d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	60fb      	str	r3, [r7, #12]
 800a6e0:	4a08      	ldr	r2, [pc, #32]	; (800a704 <USB_FlushRxFifo+0x58>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d901      	bls.n	800a6ea <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e006      	b.n	800a6f8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	f003 0310 	and.w	r3, r3, #16
 800a6f2:	2b10      	cmp	r3, #16
 800a6f4:	d0f1      	beq.n	800a6da <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	00030d40 	.word	0x00030d40

0800a708 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a708:	b480      	push	{r7}
 800a70a:	b089      	sub	sp, #36	; 0x24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	4611      	mov	r1, r2
 800a714:	461a      	mov	r2, r3
 800a716:	460b      	mov	r3, r1
 800a718:	71fb      	strb	r3, [r7, #7]
 800a71a:	4613      	mov	r3, r2
 800a71c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d123      	bne.n	800a776 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a72e:	88bb      	ldrh	r3, [r7, #4]
 800a730:	3303      	adds	r3, #3
 800a732:	089b      	lsrs	r3, r3, #2
 800a734:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a736:	2300      	movs	r3, #0
 800a738:	61bb      	str	r3, [r7, #24]
 800a73a:	e018      	b.n	800a76e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	031a      	lsls	r2, r3, #12
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	4413      	add	r3, r2
 800a744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a748:	461a      	mov	r2, r3
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	3301      	adds	r3, #1
 800a754:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	3301      	adds	r3, #1
 800a75a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	3301      	adds	r3, #1
 800a760:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	3301      	adds	r3, #1
 800a766:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	3301      	adds	r3, #1
 800a76c:	61bb      	str	r3, [r7, #24]
 800a76e:	69ba      	ldr	r2, [r7, #24]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	429a      	cmp	r2, r3
 800a774:	d3e2      	bcc.n	800a73c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3724      	adds	r7, #36	; 0x24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a784:	b480      	push	{r7}
 800a786:	b08b      	sub	sp, #44	; 0x2c
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	4613      	mov	r3, r2
 800a790:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a79a:	88fb      	ldrh	r3, [r7, #6]
 800a79c:	089b      	lsrs	r3, r3, #2
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a7a2:	88fb      	ldrh	r3, [r7, #6]
 800a7a4:	f003 0303 	and.w	r3, r3, #3
 800a7a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	623b      	str	r3, [r7, #32]
 800a7ae:	e014      	b.n	800a7da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	601a      	str	r2, [r3, #0]
    pDest++;
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7be:	3301      	adds	r3, #1
 800a7c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	623b      	str	r3, [r7, #32]
 800a7da:	6a3a      	ldr	r2, [r7, #32]
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d3e6      	bcc.n	800a7b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a7e2:	8bfb      	ldrh	r3, [r7, #30]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d01e      	beq.n	800a826 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	f107 0310 	add.w	r3, r7, #16
 800a7f8:	6812      	ldr	r2, [r2, #0]
 800a7fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	6a3b      	ldr	r3, [r7, #32]
 800a800:	b2db      	uxtb	r3, r3
 800a802:	00db      	lsls	r3, r3, #3
 800a804:	fa22 f303 	lsr.w	r3, r2, r3
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	701a      	strb	r2, [r3, #0]
      i++;
 800a80e:	6a3b      	ldr	r3, [r7, #32]
 800a810:	3301      	adds	r3, #1
 800a812:	623b      	str	r3, [r7, #32]
      pDest++;
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	3301      	adds	r3, #1
 800a818:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a81a:	8bfb      	ldrh	r3, [r7, #30]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a820:	8bfb      	ldrh	r3, [r7, #30]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1ea      	bne.n	800a7fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a828:	4618      	mov	r0, r3
 800a82a:	372c      	adds	r7, #44	; 0x2c
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	695b      	ldr	r3, [r3, #20]
 800a840:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	4013      	ands	r3, r2
 800a84a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a84c:	68fb      	ldr	r3, [r7, #12]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	f003 0301 	and.w	r3, r3, #1
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
	...

0800a878 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a880:	2300      	movs	r3, #0
 800a882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	3301      	adds	r3, #1
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	4a13      	ldr	r2, [pc, #76]	; (800a8d8 <USB_CoreReset+0x60>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d901      	bls.n	800a894 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a890:	2303      	movs	r3, #3
 800a892:	e01a      	b.n	800a8ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	daf3      	bge.n	800a884 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a89c:	2300      	movs	r3, #0
 800a89e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	f043 0201 	orr.w	r2, r3, #1
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	60fb      	str	r3, [r7, #12]
 800a8b2:	4a09      	ldr	r2, [pc, #36]	; (800a8d8 <USB_CoreReset+0x60>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d901      	bls.n	800a8bc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e006      	b.n	800a8ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d0f1      	beq.n	800a8ac <USB_CoreReset+0x34>

  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	00030d40 	.word	0x00030d40

0800a8dc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8dc:	b084      	sub	sp, #16
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b086      	sub	sp, #24
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a8ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	2300      	movs	r3, #0
 800a900:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a906:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a916:	2b00      	cmp	r3, #0
 800a918:	d018      	beq.n	800a94c <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d10a      	bne.n	800a936 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a92e:	f043 0304 	orr.w	r3, r3, #4
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	e014      	b.n	800a960 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a944:	f023 0304 	bic.w	r3, r3, #4
 800a948:	6013      	str	r3, [r2, #0]
 800a94a:	e009      	b.n	800a960 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a95a:	f023 0304 	bic.w	r3, r3, #4
 800a95e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a960:	2110      	movs	r1, #16
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff fe70 	bl	800a648 <USB_FlushTxFifo>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff fe9a 	bl	800a6ac <USB_FlushRxFifo>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a982:	2300      	movs	r3, #0
 800a984:	613b      	str	r3, [r7, #16]
 800a986:	e015      	b.n	800a9b4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a994:	461a      	mov	r2, r3
 800a996:	f04f 33ff 	mov.w	r3, #4294967295
 800a99a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	613b      	str	r3, [r7, #16]
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	693a      	ldr	r2, [r7, #16]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d3e5      	bcc.n	800a988 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00b      	beq.n	800a9ee <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a13      	ldr	r2, [pc, #76]	; (800aa30 <USB_HostInit+0x154>)
 800a9e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a13      	ldr	r2, [pc, #76]	; (800aa34 <USB_HostInit+0x158>)
 800a9e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a9ec:	e009      	b.n	800aa02 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2280      	movs	r2, #128	; 0x80
 800a9f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a10      	ldr	r2, [pc, #64]	; (800aa38 <USB_HostInit+0x15c>)
 800a9f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a0f      	ldr	r2, [pc, #60]	; (800aa3c <USB_HostInit+0x160>)
 800a9fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d105      	bne.n	800aa14 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	f043 0210 	orr.w	r2, r3, #16
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	699a      	ldr	r2, [r3, #24]
 800aa18:	4b09      	ldr	r3, [pc, #36]	; (800aa40 <USB_HostInit+0x164>)
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800aa20:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3718      	adds	r7, #24
 800aa26:	46bd      	mov	sp, r7
 800aa28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa2c:	b004      	add	sp, #16
 800aa2e:	4770      	bx	lr
 800aa30:	01000200 	.word	0x01000200
 800aa34:	00e00300 	.word	0x00e00300
 800aa38:	00600080 	.word	0x00600080
 800aa3c:	004000e0 	.word	0x004000e0
 800aa40:	a3200008 	.word	0xa3200008

0800aa44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa62:	f023 0303 	bic.w	r3, r3, #3
 800aa66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	78fb      	ldrb	r3, [r7, #3]
 800aa72:	f003 0303 	and.w	r3, r3, #3
 800aa76:	68f9      	ldr	r1, [r7, #12]
 800aa78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d107      	bne.n	800aa96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800aa92:	6053      	str	r3, [r2, #4]
 800aa94:	e009      	b.n	800aaaa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800aa96:	78fb      	ldrb	r3, [r7, #3]
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d106      	bne.n	800aaaa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f241 7370 	movw	r3, #6000	; 0x1770
 800aaa8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800aac4:	2300      	movs	r3, #0
 800aac6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aad8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aae6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800aae8:	2064      	movs	r0, #100	; 0x64
 800aaea:	f7f7 fc85 	bl	80023f8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aaf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aafa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800aafc:	200a      	movs	r0, #10
 800aafe:	f7f7 fc7b 	bl	80023f8 <HAL_Delay>

  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ab30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d109      	bne.n	800ab50 <USB_DriveVbus+0x44>
 800ab3c:	78fb      	ldrb	r3, [r7, #3]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d106      	bne.n	800ab50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ab4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ab4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab5a:	d109      	bne.n	800ab70 <USB_DriveVbus+0x64>
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ab6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b085      	sub	sp, #20
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	0c5b      	lsrs	r3, r3, #17
 800ab9c:	f003 0303 	and.w	r3, r3, #3
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	b29b      	uxth	r3, r3
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
	...

0800abd0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	4608      	mov	r0, r1
 800abda:	4611      	mov	r1, r2
 800abdc:	461a      	mov	r2, r3
 800abde:	4603      	mov	r3, r0
 800abe0:	70fb      	strb	r3, [r7, #3]
 800abe2:	460b      	mov	r3, r1
 800abe4:	70bb      	strb	r3, [r7, #2]
 800abe6:	4613      	mov	r3, r2
 800abe8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800abf2:	78fb      	ldrb	r3, [r7, #3]
 800abf4:	015a      	lsls	r2, r3, #5
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	4413      	add	r3, r2
 800abfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abfe:	461a      	mov	r2, r3
 800ac00:	f04f 33ff 	mov.w	r3, #4294967295
 800ac04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ac06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d87e      	bhi.n	800ad0c <USB_HC_Init+0x13c>
 800ac0e:	a201      	add	r2, pc, #4	; (adr r2, 800ac14 <USB_HC_Init+0x44>)
 800ac10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac14:	0800ac25 	.word	0x0800ac25
 800ac18:	0800accf 	.word	0x0800accf
 800ac1c:	0800ac25 	.word	0x0800ac25
 800ac20:	0800ac91 	.word	0x0800ac91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac24:	78fb      	ldrb	r3, [r7, #3]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac30:	461a      	mov	r2, r3
 800ac32:	f240 439d 	movw	r3, #1181	; 0x49d
 800ac36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ac38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	da10      	bge.n	800ac62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ac40:	78fb      	ldrb	r3, [r7, #3]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	78fa      	ldrb	r2, [r7, #3]
 800ac50:	0151      	lsls	r1, r2, #5
 800ac52:	693a      	ldr	r2, [r7, #16]
 800ac54:	440a      	add	r2, r1
 800ac56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800ac60:	e057      	b.n	800ad12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d051      	beq.n	800ad12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ac6e:	78fb      	ldrb	r3, [r7, #3]
 800ac70:	015a      	lsls	r2, r3, #5
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	4413      	add	r3, r2
 800ac76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	78fa      	ldrb	r2, [r7, #3]
 800ac7e:	0151      	lsls	r1, r2, #5
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	440a      	add	r2, r1
 800ac84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ac8c:	60d3      	str	r3, [r2, #12]
      break;
 800ac8e:	e040      	b.n	800ad12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac90:	78fb      	ldrb	r3, [r7, #3]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	f240 639d 	movw	r3, #1693	; 0x69d
 800aca2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aca4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	da34      	bge.n	800ad16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800acac:	78fb      	ldrb	r3, [r7, #3]
 800acae:	015a      	lsls	r2, r3, #5
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	4413      	add	r3, r2
 800acb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	78fa      	ldrb	r2, [r7, #3]
 800acbc:	0151      	lsls	r1, r2, #5
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	440a      	add	r2, r1
 800acc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acca:	60d3      	str	r3, [r2, #12]
      }

      break;
 800accc:	e023      	b.n	800ad16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	015a      	lsls	r2, r3, #5
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	4413      	add	r3, r2
 800acd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acda:	461a      	mov	r2, r3
 800acdc:	f240 2325 	movw	r3, #549	; 0x225
 800ace0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ace2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	da17      	bge.n	800ad1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800acea:	78fb      	ldrb	r3, [r7, #3]
 800acec:	015a      	lsls	r2, r3, #5
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	4413      	add	r3, r2
 800acf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	78fa      	ldrb	r2, [r7, #3]
 800acfa:	0151      	lsls	r1, r2, #5
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	440a      	add	r2, r1
 800ad00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ad08:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ad0a:	e006      	b.n	800ad1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	77fb      	strb	r3, [r7, #31]
      break;
 800ad10:	e004      	b.n	800ad1c <USB_HC_Init+0x14c>
      break;
 800ad12:	bf00      	nop
 800ad14:	e002      	b.n	800ad1c <USB_HC_Init+0x14c>
      break;
 800ad16:	bf00      	nop
 800ad18:	e000      	b.n	800ad1c <USB_HC_Init+0x14c>
      break;
 800ad1a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800ad1c:	78fb      	ldrb	r3, [r7, #3]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	78fa      	ldrb	r2, [r7, #3]
 800ad2c:	0151      	lsls	r1, r2, #5
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	440a      	add	r2, r1
 800ad32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad36:	f043 0302 	orr.w	r3, r3, #2
 800ad3a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad42:	699a      	ldr	r2, [r3, #24]
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	f003 030f 	and.w	r3, r3, #15
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad50:	6939      	ldr	r1, [r7, #16]
 800ad52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ad56:	4313      	orrs	r3, r2
 800ad58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ad66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da03      	bge.n	800ad76 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ad6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad72:	61bb      	str	r3, [r7, #24]
 800ad74:	e001      	b.n	800ad7a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800ad76:	2300      	movs	r3, #0
 800ad78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff feff 	bl	800ab7e <USB_GetHostSpeed>
 800ad80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ad82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d106      	bne.n	800ad98 <USB_HC_Init+0x1c8>
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d003      	beq.n	800ad98 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ad90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ad94:	617b      	str	r3, [r7, #20]
 800ad96:	e001      	b.n	800ad9c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ad9c:	787b      	ldrb	r3, [r7, #1]
 800ad9e:	059b      	lsls	r3, r3, #22
 800ada0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ada4:	78bb      	ldrb	r3, [r7, #2]
 800ada6:	02db      	lsls	r3, r3, #11
 800ada8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800adac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800adae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800adb2:	049b      	lsls	r3, r3, #18
 800adb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800adb8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800adba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800adbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800adc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800adc6:	78fb      	ldrb	r3, [r7, #3]
 800adc8:	0159      	lsls	r1, r3, #5
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	440b      	add	r3, r1
 800adce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800add2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800add8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800adda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d10f      	bne.n	800ae02 <USB_HC_Init+0x232>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800ade2:	78fb      	ldrb	r3, [r7, #3]
 800ade4:	015a      	lsls	r2, r3, #5
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	4413      	add	r3, r2
 800adea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	78fa      	ldrb	r2, [r7, #3]
 800adf2:	0151      	lsls	r1, r2, #5
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	440a      	add	r2, r1
 800adf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae00:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ae02:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3720      	adds	r7, #32
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08c      	sub	sp, #48	; 0x30
 800ae10:	af02      	add	r7, sp, #8
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	4613      	mov	r3, r2
 800ae18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	785b      	ldrb	r3, [r3, #1]
 800ae22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ae24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae28:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d02d      	beq.n	800ae92 <USB_HC_StartXfer+0x86>
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	791b      	ldrb	r3, [r3, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d129      	bne.n	800ae92 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800ae3e:	79fb      	ldrb	r3, [r7, #7]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d117      	bne.n	800ae74 <USB_HC_StartXfer+0x68>
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	79db      	ldrb	r3, [r3, #7]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d003      	beq.n	800ae54 <USB_HC_StartXfer+0x48>
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	79db      	ldrb	r3, [r3, #7]
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d10f      	bne.n	800ae74 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	69fa      	ldr	r2, [r7, #28]
 800ae64:	0151      	lsls	r1, r2, #5
 800ae66:	6a3a      	ldr	r2, [r7, #32]
 800ae68:	440a      	add	r2, r1
 800ae6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae72:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800ae74:	79fb      	ldrb	r3, [r7, #7]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10b      	bne.n	800ae92 <USB_HC_StartXfer+0x86>
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	795b      	ldrb	r3, [r3, #5]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d107      	bne.n	800ae92 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	785b      	ldrb	r3, [r3, #1]
 800ae86:	4619      	mov	r1, r3
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f000 fa0d 	bl	800b2a8 <USB_DoPing>
      return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e0f8      	b.n	800b084 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d018      	beq.n	800aecc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	695b      	ldr	r3, [r3, #20]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	8912      	ldrh	r2, [r2, #8]
 800aea2:	4413      	add	r3, r2
 800aea4:	3b01      	subs	r3, #1
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	8912      	ldrh	r2, [r2, #8]
 800aeaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800aeb0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aeb2:	8b7b      	ldrh	r3, [r7, #26]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d90b      	bls.n	800aed0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800aeb8:	8b7b      	ldrh	r3, [r7, #26]
 800aeba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aebc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	8912      	ldrh	r2, [r2, #8]
 800aec2:	fb03 f202 	mul.w	r2, r3, r2
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	611a      	str	r2, [r3, #16]
 800aeca:	e001      	b.n	800aed0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800aecc:	2301      	movs	r3, #1
 800aece:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	78db      	ldrb	r3, [r3, #3]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d007      	beq.n	800aee8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aed8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	8912      	ldrh	r2, [r2, #8]
 800aede:	fb03 f202 	mul.w	r2, r3, r2
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	611a      	str	r2, [r3, #16]
 800aee6:	e003      	b.n	800aef0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	695a      	ldr	r2, [r3, #20]
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aef8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aefa:	04d9      	lsls	r1, r3, #19
 800aefc:	4b63      	ldr	r3, [pc, #396]	; (800b08c <USB_HC_StartXfer+0x280>)
 800aefe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800af00:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	7a9b      	ldrb	r3, [r3, #10]
 800af06:	075b      	lsls	r3, r3, #29
 800af08:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800af0c:	69f9      	ldr	r1, [r7, #28]
 800af0e:	0148      	lsls	r0, r1, #5
 800af10:	6a39      	ldr	r1, [r7, #32]
 800af12:	4401      	add	r1, r0
 800af14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800af18:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800af1a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800af1c:	79fb      	ldrb	r3, [r7, #7]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d009      	beq.n	800af36 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	68d9      	ldr	r1, [r3, #12]
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	015a      	lsls	r2, r3, #5
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	4413      	add	r3, r2
 800af2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af32:	460a      	mov	r2, r1
 800af34:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800af36:	6a3b      	ldr	r3, [r7, #32]
 800af38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	bf0c      	ite	eq
 800af46:	2301      	moveq	r3, #1
 800af48:	2300      	movne	r3, #0
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	015a      	lsls	r2, r3, #5
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	4413      	add	r3, r2
 800af56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	69fa      	ldr	r2, [r7, #28]
 800af5e:	0151      	lsls	r1, r2, #5
 800af60:	6a3a      	ldr	r2, [r7, #32]
 800af62:	440a      	add	r2, r1
 800af64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800af6c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	015a      	lsls	r2, r3, #5
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	4413      	add	r3, r2
 800af76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	7e7b      	ldrb	r3, [r7, #25]
 800af7e:	075b      	lsls	r3, r3, #29
 800af80:	69f9      	ldr	r1, [r7, #28]
 800af82:	0148      	lsls	r0, r1, #5
 800af84:	6a39      	ldr	r1, [r7, #32]
 800af86:	4401      	add	r1, r0
 800af88:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800af8c:	4313      	orrs	r3, r2
 800af8e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	4413      	add	r3, r2
 800af98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800afa6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	78db      	ldrb	r3, [r3, #3]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d004      	beq.n	800afba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afb6:	613b      	str	r3, [r7, #16]
 800afb8:	e003      	b.n	800afc2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800afc0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afc8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	015a      	lsls	r2, r3, #5
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	4413      	add	r3, r2
 800afd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afd6:	461a      	mov	r2, r3
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800afdc:	79fb      	ldrb	r3, [r7, #7]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	e04e      	b.n	800b084 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	78db      	ldrb	r3, [r3, #3]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d149      	bne.n	800b082 <USB_HC_StartXfer+0x276>
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d045      	beq.n	800b082 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	79db      	ldrb	r3, [r3, #7]
 800affa:	2b03      	cmp	r3, #3
 800affc:	d830      	bhi.n	800b060 <USB_HC_StartXfer+0x254>
 800affe:	a201      	add	r2, pc, #4	; (adr r2, 800b004 <USB_HC_StartXfer+0x1f8>)
 800b000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b004:	0800b015 	.word	0x0800b015
 800b008:	0800b039 	.word	0x0800b039
 800b00c:	0800b015 	.word	0x0800b015
 800b010:	0800b039 	.word	0x0800b039
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	3303      	adds	r3, #3
 800b01a:	089b      	lsrs	r3, r3, #2
 800b01c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b01e:	8afa      	ldrh	r2, [r7, #22]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b024:	b29b      	uxth	r3, r3
 800b026:	429a      	cmp	r2, r3
 800b028:	d91c      	bls.n	800b064 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	699b      	ldr	r3, [r3, #24]
 800b02e:	f043 0220 	orr.w	r2, r3, #32
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	619a      	str	r2, [r3, #24]
        }
        break;
 800b036:	e015      	b.n	800b064 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	695b      	ldr	r3, [r3, #20]
 800b03c:	3303      	adds	r3, #3
 800b03e:	089b      	lsrs	r3, r3, #2
 800b040:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b042:	8afa      	ldrh	r2, [r7, #22]
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	429a      	cmp	r2, r3
 800b050:	d90a      	bls.n	800b068 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	619a      	str	r2, [r3, #24]
        }
        break;
 800b05e:	e003      	b.n	800b068 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b060:	bf00      	nop
 800b062:	e002      	b.n	800b06a <USB_HC_StartXfer+0x25e>
        break;
 800b064:	bf00      	nop
 800b066:	e000      	b.n	800b06a <USB_HC_StartXfer+0x25e>
        break;
 800b068:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	68d9      	ldr	r1, [r3, #12]
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	785a      	ldrb	r2, [r3, #1]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	b29b      	uxth	r3, r3
 800b078:	2000      	movs	r0, #0
 800b07a:	9000      	str	r0, [sp, #0]
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f7ff fb43 	bl	800a708 <USB_WritePacket>
  }

  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3728      	adds	r7, #40	; 0x28
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	1ff80000 	.word	0x1ff80000

0800b090 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0a2:	695b      	ldr	r3, [r3, #20]
 800b0a4:	b29b      	uxth	r3, r3
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	b089      	sub	sp, #36	; 0x24
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b0c2:	78fb      	ldrb	r3, [r7, #3]
 800b0c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	015a      	lsls	r2, r3, #5
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	0c9b      	lsrs	r3, r3, #18
 800b0da:	f003 0303 	and.w	r3, r3, #3
 800b0de:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	0fdb      	lsrs	r3, r3, #31
 800b0f0:	f003 0301 	and.w	r3, r3, #1
 800b0f4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	f003 0320 	and.w	r3, r3, #32
 800b0fe:	2b20      	cmp	r3, #32
 800b100:	d104      	bne.n	800b10c <USB_HC_Halt+0x5a>
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	e0c6      	b.n	800b29a <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d002      	beq.n	800b118 <USB_HC_Halt+0x66>
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2b02      	cmp	r3, #2
 800b116:	d162      	bne.n	800b1de <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	015a      	lsls	r2, r3, #5
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	4413      	add	r3, r2
 800b120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	69ba      	ldr	r2, [r7, #24]
 800b128:	0151      	lsls	r1, r2, #5
 800b12a:	69fa      	ldr	r2, [r7, #28]
 800b12c:	440a      	add	r2, r1
 800b12e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b136:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	f003 0320 	and.w	r3, r3, #32
 800b140:	2b00      	cmp	r3, #0
 800b142:	f040 80a9 	bne.w	800b298 <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d132      	bne.n	800b1b8 <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	015a      	lsls	r2, r3, #5
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	4413      	add	r3, r2
 800b15a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	0151      	lsls	r1, r2, #5
 800b164:	69fa      	ldr	r2, [r7, #28]
 800b166:	440a      	add	r2, r1
 800b168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b16c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b170:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	015a      	lsls	r2, r3, #5
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	69ba      	ldr	r2, [r7, #24]
 800b182:	0151      	lsls	r1, r2, #5
 800b184:	69fa      	ldr	r2, [r7, #28]
 800b186:	440a      	add	r2, r1
 800b188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b18c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b190:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	60fb      	str	r3, [r7, #12]
 800b198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b19c:	d81d      	bhi.n	800b1da <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	015a      	lsls	r2, r3, #5
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1b4:	d0ed      	beq.n	800b192 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b1b6:	e06f      	b.n	800b298 <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	69ba      	ldr	r2, [r7, #24]
 800b1c8:	0151      	lsls	r1, r2, #5
 800b1ca:	69fa      	ldr	r2, [r7, #28]
 800b1cc:	440a      	add	r2, r1
 800b1ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1d6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b1d8:	e05e      	b.n	800b298 <USB_HC_Halt+0x1e6>
            break;
 800b1da:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b1dc:	e05c      	b.n	800b298 <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	69ba      	ldr	r2, [r7, #24]
 800b1ee:	0151      	lsls	r1, r2, #5
 800b1f0:	69fa      	ldr	r2, [r7, #28]
 800b1f2:	440a      	add	r2, r1
 800b1f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b1fc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d132      	bne.n	800b274 <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	015a      	lsls	r2, r3, #5
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	4413      	add	r3, r2
 800b216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	69ba      	ldr	r2, [r7, #24]
 800b21e:	0151      	lsls	r1, r2, #5
 800b220:	69fa      	ldr	r2, [r7, #28]
 800b222:	440a      	add	r2, r1
 800b224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b22c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	015a      	lsls	r2, r3, #5
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	4413      	add	r3, r2
 800b236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	69ba      	ldr	r2, [r7, #24]
 800b23e:	0151      	lsls	r1, r2, #5
 800b240:	69fa      	ldr	r2, [r7, #28]
 800b242:	440a      	add	r2, r1
 800b244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b24c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3301      	adds	r3, #1
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b258:	d81d      	bhi.n	800b296 <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	015a      	lsls	r2, r3, #5
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	4413      	add	r3, r2
 800b262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b26c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b270:	d0ed      	beq.n	800b24e <USB_HC_Halt+0x19c>
 800b272:	e011      	b.n	800b298 <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	015a      	lsls	r2, r3, #5
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	4413      	add	r3, r2
 800b27c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	0151      	lsls	r1, r2, #5
 800b286:	69fa      	ldr	r2, [r7, #28]
 800b288:	440a      	add	r2, r1
 800b28a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b28e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b292:	6013      	str	r3, [r2, #0]
 800b294:	e000      	b.n	800b298 <USB_HC_Halt+0x1e6>
          break;
 800b296:	bf00      	nop
    }
  }

  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3724      	adds	r7, #36	; 0x24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
	...

0800b2a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b2b8:	78fb      	ldrb	r3, [r7, #3]
 800b2ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	04da      	lsls	r2, r3, #19
 800b2c4:	4b15      	ldr	r3, [pc, #84]	; (800b31c <USB_DoPing+0x74>)
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	693a      	ldr	r2, [r7, #16]
 800b2ca:	0151      	lsls	r1, r2, #5
 800b2cc:	697a      	ldr	r2, [r7, #20]
 800b2ce:	440a      	add	r2, r1
 800b2d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b2d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	015a      	lsls	r2, r3, #5
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b2f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b2f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	015a      	lsls	r2, r3, #5
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	4413      	add	r3, r2
 800b302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b306:	461a      	mov	r2, r3
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	371c      	adds	r7, #28
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	1ff80000 	.word	0x1ff80000

0800b320 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b088      	sub	sp, #32
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b328:	2300      	movs	r3, #0
 800b32a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b330:	2300      	movs	r3, #0
 800b332:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f7ff f92a 	bl	800a58e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b33a:	2110      	movs	r1, #16
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7ff f983 	bl	800a648 <USB_FlushTxFifo>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d001      	beq.n	800b34c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f7ff f9ad 	bl	800a6ac <USB_FlushRxFifo>
 800b352:	4603      	mov	r3, r0
 800b354:	2b00      	cmp	r3, #0
 800b356:	d001      	beq.n	800b35c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b35c:	2300      	movs	r3, #0
 800b35e:	61bb      	str	r3, [r7, #24]
 800b360:	e01f      	b.n	800b3a2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	015a      	lsls	r2, r3, #5
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	4413      	add	r3, r2
 800b36a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b378:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b380:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b388:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	015a      	lsls	r2, r3, #5
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	4413      	add	r3, r2
 800b392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b396:	461a      	mov	r2, r3
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	61bb      	str	r3, [r7, #24]
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	2b0f      	cmp	r3, #15
 800b3a6:	d9dc      	bls.n	800b362 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	61bb      	str	r3, [r7, #24]
 800b3ac:	e033      	b.n	800b416 <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	015a      	lsls	r2, r3, #5
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	4413      	add	r3, r2
 800b3de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	60fb      	str	r3, [r7, #12]
 800b3ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3f2:	d80c      	bhi.n	800b40e <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	015a      	lsls	r2, r3, #5
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b40a:	d0ed      	beq.n	800b3e8 <USB_StopHost+0xc8>
 800b40c:	e000      	b.n	800b410 <USB_StopHost+0xf0>
        break;
 800b40e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	3301      	adds	r3, #1
 800b414:	61bb      	str	r3, [r7, #24]
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	2b0f      	cmp	r3, #15
 800b41a:	d9c8      	bls.n	800b3ae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b422:	461a      	mov	r2, r3
 800b424:	f04f 33ff 	mov.w	r3, #4294967295
 800b428:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f04f 32ff 	mov.w	r2, #4294967295
 800b430:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f7ff f89a 	bl	800a56c <USB_EnableGlobalInt>

  return ret;
 800b438:	7ffb      	ldrb	r3, [r7, #31]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3720      	adds	r7, #32
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b442:	b590      	push	{r4, r7, lr}
 800b444:	b089      	sub	sp, #36	; 0x24
 800b446:	af04      	add	r7, sp, #16
 800b448:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b44a:	2301      	movs	r3, #1
 800b44c:	2202      	movs	r2, #2
 800b44e:	2102      	movs	r1, #2
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fc67 	bl	800bd24 <USBH_FindInterface>
 800b456:	4603      	mov	r3, r0
 800b458:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	2bff      	cmp	r3, #255	; 0xff
 800b45e:	d002      	beq.n	800b466 <USBH_CDC_InterfaceInit+0x24>
 800b460:	7bfb      	ldrb	r3, [r7, #15]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d901      	bls.n	800b46a <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b466:	2302      	movs	r3, #2
 800b468:	e13d      	b.n	800b6e6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
 800b46c:	4619      	mov	r1, r3
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 fc3c 	bl	800bcec <USBH_SelectInterface>
 800b474:	4603      	mov	r3, r0
 800b476:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b47e:	2302      	movs	r3, #2
 800b480:	e131      	b.n	800b6e6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b488:	2050      	movs	r0, #80	; 0x50
 800b48a:	f00e fbb7 	bl	8019bfc <malloc>
 800b48e:	4603      	mov	r3, r0
 800b490:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d101      	bne.n	800b4a6 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	e11f      	b.n	800b6e6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b4a6:	2250      	movs	r2, #80	; 0x50
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	68b8      	ldr	r0, [r7, #8]
 800b4ac:	f00e fbde 	bl	8019c6c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	211a      	movs	r1, #26
 800b4b6:	fb01 f303 	mul.w	r3, r1, r3
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	b25b      	sxtb	r3, r3
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	da15      	bge.n	800b4f4 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	211a      	movs	r1, #26
 800b4ce:	fb01 f303 	mul.w	r3, r1, r3
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b4d8:	781a      	ldrb	r2, [r3, #0]
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	211a      	movs	r1, #26
 800b4e4:	fb01 f303 	mul.w	r3, r1, r3
 800b4e8:	4413      	add	r3, r2
 800b4ea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b4ee:	881a      	ldrh	r2, [r3, #0]
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	785b      	ldrb	r3, [r3, #1]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f001 fe33 	bl	800d166 <USBH_AllocPipe>
 800b500:	4603      	mov	r3, r0
 800b502:	461a      	mov	r2, r3
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	7819      	ldrb	r1, [r3, #0]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	7858      	ldrb	r0, [r3, #1]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	8952      	ldrh	r2, [r2, #10]
 800b520:	9202      	str	r2, [sp, #8]
 800b522:	2203      	movs	r2, #3
 800b524:	9201      	str	r2, [sp, #4]
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	4623      	mov	r3, r4
 800b52a:	4602      	mov	r2, r0
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f001 fdeb 	bl	800d108 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	2200      	movs	r2, #0
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f004 fb56 	bl	800fbec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b540:	2300      	movs	r3, #0
 800b542:	2200      	movs	r2, #0
 800b544:	210a      	movs	r1, #10
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fbec 	bl	800bd24 <USBH_FindInterface>
 800b54c:	4603      	mov	r3, r0
 800b54e:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b550:	7bfb      	ldrb	r3, [r7, #15]
 800b552:	2bff      	cmp	r3, #255	; 0xff
 800b554:	d002      	beq.n	800b55c <USBH_CDC_InterfaceInit+0x11a>
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d901      	bls.n	800b560 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b55c:	2302      	movs	r3, #2
 800b55e:	e0c2      	b.n	800b6e6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b560:	7bfb      	ldrb	r3, [r7, #15]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	211a      	movs	r1, #26
 800b566:	fb01 f303 	mul.w	r3, r1, r3
 800b56a:	4413      	add	r3, r2
 800b56c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	b25b      	sxtb	r3, r3
 800b574:	2b00      	cmp	r3, #0
 800b576:	da16      	bge.n	800b5a6 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b578:	7bfb      	ldrb	r3, [r7, #15]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	211a      	movs	r1, #26
 800b57e:	fb01 f303 	mul.w	r3, r1, r3
 800b582:	4413      	add	r3, r2
 800b584:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b588:	781a      	ldrb	r2, [r3, #0]
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b58e:	7bfb      	ldrb	r3, [r7, #15]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	211a      	movs	r1, #26
 800b594:	fb01 f303 	mul.w	r3, r1, r3
 800b598:	4413      	add	r3, r2
 800b59a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b59e:	881a      	ldrh	r2, [r3, #0]
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	835a      	strh	r2, [r3, #26]
 800b5a4:	e015      	b.n	800b5d2 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	211a      	movs	r1, #26
 800b5ac:	fb01 f303 	mul.w	r3, r1, r3
 800b5b0:	4413      	add	r3, r2
 800b5b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b5b6:	781a      	ldrb	r2, [r3, #0]
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b5bc:	7bfb      	ldrb	r3, [r7, #15]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	211a      	movs	r1, #26
 800b5c2:	fb01 f303 	mul.w	r3, r1, r3
 800b5c6:	4413      	add	r3, r2
 800b5c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b5cc:	881a      	ldrh	r2, [r3, #0]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b5d2:	7bfb      	ldrb	r3, [r7, #15]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	211a      	movs	r1, #26
 800b5d8:	fb01 f303 	mul.w	r3, r1, r3
 800b5dc:	4413      	add	r3, r2
 800b5de:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	b25b      	sxtb	r3, r3
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	da16      	bge.n	800b618 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b5ea:	7bfb      	ldrb	r3, [r7, #15]
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	211a      	movs	r1, #26
 800b5f0:	fb01 f303 	mul.w	r3, r1, r3
 800b5f4:	4413      	add	r3, r2
 800b5f6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b5fa:	781a      	ldrb	r2, [r3, #0]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b600:	7bfb      	ldrb	r3, [r7, #15]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	211a      	movs	r1, #26
 800b606:	fb01 f303 	mul.w	r3, r1, r3
 800b60a:	4413      	add	r3, r2
 800b60c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b610:	881a      	ldrh	r2, [r3, #0]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	835a      	strh	r2, [r3, #26]
 800b616:	e015      	b.n	800b644 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b618:	7bfb      	ldrb	r3, [r7, #15]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	211a      	movs	r1, #26
 800b61e:	fb01 f303 	mul.w	r3, r1, r3
 800b622:	4413      	add	r3, r2
 800b624:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b628:	781a      	ldrb	r2, [r3, #0]
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	211a      	movs	r1, #26
 800b634:	fb01 f303 	mul.w	r3, r1, r3
 800b638:	4413      	add	r3, r2
 800b63a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b63e:	881a      	ldrh	r2, [r3, #0]
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	7b9b      	ldrb	r3, [r3, #14]
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f001 fd8b 	bl	800d166 <USBH_AllocPipe>
 800b650:	4603      	mov	r3, r0
 800b652:	461a      	mov	r2, r3
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	7bdb      	ldrb	r3, [r3, #15]
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f001 fd81 	bl	800d166 <USBH_AllocPipe>
 800b664:	4603      	mov	r3, r0
 800b666:	461a      	mov	r2, r3
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	7b59      	ldrb	r1, [r3, #13]
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	7b98      	ldrb	r0, [r3, #14]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	8b12      	ldrh	r2, [r2, #24]
 800b684:	9202      	str	r2, [sp, #8]
 800b686:	2202      	movs	r2, #2
 800b688:	9201      	str	r2, [sp, #4]
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	4623      	mov	r3, r4
 800b68e:	4602      	mov	r2, r0
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f001 fd39 	bl	800d108 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	7b19      	ldrb	r1, [r3, #12]
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	7bd8      	ldrb	r0, [r3, #15]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	8b52      	ldrh	r2, [r2, #26]
 800b6ae:	9202      	str	r2, [sp, #8]
 800b6b0:	2202      	movs	r2, #2
 800b6b2:	9201      	str	r2, [sp, #4]
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	4623      	mov	r3, r4
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f001 fd24 	bl	800d108 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	7b5b      	ldrb	r3, [r3, #13]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f004 fa8b 	bl	800fbec <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	7b1b      	ldrb	r3, [r3, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	4619      	mov	r1, r3
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f004 fa84 	bl	800fbec <USBH_LL_SetToggle>

  return USBH_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd90      	pop	{r4, r7, pc}

0800b6ee <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b084      	sub	sp, #16
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6fc:	69db      	ldr	r3, [r3, #28]
 800b6fe:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00e      	beq.n	800b726 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f001 fd19 	bl	800d146 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	4619      	mov	r1, r3
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f001 fd44 	bl	800d1a8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	7b1b      	ldrb	r3, [r3, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00e      	beq.n	800b74c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	7b1b      	ldrb	r3, [r3, #12]
 800b732:	4619      	mov	r1, r3
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f001 fd06 	bl	800d146 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	7b1b      	ldrb	r3, [r3, #12]
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f001 fd31 	bl	800d1a8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	7b5b      	ldrb	r3, [r3, #13]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00e      	beq.n	800b772 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	7b5b      	ldrb	r3, [r3, #13]
 800b758:	4619      	mov	r1, r3
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f001 fcf3 	bl	800d146 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	7b5b      	ldrb	r3, [r3, #13]
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f001 fd1e 	bl	800d1a8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00b      	beq.n	800b796 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b784:	69db      	ldr	r3, [r3, #28]
 800b786:	4618      	mov	r0, r3
 800b788:	f00e fa40 	bl	8019c0c <free>
    phost->pActiveClass->pData = 0U;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b792:	2200      	movs	r2, #0
 800b794:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7ae:	69db      	ldr	r3, [r3, #28]
 800b7b0:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	3340      	adds	r3, #64	; 0x40
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 f8b2 	bl	800b922 <GetLineCoding>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b7c2:	7afb      	ldrb	r3, [r7, #11]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d105      	bne.n	800b7d4 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b7ce:	2102      	movs	r1, #2
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b7d4:	7afb      	ldrb	r3, [r7, #11]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
	...

0800b7e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7f6:	69db      	ldr	r3, [r3, #28]
 800b7f8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b800:	2b04      	cmp	r3, #4
 800b802:	d877      	bhi.n	800b8f4 <USBH_CDC_Process+0x114>
 800b804:	a201      	add	r2, pc, #4	; (adr r2, 800b80c <USBH_CDC_Process+0x2c>)
 800b806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80a:	bf00      	nop
 800b80c:	0800b821 	.word	0x0800b821
 800b810:	0800b827 	.word	0x0800b827
 800b814:	0800b857 	.word	0x0800b857
 800b818:	0800b8cb 	.word	0x0800b8cb
 800b81c:	0800b8d9 	.word	0x0800b8d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b820:	2300      	movs	r3, #0
 800b822:	73fb      	strb	r3, [r7, #15]
      break;
 800b824:	e06d      	b.n	800b902 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 f897 	bl	800b960 <SetLineCoding>
 800b832:	4603      	mov	r3, r0
 800b834:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b836:	7bbb      	ldrb	r3, [r7, #14]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d104      	bne.n	800b846 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	2202      	movs	r2, #2
 800b840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b844:	e058      	b.n	800b8f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b846:	7bbb      	ldrb	r3, [r7, #14]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d055      	beq.n	800b8f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	2204      	movs	r2, #4
 800b850:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b854:	e050      	b.n	800b8f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	3340      	adds	r3, #64	; 0x40
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f860 	bl	800b922 <GetLineCoding>
 800b862:	4603      	mov	r3, r0
 800b864:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b866:	7bbb      	ldrb	r3, [r7, #14]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d126      	bne.n	800b8ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b87e:	791b      	ldrb	r3, [r3, #4]
 800b880:	429a      	cmp	r2, r3
 800b882:	d13b      	bne.n	800b8fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b88e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b890:	429a      	cmp	r2, r3
 800b892:	d133      	bne.n	800b8fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b89e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d12b      	bne.n	800b8fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d124      	bne.n	800b8fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f958 	bl	800bb68 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b8b8:	e020      	b.n	800b8fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b8ba:	7bbb      	ldrb	r3, [r7, #14]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d01d      	beq.n	800b8fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	2204      	movs	r2, #4
 800b8c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b8c8:	e018      	b.n	800b8fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f867 	bl	800b99e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f8da 	bl	800ba8a <CDC_ProcessReception>
      break;
 800b8d6:	e014      	b.n	800b902 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b8d8:	2100      	movs	r1, #0
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 ffe3 	bl	800c8a6 <USBH_ClrFeature>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10a      	bne.n	800b900 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b8f2:	e005      	b.n	800b900 <USBH_CDC_Process+0x120>

    default:
      break;
 800b8f4:	bf00      	nop
 800b8f6:	e004      	b.n	800b902 <USBH_CDC_Process+0x122>
      break;
 800b8f8:	bf00      	nop
 800b8fa:	e002      	b.n	800b902 <USBH_CDC_Process+0x122>
      break;
 800b8fc:	bf00      	nop
 800b8fe:	e000      	b.n	800b902 <USBH_CDC_Process+0x122>
      break;
 800b900:	bf00      	nop

  }

  return status;
 800b902:	7bfb      	ldrb	r3, [r7, #15]
}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b082      	sub	sp, #8
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	22a1      	movs	r2, #161	; 0xa1
 800b930:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2221      	movs	r2, #33	; 0x21
 800b936:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2207      	movs	r2, #7
 800b948:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	2207      	movs	r2, #7
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f001 f988 	bl	800cc66 <USBH_CtlReq>
 800b956:	4603      	mov	r3, r0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2221      	movs	r2, #33	; 0x21
 800b96e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2220      	movs	r2, #32
 800b974:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2207      	movs	r2, #7
 800b986:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	2207      	movs	r2, #7
 800b98c:	4619      	mov	r1, r3
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f001 f969 	bl	800cc66 <USBH_CtlReq>
 800b994:	4603      	mov	r3, r0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b086      	sub	sp, #24
 800b9a2:	af02      	add	r7, sp, #8
 800b9a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9ac:	69db      	ldr	r3, [r3, #28]
 800b9ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d002      	beq.n	800b9c4 <CDC_ProcessTransmission+0x26>
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d023      	beq.n	800ba0a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b9c2:	e05e      	b.n	800ba82 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	8b12      	ldrh	r2, [r2, #24]
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d90b      	bls.n	800b9e8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	69d9      	ldr	r1, [r3, #28]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	8b1a      	ldrh	r2, [r3, #24]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	7b5b      	ldrb	r3, [r3, #13]
 800b9dc:	2001      	movs	r0, #1
 800b9de:	9000      	str	r0, [sp, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f001 fb4e 	bl	800d082 <USBH_BulkSendData>
 800b9e6:	e00b      	b.n	800ba00 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	7b5b      	ldrb	r3, [r3, #13]
 800b9f6:	2001      	movs	r0, #1
 800b9f8:	9000      	str	r0, [sp, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f001 fb41 	bl	800d082 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2202      	movs	r2, #2
 800ba04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ba08:	e03b      	b.n	800ba82 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	7b5b      	ldrb	r3, [r3, #13]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f004 f8c1 	bl	800fb98 <USBH_LL_GetURBState>
 800ba16:	4603      	mov	r3, r0
 800ba18:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ba1a:	7afb      	ldrb	r3, [r7, #11]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d128      	bne.n	800ba72 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	8b12      	ldrh	r2, [r2, #24]
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d90e      	bls.n	800ba4a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	8b12      	ldrh	r2, [r2, #24]
 800ba34:	1a9a      	subs	r2, r3, r2
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	69db      	ldr	r3, [r3, #28]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	8b12      	ldrh	r2, [r2, #24]
 800ba42:	441a      	add	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	61da      	str	r2, [r3, #28]
 800ba48:	e002      	b.n	800ba50 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d004      	beq.n	800ba62 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ba60:	e00e      	b.n	800ba80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f868 	bl	800bb40 <USBH_CDC_TransmitCallback>
      break;
 800ba70:	e006      	b.n	800ba80 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ba72:	7afb      	ldrb	r3, [r7, #11]
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d103      	bne.n	800ba80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ba80:	bf00      	nop
  }
}
 800ba82:	bf00      	nop
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b086      	sub	sp, #24
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba98:	69db      	ldr	r3, [r3, #28]
 800ba9a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800baa6:	2b03      	cmp	r3, #3
 800baa8:	d002      	beq.n	800bab0 <CDC_ProcessReception+0x26>
 800baaa:	2b04      	cmp	r3, #4
 800baac:	d00e      	beq.n	800bacc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800baae:	e043      	b.n	800bb38 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	6a19      	ldr	r1, [r3, #32]
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	8b5a      	ldrh	r2, [r3, #26]
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	7b1b      	ldrb	r3, [r3, #12]
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f001 fb05 	bl	800d0cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	2204      	movs	r2, #4
 800bac6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800baca:	e035      	b.n	800bb38 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	7b1b      	ldrb	r3, [r3, #12]
 800bad0:	4619      	mov	r1, r3
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f004 f860 	bl	800fb98 <USBH_LL_GetURBState>
 800bad8:	4603      	mov	r3, r0
 800bada:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800badc:	7cfb      	ldrb	r3, [r7, #19]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d129      	bne.n	800bb36 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	7b1b      	ldrb	r3, [r3, #12]
 800bae6:	4619      	mov	r1, r3
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f003 ffc3 	bl	800fa74 <USBH_LL_GetLastXferSize>
 800baee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d016      	beq.n	800bb28 <CDC_ProcessReception+0x9e>
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	8b5b      	ldrh	r3, [r3, #26]
 800bafe:	461a      	mov	r2, r3
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d910      	bls.n	800bb28 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	1ad2      	subs	r2, r2, r3
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	6a1a      	ldr	r2, [r3, #32]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	441a      	add	r2, r3
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	2203      	movs	r2, #3
 800bb22:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bb26:	e006      	b.n	800bb36 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f80f 	bl	800bb54 <USBH_CDC_ReceiveCallback>
      break;
 800bb36:	bf00      	nop
  }
}
 800bb38:	bf00      	nop
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	4613      	mov	r3, r2
 800bb88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d101      	bne.n	800bb94 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bb90:	2302      	movs	r3, #2
 800bb92:	e029      	b.n	800bbe8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	79fa      	ldrb	r2, [r7, #7]
 800bb98:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f000 f81f 	bl	800bbf0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d003      	beq.n	800bbe0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f003 fe93 	bl	800f90c <USBH_LL_Init>

  return USBH_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	60fb      	str	r3, [r7, #12]
 800bc00:	e009      	b.n	800bc16 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	33e0      	adds	r3, #224	; 0xe0
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	3301      	adds	r3, #1
 800bc14:	60fb      	str	r3, [r7, #12]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b0e      	cmp	r3, #14
 800bc1a:	d9f2      	bls.n	800bc02 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	60fb      	str	r3, [r7, #12]
 800bc20:	e009      	b.n	800bc36 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	4413      	add	r3, r2
 800bc28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	3301      	adds	r3, #1
 800bc34:	60fb      	str	r3, [r7, #12]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc3c:	d3f1      	bcc.n	800bc22 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2240      	movs	r2, #64	; 0x40
 800bc62:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bca2:	2300      	movs	r3, #0
 800bca4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d016      	beq.n	800bcda <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10e      	bne.n	800bcd4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bcbc:	1c59      	adds	r1, r3, #1
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	33de      	adds	r3, #222	; 0xde
 800bcc8:	6839      	ldr	r1, [r7, #0]
 800bcca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	73fb      	strb	r3, [r7, #15]
 800bcd2:	e004      	b.n	800bcde <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	73fb      	strb	r3, [r7, #15]
 800bcd8:	e001      	b.n	800bcde <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bcde:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bd02:	78fa      	ldrb	r2, [r7, #3]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d204      	bcs.n	800bd12 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	78fa      	ldrb	r2, [r7, #3]
 800bd0c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bd10:	e001      	b.n	800bd16 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bd12:	2302      	movs	r3, #2
 800bd14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bd16:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3714      	adds	r7, #20
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b087      	sub	sp, #28
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	4608      	mov	r0, r1
 800bd2e:	4611      	mov	r1, r2
 800bd30:	461a      	mov	r2, r3
 800bd32:	4603      	mov	r3, r0
 800bd34:	70fb      	strb	r3, [r7, #3]
 800bd36:	460b      	mov	r3, r1
 800bd38:	70bb      	strb	r3, [r7, #2]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bd4c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bd4e:	e025      	b.n	800bd9c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bd50:	7dfb      	ldrb	r3, [r7, #23]
 800bd52:	221a      	movs	r2, #26
 800bd54:	fb02 f303 	mul.w	r3, r2, r3
 800bd58:	3308      	adds	r3, #8
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	3302      	adds	r3, #2
 800bd60:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	795b      	ldrb	r3, [r3, #5]
 800bd66:	78fa      	ldrb	r2, [r7, #3]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d002      	beq.n	800bd72 <USBH_FindInterface+0x4e>
 800bd6c:	78fb      	ldrb	r3, [r7, #3]
 800bd6e:	2bff      	cmp	r3, #255	; 0xff
 800bd70:	d111      	bne.n	800bd96 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bd76:	78ba      	ldrb	r2, [r7, #2]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d002      	beq.n	800bd82 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd7c:	78bb      	ldrb	r3, [r7, #2]
 800bd7e:	2bff      	cmp	r3, #255	; 0xff
 800bd80:	d109      	bne.n	800bd96 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd86:	787a      	ldrb	r2, [r7, #1]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d002      	beq.n	800bd92 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bd8c:	787b      	ldrb	r3, [r7, #1]
 800bd8e:	2bff      	cmp	r3, #255	; 0xff
 800bd90:	d101      	bne.n	800bd96 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bd92:	7dfb      	ldrb	r3, [r7, #23]
 800bd94:	e006      	b.n	800bda4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d9d6      	bls.n	800bd50 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bda2:	23ff      	movs	r3, #255	; 0xff
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	371c      	adds	r7, #28
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f003 fde3 	bl	800f984 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f003 fefc 	bl	800fbbe <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b088      	sub	sp, #32
 800bdd4:	af04      	add	r7, sp, #16
 800bdd6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bdd8:	2302      	movs	r3, #2
 800bdda:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bddc:	2300      	movs	r3, #0
 800bdde:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d102      	bne.n	800bdf2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2203      	movs	r2, #3
 800bdf0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	2b0b      	cmp	r3, #11
 800bdfa:	f200 81b3 	bhi.w	800c164 <USBH_Process+0x394>
 800bdfe:	a201      	add	r2, pc, #4	; (adr r2, 800be04 <USBH_Process+0x34>)
 800be00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be04:	0800be35 	.word	0x0800be35
 800be08:	0800be67 	.word	0x0800be67
 800be0c:	0800becf 	.word	0x0800becf
 800be10:	0800c0ff 	.word	0x0800c0ff
 800be14:	0800c165 	.word	0x0800c165
 800be18:	0800bf73 	.word	0x0800bf73
 800be1c:	0800c0a5 	.word	0x0800c0a5
 800be20:	0800bfa9 	.word	0x0800bfa9
 800be24:	0800bfc9 	.word	0x0800bfc9
 800be28:	0800bfe9 	.word	0x0800bfe9
 800be2c:	0800c017 	.word	0x0800c017
 800be30:	0800c0e7 	.word	0x0800c0e7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f000 8193 	beq.w	800c168 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800be48:	20c8      	movs	r0, #200	; 0xc8
 800be4a:	f003 feff 	bl	800fc4c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f003 fdf5 	bl	800fa3e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800be64:	e180      	b.n	800c168 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d107      	bne.n	800be80 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2202      	movs	r2, #2
 800be7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800be7e:	e182      	b.n	800c186 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800be86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be8a:	d914      	bls.n	800beb6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800be92:	3301      	adds	r3, #1
 800be94:	b2da      	uxtb	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	d903      	bls.n	800beae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	220d      	movs	r2, #13
 800beaa:	701a      	strb	r2, [r3, #0]
      break;
 800beac:	e16b      	b.n	800c186 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	701a      	strb	r2, [r3, #0]
      break;
 800beb4:	e167      	b.n	800c186 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bebc:	f103 020a 	add.w	r2, r3, #10
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bec6:	200a      	movs	r0, #10
 800bec8:	f003 fec0 	bl	800fc4c <USBH_Delay>
      break;
 800becc:	e15b      	b.n	800c186 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d005      	beq.n	800bee4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bede:	2104      	movs	r1, #4
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bee4:	2064      	movs	r0, #100	; 0x64
 800bee6:	f003 feb1 	bl	800fc4c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f003 fd80 	bl	800f9f0 <USBH_LL_GetSpeed>
 800bef0:	4603      	mov	r3, r0
 800bef2:	461a      	mov	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2205      	movs	r2, #5
 800befe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bf00:	2100      	movs	r1, #0
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f001 f92f 	bl	800d166 <USBH_AllocPipe>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bf10:	2180      	movs	r1, #128	; 0x80
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f001 f927 	bl	800d166 <USBH_AllocPipe>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	7919      	ldrb	r1, [r3, #4]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bf34:	b292      	uxth	r2, r2
 800bf36:	9202      	str	r2, [sp, #8]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	9201      	str	r2, [sp, #4]
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2280      	movs	r2, #128	; 0x80
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f001 f8e0 	bl	800d108 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	7959      	ldrb	r1, [r3, #5]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bf5c:	b292      	uxth	r2, r2
 800bf5e:	9202      	str	r2, [sp, #8]
 800bf60:	2200      	movs	r2, #0
 800bf62:	9201      	str	r2, [sp, #4]
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	4603      	mov	r3, r0
 800bf68:	2200      	movs	r2, #0
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f001 f8cc 	bl	800d108 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bf70:	e109      	b.n	800c186 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f90c 	bl	800c190 <USBH_HandleEnum>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bf7c:	7bbb      	ldrb	r3, [r7, #14]
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f040 80f3 	bne.w	800c16c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d103      	bne.n	800bfa0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2208      	movs	r2, #8
 800bf9c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bf9e:	e0e5      	b.n	800c16c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2207      	movs	r2, #7
 800bfa4:	701a      	strb	r2, [r3, #0]
      break;
 800bfa6:	e0e1      	b.n	800c16c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	f000 80de 	beq.w	800c170 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfba:	2101      	movs	r1, #1
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2208      	movs	r2, #8
 800bfc4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800bfc6:	e0d3      	b.n	800c170 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fc20 	bl	800c818 <USBH_SetCfg>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f040 80ca 	bne.w	800c174 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2209      	movs	r2, #9
 800bfe4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bfe6:	e0c5      	b.n	800c174 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800bfee:	f003 0320 	and.w	r3, r3, #32
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00b      	beq.n	800c00e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800bff6:	2101      	movs	r1, #1
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fc30 	bl	800c85e <USBH_SetFeature>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	f040 80b9 	bne.w	800c178 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	220a      	movs	r2, #10
 800c00a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c00c:	e0b4      	b.n	800c178 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	220a      	movs	r2, #10
 800c012:	701a      	strb	r2, [r3, #0]
      break;
 800c014:	e0b0      	b.n	800c178 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 80ad 	beq.w	800c17c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c02a:	2300      	movs	r3, #0
 800c02c:	73fb      	strb	r3, [r7, #15]
 800c02e:	e016      	b.n	800c05e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c030:	7bfa      	ldrb	r2, [r7, #15]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	32de      	adds	r2, #222	; 0xde
 800c036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03a:	791a      	ldrb	r2, [r3, #4]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c042:	429a      	cmp	r2, r3
 800c044:	d108      	bne.n	800c058 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c046:	7bfa      	ldrb	r2, [r7, #15]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	32de      	adds	r2, #222	; 0xde
 800c04c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c056:	e005      	b.n	800c064 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c058:	7bfb      	ldrb	r3, [r7, #15]
 800c05a:	3301      	adds	r3, #1
 800c05c:	73fb      	strb	r3, [r7, #15]
 800c05e:	7bfb      	ldrb	r3, [r7, #15]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d0e5      	beq.n	800c030 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d016      	beq.n	800c09c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	4798      	blx	r3
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d109      	bne.n	800c094 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2206      	movs	r2, #6
 800c084:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c08c:	2103      	movs	r1, #3
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c092:	e073      	b.n	800c17c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	220d      	movs	r2, #13
 800c098:	701a      	strb	r2, [r3, #0]
      break;
 800c09a:	e06f      	b.n	800c17c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	220d      	movs	r2, #13
 800c0a0:	701a      	strb	r2, [r3, #0]
      break;
 800c0a2:	e06b      	b.n	800c17c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d017      	beq.n	800c0de <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	4798      	blx	r3
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d103      	bne.n	800c0ce <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	220b      	movs	r2, #11
 800c0ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c0cc:	e058      	b.n	800c180 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800c0ce:	7bbb      	ldrb	r3, [r7, #14]
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b02      	cmp	r3, #2
 800c0d4:	d154      	bne.n	800c180 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	220d      	movs	r2, #13
 800c0da:	701a      	strb	r2, [r3, #0]
      break;
 800c0dc:	e050      	b.n	800c180 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	220d      	movs	r2, #13
 800c0e2:	701a      	strb	r2, [r3, #0]
      break;
 800c0e4:	e04c      	b.n	800c180 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d049      	beq.n	800c184 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	4798      	blx	r3
      }
      break;
 800c0fc:	e042      	b.n	800c184 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7ff fd72 	bl	800bbf0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c112:	2b00      	cmp	r3, #0
 800c114:	d009      	beq.n	800c12a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c130:	2b00      	cmp	r3, #0
 800c132:	d005      	beq.n	800c140 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c13a:	2105      	movs	r1, #5
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d107      	bne.n	800c15c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f7ff fe2b 	bl	800bdb0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c15a:	e014      	b.n	800c186 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f003 fc11 	bl	800f984 <USBH_LL_Start>
      break;
 800c162:	e010      	b.n	800c186 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800c164:	bf00      	nop
 800c166:	e00e      	b.n	800c186 <USBH_Process+0x3b6>
      break;
 800c168:	bf00      	nop
 800c16a:	e00c      	b.n	800c186 <USBH_Process+0x3b6>
      break;
 800c16c:	bf00      	nop
 800c16e:	e00a      	b.n	800c186 <USBH_Process+0x3b6>
    break;
 800c170:	bf00      	nop
 800c172:	e008      	b.n	800c186 <USBH_Process+0x3b6>
      break;
 800c174:	bf00      	nop
 800c176:	e006      	b.n	800c186 <USBH_Process+0x3b6>
      break;
 800c178:	bf00      	nop
 800c17a:	e004      	b.n	800c186 <USBH_Process+0x3b6>
      break;
 800c17c:	bf00      	nop
 800c17e:	e002      	b.n	800c186 <USBH_Process+0x3b6>
      break;
 800c180:	bf00      	nop
 800c182:	e000      	b.n	800c186 <USBH_Process+0x3b6>
      break;
 800c184:	bf00      	nop
  }
  return USBH_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af04      	add	r7, sp, #16
 800c196:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c198:	2301      	movs	r3, #1
 800c19a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c19c:	2301      	movs	r3, #1
 800c19e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	785b      	ldrb	r3, [r3, #1]
 800c1a4:	2b07      	cmp	r3, #7
 800c1a6:	f200 81c1 	bhi.w	800c52c <USBH_HandleEnum+0x39c>
 800c1aa:	a201      	add	r2, pc, #4	; (adr r2, 800c1b0 <USBH_HandleEnum+0x20>)
 800c1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b0:	0800c1d1 	.word	0x0800c1d1
 800c1b4:	0800c28f 	.word	0x0800c28f
 800c1b8:	0800c2f9 	.word	0x0800c2f9
 800c1bc:	0800c387 	.word	0x0800c387
 800c1c0:	0800c3f1 	.word	0x0800c3f1
 800c1c4:	0800c461 	.word	0x0800c461
 800c1c8:	0800c4a7 	.word	0x0800c4a7
 800c1cc:	0800c4ed 	.word	0x0800c4ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c1d0:	2108      	movs	r1, #8
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fa50 	bl	800c678 <USBH_Get_DevDesc>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c1dc:	7bbb      	ldrb	r3, [r7, #14]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d130      	bne.n	800c244 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	7919      	ldrb	r1, [r3, #4]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c206:	b292      	uxth	r2, r2
 800c208:	9202      	str	r2, [sp, #8]
 800c20a:	2200      	movs	r2, #0
 800c20c:	9201      	str	r2, [sp, #4]
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	4603      	mov	r3, r0
 800c212:	2280      	movs	r2, #128	; 0x80
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 ff77 	bl	800d108 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	7959      	ldrb	r1, [r3, #5]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c22e:	b292      	uxth	r2, r2
 800c230:	9202      	str	r2, [sp, #8]
 800c232:	2200      	movs	r2, #0
 800c234:	9201      	str	r2, [sp, #4]
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	4603      	mov	r3, r0
 800c23a:	2200      	movs	r2, #0
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 ff63 	bl	800d108 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c242:	e175      	b.n	800c530 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c244:	7bbb      	ldrb	r3, [r7, #14]
 800c246:	2b03      	cmp	r3, #3
 800c248:	f040 8172 	bne.w	800c530 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c252:	3301      	adds	r3, #1
 800c254:	b2da      	uxtb	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c262:	2b03      	cmp	r3, #3
 800c264:	d903      	bls.n	800c26e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	220d      	movs	r2, #13
 800c26a:	701a      	strb	r2, [r3, #0]
      break;
 800c26c:	e160      	b.n	800c530 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	795b      	ldrb	r3, [r3, #5]
 800c272:	4619      	mov	r1, r3
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 ff97 	bl	800d1a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	791b      	ldrb	r3, [r3, #4]
 800c27e:	4619      	mov	r1, r3
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 ff91 	bl	800d1a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	701a      	strb	r2, [r3, #0]
      break;
 800c28c:	e150      	b.n	800c530 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c28e:	2112      	movs	r1, #18
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f9f1 	bl	800c678 <USBH_Get_DevDesc>
 800c296:	4603      	mov	r3, r0
 800c298:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c29a:	7bbb      	ldrb	r3, [r7, #14]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d103      	bne.n	800c2a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c2a6:	e145      	b.n	800c534 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2a8:	7bbb      	ldrb	r3, [r7, #14]
 800c2aa:	2b03      	cmp	r3, #3
 800c2ac:	f040 8142 	bne.w	800c534 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	d903      	bls.n	800c2d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	220d      	movs	r2, #13
 800c2ce:	701a      	strb	r2, [r3, #0]
      break;
 800c2d0:	e130      	b.n	800c534 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	795b      	ldrb	r3, [r3, #5]
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 ff65 	bl	800d1a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	791b      	ldrb	r3, [r3, #4]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 ff5f 	bl	800d1a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	701a      	strb	r2, [r3, #0]
      break;
 800c2f6:	e11d      	b.n	800c534 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c2f8:	2101      	movs	r1, #1
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fa68 	bl	800c7d0 <USBH_SetAddress>
 800c300:	4603      	mov	r3, r0
 800c302:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c304:	7bbb      	ldrb	r3, [r7, #14]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d132      	bne.n	800c370 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c30a:	2002      	movs	r0, #2
 800c30c:	f003 fc9e 	bl	800fc4c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2203      	movs	r2, #3
 800c31c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	7919      	ldrb	r1, [r3, #4]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c332:	b292      	uxth	r2, r2
 800c334:	9202      	str	r2, [sp, #8]
 800c336:	2200      	movs	r2, #0
 800c338:	9201      	str	r2, [sp, #4]
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	4603      	mov	r3, r0
 800c33e:	2280      	movs	r2, #128	; 0x80
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fee1 	bl	800d108 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	7959      	ldrb	r1, [r3, #5]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c35a:	b292      	uxth	r2, r2
 800c35c:	9202      	str	r2, [sp, #8]
 800c35e:	2200      	movs	r2, #0
 800c360:	9201      	str	r2, [sp, #4]
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	4603      	mov	r3, r0
 800c366:	2200      	movs	r2, #0
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fecd 	bl	800d108 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c36e:	e0e3      	b.n	800c538 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c370:	7bbb      	ldrb	r3, [r7, #14]
 800c372:	2b03      	cmp	r3, #3
 800c374:	f040 80e0 	bne.w	800c538 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	220d      	movs	r2, #13
 800c37c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	705a      	strb	r2, [r3, #1]
      break;
 800c384:	e0d8      	b.n	800c538 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c386:	2109      	movs	r1, #9
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 f99d 	bl	800c6c8 <USBH_Get_CfgDesc>
 800c38e:	4603      	mov	r3, r0
 800c390:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c392:	7bbb      	ldrb	r3, [r7, #14]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d103      	bne.n	800c3a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2204      	movs	r2, #4
 800c39c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c39e:	e0cd      	b.n	800c53c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3a0:	7bbb      	ldrb	r3, [r7, #14]
 800c3a2:	2b03      	cmp	r3, #3
 800c3a4:	f040 80ca 	bne.w	800c53c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3be:	2b03      	cmp	r3, #3
 800c3c0:	d903      	bls.n	800c3ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	220d      	movs	r2, #13
 800c3c6:	701a      	strb	r2, [r3, #0]
      break;
 800c3c8:	e0b8      	b.n	800c53c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	795b      	ldrb	r3, [r3, #5]
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fee9 	bl	800d1a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	791b      	ldrb	r3, [r3, #4]
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fee3 	bl	800d1a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	701a      	strb	r2, [r3, #0]
      break;
 800c3ee:	e0a5      	b.n	800c53c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 f965 	bl	800c6c8 <USBH_Get_CfgDesc>
 800c3fe:	4603      	mov	r3, r0
 800c400:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c402:	7bbb      	ldrb	r3, [r7, #14]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d103      	bne.n	800c410 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2205      	movs	r2, #5
 800c40c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c40e:	e097      	b.n	800c540 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c410:	7bbb      	ldrb	r3, [r7, #14]
 800c412:	2b03      	cmp	r3, #3
 800c414:	f040 8094 	bne.w	800c540 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c41e:	3301      	adds	r3, #1
 800c420:	b2da      	uxtb	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c42e:	2b03      	cmp	r3, #3
 800c430:	d903      	bls.n	800c43a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	220d      	movs	r2, #13
 800c436:	701a      	strb	r2, [r3, #0]
      break;
 800c438:	e082      	b.n	800c540 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	795b      	ldrb	r3, [r3, #5]
 800c43e:	4619      	mov	r1, r3
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 feb1 	bl	800d1a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	791b      	ldrb	r3, [r3, #4]
 800c44a:	4619      	mov	r1, r3
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 feab 	bl	800d1a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	701a      	strb	r2, [r3, #0]
      break;
 800c45e:	e06f      	b.n	800c540 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c466:	2b00      	cmp	r3, #0
 800c468:	d019      	beq.n	800c49e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c476:	23ff      	movs	r3, #255	; 0xff
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 f949 	bl	800c710 <USBH_Get_StringDesc>
 800c47e:	4603      	mov	r3, r0
 800c480:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c482:	7bbb      	ldrb	r3, [r7, #14]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d103      	bne.n	800c490 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2206      	movs	r2, #6
 800c48c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c48e:	e059      	b.n	800c544 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c490:	7bbb      	ldrb	r3, [r7, #14]
 800c492:	2b03      	cmp	r3, #3
 800c494:	d156      	bne.n	800c544 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2206      	movs	r2, #6
 800c49a:	705a      	strb	r2, [r3, #1]
      break;
 800c49c:	e052      	b.n	800c544 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2206      	movs	r2, #6
 800c4a2:	705a      	strb	r2, [r3, #1]
      break;
 800c4a4:	e04e      	b.n	800c544 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d019      	beq.n	800c4e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c4bc:	23ff      	movs	r3, #255	; 0xff
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 f926 	bl	800c710 <USBH_Get_StringDesc>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c4c8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d103      	bne.n	800c4d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2207      	movs	r2, #7
 800c4d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c4d4:	e038      	b.n	800c548 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4d6:	7bbb      	ldrb	r3, [r7, #14]
 800c4d8:	2b03      	cmp	r3, #3
 800c4da:	d135      	bne.n	800c548 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2207      	movs	r2, #7
 800c4e0:	705a      	strb	r2, [r3, #1]
      break;
 800c4e2:	e031      	b.n	800c548 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2207      	movs	r2, #7
 800c4e8:	705a      	strb	r2, [r3, #1]
      break;
 800c4ea:	e02d      	b.n	800c548 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d017      	beq.n	800c526 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c502:	23ff      	movs	r3, #255	; 0xff
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f903 	bl	800c710 <USBH_Get_StringDesc>
 800c50a:	4603      	mov	r3, r0
 800c50c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c50e:	7bbb      	ldrb	r3, [r7, #14]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d102      	bne.n	800c51a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c514:	2300      	movs	r3, #0
 800c516:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c518:	e018      	b.n	800c54c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c51a:	7bbb      	ldrb	r3, [r7, #14]
 800c51c:	2b03      	cmp	r3, #3
 800c51e:	d115      	bne.n	800c54c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c520:	2300      	movs	r3, #0
 800c522:	73fb      	strb	r3, [r7, #15]
      break;
 800c524:	e012      	b.n	800c54c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c526:	2300      	movs	r3, #0
 800c528:	73fb      	strb	r3, [r7, #15]
      break;
 800c52a:	e00f      	b.n	800c54c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c52c:	bf00      	nop
 800c52e:	e00e      	b.n	800c54e <USBH_HandleEnum+0x3be>
      break;
 800c530:	bf00      	nop
 800c532:	e00c      	b.n	800c54e <USBH_HandleEnum+0x3be>
      break;
 800c534:	bf00      	nop
 800c536:	e00a      	b.n	800c54e <USBH_HandleEnum+0x3be>
      break;
 800c538:	bf00      	nop
 800c53a:	e008      	b.n	800c54e <USBH_HandleEnum+0x3be>
      break;
 800c53c:	bf00      	nop
 800c53e:	e006      	b.n	800c54e <USBH_HandleEnum+0x3be>
      break;
 800c540:	bf00      	nop
 800c542:	e004      	b.n	800c54e <USBH_HandleEnum+0x3be>
      break;
 800c544:	bf00      	nop
 800c546:	e002      	b.n	800c54e <USBH_HandleEnum+0x3be>
      break;
 800c548:	bf00      	nop
 800c54a:	e000      	b.n	800c54e <USBH_HandleEnum+0x3be>
      break;
 800c54c:	bf00      	nop
  }
  return Status;
 800c54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	683a      	ldr	r2, [r7, #0]
 800c566:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c56a:	bf00      	nop
 800c56c:	370c      	adds	r7, #12
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr

0800c576 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b082      	sub	sp, #8
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c584:	1c5a      	adds	r2, r3, #1
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f804 	bl	800c59a <USBH_HandleSof>
}
 800c592:	bf00      	nop
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b082      	sub	sp, #8
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	2b0b      	cmp	r3, #11
 800c5aa:	d10a      	bne.n	800c5c2 <USBH_HandleSof+0x28>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d005      	beq.n	800c5c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	4798      	blx	r3
  }
}
 800c5c2:	bf00      	nop
 800c5c4:	3708      	adds	r7, #8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c5da:	bf00      	nop
}
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b083      	sub	sp, #12
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c5f6:	bf00      	nop
}
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr

0800c602 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c602:	b480      	push	{r7}
 800c604:	b083      	sub	sp, #12
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2201      	movs	r2, #1
 800c60e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f003 f9b2 	bl	800f9ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	791b      	ldrb	r3, [r3, #4]
 800c65a:	4619      	mov	r1, r3
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 fda3 	bl	800d1a8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	795b      	ldrb	r3, [r3, #5]
 800c666:	4619      	mov	r1, r3
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fd9d 	bl	800d1a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af02      	add	r7, sp, #8
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	460b      	mov	r3, r1
 800c682:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c68a:	78fb      	ldrb	r3, [r7, #3]
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	4613      	mov	r3, r2
 800c692:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c696:	2100      	movs	r1, #0
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 f864 	bl	800c766 <USBH_GetDescriptor>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	73fb      	strb	r3, [r7, #15]
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10a      	bne.n	800c6be <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c6b4:	78fa      	ldrb	r2, [r7, #3]
 800c6b6:	b292      	uxth	r2, r2
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	f000 f918 	bl	800c8ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af02      	add	r7, sp, #8
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	331c      	adds	r3, #28
 800c6d8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c6da:	887b      	ldrh	r3, [r7, #2]
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f83d 	bl	800c766 <USBH_GetDescriptor>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	72fb      	strb	r3, [r7, #11]
 800c6f0:	7afb      	ldrb	r3, [r7, #11]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d107      	bne.n	800c706 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c6fc:	887a      	ldrh	r2, [r7, #2]
 800c6fe:	68f9      	ldr	r1, [r7, #12]
 800c700:	4618      	mov	r0, r3
 800c702:	f000 f964 	bl	800c9ce <USBH_ParseCfgDesc>
  }

  return status;
 800c706:	7afb      	ldrb	r3, [r7, #11]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b088      	sub	sp, #32
 800c714:	af02      	add	r7, sp, #8
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	607a      	str	r2, [r7, #4]
 800c71a:	461a      	mov	r2, r3
 800c71c:	460b      	mov	r3, r1
 800c71e:	72fb      	strb	r3, [r7, #11]
 800c720:	4613      	mov	r3, r2
 800c722:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c724:	7afb      	ldrb	r3, [r7, #11]
 800c726:	b29b      	uxth	r3, r3
 800c728:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c72c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c734:	893b      	ldrh	r3, [r7, #8]
 800c736:	9300      	str	r3, [sp, #0]
 800c738:	460b      	mov	r3, r1
 800c73a:	2100      	movs	r1, #0
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f000 f812 	bl	800c766 <USBH_GetDescriptor>
 800c742:	4603      	mov	r3, r0
 800c744:	75fb      	strb	r3, [r7, #23]
 800c746:	7dfb      	ldrb	r3, [r7, #23]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d107      	bne.n	800c75c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c752:	893a      	ldrh	r2, [r7, #8]
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	4618      	mov	r0, r3
 800c758:	f000 fa37 	bl	800cbca <USBH_ParseStringDesc>
  }

  return status;
 800c75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3718      	adds	r7, #24
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b084      	sub	sp, #16
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	60f8      	str	r0, [r7, #12]
 800c76e:	607b      	str	r3, [r7, #4]
 800c770:	460b      	mov	r3, r1
 800c772:	72fb      	strb	r3, [r7, #11]
 800c774:	4613      	mov	r3, r2
 800c776:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	789b      	ldrb	r3, [r3, #2]
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d11c      	bne.n	800c7ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c780:	7afb      	ldrb	r3, [r7, #11]
 800c782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c786:	b2da      	uxtb	r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2206      	movs	r2, #6
 800c790:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	893a      	ldrh	r2, [r7, #8]
 800c796:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c798:	893b      	ldrh	r3, [r7, #8]
 800c79a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c79e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7a2:	d104      	bne.n	800c7ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f240 4209 	movw	r2, #1033	; 0x409
 800c7aa:	829a      	strh	r2, [r3, #20]
 800c7ac:	e002      	b.n	800c7b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	8b3a      	ldrh	r2, [r7, #24]
 800c7b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c7ba:	8b3b      	ldrh	r3, [r7, #24]
 800c7bc:	461a      	mov	r2, r3
 800c7be:	6879      	ldr	r1, [r7, #4]
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f000 fa50 	bl	800cc66 <USBH_CtlReq>
 800c7c6:	4603      	mov	r3, r0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	460b      	mov	r3, r1
 800c7da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	789b      	ldrb	r3, [r3, #2]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d10f      	bne.n	800c804 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2205      	movs	r2, #5
 800c7ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c7f0:	78fb      	ldrb	r3, [r7, #3]
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2200      	movs	r2, #0
 800c802:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c804:	2200      	movs	r2, #0
 800c806:	2100      	movs	r1, #0
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fa2c 	bl	800cc66 <USBH_CtlReq>
 800c80e:	4603      	mov	r3, r0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	789b      	ldrb	r3, [r3, #2]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d10e      	bne.n	800c84a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2209      	movs	r2, #9
 800c836:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	887a      	ldrh	r2, [r7, #2]
 800c83c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c84a:	2200      	movs	r2, #0
 800c84c:	2100      	movs	r1, #0
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fa09 	bl	800cc66 <USBH_CtlReq>
 800c854:	4603      	mov	r3, r0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b082      	sub	sp, #8
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	460b      	mov	r3, r1
 800c868:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	789b      	ldrb	r3, [r3, #2]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d10f      	bne.n	800c892 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2203      	movs	r2, #3
 800c87c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c87e:	78fb      	ldrb	r3, [r7, #3]
 800c880:	b29a      	uxth	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c892:	2200      	movs	r2, #0
 800c894:	2100      	movs	r1, #0
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f9e5 	bl	800cc66 <USBH_CtlReq>
 800c89c:	4603      	mov	r3, r0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b082      	sub	sp, #8
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	789b      	ldrb	r3, [r3, #2]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d10f      	bne.n	800c8da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2202      	movs	r2, #2
 800c8be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c8cc:	78fb      	ldrb	r3, [r7, #3]
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2100      	movs	r1, #0
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f9c1 	bl	800cc66 <USBH_CtlReq>
 800c8e4:	4603      	mov	r3, r0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3708      	adds	r7, #8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b085      	sub	sp, #20
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	60f8      	str	r0, [r7, #12]
 800c8f6:	60b9      	str	r1, [r7, #8]
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	781a      	ldrb	r2, [r3, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	785a      	ldrb	r2, [r3, #1]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	3302      	adds	r3, #2
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	b29a      	uxth	r2, r3
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	3303      	adds	r3, #3
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	021b      	lsls	r3, r3, #8
 800c91e:	b29b      	uxth	r3, r3
 800c920:	4313      	orrs	r3, r2
 800c922:	b29a      	uxth	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	791a      	ldrb	r2, [r3, #4]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	795a      	ldrb	r2, [r3, #5]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	799a      	ldrb	r2, [r3, #6]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	79da      	ldrb	r2, [r3, #7]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c948:	88fb      	ldrh	r3, [r7, #6]
 800c94a:	2b08      	cmp	r3, #8
 800c94c:	d939      	bls.n	800c9c2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	3308      	adds	r3, #8
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	b29a      	uxth	r2, r3
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	3309      	adds	r3, #9
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	021b      	lsls	r3, r3, #8
 800c960:	b29b      	uxth	r3, r3
 800c962:	4313      	orrs	r3, r2
 800c964:	b29a      	uxth	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	330a      	adds	r3, #10
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	b29a      	uxth	r2, r3
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	330b      	adds	r3, #11
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	b29b      	uxth	r3, r3
 800c97a:	021b      	lsls	r3, r3, #8
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	4313      	orrs	r3, r2
 800c980:	b29a      	uxth	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	330c      	adds	r3, #12
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	b29a      	uxth	r2, r3
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	330d      	adds	r3, #13
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	b29b      	uxth	r3, r3
 800c996:	021b      	lsls	r3, r3, #8
 800c998:	b29b      	uxth	r3, r3
 800c99a:	4313      	orrs	r3, r2
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	7b9a      	ldrb	r2, [r3, #14]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	7bda      	ldrb	r2, [r3, #15]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	7c1a      	ldrb	r2, [r3, #16]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	7c5a      	ldrb	r2, [r3, #17]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	745a      	strb	r2, [r3, #17]
  }
}
 800c9c2:	bf00      	nop
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b08a      	sub	sp, #40	; 0x28
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	60f8      	str	r0, [r7, #12]
 800c9d6:	60b9      	str	r1, [r7, #8]
 800c9d8:	4613      	mov	r3, r2
 800c9da:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	781a      	ldrb	r2, [r3, #0]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	785a      	ldrb	r2, [r3, #1]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	3302      	adds	r3, #2
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	3303      	adds	r3, #3
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	021b      	lsls	r3, r3, #8
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	4313      	orrs	r3, r2
 800ca16:	b29a      	uxth	r2, r3
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	791a      	ldrb	r2, [r3, #4]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	795a      	ldrb	r2, [r3, #5]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	799a      	ldrb	r2, [r3, #6]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	79da      	ldrb	r2, [r3, #7]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	7a1a      	ldrb	r2, [r3, #8]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ca44:	88fb      	ldrh	r3, [r7, #6]
 800ca46:	2b09      	cmp	r3, #9
 800ca48:	d95f      	bls.n	800cb0a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ca4a:	2309      	movs	r3, #9
 800ca4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca52:	e051      	b.n	800caf8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ca54:	f107 0316 	add.w	r3, r7, #22
 800ca58:	4619      	mov	r1, r3
 800ca5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca5c:	f000 f8e8 	bl	800cc30 <USBH_GetNextDesc>
 800ca60:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ca62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca64:	785b      	ldrb	r3, [r3, #1]
 800ca66:	2b04      	cmp	r3, #4
 800ca68:	d146      	bne.n	800caf8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ca6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca6e:	221a      	movs	r2, #26
 800ca70:	fb02 f303 	mul.w	r3, r2, r3
 800ca74:	3308      	adds	r3, #8
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	4413      	add	r3, r2
 800ca7a:	3302      	adds	r3, #2
 800ca7c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ca7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca80:	69f8      	ldr	r0, [r7, #28]
 800ca82:	f000 f846 	bl	800cb12 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ca86:	2300      	movs	r3, #0
 800ca88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ca90:	e022      	b.n	800cad8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ca92:	f107 0316 	add.w	r3, r7, #22
 800ca96:	4619      	mov	r1, r3
 800ca98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca9a:	f000 f8c9 	bl	800cc30 <USBH_GetNextDesc>
 800ca9e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800caa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa2:	785b      	ldrb	r3, [r3, #1]
 800caa4:	2b05      	cmp	r3, #5
 800caa6:	d117      	bne.n	800cad8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800caa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800caac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cab0:	3201      	adds	r2, #1
 800cab2:	00d2      	lsls	r2, r2, #3
 800cab4:	211a      	movs	r1, #26
 800cab6:	fb01 f303 	mul.w	r3, r1, r3
 800caba:	4413      	add	r3, r2
 800cabc:	3308      	adds	r3, #8
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	4413      	add	r3, r2
 800cac2:	3304      	adds	r3, #4
 800cac4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800cac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cac8:	69b8      	ldr	r0, [r7, #24]
 800caca:	f000 f851 	bl	800cb70 <USBH_ParseEPDesc>
            ep_ix++;
 800cace:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cad2:	3301      	adds	r3, #1
 800cad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	791b      	ldrb	r3, [r3, #4]
 800cadc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d204      	bcs.n	800caee <USBH_ParseCfgDesc+0x120>
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	885a      	ldrh	r2, [r3, #2]
 800cae8:	8afb      	ldrh	r3, [r7, #22]
 800caea:	429a      	cmp	r2, r3
 800caec:	d8d1      	bhi.n	800ca92 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800caee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800caf2:	3301      	adds	r3, #1
 800caf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800caf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d804      	bhi.n	800cb0a <USBH_ParseCfgDesc+0x13c>
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	885a      	ldrh	r2, [r3, #2]
 800cb04:	8afb      	ldrh	r3, [r7, #22]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d8a4      	bhi.n	800ca54 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800cb0a:	bf00      	nop
 800cb0c:	3728      	adds	r7, #40	; 0x28
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cb12:	b480      	push	{r7}
 800cb14:	b083      	sub	sp, #12
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
 800cb1a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	781a      	ldrb	r2, [r3, #0]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	785a      	ldrb	r2, [r3, #1]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	789a      	ldrb	r2, [r3, #2]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	78da      	ldrb	r2, [r3, #3]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	791a      	ldrb	r2, [r3, #4]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	795a      	ldrb	r2, [r3, #5]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	799a      	ldrb	r2, [r3, #6]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	79da      	ldrb	r2, [r3, #7]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	7a1a      	ldrb	r2, [r3, #8]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	721a      	strb	r2, [r3, #8]
}
 800cb64:	bf00      	nop
 800cb66:	370c      	adds	r7, #12
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b083      	sub	sp, #12
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	781a      	ldrb	r2, [r3, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	785a      	ldrb	r2, [r3, #1]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	789a      	ldrb	r2, [r3, #2]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	78da      	ldrb	r2, [r3, #3]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	3305      	adds	r3, #5
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	021b      	lsls	r3, r3, #8
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	799a      	ldrb	r2, [r3, #6]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	719a      	strb	r2, [r3, #6]
}
 800cbbe:	bf00      	nop
 800cbc0:	370c      	adds	r7, #12
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr

0800cbca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b087      	sub	sp, #28
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	60f8      	str	r0, [r7, #12]
 800cbd2:	60b9      	str	r1, [r7, #8]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	2b03      	cmp	r3, #3
 800cbe0:	d120      	bne.n	800cc24 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	1e9a      	subs	r2, r3, #2
 800cbe8:	88fb      	ldrh	r3, [r7, #6]
 800cbea:	4293      	cmp	r3, r2
 800cbec:	bf28      	it	cs
 800cbee:	4613      	movcs	r3, r2
 800cbf0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3302      	adds	r3, #2
 800cbf6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	82fb      	strh	r3, [r7, #22]
 800cbfc:	e00b      	b.n	800cc16 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cbfe:	8afb      	ldrh	r3, [r7, #22]
 800cc00:	68fa      	ldr	r2, [r7, #12]
 800cc02:	4413      	add	r3, r2
 800cc04:	781a      	ldrb	r2, [r3, #0]
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cc10:	8afb      	ldrh	r3, [r7, #22]
 800cc12:	3302      	adds	r3, #2
 800cc14:	82fb      	strh	r3, [r7, #22]
 800cc16:	8afa      	ldrh	r2, [r7, #22]
 800cc18:	8abb      	ldrh	r3, [r7, #20]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d3ef      	bcc.n	800cbfe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	2200      	movs	r2, #0
 800cc22:	701a      	strb	r2, [r3, #0]
  }
}
 800cc24:	bf00      	nop
 800cc26:	371c      	adds	r7, #28
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	881a      	ldrh	r2, [r3, #0]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	4413      	add	r3, r2
 800cc46:	b29a      	uxth	r2, r3
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4413      	add	r3, r2
 800cc56:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cc58:	68fb      	ldr	r3, [r7, #12]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b086      	sub	sp, #24
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	60f8      	str	r0, [r7, #12]
 800cc6e:	60b9      	str	r1, [r7, #8]
 800cc70:	4613      	mov	r3, r2
 800cc72:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cc74:	2301      	movs	r3, #1
 800cc76:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	789b      	ldrb	r3, [r3, #2]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d002      	beq.n	800cc86 <USBH_CtlReq+0x20>
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	d00f      	beq.n	800cca4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800cc84:	e027      	b.n	800ccd6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	68ba      	ldr	r2, [r7, #8]
 800cc8a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	88fa      	ldrh	r2, [r7, #6]
 800cc90:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2201      	movs	r2, #1
 800cc96:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2202      	movs	r2, #2
 800cc9c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	75fb      	strb	r3, [r7, #23]
      break;
 800cca2:	e018      	b.n	800ccd6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f000 f81b 	bl	800cce0 <USBH_HandleControl>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <USBH_CtlReq+0x54>
 800ccb4:	7dfb      	ldrb	r3, [r7, #23]
 800ccb6:	2b03      	cmp	r3, #3
 800ccb8:	d106      	bne.n	800ccc8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	761a      	strb	r2, [r3, #24]
      break;
 800ccc6:	e005      	b.n	800ccd4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ccc8:	7dfb      	ldrb	r3, [r7, #23]
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d102      	bne.n	800ccd4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	709a      	strb	r2, [r3, #2]
      break;
 800ccd4:	bf00      	nop
  }
  return status;
 800ccd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3718      	adds	r7, #24
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b086      	sub	sp, #24
 800cce4:	af02      	add	r7, sp, #8
 800cce6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cce8:	2301      	movs	r3, #1
 800ccea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ccec:	2300      	movs	r3, #0
 800ccee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	7e1b      	ldrb	r3, [r3, #24]
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	2b0a      	cmp	r3, #10
 800ccf8:	f200 8156 	bhi.w	800cfa8 <USBH_HandleControl+0x2c8>
 800ccfc:	a201      	add	r2, pc, #4	; (adr r2, 800cd04 <USBH_HandleControl+0x24>)
 800ccfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd02:	bf00      	nop
 800cd04:	0800cd31 	.word	0x0800cd31
 800cd08:	0800cd4b 	.word	0x0800cd4b
 800cd0c:	0800cdb5 	.word	0x0800cdb5
 800cd10:	0800cddb 	.word	0x0800cddb
 800cd14:	0800ce13 	.word	0x0800ce13
 800cd18:	0800ce3d 	.word	0x0800ce3d
 800cd1c:	0800ce8f 	.word	0x0800ce8f
 800cd20:	0800ceb1 	.word	0x0800ceb1
 800cd24:	0800ceed 	.word	0x0800ceed
 800cd28:	0800cf13 	.word	0x0800cf13
 800cd2c:	0800cf51 	.word	0x0800cf51
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f103 0110 	add.w	r1, r3, #16
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	795b      	ldrb	r3, [r3, #5]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 f943 	bl	800cfc8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2202      	movs	r2, #2
 800cd46:	761a      	strb	r2, [r3, #24]
      break;
 800cd48:	e139      	b.n	800cfbe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	795b      	ldrb	r3, [r3, #5]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f002 ff21 	bl	800fb98 <USBH_LL_GetURBState>
 800cd56:	4603      	mov	r3, r0
 800cd58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cd5a:	7bbb      	ldrb	r3, [r7, #14]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d11e      	bne.n	800cd9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	7c1b      	ldrb	r3, [r3, #16]
 800cd64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	8adb      	ldrh	r3, [r3, #22]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00a      	beq.n	800cd88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cd72:	7b7b      	ldrb	r3, [r7, #13]
 800cd74:	2b80      	cmp	r3, #128	; 0x80
 800cd76:	d103      	bne.n	800cd80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2203      	movs	r2, #3
 800cd7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cd7e:	e115      	b.n	800cfac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2205      	movs	r2, #5
 800cd84:	761a      	strb	r2, [r3, #24]
      break;
 800cd86:	e111      	b.n	800cfac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cd88:	7b7b      	ldrb	r3, [r7, #13]
 800cd8a:	2b80      	cmp	r3, #128	; 0x80
 800cd8c:	d103      	bne.n	800cd96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2209      	movs	r2, #9
 800cd92:	761a      	strb	r2, [r3, #24]
      break;
 800cd94:	e10a      	b.n	800cfac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2207      	movs	r2, #7
 800cd9a:	761a      	strb	r2, [r3, #24]
      break;
 800cd9c:	e106      	b.n	800cfac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cd9e:	7bbb      	ldrb	r3, [r7, #14]
 800cda0:	2b04      	cmp	r3, #4
 800cda2:	d003      	beq.n	800cdac <USBH_HandleControl+0xcc>
 800cda4:	7bbb      	ldrb	r3, [r7, #14]
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	f040 8100 	bne.w	800cfac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	220b      	movs	r2, #11
 800cdb0:	761a      	strb	r2, [r3, #24]
      break;
 800cdb2:	e0fb      	b.n	800cfac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6899      	ldr	r1, [r3, #8]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	899a      	ldrh	r2, [r3, #12]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	791b      	ldrb	r3, [r3, #4]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 f93a 	bl	800d046 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2204      	movs	r2, #4
 800cdd6:	761a      	strb	r2, [r3, #24]
      break;
 800cdd8:	e0f1      	b.n	800cfbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	791b      	ldrb	r3, [r3, #4]
 800cdde:	4619      	mov	r1, r3
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f002 fed9 	bl	800fb98 <USBH_LL_GetURBState>
 800cde6:	4603      	mov	r3, r0
 800cde8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cdea:	7bbb      	ldrb	r3, [r7, #14]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d102      	bne.n	800cdf6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2209      	movs	r2, #9
 800cdf4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cdf6:	7bbb      	ldrb	r3, [r7, #14]
 800cdf8:	2b05      	cmp	r3, #5
 800cdfa:	d102      	bne.n	800ce02 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cdfc:	2303      	movs	r3, #3
 800cdfe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ce00:	e0d6      	b.n	800cfb0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ce02:	7bbb      	ldrb	r3, [r7, #14]
 800ce04:	2b04      	cmp	r3, #4
 800ce06:	f040 80d3 	bne.w	800cfb0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	220b      	movs	r2, #11
 800ce0e:	761a      	strb	r2, [r3, #24]
      break;
 800ce10:	e0ce      	b.n	800cfb0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6899      	ldr	r1, [r3, #8]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	899a      	ldrh	r2, [r3, #12]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	795b      	ldrb	r3, [r3, #5]
 800ce1e:	2001      	movs	r0, #1
 800ce20:	9000      	str	r0, [sp, #0]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f8ea 	bl	800cffc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2206      	movs	r2, #6
 800ce38:	761a      	strb	r2, [r3, #24]
      break;
 800ce3a:	e0c0      	b.n	800cfbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	795b      	ldrb	r3, [r3, #5]
 800ce40:	4619      	mov	r1, r3
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f002 fea8 	bl	800fb98 <USBH_LL_GetURBState>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ce4c:	7bbb      	ldrb	r3, [r7, #14]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d103      	bne.n	800ce5a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2207      	movs	r2, #7
 800ce56:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ce58:	e0ac      	b.n	800cfb4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ce5a:	7bbb      	ldrb	r3, [r7, #14]
 800ce5c:	2b05      	cmp	r3, #5
 800ce5e:	d105      	bne.n	800ce6c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	220c      	movs	r2, #12
 800ce64:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ce66:	2303      	movs	r3, #3
 800ce68:	73fb      	strb	r3, [r7, #15]
      break;
 800ce6a:	e0a3      	b.n	800cfb4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ce6c:	7bbb      	ldrb	r3, [r7, #14]
 800ce6e:	2b02      	cmp	r3, #2
 800ce70:	d103      	bne.n	800ce7a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2205      	movs	r2, #5
 800ce76:	761a      	strb	r2, [r3, #24]
      break;
 800ce78:	e09c      	b.n	800cfb4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ce7a:	7bbb      	ldrb	r3, [r7, #14]
 800ce7c:	2b04      	cmp	r3, #4
 800ce7e:	f040 8099 	bne.w	800cfb4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	220b      	movs	r2, #11
 800ce86:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ce88:	2302      	movs	r3, #2
 800ce8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ce8c:	e092      	b.n	800cfb4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	791b      	ldrb	r3, [r3, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	2100      	movs	r1, #0
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 f8d5 	bl	800d046 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cea2:	b29a      	uxth	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2208      	movs	r2, #8
 800ceac:	761a      	strb	r2, [r3, #24]

      break;
 800ceae:	e086      	b.n	800cfbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	791b      	ldrb	r3, [r3, #4]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f002 fe6e 	bl	800fb98 <USBH_LL_GetURBState>
 800cebc:	4603      	mov	r3, r0
 800cebe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d105      	bne.n	800ced2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	220d      	movs	r2, #13
 800ceca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cecc:	2300      	movs	r3, #0
 800cece:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ced0:	e072      	b.n	800cfb8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ced2:	7bbb      	ldrb	r3, [r7, #14]
 800ced4:	2b04      	cmp	r3, #4
 800ced6:	d103      	bne.n	800cee0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	220b      	movs	r2, #11
 800cedc:	761a      	strb	r2, [r3, #24]
      break;
 800cede:	e06b      	b.n	800cfb8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cee0:	7bbb      	ldrb	r3, [r7, #14]
 800cee2:	2b05      	cmp	r3, #5
 800cee4:	d168      	bne.n	800cfb8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cee6:	2303      	movs	r3, #3
 800cee8:	73fb      	strb	r3, [r7, #15]
      break;
 800ceea:	e065      	b.n	800cfb8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	795b      	ldrb	r3, [r3, #5]
 800cef0:	2201      	movs	r2, #1
 800cef2:	9200      	str	r2, [sp, #0]
 800cef4:	2200      	movs	r2, #0
 800cef6:	2100      	movs	r1, #0
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 f87f 	bl	800cffc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf04:	b29a      	uxth	r2, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	220a      	movs	r2, #10
 800cf0e:	761a      	strb	r2, [r3, #24]
      break;
 800cf10:	e055      	b.n	800cfbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	795b      	ldrb	r3, [r3, #5]
 800cf16:	4619      	mov	r1, r3
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f002 fe3d 	bl	800fb98 <USBH_LL_GetURBState>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cf22:	7bbb      	ldrb	r3, [r7, #14]
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d105      	bne.n	800cf34 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	220d      	movs	r2, #13
 800cf30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cf32:	e043      	b.n	800cfbc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cf34:	7bbb      	ldrb	r3, [r7, #14]
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d103      	bne.n	800cf42 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2209      	movs	r2, #9
 800cf3e:	761a      	strb	r2, [r3, #24]
      break;
 800cf40:	e03c      	b.n	800cfbc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cf42:	7bbb      	ldrb	r3, [r7, #14]
 800cf44:	2b04      	cmp	r3, #4
 800cf46:	d139      	bne.n	800cfbc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	220b      	movs	r2, #11
 800cf4c:	761a      	strb	r2, [r3, #24]
      break;
 800cf4e:	e035      	b.n	800cfbc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	7e5b      	ldrb	r3, [r3, #25]
 800cf54:	3301      	adds	r3, #1
 800cf56:	b2da      	uxtb	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	765a      	strb	r2, [r3, #25]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	7e5b      	ldrb	r3, [r3, #25]
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	d806      	bhi.n	800cf72 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2201      	movs	r2, #1
 800cf68:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cf70:	e025      	b.n	800cfbe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf78:	2106      	movs	r1, #6
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	795b      	ldrb	r3, [r3, #5]
 800cf88:	4619      	mov	r1, r3
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 f90c 	bl	800d1a8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	791b      	ldrb	r3, [r3, #4]
 800cf94:	4619      	mov	r1, r3
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 f906 	bl	800d1a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cfa2:	2302      	movs	r3, #2
 800cfa4:	73fb      	strb	r3, [r7, #15]
      break;
 800cfa6:	e00a      	b.n	800cfbe <USBH_HandleControl+0x2de>

    default:
      break;
 800cfa8:	bf00      	nop
 800cfaa:	e008      	b.n	800cfbe <USBH_HandleControl+0x2de>
      break;
 800cfac:	bf00      	nop
 800cfae:	e006      	b.n	800cfbe <USBH_HandleControl+0x2de>
      break;
 800cfb0:	bf00      	nop
 800cfb2:	e004      	b.n	800cfbe <USBH_HandleControl+0x2de>
      break;
 800cfb4:	bf00      	nop
 800cfb6:	e002      	b.n	800cfbe <USBH_HandleControl+0x2de>
      break;
 800cfb8:	bf00      	nop
 800cfba:	e000      	b.n	800cfbe <USBH_HandleControl+0x2de>
      break;
 800cfbc:	bf00      	nop
  }

  return status;
 800cfbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3710      	adds	r7, #16
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b088      	sub	sp, #32
 800cfcc:	af04      	add	r7, sp, #16
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cfd6:	79f9      	ldrb	r1, [r7, #7]
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9303      	str	r3, [sp, #12]
 800cfdc:	2308      	movs	r3, #8
 800cfde:	9302      	str	r3, [sp, #8]
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	9301      	str	r3, [sp, #4]
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	2300      	movs	r3, #0
 800cfea:	2200      	movs	r2, #0
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f002 fda2 	bl	800fb36 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800cff2:	2300      	movs	r3, #0
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3710      	adds	r7, #16
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b088      	sub	sp, #32
 800d000:	af04      	add	r7, sp, #16
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	60b9      	str	r1, [r7, #8]
 800d006:	4611      	mov	r1, r2
 800d008:	461a      	mov	r2, r3
 800d00a:	460b      	mov	r3, r1
 800d00c:	80fb      	strh	r3, [r7, #6]
 800d00e:	4613      	mov	r3, r2
 800d010:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d001      	beq.n	800d020 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d01c:	2300      	movs	r3, #0
 800d01e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d020:	7979      	ldrb	r1, [r7, #5]
 800d022:	7e3b      	ldrb	r3, [r7, #24]
 800d024:	9303      	str	r3, [sp, #12]
 800d026:	88fb      	ldrh	r3, [r7, #6]
 800d028:	9302      	str	r3, [sp, #8]
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	9301      	str	r3, [sp, #4]
 800d02e:	2301      	movs	r3, #1
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	2300      	movs	r3, #0
 800d034:	2200      	movs	r2, #0
 800d036:	68f8      	ldr	r0, [r7, #12]
 800d038:	f002 fd7d 	bl	800fb36 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b088      	sub	sp, #32
 800d04a:	af04      	add	r7, sp, #16
 800d04c:	60f8      	str	r0, [r7, #12]
 800d04e:	60b9      	str	r1, [r7, #8]
 800d050:	4611      	mov	r1, r2
 800d052:	461a      	mov	r2, r3
 800d054:	460b      	mov	r3, r1
 800d056:	80fb      	strh	r3, [r7, #6]
 800d058:	4613      	mov	r3, r2
 800d05a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d05c:	7979      	ldrb	r1, [r7, #5]
 800d05e:	2300      	movs	r3, #0
 800d060:	9303      	str	r3, [sp, #12]
 800d062:	88fb      	ldrh	r3, [r7, #6]
 800d064:	9302      	str	r3, [sp, #8]
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	2301      	movs	r3, #1
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	2300      	movs	r3, #0
 800d070:	2201      	movs	r2, #1
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f002 fd5f 	bl	800fb36 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d078:	2300      	movs	r3, #0

}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b088      	sub	sp, #32
 800d086:	af04      	add	r7, sp, #16
 800d088:	60f8      	str	r0, [r7, #12]
 800d08a:	60b9      	str	r1, [r7, #8]
 800d08c:	4611      	mov	r1, r2
 800d08e:	461a      	mov	r2, r3
 800d090:	460b      	mov	r3, r1
 800d092:	80fb      	strh	r3, [r7, #6]
 800d094:	4613      	mov	r3, r2
 800d096:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d0a6:	7979      	ldrb	r1, [r7, #5]
 800d0a8:	7e3b      	ldrb	r3, [r7, #24]
 800d0aa:	9303      	str	r3, [sp, #12]
 800d0ac:	88fb      	ldrh	r3, [r7, #6]
 800d0ae:	9302      	str	r3, [sp, #8]
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	9301      	str	r3, [sp, #4]
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	9300      	str	r3, [sp, #0]
 800d0b8:	2302      	movs	r3, #2
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	f002 fd3a 	bl	800fb36 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d0c2:	2300      	movs	r3, #0
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b088      	sub	sp, #32
 800d0d0:	af04      	add	r7, sp, #16
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	461a      	mov	r2, r3
 800d0da:	460b      	mov	r3, r1
 800d0dc:	80fb      	strh	r3, [r7, #6]
 800d0de:	4613      	mov	r3, r2
 800d0e0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d0e2:	7979      	ldrb	r1, [r7, #5]
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	9303      	str	r3, [sp, #12]
 800d0e8:	88fb      	ldrh	r3, [r7, #6]
 800d0ea:	9302      	str	r3, [sp, #8]
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	9301      	str	r3, [sp, #4]
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f002 fd1c 	bl	800fb36 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3710      	adds	r7, #16
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af04      	add	r7, sp, #16
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	4608      	mov	r0, r1
 800d112:	4611      	mov	r1, r2
 800d114:	461a      	mov	r2, r3
 800d116:	4603      	mov	r3, r0
 800d118:	70fb      	strb	r3, [r7, #3]
 800d11a:	460b      	mov	r3, r1
 800d11c:	70bb      	strb	r3, [r7, #2]
 800d11e:	4613      	mov	r3, r2
 800d120:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d122:	7878      	ldrb	r0, [r7, #1]
 800d124:	78ba      	ldrb	r2, [r7, #2]
 800d126:	78f9      	ldrb	r1, [r7, #3]
 800d128:	8b3b      	ldrh	r3, [r7, #24]
 800d12a:	9302      	str	r3, [sp, #8]
 800d12c:	7d3b      	ldrb	r3, [r7, #20]
 800d12e:	9301      	str	r3, [sp, #4]
 800d130:	7c3b      	ldrb	r3, [r7, #16]
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	4603      	mov	r3, r0
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f002 fcaf 	bl	800fa9a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b082      	sub	sp, #8
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	460b      	mov	r3, r1
 800d150:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d152:	78fb      	ldrb	r3, [r7, #3]
 800d154:	4619      	mov	r1, r3
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f002 fcce 	bl	800faf8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	460b      	mov	r3, r1
 800d170:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f836 	bl	800d1e4 <USBH_GetFreePipe>
 800d178:	4603      	mov	r3, r0
 800d17a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d17c:	89fb      	ldrh	r3, [r7, #14]
 800d17e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d182:	4293      	cmp	r3, r2
 800d184:	d00a      	beq.n	800d19c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d186:	78fa      	ldrb	r2, [r7, #3]
 800d188:	89fb      	ldrh	r3, [r7, #14]
 800d18a:	f003 030f 	and.w	r3, r3, #15
 800d18e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d192:	6879      	ldr	r1, [r7, #4]
 800d194:	33e0      	adds	r3, #224	; 0xe0
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	440b      	add	r3, r1
 800d19a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d19c:	89fb      	ldrh	r3, [r7, #14]
 800d19e:	b2db      	uxtb	r3, r3
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d1b4:	78fb      	ldrb	r3, [r7, #3]
 800d1b6:	2b0a      	cmp	r3, #10
 800d1b8:	d80d      	bhi.n	800d1d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d1ba:	78fb      	ldrb	r3, [r7, #3]
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	33e0      	adds	r3, #224	; 0xe0
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	4413      	add	r3, r2
 800d1c4:	685a      	ldr	r2, [r3, #4]
 800d1c6:	78fb      	ldrb	r3, [r7, #3]
 800d1c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d1cc:	6879      	ldr	r1, [r7, #4]
 800d1ce:	33e0      	adds	r3, #224	; 0xe0
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	440b      	add	r3, r1
 800d1d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d1d6:	2300      	movs	r3, #0
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	73fb      	strb	r3, [r7, #15]
 800d1f4:	e00f      	b.n	800d216 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	33e0      	adds	r3, #224	; 0xe0
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4413      	add	r3, r2
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d206:	2b00      	cmp	r3, #0
 800d208:	d102      	bne.n	800d210 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d20a:	7bfb      	ldrb	r3, [r7, #15]
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	e007      	b.n	800d220 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d210:	7bfb      	ldrb	r3, [r7, #15]
 800d212:	3301      	adds	r3, #1
 800d214:	73fb      	strb	r3, [r7, #15]
 800d216:	7bfb      	ldrb	r3, [r7, #15]
 800d218:	2b0a      	cmp	r3, #10
 800d21a:	d9ec      	bls.n	800d1f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d21c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d220:	4618      	mov	r0, r3
 800d222:	3714      	adds	r7, #20
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
    {
 800d234:	4a04      	ldr	r2, [pc, #16]	; (800d248 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	601a      	str	r2, [r3, #0]
    }
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4618      	mov	r0, r3
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	0801c228 	.word	0x0801c228

0800d24c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
    }
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff ffe9 	bl	800d22c <_ZN8touchgfx12FontProviderD1Ev>
 800d25a:	2104      	movs	r1, #4
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f00c fa35 	bl	80196cc <_ZdlPvj>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4618      	mov	r0, r3
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	460b      	mov	r3, r1
 800d276:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800d278:	887b      	ldrh	r3, [r7, #2]
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	d010      	beq.n	800d2a0 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800d27e:	2b02      	cmp	r3, #2
 800d280:	dc13      	bgt.n	800d2aa <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800d282:	2b00      	cmp	r3, #0
 800d284:	d002      	beq.n	800d28c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800d286:	2b01      	cmp	r3, #1
 800d288:	d005      	beq.n	800d296 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800d28a:	e00e      	b.n	800d2aa <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800d28c:	f000 fc1c 	bl	800dac8 <_ZN17TypedTextDatabase8getFontsEv>
 800d290:	4603      	mov	r3, r0
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	e00a      	b.n	800d2ac <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800d296:	f000 fc17 	bl	800dac8 <_ZN17TypedTextDatabase8getFontsEv>
 800d29a:	4603      	mov	r3, r0
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	e005      	b.n	800d2ac <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800d2a0:	f000 fc12 	bl	800dac8 <_ZN17TypedTextDatabase8getFontsEv>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	e000      	b.n	800d2ac <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800d2aa:	2300      	movs	r3, #0
    }
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	4a05      	ldr	r2, [pc, #20]	; (800d2d4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	601a      	str	r2, [r3, #0]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7ff ffb1 	bl	800d22c <_ZN8touchgfx12FontProviderD1Ev>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	0801c214 	.word	0x0801c214

0800d2d8 <_ZN23ApplicationFontProviderD0Ev>:
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7ff ffe7 	bl	800d2b4 <_ZN23ApplicationFontProviderD1Ev>
 800d2e6:	2104      	movs	r1, #4
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f00c f9ef 	bl	80196cc <_ZdlPvj>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
    {
 800d300:	4a04      	ldr	r2, [pc, #16]	; (800d314 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	601a      	str	r2, [r3, #0]
    }
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4618      	mov	r0, r3
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	0801c29c 	.word	0x0801c29c

0800d318 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
    }
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7ff ffe9 	bl	800d2f8 <_ZN8touchgfx4FontD1Ev>
 800d326:	2110      	movs	r1, #16
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f00c f9cf 	bl	80196cc <_ZdlPvj>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4618      	mov	r0, r3
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d338:	b590      	push	{r4, r7, lr}
 800d33a:	b087      	sub	sp, #28
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	460b      	mov	r3, r1
 800d342:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d344:	887b      	ldrh	r3, [r7, #2]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d101      	bne.n	800d34e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	e010      	b.n	800d370 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	3308      	adds	r3, #8
 800d35c:	681c      	ldr	r4, [r3, #0]
 800d35e:	f107 030f 	add.w	r3, r7, #15
 800d362:	f107 0210 	add.w	r2, r7, #16
 800d366:	8879      	ldrh	r1, [r7, #2]
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	47a0      	blx	r4
 800d36c:	6178      	str	r0, [r7, #20]
        return glyph;
 800d36e:	697b      	ldr	r3, [r7, #20]
    }
 800d370:	4618      	mov	r0, r3
 800d372:	371c      	adds	r7, #28
 800d374:	46bd      	mov	sp, r7
 800d376:	bd90      	pop	{r4, r7, pc}

0800d378 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	895b      	ldrh	r3, [r3, #10]
    }
 800d384:	4618      	mov	r0, r3
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	899b      	ldrh	r3, [r3, #12]
    }
 800d39c:	4618      	mov	r0, r3
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	889b      	ldrh	r3, [r3, #4]
    }
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	889a      	ldrh	r2, [r3, #4]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	799b      	ldrb	r3, [r3, #6]
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	4413      	add	r3, r2
 800d3d4:	b29b      	uxth	r3, r3
    }
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	370c      	adds	r7, #12
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800d3e2:	b480      	push	{r7}
 800d3e4:	b083      	sub	sp, #12
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	79db      	ldrb	r3, [r3, #7]
 800d3ee:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800d3f2:	b2db      	uxtb	r3, r3
    }
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	79db      	ldrb	r3, [r3, #7]
 800d40c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d410:	b2db      	uxtb	r3, r3
    }
 800d412:	4618      	mov	r0, r3
 800d414:	370c      	adds	r7, #12
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr
	...

0800d420 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	4a05      	ldr	r2, [pc, #20]	; (800d440 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	601a      	str	r2, [r3, #0]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4618      	mov	r0, r3
 800d432:	f7ff ff61 	bl	800d2f8 <_ZN8touchgfx4FontD1Ev>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4618      	mov	r0, r3
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	0801d0b0 	.word	0x0801d0b0

0800d444 <_ZN8touchgfx9ConstFontD0Ev>:
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7ff ffe7 	bl	800d420 <_ZN8touchgfx9ConstFontD1Ev>
 800d452:	2118      	movs	r1, #24
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f00c f939 	bl	80196cc <_ZdlPvj>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4618      	mov	r0, r3
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	4a05      	ldr	r2, [pc, #20]	; (800d484 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	601a      	str	r2, [r3, #0]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4618      	mov	r0, r3
 800d476:	f7ff ffd3 	bl	800d420 <_ZN8touchgfx9ConstFontD1Ev>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	0801c23c 	.word	0x0801c23c

0800d488 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7ff ffe7 	bl	800d464 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d496:	2124      	movs	r1, #36	; 0x24
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f00c f917 	bl	80196cc <_ZdlPvj>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a1b      	ldr	r3, [r3, #32]
    }
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b08c      	sub	sp, #48	; 0x30
 800d4c4:	af08      	add	r7, sp, #32
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	80fb      	strh	r3, [r7, #6]
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	88b9      	ldrh	r1, [r7, #4]
 800d4da:	88fa      	ldrh	r2, [r7, #6]
 800d4dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d4de:	9306      	str	r3, [sp, #24]
 800d4e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d4e2:	9305      	str	r3, [sp, #20]
 800d4e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d4e8:	9304      	str	r3, [sp, #16]
 800d4ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d4ee:	9303      	str	r3, [sp, #12]
 800d4f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4f4:	9302      	str	r3, [sp, #8]
 800d4f6:	7f3b      	ldrb	r3, [r7, #28]
 800d4f8:	9301      	str	r3, [sp, #4]
 800d4fa:	7e3b      	ldrb	r3, [r7, #24]
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	460b      	mov	r3, r1
 800d500:	68b9      	ldr	r1, [r7, #8]
 800d502:	f009 f95f 	bl	80167c4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800d506:	4a08      	ldr	r2, [pc, #32]	; (800d528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d510:	619a      	str	r2, [r3, #24]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d516:	61da      	str	r2, [r3, #28]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d51c:	621a      	str	r2, [r3, #32]
{
}
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	4618      	mov	r0, r3
 800d522:	3710      	adds	r7, #16
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	0801c23c 	.word	0x0801c23c

0800d52c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800d52c:	b480      	push	{r7}
 800d52e:	b085      	sub	sp, #20
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	699b      	ldr	r3, [r3, #24]
 800d53a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	889b      	ldrh	r3, [r3, #4]
 800d540:	0adb      	lsrs	r3, r3, #11
 800d542:	b29b      	uxth	r3, r3
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	4413      	add	r3, r2
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4413      	add	r3, r2
}
 800d552:	4618      	mov	r0, r3
 800d554:	3714      	adds	r7, #20
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr

0800d55e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800d55e:	b480      	push	{r7}
 800d560:	b089      	sub	sp, #36	; 0x24
 800d562:	af00      	add	r7, sp, #0
 800d564:	60f8      	str	r0, [r7, #12]
 800d566:	460b      	mov	r3, r1
 800d568:	607a      	str	r2, [r7, #4]
 800d56a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d003      	beq.n	800d57a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	7b1b      	ldrb	r3, [r3, #12]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d101      	bne.n	800d57e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800d57a:	2300      	movs	r3, #0
 800d57c:	e030      	b.n	800d5e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	69da      	ldr	r2, [r3, #28]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	7b5b      	ldrb	r3, [r3, #13]
 800d58a:	021b      	lsls	r3, r3, #8
 800d58c:	b21b      	sxth	r3, r3
 800d58e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d592:	b219      	sxth	r1, r3
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	7adb      	ldrb	r3, [r3, #11]
 800d598:	b21b      	sxth	r3, r3
 800d59a:	430b      	orrs	r3, r1
 800d59c:	b21b      	sxth	r3, r3
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	4413      	add	r3, r2
 800d5a4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	7b1b      	ldrb	r3, [r3, #12]
 800d5aa:	837b      	strh	r3, [r7, #26]
 800d5ac:	8b7b      	ldrh	r3, [r7, #26]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d015      	beq.n	800d5de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	881b      	ldrh	r3, [r3, #0]
 800d5b6:	897a      	ldrh	r2, [r7, #10]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d103      	bne.n	800d5c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d5c2:	e00d      	b.n	800d5e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	881b      	ldrh	r3, [r3, #0]
 800d5c8:	897a      	ldrh	r2, [r7, #10]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d306      	bcc.n	800d5dc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d5ce:	8b7b      	ldrh	r3, [r7, #26]
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	837b      	strh	r3, [r7, #26]
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	3304      	adds	r3, #4
 800d5d8:	61fb      	str	r3, [r7, #28]
 800d5da:	e7e7      	b.n	800d5ac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800d5dc:	bf00      	nop
        }
    }
    return 0;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3724      	adds	r7, #36	; 0x24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	4801      	ldr	r0, [pc, #4]	; (800d5f8 <__tcf_0+0xc>)
 800d5f2:	f7ff ff37 	bl	800d464 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	20000450 	.word	0x20000450

0800d5fc <_Z23getFont_verdana_10_4bppv>:
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b08a      	sub	sp, #40	; 0x28
 800d600:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800d602:	4b1e      	ldr	r3, [pc, #120]	; (800d67c <_Z23getFont_verdana_10_4bppv+0x80>)
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	f3bf 8f5b 	dmb	ish
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	f003 0301 	and.w	r3, r3, #1
 800d610:	2b00      	cmp	r3, #0
 800d612:	bf0c      	ite	eq
 800d614:	2301      	moveq	r3, #1
 800d616:	2300      	movne	r3, #0
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d02a      	beq.n	800d674 <_Z23getFont_verdana_10_4bppv+0x78>
 800d61e:	4817      	ldr	r0, [pc, #92]	; (800d67c <_Z23getFont_verdana_10_4bppv+0x80>)
 800d620:	f00c f856 	bl	80196d0 <__cxa_guard_acquire>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	bf14      	ite	ne
 800d62a:	2301      	movne	r3, #1
 800d62c:	2300      	moveq	r3, #0
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	2b00      	cmp	r3, #0
 800d632:	d01f      	beq.n	800d674 <_Z23getFont_verdana_10_4bppv+0x78>
 800d634:	2300      	movs	r3, #0
 800d636:	9309      	str	r3, [sp, #36]	; 0x24
 800d638:	2300      	movs	r3, #0
 800d63a:	9308      	str	r3, [sp, #32]
 800d63c:	233f      	movs	r3, #63	; 0x3f
 800d63e:	9307      	str	r3, [sp, #28]
 800d640:	4b0f      	ldr	r3, [pc, #60]	; (800d680 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d642:	9306      	str	r3, [sp, #24]
 800d644:	4b0f      	ldr	r3, [pc, #60]	; (800d684 <_Z23getFont_verdana_10_4bppv+0x88>)
 800d646:	9305      	str	r3, [sp, #20]
 800d648:	2301      	movs	r3, #1
 800d64a:	9304      	str	r3, [sp, #16]
 800d64c:	2301      	movs	r3, #1
 800d64e:	9303      	str	r3, [sp, #12]
 800d650:	2301      	movs	r3, #1
 800d652:	9302      	str	r3, [sp, #8]
 800d654:	2304      	movs	r3, #4
 800d656:	9301      	str	r3, [sp, #4]
 800d658:	2302      	movs	r3, #2
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	230a      	movs	r3, #10
 800d65e:	2244      	movs	r2, #68	; 0x44
 800d660:	4909      	ldr	r1, [pc, #36]	; (800d688 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d662:	480a      	ldr	r0, [pc, #40]	; (800d68c <_Z23getFont_verdana_10_4bppv+0x90>)
 800d664:	f7ff ff2c 	bl	800d4c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800d668:	4809      	ldr	r0, [pc, #36]	; (800d690 <_Z23getFont_verdana_10_4bppv+0x94>)
 800d66a:	f00c fa85 	bl	8019b78 <atexit>
 800d66e:	4803      	ldr	r0, [pc, #12]	; (800d67c <_Z23getFont_verdana_10_4bppv+0x80>)
 800d670:	f00c f83a 	bl	80196e8 <__cxa_guard_release>
    return verdana_10_4bpp;
 800d674:	4b05      	ldr	r3, [pc, #20]	; (800d68c <_Z23getFont_verdana_10_4bppv+0x90>)
}
 800d676:	4618      	mov	r0, r3
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	20000474 	.word	0x20000474
 800d680:	0801ef34 	.word	0x0801ef34
 800d684:	0801c288 	.word	0x0801c288
 800d688:	0801eb40 	.word	0x0801eb40
 800d68c:	20000450 	.word	0x20000450
 800d690:	0800d5ed 	.word	0x0800d5ed

0800d694 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800d694:	b580      	push	{r7, lr}
 800d696:	af00      	add	r7, sp, #0
 800d698:	4801      	ldr	r0, [pc, #4]	; (800d6a0 <__tcf_0+0xc>)
 800d69a:	f7ff fee3 	bl	800d464 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	20000478 	.word	0x20000478

0800d6a4 <_Z23getFont_verdana_20_4bppv>:
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b08a      	sub	sp, #40	; 0x28
 800d6a8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800d6aa:	4b1e      	ldr	r3, [pc, #120]	; (800d724 <_Z23getFont_verdana_20_4bppv+0x80>)
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	f3bf 8f5b 	dmb	ish
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	f003 0301 	and.w	r3, r3, #1
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	bf0c      	ite	eq
 800d6bc:	2301      	moveq	r3, #1
 800d6be:	2300      	movne	r3, #0
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d02a      	beq.n	800d71c <_Z23getFont_verdana_20_4bppv+0x78>
 800d6c6:	4817      	ldr	r0, [pc, #92]	; (800d724 <_Z23getFont_verdana_20_4bppv+0x80>)
 800d6c8:	f00c f802 	bl	80196d0 <__cxa_guard_acquire>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	bf14      	ite	ne
 800d6d2:	2301      	movne	r3, #1
 800d6d4:	2300      	moveq	r3, #0
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d01f      	beq.n	800d71c <_Z23getFont_verdana_20_4bppv+0x78>
 800d6dc:	2300      	movs	r3, #0
 800d6de:	9309      	str	r3, [sp, #36]	; 0x24
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	9308      	str	r3, [sp, #32]
 800d6e4:	233f      	movs	r3, #63	; 0x3f
 800d6e6:	9307      	str	r3, [sp, #28]
 800d6e8:	4b0f      	ldr	r3, [pc, #60]	; (800d728 <_Z23getFont_verdana_20_4bppv+0x84>)
 800d6ea:	9306      	str	r3, [sp, #24]
 800d6ec:	4b0f      	ldr	r3, [pc, #60]	; (800d72c <_Z23getFont_verdana_20_4bppv+0x88>)
 800d6ee:	9305      	str	r3, [sp, #20]
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	9304      	str	r3, [sp, #16]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	9303      	str	r3, [sp, #12]
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	9302      	str	r3, [sp, #8]
 800d6fc:	2304      	movs	r3, #4
 800d6fe:	9301      	str	r3, [sp, #4]
 800d700:	2300      	movs	r3, #0
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	2314      	movs	r3, #20
 800d706:	2201      	movs	r2, #1
 800d708:	4909      	ldr	r1, [pc, #36]	; (800d730 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800d70a:	480a      	ldr	r0, [pc, #40]	; (800d734 <_Z23getFont_verdana_20_4bppv+0x90>)
 800d70c:	f7ff fed8 	bl	800d4c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800d710:	4809      	ldr	r0, [pc, #36]	; (800d738 <_Z23getFont_verdana_20_4bppv+0x94>)
 800d712:	f00c fa31 	bl	8019b78 <atexit>
 800d716:	4803      	ldr	r0, [pc, #12]	; (800d724 <_Z23getFont_verdana_20_4bppv+0x80>)
 800d718:	f00b ffe6 	bl	80196e8 <__cxa_guard_release>
    return verdana_20_4bpp;
 800d71c:	4b05      	ldr	r3, [pc, #20]	; (800d734 <_Z23getFont_verdana_20_4bppv+0x90>)
}
 800d71e:	4618      	mov	r0, r3
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	2000049c 	.word	0x2000049c
 800d728:	0801ef4c 	.word	0x0801ef4c
 800d72c:	0801c28c 	.word	0x0801c28c
 800d730:	0801eef8 	.word	0x0801eef8
 800d734:	20000478 	.word	0x20000478
 800d738:	0800d695 	.word	0x0800d695

0800d73c <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 3, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800d73c:	b580      	push	{r7, lr}
 800d73e:	af00      	add	r7, sp, #0
 800d740:	4801      	ldr	r0, [pc, #4]	; (800d748 <__tcf_0+0xc>)
 800d742:	f7ff fe8f 	bl	800d464 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d746:	bd80      	pop	{r7, pc}
 800d748:	200004a0 	.word	0x200004a0

0800d74c <_Z23getFont_verdana_40_4bppv>:
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b08a      	sub	sp, #40	; 0x28
 800d750:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 3, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800d752:	4b1e      	ldr	r3, [pc, #120]	; (800d7cc <_Z23getFont_verdana_40_4bppv+0x80>)
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	f3bf 8f5b 	dmb	ish
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	f003 0301 	and.w	r3, r3, #1
 800d760:	2b00      	cmp	r3, #0
 800d762:	bf0c      	ite	eq
 800d764:	2301      	moveq	r3, #1
 800d766:	2300      	movne	r3, #0
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d02a      	beq.n	800d7c4 <_Z23getFont_verdana_40_4bppv+0x78>
 800d76e:	4817      	ldr	r0, [pc, #92]	; (800d7cc <_Z23getFont_verdana_40_4bppv+0x80>)
 800d770:	f00b ffae 	bl	80196d0 <__cxa_guard_acquire>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	bf14      	ite	ne
 800d77a:	2301      	movne	r3, #1
 800d77c:	2300      	moveq	r3, #0
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	2b00      	cmp	r3, #0
 800d782:	d01f      	beq.n	800d7c4 <_Z23getFont_verdana_40_4bppv+0x78>
 800d784:	2300      	movs	r3, #0
 800d786:	9309      	str	r3, [sp, #36]	; 0x24
 800d788:	2300      	movs	r3, #0
 800d78a:	9308      	str	r3, [sp, #32]
 800d78c:	233f      	movs	r3, #63	; 0x3f
 800d78e:	9307      	str	r3, [sp, #28]
 800d790:	4b0f      	ldr	r3, [pc, #60]	; (800d7d0 <_Z23getFont_verdana_40_4bppv+0x84>)
 800d792:	9306      	str	r3, [sp, #24]
 800d794:	4b0f      	ldr	r3, [pc, #60]	; (800d7d4 <_Z23getFont_verdana_40_4bppv+0x88>)
 800d796:	9305      	str	r3, [sp, #20]
 800d798:	2300      	movs	r3, #0
 800d79a:	9304      	str	r3, [sp, #16]
 800d79c:	2300      	movs	r3, #0
 800d79e:	9303      	str	r3, [sp, #12]
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	9302      	str	r3, [sp, #8]
 800d7a4:	2304      	movs	r3, #4
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	2328      	movs	r3, #40	; 0x28
 800d7ae:	2203      	movs	r2, #3
 800d7b0:	4909      	ldr	r1, [pc, #36]	; (800d7d8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800d7b2:	480a      	ldr	r0, [pc, #40]	; (800d7dc <_Z23getFont_verdana_40_4bppv+0x90>)
 800d7b4:	f7ff fe84 	bl	800d4c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800d7b8:	4809      	ldr	r0, [pc, #36]	; (800d7e0 <_Z23getFont_verdana_40_4bppv+0x94>)
 800d7ba:	f00c f9dd 	bl	8019b78 <atexit>
 800d7be:	4803      	ldr	r0, [pc, #12]	; (800d7cc <_Z23getFont_verdana_40_4bppv+0x80>)
 800d7c0:	f00b ff92 	bl	80196e8 <__cxa_guard_release>
    return verdana_40_4bpp;
 800d7c4:	4b05      	ldr	r3, [pc, #20]	; (800d7dc <_Z23getFont_verdana_40_4bppv+0x90>)
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	200004c4 	.word	0x200004c4
 800d7d0:	0801ef50 	.word	0x0801ef50
 800d7d4:	0801c290 	.word	0x0801c290
 800d7d8:	0801ef08 	.word	0x0801ef08
 800d7dc:	200004a0 	.word	0x200004a0
 800d7e0:	0800d73d 	.word	0x0800d73d

0800d7e4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800d7fc:	b480      	push	{r7}
 800d7fe:	af00      	add	r7, sp, #0
    {
        return instance;
 800d800:	4b03      	ldr	r3, [pc, #12]	; (800d810 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800d802:	681b      	ldr	r3, [r3, #0]
    }
 800d804:	4618      	mov	r0, r3
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop
 800d810:	20001ca0 	.word	0x20001ca0

0800d814 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800d814:	b480      	push	{r7}
 800d816:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800d818:	4b0b      	ldr	r3, [pc, #44]	; (800d848 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800d820:	2b00      	cmp	r3, #0
 800d822:	d008      	beq.n	800d836 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800d824:	4b08      	ldr	r3, [pc, #32]	; (800d848 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d003      	beq.n	800d836 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800d82e:	4b06      	ldr	r3, [pc, #24]	; (800d848 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d834:	e002      	b.n	800d83c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800d836:	4b04      	ldr	r3, [pc, #16]	; (800d848 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	689b      	ldr	r3, [r3, #8]
        }
    }
 800d83c:	4618      	mov	r0, r3
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop
 800d848:	20001ca0 	.word	0x20001ca0

0800d84c <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
    {
        return color;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
    }
 800d858:	4618      	mov	r0, r3
 800d85a:	370c      	adds	r7, #12
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2200      	movs	r2, #0
 800d870:	801a      	strh	r2, [r3, #0]
        y = 0;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	805a      	strh	r2, [r3, #2]
        width = 0;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	809a      	strh	r2, [r3, #4]
        height = 0;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	80da      	strh	r2, [r3, #6]
    }
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	4618      	mov	r0, r3
 800d888:	370c      	adds	r7, #12
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr

0800d892 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800d892:	b580      	push	{r7, lr}
 800d894:	b082      	sub	sp, #8
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	460b      	mov	r3, r1
 800d89c:	807b      	strh	r3, [r7, #2]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	332c      	adds	r3, #44	; 0x2c
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d8ae:	4611      	mov	r1, r2
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	4798      	blx	r3
        setY(y);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	3330      	adds	r3, #48	; 0x30
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d8c0:	4611      	mov	r1, r2
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	4798      	blx	r3
    }
 800d8c6:	bf00      	nop
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800d8ce:	b480      	push	{r7}
 800d8d0:	b085      	sub	sp, #20
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	60f8      	str	r0, [r7, #12]
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	607a      	str	r2, [r7, #4]
 800d8da:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800d8dc:	2300      	movs	r3, #0
    }
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3714      	adds	r7, #20
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800d8ea:	b480      	push	{r7}
 800d8ec:	b083      	sub	sp, #12
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d8f2:	2300      	movs	r3, #0
    }
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	370c      	adds	r7, #12
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800d900:	b40e      	push	{r1, r2, r3}
 800d902:	b580      	push	{r7, lr}
 800d904:	b085      	sub	sp, #20
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800d90a:	f107 0320 	add.w	r3, r7, #32
 800d90e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	69fa      	ldr	r2, [r7, #28]
 800d914:	2100      	movs	r1, #0
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f008 fe4a 	bl	80165b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800d91c:	4603      	mov	r3, r0
 800d91e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800d920:	89fb      	ldrh	r3, [r7, #14]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d92c:	b003      	add	sp, #12
 800d92e:	4770      	bx	lr

0800d930 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800d930:	b40c      	push	{r2, r3}
 800d932:	b580      	push	{r7, lr}
 800d934:	b084      	sub	sp, #16
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
 800d93a:	460b      	mov	r3, r1
 800d93c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800d93e:	f107 031c 	add.w	r3, r7, #28
 800d942:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800d944:	78f9      	ldrb	r1, [r7, #3]
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	69ba      	ldr	r2, [r7, #24]
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f008 fe30 	bl	80165b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800d950:	4603      	mov	r3, r0
 800d952:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800d954:	89fb      	ldrh	r3, [r7, #14]
}
 800d956:	4618      	mov	r0, r3
 800d958:	3710      	adds	r7, #16
 800d95a:	46bd      	mov	sp, r7
 800d95c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d960:	b002      	add	sp, #8
 800d962:	4770      	bx	lr

0800d964 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b08a      	sub	sp, #40	; 0x28
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	460b      	mov	r3, r1
 800d96e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d974:	2b00      	cmp	r3, #0
 800d976:	d016      	beq.n	800d9a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	331a      	adds	r3, #26
 800d97c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d980:	8adb      	ldrh	r3, [r3, #22]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d105      	bne.n	800d992 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800d986:	4b43      	ldr	r3, [pc, #268]	; (800da94 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800d988:	4a43      	ldr	r2, [pc, #268]	; (800da98 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800d98a:	21c0      	movs	r1, #192	; 0xc0
 800d98c:	4843      	ldr	r0, [pc, #268]	; (800da9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d98e:	f00c f8d5 	bl	8019b3c <__assert_func>
            return buffer[pos];
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	8a9b      	ldrh	r3, [r3, #20]
 800d996:	461a      	mov	r2, r3
 800d998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d001      	beq.n	800d9a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e000      	b.n	800d9a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d06a      	beq.n	800da82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f009 fcad 	bl	801730c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	331a      	adds	r3, #26
 800d9b6:	623b      	str	r3, [r7, #32]
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	8adb      	ldrh	r3, [r3, #22]
 800d9c0:	8bfa      	ldrh	r2, [r7, #30]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d305      	bcc.n	800d9d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800d9c6:	4b36      	ldr	r3, [pc, #216]	; (800daa0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800d9c8:	4a36      	ldr	r2, [pc, #216]	; (800daa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800d9ca:	21c5      	movs	r1, #197	; 0xc5
 800d9cc:	4833      	ldr	r0, [pc, #204]	; (800da9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d9ce:	f00c f8b5 	bl	8019b3c <__assert_func>
            const uint16_t index = pos + offset;
 800d9d2:	6a3b      	ldr	r3, [r7, #32]
 800d9d4:	8a9a      	ldrh	r2, [r3, #20]
 800d9d6:	8bfb      	ldrh	r3, [r7, #30]
 800d9d8:	4413      	add	r3, r2
 800d9da:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800d9dc:	8bbb      	ldrh	r3, [r7, #28]
 800d9de:	2b09      	cmp	r3, #9
 800d9e0:	d801      	bhi.n	800d9e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800d9e2:	8bbb      	ldrh	r3, [r7, #28]
 800d9e4:	e001      	b.n	800d9ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800d9e6:	8bbb      	ldrh	r3, [r7, #28]
 800d9e8:	3b0a      	subs	r3, #10
 800d9ea:	6a3a      	ldr	r2, [r7, #32]
 800d9ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9f0:	f640 123f 	movw	r2, #2367	; 0x93f
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	bf0c      	ite	eq
 800d9f8:	2301      	moveq	r3, #1
 800d9fa:	2300      	movne	r3, #0
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d03f      	beq.n	800da82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	331a      	adds	r3, #26
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	321a      	adds	r2, #26
 800da0a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	8ad2      	ldrh	r2, [r2, #22]
 800da10:	2a00      	cmp	r2, #0
 800da12:	d105      	bne.n	800da20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800da14:	4b1f      	ldr	r3, [pc, #124]	; (800da94 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800da16:	4a20      	ldr	r2, [pc, #128]	; (800da98 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800da18:	21c0      	movs	r1, #192	; 0xc0
 800da1a:	4820      	ldr	r0, [pc, #128]	; (800da9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800da1c:	f00c f88e 	bl	8019b3c <__assert_func>
            return buffer[pos];
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	8a92      	ldrh	r2, [r2, #20]
 800da24:	4611      	mov	r1, r2
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800da2c:	613b      	str	r3, [r7, #16]
 800da2e:	4613      	mov	r3, r2
 800da30:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	8adb      	ldrh	r3, [r3, #22]
 800da36:	2b01      	cmp	r3, #1
 800da38:	d806      	bhi.n	800da48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800da3a:	4b1b      	ldr	r3, [pc, #108]	; (800daa8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800da3c:	4a1b      	ldr	r2, [pc, #108]	; (800daac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800da3e:	f240 110d 	movw	r1, #269	; 0x10d
 800da42:	4816      	ldr	r0, [pc, #88]	; (800da9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800da44:	f00c f87a 	bl	8019b3c <__assert_func>
            const uint16_t index = pos + 1;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	8a9b      	ldrh	r3, [r3, #20]
 800da4c:	3301      	adds	r3, #1
 800da4e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800da50:	89bb      	ldrh	r3, [r7, #12]
 800da52:	2b09      	cmp	r3, #9
 800da54:	d801      	bhi.n	800da5a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800da56:	89bb      	ldrh	r3, [r7, #12]
 800da58:	e000      	b.n	800da5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800da5a:	2300      	movs	r3, #0
 800da5c:	693a      	ldr	r2, [r7, #16]
 800da5e:	89f9      	ldrh	r1, [r7, #14]
 800da60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800da64:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	331a      	adds	r3, #26
 800da6a:	61bb      	str	r3, [r7, #24]
 800da6c:	f640 133f 	movw	r3, #2367	; 0x93f
 800da70:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	8a9b      	ldrh	r3, [r3, #20]
 800da76:	4619      	mov	r1, r3
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	8afa      	ldrh	r2, [r7, #22]
 800da7c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800da80:	bf00      	nop
        }
    }
    return getNextChar();
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f009 fb26 	bl	80170d4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800da88:	4603      	mov	r3, r0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3728      	adds	r7, #40	; 0x28
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	0801b10c 	.word	0x0801b10c
 800da98:	0801b118 	.word	0x0801b118
 800da9c:	0801b1c4 	.word	0x0801b1c4
 800daa0:	0801b274 	.word	0x0801b274
 800daa4:	0801b284 	.word	0x0801b284
 800daa8:	0801b358 	.word	0x0801b358
 800daac:	0801b364 	.word	0x0801b364

0800dab0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f009 fac5 	bl	8017048 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800dabe:	bf00      	nop
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
	...

0800dac8 <_ZN17TypedTextDatabase8getFontsEv>:
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}

const touchgfx::Font** getFonts()
{
 800dac8:	b480      	push	{r7}
 800daca:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800dacc:	4b02      	ldr	r3, [pc, #8]	; (800dad8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800dace:	4618      	mov	r0, r3
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	200004c8 	.word	0x200004c8

0800dadc <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d113      	bne.n	800db14 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d10e      	bne.n	800db14 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800daf6:	f7ff fdd5 	bl	800d6a4 <_Z23getFont_verdana_20_4bppv>
 800dafa:	4603      	mov	r3, r0
};
 800dafc:	4a07      	ldr	r2, [pc, #28]	; (800db1c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800dafe:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800db00:	f7ff fe24 	bl	800d74c <_Z23getFont_verdana_40_4bppv>
 800db04:	4603      	mov	r3, r0
};
 800db06:	4a05      	ldr	r2, [pc, #20]	; (800db1c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800db08:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800db0a:	f7ff fd77 	bl	800d5fc <_Z23getFont_verdana_10_4bppv>
 800db0e:	4603      	mov	r3, r0
};
 800db10:	4a02      	ldr	r2, [pc, #8]	; (800db1c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800db12:	6093      	str	r3, [r2, #8]
}  // namespace TypedTextDatabase
 800db14:	bf00      	nop
 800db16:	3708      	adds	r7, #8
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	200004c8 	.word	0x200004c8

0800db20 <_GLOBAL__sub_I_touchgfx_fonts>:
 800db20:	b580      	push	{r7, lr}
 800db22:	af00      	add	r7, sp, #0
 800db24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800db28:	2001      	movs	r0, #1
 800db2a:	f7ff ffd7 	bl	800dadc <_Z41__static_initialization_and_destruction_0ii>
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <_ZN5Model11getInstanceEv>:
#if (TOUCHGFX_BAREMETAL != 0)
    flagMode = flagDivTim = flagFreq = flagGraph = false;
#endif // TOUCHGFX_BAREMETAL
}

Model* Model::getInstance() {
 800db30:	b480      	push	{r7}
 800db32:	af00      	add	r7, sp, #0
	return _instance;
 800db34:	4b03      	ldr	r3, [pc, #12]	; (800db44 <_ZN5Model11getInstanceEv+0x14>)
 800db36:	681b      	ldr	r3, [r3, #0]
}
 800db38:	4618      	mov	r0, r3
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	200004d4 	.word	0x200004d4

0800db48 <_ZN5Model14setDivTimLabelENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	}
#endif // TOUCHGFX_FREERTOS
	// Makes async call to modelListener->notifyDrawGraph(...) see Model::tick()
}

void Model::setDivTimLabel(const std::string str){
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
	textDivTim = str;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	3334      	adds	r3, #52	; 0x34
 800db56:	6839      	ldr	r1, [r7, #0]
 800db58:	4618      	mov	r0, r3
 800db5a:	f00b fec3 	bl	80198e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
#if (TOUCHGFX_BAREMETAL != 0)
	this->flagDivTim=true;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2201      	movs	r2, #1
 800db62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
#endif // TOUCHGFX_BAREMETAL
#if (TOUCHGFX_FREERTOS != 0)
	GUI_EVENT msg = DIVTIM_EVENT;
	xQueueSend(gui_msg_q, &msg, 0);
#endif // TOUCHGFX_FREERTOS
}
 800db66:	bf00      	nop
 800db68:	3708      	adds	r7, #8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <_ZN5Model13setModeSignalENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Model::setModeSignal(const std::string str){
 800db6e:	b580      	push	{r7, lr}
 800db70:	b082      	sub	sp, #8
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	6039      	str	r1, [r7, #0]
	textMode = str;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	3304      	adds	r3, #4
 800db7c:	6839      	ldr	r1, [r7, #0]
 800db7e:	4618      	mov	r0, r3
 800db80:	f00b feb0 	bl	80198e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
#if (TOUCHGFX_BAREMETAL != 0)
	this->flagMode=true;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
#endif // TOUCHGFX_BAREMETAL
#if (TOUCHGFX_FREERTOS != 0)
	GUI_EVENT msg = MODE_EVENT;
	xQueueSend(gui_msg_q, &msg, 0);
#endif // TOUCHGFX_FREERTOS
}
 800db8c:	bf00      	nop
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <_ZN5Model13setFreqSignalENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Model::setFreqSignal(const std::string str){
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
	textFreq = str;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	331c      	adds	r3, #28
 800dba2:	6839      	ldr	r1, [r7, #0]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f00b fe9d 	bl	80198e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
#if (TOUCHGFX_BAREMETAL != 0)
	this->flagFreq=true;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2201      	movs	r2, #1
 800dbae:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
#endif // TOUCHGFX_BAREMETAL
#if (TOUCHGFX_FREERTOS != 0)
	GUI_EVENT msg = FREQUENCY_EVENT;
	xQueueSend(gui_msg_q, &msg, 0);
#endif // TOUCHGFX_FREERTOS
}
 800dbb2:	bf00      	nop
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
	...

0800dbbc <_ZN8touchgfx18MCUInstrumentationD1Ev>:

    /** Initialize. */
    virtual void init() = 0;

    /** Finalizes an instance of the MCUInstrumentation class. */
    virtual ~MCUInstrumentation()
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
    {
 800dbc4:	4a04      	ldr	r2, [pc, #16]	; (800dbd8 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	601a      	str	r2, [r3, #0]
    }
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	4618      	mov	r0, r3
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr
 800dbd8:	0801c314 	.word	0x0801c314

0800dbdc <_ZN8touchgfx18MCUInstrumentationD0Ev>:
    virtual ~MCUInstrumentation()
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
    }
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f7ff ffe9 	bl	800dbbc <_ZN8touchgfx18MCUInstrumentationD1Ev>
 800dbea:	210c      	movs	r1, #12
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f00b fd6d 	bl	80196cc <_ZdlPvj>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
    /**
     * Sets MCU activity high.
     *
     * @param  active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	460b      	mov	r3, r1
 800dc06:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 800dc08:	78fb      	ldrb	r3, [r7, #3]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d011      	beq.n	800dc32 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	3310      	adds	r3, #16
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	4798      	blx	r3
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	1ad3      	subs	r3, r2, r3
 800dc22:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	685a      	ldr	r2, [r3, #4]
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	441a      	add	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 800dc30:	e008      	b.n	800dc44 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	3310      	adds	r3, #16
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	4798      	blx	r3
 800dc3e:	4602      	mov	r2, r0
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	609a      	str	r2, [r3, #8]
    }
 800dc44:	bf00      	nop
 800dc46:	3710      	adds	r7, #16
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
    /**
     * Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	685b      	ldr	r3, [r3, #4]
    }
 800dc58:	4618      	mov	r0, r3
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
    /**
     * Sets number of consumed clock cycles.
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	605a      	str	r2, [r3, #4]
    }
 800dc74:	bf00      	nop
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void CortexMMCUInstrumentation::init()
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 800dc88:	4b0b      	ldr	r3, [pc, #44]	; (800dcb8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a0a      	ldr	r2, [pc, #40]	; (800dcb8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 800dc8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dc92:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 800dc94:	4b09      	ldr	r3, [pc, #36]	; (800dcbc <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	4908      	ldr	r1, [pc, #32]	; (800dcbc <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 800dc9a:	4b09      	ldr	r3, [pc, #36]	; (800dcc0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x40>)
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	600b      	str	r3, [r1, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 800dca0:	4b08      	ldr	r3, [pc, #32]	; (800dcc4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a07      	ldr	r2, [pc, #28]	; (800dcc4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 800dca6:	f043 0301 	orr.w	r3, r3, #1
 800dcaa:	6013      	str	r3, [r2, #0]
}
 800dcac:	bf00      	nop
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr
 800dcb8:	e000edfc 	.word	0xe000edfc
 800dcbc:	e0001fb0 	.word	0xe0001fb0
 800dcc0:	c5acce55 	.word	0xc5acce55
 800dcc4:	e0001000 	.word	0xe0001000

0800dcc8 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
 800dcd4:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	1ad2      	subs	r2, r2, r3
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	085b      	lsrs	r3, r3, #1
 800dce0:	441a      	add	r2, r3
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3714      	adds	r7, #20
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
    return *((volatile unsigned int*)0xE0001004);
 800dcfc:	4b03      	ldr	r3, [pc, #12]	; (800dd0c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x18>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	e0001004 	.word	0xe0001004

0800dd10 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 800dd1c:	78fb      	ldrb	r3, [r7, #3]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d011      	beq.n	800dd46 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x36>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	3310      	adds	r3, #16
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	4798      	blx	r3
 800dd2e:	4602      	mov	r2, r0
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	1ad3      	subs	r3, r2, r3
 800dd36:	60fb      	str	r3, [r7, #12]
        cc_consumed += cc_temp;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	685a      	ldr	r2, [r3, #4]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	441a      	add	r2, r3
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 800dd44:	e008      	b.n	800dd58 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x48>
        cc_in = getCPUCycles();
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	3310      	adds	r3, #16
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	4798      	blx	r3
 800dd52:	4602      	mov	r2, r0
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	609a      	str	r2, [r3, #8]
}
 800dd58:	bf00      	nop
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	4a05      	ldr	r2, [pc, #20]	; (800dd80 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev+0x20>)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	601a      	str	r2, [r3, #0]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7ff ff23 	bl	800dbbc <_ZN8touchgfx18MCUInstrumentationD1Ev>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	0801c2ec 	.word	0x0801c2ec

0800dd84 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7ff ffe7 	bl	800dd60 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 800dd92:	210c      	movs	r1, #12
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f00b fc99 	bl	80196cc <_ZdlPvj>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
    {
 800ddac:	4a04      	ldr	r2, [pc, #16]	; (800ddc0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	601a      	str	r2, [r3, #0]
    }
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	370c      	adds	r7, #12
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr
 800ddc0:	0801c354 	.word	0x0801c354

0800ddc4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
    }
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f7ff ffe9 	bl	800dda4 <_ZN8touchgfx15TouchControllerD1Ev>
 800ddd2:	2104      	movs	r1, #4
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f00b fc79 	bl	80196cc <_ZdlPvj>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800ddec:	4b05      	ldr	r3, [pc, #20]	; (800de04 <_ZN20STM32TouchController4initEv+0x20>)
 800ddee:	4a06      	ldr	r2, [pc, #24]	; (800de08 <_ZN20STM32TouchController4initEv+0x24>)
 800ddf0:	601a      	str	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 800ddf2:	4b04      	ldr	r3, [pc, #16]	; (800de04 <_ZN20STM32TouchController4initEv+0x20>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	2070      	movs	r0, #112	; 0x70
 800ddfa:	4798      	blx	r3
}
 800ddfc:	bf00      	nop
 800ddfe:	3708      	adds	r7, #8
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	200004d8 	.word	0x200004d8
 800de08:	20000000 	.word	0x20000000

0800de0c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 800de18:	4b0f      	ldr	r3, [pc, #60]	; (800de58 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d015      	beq.n	800de4c <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 800de20:	4b0d      	ldr	r3, [pc, #52]	; (800de58 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	691b      	ldr	r3, [r3, #16]
 800de26:	2070      	movs	r0, #112	; 0x70
 800de28:	4798      	blx	r3
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	bf14      	ite	ne
 800de30:	2301      	movne	r3, #1
 800de32:	2300      	moveq	r3, #0
 800de34:	b2db      	uxtb	r3, r3
 800de36:	2b00      	cmp	r3, #0
 800de38:	d008      	beq.n	800de4c <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
        {
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 800de3a:	4b07      	ldr	r3, [pc, #28]	; (800de58 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	695b      	ldr	r3, [r3, #20]
 800de40:	68ba      	ldr	r2, [r7, #8]
 800de42:	6879      	ldr	r1, [r7, #4]
 800de44:	2070      	movs	r0, #112	; 0x70
 800de46:	4798      	blx	r3
            return true;
 800de48:	2301      	movs	r3, #1
 800de4a:	e000      	b.n	800de4e <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
        }
    }
    return false;
 800de4c:	2300      	movs	r3, #0
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	200004d8 	.word	0x200004d8

0800de5c <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef* i2c_handler, uint8_t Addr)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	460b      	mov	r3, r1
 800de66:	70fb      	strb	r3, [r7, #3]
    /* De-initialize the I2C communication bus */
    HAL_I2C_DeInit(i2c_handler);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7f7 fbb9 	bl	80055e0 <HAL_I2C_DeInit>

    /* Re-Initialize the I2C communication bus */
    //I2Cx_Init(i2c_handler);
}
 800de6e:	bf00      	nop
 800de70:	3708      	adds	r7, #8
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}

0800de76 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t* Buffer,
                                           uint16_t Length)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b08a      	sub	sp, #40	; 0x28
 800de7a:	af04      	add	r7, sp, #16
 800de7c:	60f8      	str	r0, [r7, #12]
 800de7e:	4608      	mov	r0, r1
 800de80:	4611      	mov	r1, r2
 800de82:	461a      	mov	r2, r3
 800de84:	4603      	mov	r3, r0
 800de86:	72fb      	strb	r3, [r7, #11]
 800de88:	460b      	mov	r3, r1
 800de8a:	813b      	strh	r3, [r7, #8]
 800de8c:	4613      	mov	r3, r2
 800de8e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 800de90:	2300      	movs	r3, #0
 800de92:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800de94:	7afb      	ldrb	r3, [r7, #11]
 800de96:	b299      	uxth	r1, r3
 800de98:	88f8      	ldrh	r0, [r7, #6]
 800de9a:	893a      	ldrh	r2, [r7, #8]
 800de9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dea0:	9302      	str	r3, [sp, #8]
 800dea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dea4:	9301      	str	r3, [sp, #4]
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	4603      	mov	r3, r0
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f7f7 fcdb 	bl	8005868 <HAL_I2C_Mem_Read>
 800deb2:	4603      	mov	r3, r0
 800deb4:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 800deb6:	7dfb      	ldrb	r3, [r7, #23]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d004      	beq.n	800dec6 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* I2C error occurred */
        I2Cx_Error(i2c_handler, Addr);
 800debc:	7afb      	ldrb	r3, [r7, #11]
 800debe:	4619      	mov	r1, r3
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f7ff ffcb 	bl	800de5c <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 800dec6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3718      	adds	r7, #24
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t* Buffer,
                                            uint16_t Length)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b08a      	sub	sp, #40	; 0x28
 800ded4:	af04      	add	r7, sp, #16
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	4608      	mov	r0, r1
 800deda:	4611      	mov	r1, r2
 800dedc:	461a      	mov	r2, r3
 800dede:	4603      	mov	r3, r0
 800dee0:	72fb      	strb	r3, [r7, #11]
 800dee2:	460b      	mov	r3, r1
 800dee4:	813b      	strh	r3, [r7, #8]
 800dee6:	4613      	mov	r3, r2
 800dee8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 800deea:	2300      	movs	r3, #0
 800deec:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800deee:	7afb      	ldrb	r3, [r7, #11]
 800def0:	b299      	uxth	r1, r3
 800def2:	88f8      	ldrh	r0, [r7, #6]
 800def4:	893a      	ldrh	r2, [r7, #8]
 800def6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800defa:	9302      	str	r3, [sp, #8]
 800defc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800defe:	9301      	str	r3, [sp, #4]
 800df00:	6a3b      	ldr	r3, [r7, #32]
 800df02:	9300      	str	r3, [sp, #0]
 800df04:	4603      	mov	r3, r0
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f7f7 fb9a 	bl	8005640 <HAL_I2C_Mem_Write>
 800df0c:	4603      	mov	r3, r0
 800df0e:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d004      	beq.n	800df20 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* Re-Initiaize the I2C Bus */
        I2Cx_Error(i2c_handler, Addr);
 800df16:	7afb      	ldrb	r3, [r7, #11]
 800df18:	4619      	mov	r1, r3
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f7ff ff9e 	bl	800de5c <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 800df20:	7dfb      	ldrb	r3, [r7, #23]
}
 800df22:	4618      	mov	r0, r3
 800df24:	3718      	adds	r7, #24
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
	...

0800df2c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af02      	add	r7, sp, #8
 800df32:	4603      	mov	r3, r0
 800df34:	71fb      	strb	r3, [r7, #7]
 800df36:	460b      	mov	r3, r1
 800df38:	71bb      	strb	r3, [r7, #6]
 800df3a:	4613      	mov	r3, r2
 800df3c:	717b      	strb	r3, [r7, #5]
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
 800df3e:	79bb      	ldrb	r3, [r7, #6]
 800df40:	b29a      	uxth	r2, r3
 800df42:	79f9      	ldrb	r1, [r7, #7]
 800df44:	2301      	movs	r3, #1
 800df46:	9301      	str	r3, [sp, #4]
 800df48:	1d7b      	adds	r3, r7, #5
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	2301      	movs	r3, #1
 800df4e:	4803      	ldr	r0, [pc, #12]	; (800df5c <TS_IO_Write+0x30>)
 800df50:	f7ff ffbe 	bl	800ded0 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>
}
 800df54:	bf00      	nop
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	2000019c 	.word	0x2000019c

0800df60 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b086      	sub	sp, #24
 800df64:	af02      	add	r7, sp, #8
 800df66:	4603      	mov	r3, r0
 800df68:	460a      	mov	r2, r1
 800df6a:	71fb      	strb	r3, [r7, #7]
 800df6c:	4613      	mov	r3, r2
 800df6e:	71bb      	strb	r3, [r7, #6]
    uint8_t read_value = 0;
 800df70:	2300      	movs	r3, #0
 800df72:	73fb      	strb	r3, [r7, #15]

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800df74:	79bb      	ldrb	r3, [r7, #6]
 800df76:	b29a      	uxth	r2, r3
 800df78:	79f9      	ldrb	r1, [r7, #7]
 800df7a:	2301      	movs	r3, #1
 800df7c:	9301      	str	r3, [sp, #4]
 800df7e:	f107 030f 	add.w	r3, r7, #15
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	2301      	movs	r3, #1
 800df86:	4804      	ldr	r0, [pc, #16]	; (800df98 <TS_IO_Read+0x38>)
 800df88:	f7ff ff75 	bl	800de76 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>

    return read_value;
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	2000019c 	.word	0x2000019c

0800df9c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	4a05      	ldr	r2, [pc, #20]	; (800dfbc <_ZN20STM32TouchControllerD1Ev+0x20>)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	601a      	str	r2, [r3, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7ff fef9 	bl	800dda4 <_ZN8touchgfx15TouchControllerD1Ev>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	0801c33c 	.word	0x0801c33c

0800dfc0 <_ZN20STM32TouchControllerD0Ev>:
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7ff ffe7 	bl	800df9c <_ZN20STM32TouchControllerD1Ev>
 800dfce:	2104      	movs	r1, #4
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f00b fb7b 	bl	80196cc <_ZdlPvj>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3708      	adds	r7, #8
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	71fb      	strb	r3, [r7, #7]

}
 800dfea:	bf00      	nop
 800dfec:	370c      	adds	r7, #12
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr

0800dff6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800dff6:	b480      	push	{r7}
 800dff8:	b083      	sub	sp, #12
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	4603      	mov	r3, r0
 800dffe:	71fb      	strb	r3, [r7, #7]

}
 800e000:	bf00      	nop
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
 800e012:	4603      	mov	r3, r0
 800e014:	71fb      	strb	r3, [r7, #7]

}
 800e016:	bf00      	nop
 800e018:	370c      	adds	r7, #12
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr
	...

0800e024 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
    MCUInstrumentation()
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
          cc_in(0)
 800e02c:	4a07      	ldr	r2, [pc, #28]	; (800e04c <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	601a      	str	r2, [r3, #0]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2200      	movs	r2, #0
 800e036:	605a      	str	r2, [r3, #4]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2200      	movs	r2, #0
 800e03c:	609a      	str	r2, [r3, #8]
    }
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4618      	mov	r0, r3
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr
 800e04c:	0801c314 	.word	0x0801c314

0800e050 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800e050:	b480      	push	{r7}
 800e052:	b083      	sub	sp, #12
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
    {
 800e058:	4a04      	ldr	r2, [pc, #16]	; (800e06c <_ZN8touchgfx3HALD1Ev+0x1c>)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	601a      	str	r2, [r3, #0]
    }
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4618      	mov	r0, r3
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr
 800e06c:	0801caec 	.word	0x0801caec

0800e070 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
    }
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7ff ffe9 	bl	800e050 <_ZN8touchgfx3HALD1Ev>
 800e07e:	217c      	movs	r1, #124	; 0x7c
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f00b fb23 	bl	80196cc <_ZdlPvj>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4618      	mov	r0, r3
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800e090:	b480      	push	{r7}
 800e092:	b083      	sub	sp, #12
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	460b      	mov	r3, r1
 800e09a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	78fa      	ldrb	r2, [r7, #3]
 800e0a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800e0ac:	bf00      	nop
 800e0ae:	370c      	adds	r7, #12
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d009      	beq.n	800e0de <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	685a      	ldr	r2, [r3, #4]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4610      	mov	r0, r2
 800e0d8:	4798      	blx	r3
 800e0da:	4603      	mov	r3, r0
 800e0dc:	e000      	b.n	800e0e0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 800e0de:	2300      	movs	r3, #0
        }
    }
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f007 fa31 	bl	8015558 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	3390      	adds	r3, #144	; 0x90
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	4798      	blx	r3
    }
 800e102:	bf00      	nop
 800e104:	3708      	adds	r7, #8
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800e10a:	b480      	push	{r7}
 800e10c:	b083      	sub	sp, #12
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
 800e112:	6039      	str	r1, [r7, #0]
    {
        return false;
 800e114:	2300      	movs	r3, #0
    }
 800e116:	4618      	mov	r0, r3
 800e118:	370c      	adds	r7, #12
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr
	...

0800e124 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	607a      	str	r2, [r7, #4]
 800e130:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d106      	bne.n	800e146 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800e138:	4b11      	ldr	r3, [pc, #68]	; (800e180 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800e13a:	4a12      	ldr	r2, [pc, #72]	; (800e184 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800e13c:	f240 216b 	movw	r1, #619	; 0x26b
 800e140:	4811      	ldr	r0, [pc, #68]	; (800e188 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800e142:	f00b fcfb 	bl	8019b3c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	683a      	ldr	r2, [r7, #0]
 800e156:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	bf14      	ite	ne
 800e15e:	2301      	movne	r3, #1
 800e160:	2300      	moveq	r3, #0
 800e162:	b2da      	uxtb	r2, r3
 800e164:	4b09      	ldr	r3, [pc, #36]	; (800e18c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800e166:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	bf14      	ite	ne
 800e16e:	2301      	movne	r3, #1
 800e170:	2300      	moveq	r3, #0
 800e172:	b2da      	uxtb	r2, r3
 800e174:	4b06      	ldr	r3, [pc, #24]	; (800e190 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800e176:	701a      	strb	r2, [r3, #0]
    }
 800e178:	bf00      	nop
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	0801b418 	.word	0x0801b418
 800e184:	0801b450 	.word	0x0801b450
 800e188:	0801b4a0 	.word	0x0801b4a0
 800e18c:	20001c9c 	.word	0x20001c9c
 800e190:	20001c9d 	.word	0x20001c9d

0800e194 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e19c:	2300      	movs	r3, #0
    }
 800e19e:	4618      	mov	r0, r3
 800e1a0:	370c      	adds	r7, #12
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr

0800e1aa <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b082      	sub	sp, #8
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d004      	beq.n	800e1c8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1c2:	887a      	ldrh	r2, [r7, #2]
 800e1c4:	4610      	mov	r0, r2
 800e1c6:	4798      	blx	r3
        }
    }
 800e1c8:	bf00      	nop
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800e1d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800e1dc:	4618      	mov	r0, r3
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	685a      	ldr	r2, [r3, #4]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3318      	adds	r3, #24
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4610      	mov	r0, r2
 800e200:	4798      	blx	r3
 800e202:	4603      	mov	r3, r0
    }
 800e204:	4618      	mov	r0, r3
 800e206:	3708      	adds	r7, #8
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e220:	429a      	cmp	r2, r3
 800e222:	d017      	beq.n	800e254 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 800e224:	4b1a      	ldr	r3, [pc, #104]	; (800e290 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d12a      	bne.n	800e282 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800e22c:	4b19      	ldr	r3, [pc, #100]	; (800e294 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800e22e:	881a      	ldrh	r2, [r3, #0]
 800e230:	4b19      	ldr	r3, [pc, #100]	; (800e298 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800e232:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800e234:	4b19      	ldr	r3, [pc, #100]	; (800e29c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800e236:	881a      	ldrh	r2, [r3, #0]
 800e238:	4b19      	ldr	r3, [pc, #100]	; (800e2a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800e23a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 800e23c:	4b16      	ldr	r3, [pc, #88]	; (800e298 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800e23e:	881a      	ldrh	r2, [r3, #0]
 800e240:	4b16      	ldr	r3, [pc, #88]	; (800e29c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800e242:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 800e244:	4b16      	ldr	r3, [pc, #88]	; (800e2a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800e246:	881a      	ldrh	r2, [r3, #0]
 800e248:	4b12      	ldr	r3, [pc, #72]	; (800e294 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800e24a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 800e24c:	4b10      	ldr	r3, [pc, #64]	; (800e290 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800e24e:	2201      	movs	r2, #1
 800e250:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800e252:	e016      	b.n	800e282 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 800e254:	4b0e      	ldr	r3, [pc, #56]	; (800e290 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d012      	beq.n	800e282 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 800e25c:	4b0f      	ldr	r3, [pc, #60]	; (800e29c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800e25e:	881a      	ldrh	r2, [r3, #0]
 800e260:	4b0d      	ldr	r3, [pc, #52]	; (800e298 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800e262:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 800e264:	4b0b      	ldr	r3, [pc, #44]	; (800e294 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800e266:	881a      	ldrh	r2, [r3, #0]
 800e268:	4b0d      	ldr	r3, [pc, #52]	; (800e2a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800e26a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 800e26c:	4b0c      	ldr	r3, [pc, #48]	; (800e2a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800e26e:	881a      	ldrh	r2, [r3, #0]
 800e270:	4b0a      	ldr	r3, [pc, #40]	; (800e29c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800e272:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 800e274:	4b08      	ldr	r3, [pc, #32]	; (800e298 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800e276:	881a      	ldrh	r2, [r3, #0]
 800e278:	4b06      	ldr	r3, [pc, #24]	; (800e294 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800e27a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800e27c:	4b04      	ldr	r3, [pc, #16]	; (800e290 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800e27e:	2200      	movs	r2, #0
 800e280:	701a      	strb	r2, [r3, #0]
    }
 800e282:	bf00      	nop
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	20001c96 	.word	0x20001c96
 800e294:	20001c92 	.word	0x20001c92
 800e298:	20001c98 	.word	0x20001c98
 800e29c:	20001c94 	.word	0x20001c94
 800e2a0:	20001c9a 	.word	0x20001c9a

0800e2a4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f006 fbea 	bl	8014a88 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800e2b4:	bf00      	nop
 800e2b6:	3708      	adds	r7, #8
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	4a05      	ldr	r2, [pc, #20]	; (800e2dc <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	601a      	str	r2, [r3, #0]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7ff febf 	bl	800e050 <_ZN8touchgfx3HALD1Ev>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	0801c49c 	.word	0x0801c49c

0800e2e0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f7ff ffe7 	bl	800e2bc <_ZN20TouchGFXGeneratedHALD1Ev>
 800e2ee:	217c      	movs	r1, #124	; 0x7c
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f00b f9eb 	bl	80196cc <_ZdlPvj>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3708      	adds	r7, #8
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7ff ffca 	bl	800e2a4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800e310:	bf00      	nop
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800e31e:	4b21      	ldr	r3, [pc, #132]	; (800e3a4 <SCB_CleanInvalidateDCache+0x8c>)
 800e320:	2200      	movs	r2, #0
 800e322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800e326:	f3bf 8f4f 	dsb	sy
}
 800e32a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800e32c:	4b1d      	ldr	r3, [pc, #116]	; (800e3a4 <SCB_CleanInvalidateDCache+0x8c>)
 800e32e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e332:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	0b5b      	lsrs	r3, r3, #13
 800e338:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e33c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	08db      	lsrs	r3, r3, #3
 800e342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e346:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	015a      	lsls	r2, r3, #5
 800e34c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800e350:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800e352:	68ba      	ldr	r2, [r7, #8]
 800e354:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800e356:	4913      	ldr	r1, [pc, #76]	; (800e3a4 <SCB_CleanInvalidateDCache+0x8c>)
 800e358:	4313      	orrs	r3, r2
 800e35a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	1e5a      	subs	r2, r3, #1
 800e362:	60ba      	str	r2, [r7, #8]
 800e364:	2b00      	cmp	r3, #0
 800e366:	bf14      	ite	ne
 800e368:	2301      	movne	r3, #1
 800e36a:	2300      	moveq	r3, #0
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d000      	beq.n	800e374 <SCB_CleanInvalidateDCache+0x5c>
      do {
 800e372:	e7e9      	b.n	800e348 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	1e5a      	subs	r2, r3, #1
 800e378:	60fa      	str	r2, [r7, #12]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	bf14      	ite	ne
 800e37e:	2301      	movne	r3, #1
 800e380:	2300      	moveq	r3, #0
 800e382:	b2db      	uxtb	r3, r3
 800e384:	2b00      	cmp	r3, #0
 800e386:	d000      	beq.n	800e38a <SCB_CleanInvalidateDCache+0x72>
    do {
 800e388:	e7d9      	b.n	800e33e <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800e38a:	f3bf 8f4f 	dsb	sy
}
 800e38e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e390:	f3bf 8f6f 	isb	sy
}
 800e394:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800e396:	bf00      	nop
 800e398:	3714      	adds	r7, #20
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop
 800e3a4:	e000ed00 	.word	0xe000ed00

0800e3a8 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>:
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7ff fe36 	bl	800e024 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 800e3b8:	4a03      	ldr	r2, [pc, #12]	; (800e3c8 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev+0x20>)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	601a      	str	r2, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	0801c2ec 	.word	0x0801c2ec

0800e3cc <_ZN11TouchGFXHAL9taskEntryEv>:
    enableMCULoadCalculation(true);
}

#if (TOUCHGFX_BAREMETAL != 0)
void TouchGFXHAL::taskEntry()
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
    static bool firstCall = true;

    if (firstCall)
 800e3d4:	4b0c      	ldr	r3, [pc, #48]	; (800e408 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00e      	beq.n	800e3fa <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
    {
        firstCall = false;
 800e3dc:	4b0a      	ldr	r3, [pc, #40]	; (800e408 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 800e3de:	2200      	movs	r2, #0
 800e3e0:	701a      	strb	r2, [r3, #0]
        enableLCDControllerInterrupt();
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	3368      	adds	r3, #104	; 0x68
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	4798      	blx	r3
        enableInterrupts();
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	3360      	adds	r3, #96	; 0x60
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	4798      	blx	r3
    }

    OSWrappers::waitForVSync();
 800e3fa:	f000 f91d 	bl	800e638 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>

    //backPorchExited();
    // Not necessary to call here when it is done by the
    // OSWrappers::waitForVSync() method
}
 800e3fe:	bf00      	nop
 800e400:	3708      	adds	r7, #8
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	20000054 	.word	0x20000054

0800e40c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	4618      	mov	r0, r3
 800e418:	f001 f8ac 	bl	800f574 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800e41c:	4603      	mov	r3, r0
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3708      	adds	r7, #8
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}

0800e426 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800e426:	b580      	push	{r7, lr}
 800e428:	b082      	sub	sp, #8
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	6078      	str	r0, [r7, #4]
 800e42e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6839      	ldr	r1, [r7, #0]
 800e434:	4618      	mov	r0, r3
 800e436:	f001 f8ab 	bl	800f590 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800e43a:	bf00      	nop
 800e43c:	3708      	adds	r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
	...

0800e444 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6839      	ldr	r1, [r7, #0]
 800e452:	4618      	mov	r0, r3
 800e454:	f001 f8b2 	bl	800f5bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    if ((SCB->CCR & SCB_CCR_DC_Msk) != 0)   // Check data cache is enabled
 800e458:	4b08      	ldr	r3, [pc, #32]	; (800e47c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 800e45a:	695b      	ldr	r3, [r3, #20]
 800e45c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e460:	2b00      	cmp	r3, #0
 800e462:	bf14      	ite	ne
 800e464:	2301      	movne	r3, #1
 800e466:	2300      	moveq	r3, #0
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 800e46e:	f7ff ff53 	bl	800e318 <SCB_CleanInvalidateDCache>
    }
}
 800e472:	bf00      	nop
 800e474:	3708      	adds	r7, #8
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	e000ed00 	.word	0xe000ed00

0800e480 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	607a      	str	r2, [r7, #4]
 800e48c:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	68b9      	ldr	r1, [r7, #8]
 800e496:	f001 f8af 	bl	800f5f8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800e49a:	4603      	mov	r3, r0
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3710      	adds	r7, #16
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f001 f806 	bl	800f4c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800e4b4:	bf00      	nop
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f001 f80a 	bl	800f4e0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800e4cc:	bf00      	nop
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f001 f80c 	bl	800f4fc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800e4e4:	bf00      	nop
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f001 f80e 	bl	800f518 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800e4fc:	bf00      	nop
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	4a05      	ldr	r2, [pc, #20]	; (800e524 <_ZN11TouchGFXHALD1Ev+0x20>)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	601a      	str	r2, [r3, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4618      	mov	r0, r3
 800e516:	f7ff fed1 	bl	800e2bc <_ZN20TouchGFXGeneratedHALD1Ev>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4618      	mov	r0, r3
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	0801c36c 	.word	0x0801c36c

0800e528 <_ZN11TouchGFXHALD0Ev>:
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f7ff ffe7 	bl	800e504 <_ZN11TouchGFXHALD1Ev>
 800e536:	217c      	movs	r1, #124	; 0x7c
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f00b f8c7 	bl	80196cc <_ZdlPvj>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4618      	mov	r0, r3
 800e542:	3708      	adds	r7, #8
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <_Z41__static_initialization_and_destruction_0ii>:
        }
        return pdTRUE;
    }
	#endif // TOUCHGFX_FREERTOS

}
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2b01      	cmp	r3, #1
 800e556:	d107      	bne.n	800e568 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e55e:	4293      	cmp	r3, r2
 800e560:	d102      	bne.n	800e568 <_Z41__static_initialization_and_destruction_0ii+0x20>
CortexMMCUInstrumentation instrumentation;
 800e562:	4809      	ldr	r0, [pc, #36]	; (800e588 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800e564:	f7ff ff20 	bl	800e3a8 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d107      	bne.n	800e57e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e574:	4293      	cmp	r3, r2
 800e576:	d102      	bne.n	800e57e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800e578:	4803      	ldr	r0, [pc, #12]	; (800e588 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800e57a:	f7ff fbf1 	bl	800dd60 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
}
 800e57e:	bf00      	nop
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	200004dc 	.word	0x200004dc

0800e58c <_GLOBAL__sub_I_instrumentation>:
 800e58c:	b580      	push	{r7, lr}
 800e58e:	af00      	add	r7, sp, #0
 800e590:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e594:	2001      	movs	r0, #1
 800e596:	f7ff ffd7 	bl	800e548 <_Z41__static_initialization_and_destruction_0ii>
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <_GLOBAL__sub_D_instrumentation>:
 800e59c:	b580      	push	{r7, lr}
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	f7ff ffcf 	bl	800e548 <_Z41__static_initialization_and_destruction_0ii>
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	af00      	add	r7, sp, #0
	#if (TOUCHGFX_BAREMETAL != 0)
	  while(fb_sem);
 800e5b0:	4b08      	ldr	r3, [pc, #32]	; (800e5d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	bf14      	ite	ne
 800e5b8:	2301      	movne	r3, #1
 800e5ba:	2300      	moveq	r3, #0
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d000      	beq.n	800e5c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 800e5c2:	e7f5      	b.n	800e5b0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x4>
	  fb_sem = 1;
 800e5c4:	4b03      	ldr	r3, [pc, #12]	; (800e5d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	601a      	str	r2, [r3, #0]
	#endif  // TOUCHGFX_BAREMETAL
	#if (TOUCHGFX_FREERTOS != 0)
	    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
	#endif // TOUCHGFX_FREERTOS
}
 800e5ca:	bf00      	nop
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr
 800e5d4:	200004e8 	.word	0x200004e8

0800e5d8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800e5d8:	b480      	push	{r7}
 800e5da:	af00      	add	r7, sp, #0
	#if (TOUCHGFX_BAREMETAL != 0)
	  fb_sem = 0;
 800e5dc:	4b03      	ldr	r3, [pc, #12]	; (800e5ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800e5de:	2200      	movs	r2, #0
 800e5e0:	601a      	str	r2, [r3, #0]
	#endif  // TOUCHGFX_BAREMETAL
	#if (TOUCHGFX_FREERTOS != 0)
	  osSemaphoreRelease(frame_buffer_sem);
	#endif // TOUCHGFX_FREERTOS
}
 800e5e2:	bf00      	nop
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr
 800e5ec:	200004e8 	.word	0x200004e8

0800e5f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	af00      	add	r7, sp, #0
	#if (TOUCHGFX_BAREMETAL != 0)
	  fb_sem = 1;
 800e5f4:	4b03      	ldr	r3, [pc, #12]	; (800e604 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	601a      	str	r2, [r3, #0]
	#endif  // TOUCHGFX_BAREMETAL
	#if (TOUCHGFX_FREERTOS != 0)
	    osSemaphoreAcquire(frame_buffer_sem, 0);
	#endif // TOUCHGFX_FREERTOS
}
 800e5fa:	bf00      	nop
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr
 800e604:	200004e8 	.word	0x200004e8

0800e608 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800e608:	b480      	push	{r7}
 800e60a:	af00      	add	r7, sp, #0
	#if (TOUCHGFX_BAREMETAL != 0)
		fb_sem = 0;
 800e60c:	4b03      	ldr	r3, [pc, #12]	; (800e61c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800e60e:	2200      	movs	r2, #0
 800e610:	601a      	str	r2, [r3, #0]
	#endif  // TOUCHGFX_BAREMETAL
	#if (TOUCHGFX_FREERTOS != 0)
	    osSemaphoreRelease(frame_buffer_sem);
	#endif // TOUCHGFX_FREERTOS
}
 800e612:	bf00      	nop
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr
 800e61c:	200004e8 	.word	0x200004e8

0800e620 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800e620:	b480      	push	{r7}
 800e622:	af00      	add	r7, sp, #0
	#if (TOUCHGFX_BAREMETAL != 0)
	  vsync_sem = 1;
 800e624:	4b03      	ldr	r3, [pc, #12]	; (800e634 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800e626:	2201      	movs	r2, #1
 800e628:	601a      	str	r2, [r3, #0]
	#endif  // TOUCHGFX_BAREMETAL
	#if (TOUCHGFX_FREERTOS != 0)
	    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
	#endif // TOUCHGFX_FREERTOS
}
 800e62a:	bf00      	nop
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr
 800e634:	200004ec 	.word	0x200004ec

0800e638 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	af00      	add	r7, sp, #0
	#if (TOUCHGFX_BAREMETAL != 0)
	  if(vsync_sem)
 800e63c:	4b0a      	ldr	r3, [pc, #40]	; (800e668 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	bf14      	ite	ne
 800e644:	2301      	movne	r3, #1
 800e646:	2300      	moveq	r3, #0
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00a      	beq.n	800e664 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
	  {
		vsync_sem = 0;
 800e64e:	4b06      	ldr	r3, [pc, #24]	; (800e668 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 800e650:	2200      	movs	r2, #0
 800e652:	601a      	str	r2, [r3, #0]
		HAL::getInstance()->backPorchExited();
 800e654:	f7ff f8d2 	bl	800d7fc <_ZN8touchgfx3HAL11getInstanceEv>
 800e658:	4603      	mov	r3, r0
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	3258      	adds	r2, #88	; 0x58
 800e65e:	6812      	ldr	r2, [r2, #0]
 800e660:	4618      	mov	r0, r3
 800e662:	4790      	blx	r2
	  osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);

	  // Then, wait for next VSYNC to occur.
	  osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
	#endif // TOUCHGFX_FREERTOS
}
 800e664:	bf00      	nop
 800e666:	bd80      	pop	{r7, pc}
 800e668:	200004ec 	.word	0x200004ec

0800e66c <__NVIC_EnableIRQ>:
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	4603      	mov	r3, r0
 800e674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	db0b      	blt.n	800e696 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e67e:	79fb      	ldrb	r3, [r7, #7]
 800e680:	f003 021f 	and.w	r2, r3, #31
 800e684:	4907      	ldr	r1, [pc, #28]	; (800e6a4 <__NVIC_EnableIRQ+0x38>)
 800e686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e68a:	095b      	lsrs	r3, r3, #5
 800e68c:	2001      	movs	r0, #1
 800e68e:	fa00 f202 	lsl.w	r2, r0, r2
 800e692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e696:	bf00      	nop
 800e698:	370c      	adds	r7, #12
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	e000e100 	.word	0xe000e100

0800e6a8 <__NVIC_DisableIRQ>:
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e6b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	db12      	blt.n	800e6e0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e6ba:	79fb      	ldrb	r3, [r7, #7]
 800e6bc:	f003 021f 	and.w	r2, r3, #31
 800e6c0:	490a      	ldr	r1, [pc, #40]	; (800e6ec <__NVIC_DisableIRQ+0x44>)
 800e6c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6c6:	095b      	lsrs	r3, r3, #5
 800e6c8:	2001      	movs	r0, #1
 800e6ca:	fa00 f202 	lsl.w	r2, r0, r2
 800e6ce:	3320      	adds	r3, #32
 800e6d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800e6d4:	f3bf 8f4f 	dsb	sy
}
 800e6d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e6da:	f3bf 8f6f 	isb	sy
}
 800e6de:	bf00      	nop
}
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr
 800e6ec:	e000e100 	.word	0xe000e100

0800e6f0 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
        : color(0)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	601a      	str	r2, [r3, #0]
    }
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4618      	mov	r0, r3
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
    {
 800e714:	4a04      	ldr	r2, [pc, #16]	; (800e728 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	601a      	str	r2, [r3, #0]
    }
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	4618      	mov	r0, r3
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr
 800e728:	0801c478 	.word	0x0801c478

0800e72c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
    }
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f7ff ffe9 	bl	800e70c <_ZN8touchgfx9DMA_QueueD1Ev>
 800e73a:	2104      	movs	r1, #4
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f00a ffc5 	bl	80196cc <_ZdlPvj>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	4618      	mov	r0, r3
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	3344      	adds	r3, #68	; 0x44
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	4798      	blx	r3
    }
 800e760:	bf00      	nop
 800e762:	3708      	adds	r7, #8
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
    {
 800e770:	4a04      	ldr	r2, [pc, #16]	; (800e784 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	601a      	str	r2, [r3, #0]
    }
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	4618      	mov	r0, r3
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr
 800e784:	0801cf38 	.word	0x0801cf38

0800e788 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
    }
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f7ff ffe9 	bl	800e768 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800e796:	210c      	movs	r1, #12
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f00a ff97 	bl	80196cc <_ZdlPvj>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800e7b2:	4a09      	ldr	r2, [pc, #36]	; (800e7d8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	601a      	str	r2, [r3, #0]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	683a      	ldr	r2, [r7, #0]
 800e7bc:	605a      	str	r2, [r3, #4]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	721a      	strb	r2, [r3, #8]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	725a      	strb	r2, [r3, #9]
    {
    }
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr
 800e7d8:	0801cf38 	.word	0x0801cf38

0800e7dc <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800e7e4:	2301      	movs	r3, #1
    }
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	370c      	adds	r7, #12
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr

0800e7f2 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b082      	sub	sp, #8
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	3328      	adds	r3, #40	; 0x28
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	4610      	mov	r0, r2
 800e806:	4798      	blx	r3
    }
 800e808:	bf00      	nop
 800e80a:	3708      	adds	r7, #8
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	685a      	ldr	r2, [r3, #4]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	3314      	adds	r3, #20
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4610      	mov	r0, r2
 800e828:	4798      	blx	r3
    }
 800e82a:	bf00      	nop
 800e82c:	3708      	adds	r7, #8
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b082      	sub	sp, #8
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
    (void)handle; // Unused argument
    HAL::getInstance()->signalDMAInterrupt();
 800e83a:	f7fe ffdf 	bl	800d7fc <_ZN8touchgfx3HAL11getInstanceEv>
 800e83e:	4603      	mov	r3, r0
 800e840:	4618      	mov	r0, r3
 800e842:	f7ff ffe5 	bl	800e810 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 800e846:	bf00      	nop
 800e848:	3708      	adds	r7, #8
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}

0800e84e <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800e84e:	b580      	push	{r7, lr}
 800e850:	b082      	sub	sp, #8
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	3318      	adds	r3, #24
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7ff ff48 	bl	800e6f0 <_ZN8touchgfx9colortypeC1Ev>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4618      	mov	r0, r3
 800e864:	3708      	adds	r7, #8
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
	...

0800e86c <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 800e86c:	b5b0      	push	{r4, r5, r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	330c      	adds	r3, #12
 800e87a:	4619      	mov	r1, r3
 800e87c:	4610      	mov	r0, r2
 800e87e:	f7ff ff93 	bl	800e7a8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800e882:	4a0e      	ldr	r2, [pc, #56]	; (800e8bc <_ZN10STM32F7DMAC1Ev+0x50>)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f103 000c 	add.w	r0, r3, #12
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	3320      	adds	r3, #32
 800e892:	2260      	movs	r2, #96	; 0x60
 800e894:	4619      	mov	r1, r3
 800e896:	f006 ffbf 	bl	8015818 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	3320      	adds	r3, #32
 800e89e:	245f      	movs	r4, #95	; 0x5f
 800e8a0:	461d      	mov	r5, r3
 800e8a2:	2c00      	cmp	r4, #0
 800e8a4:	db05      	blt.n	800e8b2 <_ZN10STM32F7DMAC1Ev+0x46>
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	f7ff ffd1 	bl	800e84e <_ZN8touchgfx6BlitOpC1Ev>
 800e8ac:	3520      	adds	r5, #32
 800e8ae:	3c01      	subs	r4, #1
 800e8b0:	e7f7      	b.n	800e8a2 <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3708      	adds	r7, #8
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bdb0      	pop	{r4, r5, r7, pc}
 800e8bc:	0801c428 	.word	0x0801c428

0800e8c0 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	4a09      	ldr	r2, [pc, #36]	; (800e8f0 <_ZN10STM32F7DMAD1Ev+0x30>)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800e8ce:	205a      	movs	r0, #90	; 0x5a
 800e8d0:	f7ff feea 	bl	800e6a8 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	330c      	adds	r3, #12
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f000 fb27 	bl	800ef2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7ff ff41 	bl	800e768 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3708      	adds	r7, #8
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	0801c428 	.word	0x0801c428

0800e8f4 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
}
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f7ff ffdf 	bl	800e8c0 <_ZN10STM32F7DMAD1Ev>
 800e902:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f00a fee0 	bl	80196cc <_ZdlPvj>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	4618      	mov	r0, r3
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
	...

0800e918 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800e920:	4b10      	ldr	r3, [pc, #64]	; (800e964 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800e922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e924:	4a0f      	ldr	r2, [pc, #60]	; (800e964 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800e926:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e92a:	6313      	str	r3, [r2, #48]	; 0x30
 800e92c:	4b0d      	ldr	r3, [pc, #52]	; (800e964 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800e92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e934:	60fb      	str	r3, [r7, #12]
 800e936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800e938:	4b0a      	ldr	r3, [pc, #40]	; (800e964 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800e93a:	691b      	ldr	r3, [r3, #16]
 800e93c:	4a09      	ldr	r2, [pc, #36]	; (800e964 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800e93e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e942:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800e944:	4b07      	ldr	r3, [pc, #28]	; (800e964 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800e946:	691b      	ldr	r3, [r3, #16]
 800e948:	4a06      	ldr	r2, [pc, #24]	; (800e964 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800e94a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e94e:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800e950:	4b05      	ldr	r3, [pc, #20]	; (800e968 <_ZN10STM32F7DMA10initializeEv+0x50>)
 800e952:	4a06      	ldr	r2, [pc, #24]	; (800e96c <_ZN10STM32F7DMA10initializeEv+0x54>)
 800e954:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800e956:	205a      	movs	r0, #90	; 0x5a
 800e958:	f7ff fe88 	bl	800e66c <__NVIC_EnableIRQ>
}
 800e95c:	bf00      	nop
 800e95e:	3710      	adds	r7, #16
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	40023800 	.word	0x40023800
 800e968:	2000015c 	.word	0x2000015c
 800e96c:	0800e833 	.word	0x0800e833

0800e970 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	460b      	mov	r3, r1
 800e97a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800e97c:	2300      	movs	r3, #0
 800e97e:	60fb      	str	r3, [r7, #12]

    switch (format)
 800e980:	78fb      	ldrb	r3, [r7, #3]
 800e982:	2b0b      	cmp	r3, #11
 800e984:	d826      	bhi.n	800e9d4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800e986:	a201      	add	r2, pc, #4	; (adr r2, 800e98c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800e988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e98c:	0800e9c9 	.word	0x0800e9c9
 800e990:	0800e9c3 	.word	0x0800e9c3
 800e994:	0800e9bd 	.word	0x0800e9bd
 800e998:	0800e9d5 	.word	0x0800e9d5
 800e99c:	0800e9d5 	.word	0x0800e9d5
 800e9a0:	0800e9d5 	.word	0x0800e9d5
 800e9a4:	0800e9d5 	.word	0x0800e9d5
 800e9a8:	0800e9cf 	.word	0x0800e9cf
 800e9ac:	0800e9cf 	.word	0x0800e9cf
 800e9b0:	0800e9cf 	.word	0x0800e9cf
 800e9b4:	0800e9cf 	.word	0x0800e9cf
 800e9b8:	0800e9cf 	.word	0x0800e9cf
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	60fb      	str	r3, [r7, #12]
        break;
 800e9c0:	e00e      	b.n	800e9e0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	60fb      	str	r3, [r7, #12]
        break;
 800e9c6:	e00b      	b.n	800e9e0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800e9c8:	2302      	movs	r3, #2
 800e9ca:	60fb      	str	r3, [r7, #12]
        break;
 800e9cc:	e008      	b.n	800e9e0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800e9ce:	2305      	movs	r3, #5
 800e9d0:	60fb      	str	r3, [r7, #12]
        break;
 800e9d2:	e005      	b.n	800e9e0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800e9d4:	4b05      	ldr	r3, [pc, #20]	; (800e9ec <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800e9d6:	4a06      	ldr	r2, [pc, #24]	; (800e9f0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800e9d8:	2165      	movs	r1, #101	; 0x65
 800e9da:	4806      	ldr	r0, [pc, #24]	; (800e9f4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800e9dc:	f00b f8ae 	bl	8019b3c <__assert_func>
        break;
    }

    return dma2dColorMode;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3710      	adds	r7, #16
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	0801b54c 	.word	0x0801b54c
 800e9f0:	0801b568 	.word	0x0801b568
 800e9f4:	0801b5b4 	.word	0x0801b5b4

0800e9f8 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	460b      	mov	r3, r1
 800ea02:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800ea04:	2300      	movs	r3, #0
 800ea06:	60fb      	str	r3, [r7, #12]

    switch (format)
 800ea08:	78fb      	ldrb	r3, [r7, #3]
 800ea0a:	2b0a      	cmp	r3, #10
 800ea0c:	d821      	bhi.n	800ea52 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800ea0e:	a201      	add	r2, pc, #4	; (adr r2, 800ea14 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800ea10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea14:	0800ea4d 	.word	0x0800ea4d
 800ea18:	0800ea47 	.word	0x0800ea47
 800ea1c:	0800ea41 	.word	0x0800ea41
 800ea20:	0800ea53 	.word	0x0800ea53
 800ea24:	0800ea53 	.word	0x0800ea53
 800ea28:	0800ea53 	.word	0x0800ea53
 800ea2c:	0800ea53 	.word	0x0800ea53
 800ea30:	0800ea47 	.word	0x0800ea47
 800ea34:	0800ea47 	.word	0x0800ea47
 800ea38:	0800ea47 	.word	0x0800ea47
 800ea3c:	0800ea47 	.word	0x0800ea47
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800ea40:	2300      	movs	r3, #0
 800ea42:	60fb      	str	r3, [r7, #12]
        break;
 800ea44:	e00b      	b.n	800ea5e <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800ea46:	2301      	movs	r3, #1
 800ea48:	60fb      	str	r3, [r7, #12]
        break;
 800ea4a:	e008      	b.n	800ea5e <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800ea4c:	2302      	movs	r3, #2
 800ea4e:	60fb      	str	r3, [r7, #12]
        break;
 800ea50:	e005      	b.n	800ea5e <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800ea52:	4b05      	ldr	r3, [pc, #20]	; (800ea68 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800ea54:	4a05      	ldr	r2, [pc, #20]	; (800ea6c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800ea56:	2186      	movs	r1, #134	; 0x86
 800ea58:	4805      	ldr	r0, [pc, #20]	; (800ea70 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800ea5a:	f00b f86f 	bl	8019b3c <__assert_func>
        break;
    }

    return dma2dColorMode;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	0801b54c 	.word	0x0801b54c
 800ea6c:	0801b648 	.word	0x0801b648
 800ea70:	0801b5b4 	.word	0x0801b5b4

0800ea74 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800ea7c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 800ea8c:	b590      	push	{r4, r7, lr}
 800ea8e:	b089      	sub	sp, #36	; 0x24
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	7f5b      	ldrb	r3, [r3, #29]
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f7ff ff67 	bl	800e970 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800eaa2:	61f8      	str	r0, [r7, #28]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	7f9b      	ldrb	r3, [r3, #30]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7ff ff60 	bl	800e970 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800eab0:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	7f9b      	ldrb	r3, [r3, #30]
 800eab6:	4619      	mov	r1, r3
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f7ff ff9d 	bl	800e9f8 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800eabe:	6178      	str	r0, [r7, #20]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	8adb      	ldrh	r3, [r3, #22]
 800eac4:	461a      	mov	r2, r3
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	8a1b      	ldrh	r3, [r3, #16]
 800eaca:	1ad2      	subs	r2, r2, r3
 800eacc:	4b8b      	ldr	r3, [pc, #556]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eace:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	8adb      	ldrh	r3, [r3, #22]
 800ead4:	461a      	mov	r2, r3
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	8a1b      	ldrh	r3, [r3, #16]
 800eada:	1ad2      	subs	r2, r2, r3
 800eadc:	4b87      	ldr	r3, [pc, #540]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eade:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	8a9b      	ldrh	r3, [r3, #20]
 800eae4:	461a      	mov	r2, r3
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	8a1b      	ldrh	r3, [r3, #16]
 800eaea:	1ad2      	subs	r2, r2, r3
 800eaec:	4b83      	ldr	r3, [pc, #524]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eaee:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800eaf0:	4a82      	ldr	r2, [pc, #520]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	8a5b      	ldrh	r3, [r3, #18]
 800eafa:	461a      	mov	r2, r3
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	8a1b      	ldrh	r3, [r3, #16]
 800eb00:	041b      	lsls	r3, r3, #16
 800eb02:	431a      	orrs	r2, r3
 800eb04:	4b7d      	ldr	r3, [pc, #500]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eb06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	68da      	ldr	r2, [r3, #12]
 800eb0c:	4b7b      	ldr	r3, [pc, #492]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eb0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	685a      	ldr	r2, [r3, #4]
 800eb14:	4b79      	ldr	r3, [pc, #484]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eb16:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb20:	d046      	beq.n	800ebb0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 800eb22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb26:	f200 80f9 	bhi.w	800ed1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 800eb2a:	2b80      	cmp	r3, #128	; 0x80
 800eb2c:	d00e      	beq.n	800eb4c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
 800eb2e:	2b80      	cmp	r3, #128	; 0x80
 800eb30:	f200 80f4 	bhi.w	800ed1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 800eb34:	2b40      	cmp	r3, #64	; 0x40
 800eb36:	f000 80cc 	beq.w	800ecd2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 800eb3a:	2b40      	cmp	r3, #64	; 0x40
 800eb3c:	f200 80ee 	bhi.w	800ed1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 800eb40:	2b04      	cmp	r3, #4
 800eb42:	d067      	beq.n	800ec14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
 800eb44:	2b20      	cmp	r3, #32
 800eb46:	f000 80c4 	beq.w	800ecd2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 800eb4a:	e0e7      	b.n	800ed1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	7f1b      	ldrb	r3, [r3, #28]
 800eb50:	061b      	lsls	r3, r3, #24
 800eb52:	4619      	mov	r1, r3
 800eb54:	4a69      	ldr	r2, [pc, #420]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eb56:	4b6a      	ldr	r3, [pc, #424]	; (800ed00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800eb58:	430b      	orrs	r3, r1
 800eb5a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	3318      	adds	r3, #24
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7fe fe73 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800eb66:	4603      	mov	r3, r0
 800eb68:	021b      	lsls	r3, r3, #8
 800eb6a:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	3318      	adds	r3, #24
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fe fe6a 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	015b      	lsls	r3, r3, #5
 800eb7c:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800eb80:	431c      	orrs	r4, r3
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	3318      	adds	r3, #24
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fe fe60 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	00db      	lsls	r3, r3, #3
 800eb90:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800eb94:	4a59      	ldr	r2, [pc, #356]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eb96:	4323      	orrs	r3, r4
 800eb98:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800eb9a:	4a58      	ldr	r2, [pc, #352]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eb9c:	69bb      	ldr	r3, [r7, #24]
 800eb9e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	68da      	ldr	r2, [r3, #12]
 800eba4:	4b55      	ldr	r3, [pc, #340]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eba6:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800eba8:	4b54      	ldr	r3, [pc, #336]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ebaa:	4a56      	ldr	r2, [pc, #344]	; (800ed04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800ebac:	601a      	str	r2, [r3, #0]
        break;
 800ebae:	e0f6      	b.n	800ed9e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	7f1b      	ldrb	r3, [r3, #28]
 800ebb4:	061b      	lsls	r3, r3, #24
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	4a50      	ldr	r2, [pc, #320]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ebba:	4b53      	ldr	r3, [pc, #332]	; (800ed08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800ebbc:	430b      	orrs	r3, r1
 800ebbe:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	3318      	adds	r3, #24
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fe fe41 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	021b      	lsls	r3, r3, #8
 800ebce:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	3318      	adds	r3, #24
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fe fe38 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	015b      	lsls	r3, r3, #5
 800ebe0:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800ebe4:	431c      	orrs	r4, r3
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	3318      	adds	r3, #24
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7fe fe2e 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	00db      	lsls	r3, r3, #3
 800ebf4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800ebf8:	4a40      	ldr	r2, [pc, #256]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ebfa:	4323      	orrs	r3, r4
 800ebfc:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ebfe:	4a3f      	ldr	r2, [pc, #252]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ec00:	69bb      	ldr	r3, [r7, #24]
 800ec02:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	68da      	ldr	r2, [r3, #12]
 800ec08:	4b3c      	ldr	r3, [pc, #240]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ec0a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800ec0c:	4b3b      	ldr	r3, [pc, #236]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ec0e:	4a3d      	ldr	r2, [pc, #244]	; (800ed04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800ec10:	601a      	str	r2, [r3, #0]
        break;
 800ec12:	e0c4      	b.n	800ed9e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	7f1b      	ldrb	r3, [r3, #28]
 800ec18:	061b      	lsls	r3, r3, #24
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	4a36      	ldr	r2, [pc, #216]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ec22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec26:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ec28:	4a34      	ldr	r2, [pc, #208]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	68da      	ldr	r2, [r3, #12]
 800ec32:	4b32      	ldr	r3, [pc, #200]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ec34:	615a      	str	r2, [r3, #20]

        if (blitOp.srcFormat == Bitmap::L8)
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	7f5b      	ldrb	r3, [r3, #29]
 800ec3a:	2b0b      	cmp	r3, #11
 800ec3c:	d145      	bne.n	800ecca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	613b      	str	r3, [r7, #16]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	1d1a      	adds	r2, r3, #4
 800ec48:	4b2c      	ldr	r3, [pc, #176]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ec4a:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	881b      	ldrh	r3, [r3, #0]
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d002      	beq.n	800ec5c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d00d      	beq.n	800ec76 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
 800ec5a:	e01a      	b.n	800ec92 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800ec5c:	4b27      	ldr	r3, [pc, #156]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ec5e:	69da      	ldr	r2, [r3, #28]
 800ec60:	4b2a      	ldr	r3, [pc, #168]	; (800ed0c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 800ec62:	4013      	ands	r3, r2
 800ec64:	693a      	ldr	r2, [r7, #16]
 800ec66:	8852      	ldrh	r2, [r2, #2]
 800ec68:	3a01      	subs	r2, #1
 800ec6a:	0212      	lsls	r2, r2, #8
 800ec6c:	4611      	mov	r1, r2
 800ec6e:	4a23      	ldr	r2, [pc, #140]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ec70:	430b      	orrs	r3, r1
 800ec72:	61d3      	str	r3, [r2, #28]
                break;
 800ec74:	e013      	b.n	800ec9e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800ec76:	4b21      	ldr	r3, [pc, #132]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ec78:	69da      	ldr	r2, [r3, #28]
 800ec7a:	4b24      	ldr	r3, [pc, #144]	; (800ed0c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 800ec7c:	4013      	ands	r3, r2
 800ec7e:	693a      	ldr	r2, [r7, #16]
 800ec80:	8852      	ldrh	r2, [r2, #2]
 800ec82:	3a01      	subs	r2, #1
 800ec84:	0212      	lsls	r2, r2, #8
 800ec86:	4313      	orrs	r3, r2
 800ec88:	4a1c      	ldr	r2, [pc, #112]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ec8a:	f043 0310 	orr.w	r3, r3, #16
 800ec8e:	61d3      	str	r3, [r2, #28]
                break;
 800ec90:	e005      	b.n	800ec9e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800ec92:	4b1f      	ldr	r3, [pc, #124]	; (800ed10 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>)
 800ec94:	4a1f      	ldr	r2, [pc, #124]	; (800ed14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 800ec96:	21fc      	movs	r1, #252	; 0xfc
 800ec98:	481f      	ldr	r0, [pc, #124]	; (800ed18 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec9a:	f00a ff4f 	bl	8019b3c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800ec9e:	4b17      	ldr	r3, [pc, #92]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eca0:	69db      	ldr	r3, [r3, #28]
 800eca2:	4a16      	ldr	r2, [pc, #88]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eca4:	f043 0320 	orr.w	r3, r3, #32
 800eca8:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800ecaa:	4b14      	ldr	r3, [pc, #80]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ecac:	69db      	ldr	r3, [r3, #28]
 800ecae:	f003 0320 	and.w	r3, r3, #32
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	bf14      	ite	ne
 800ecb6:	2301      	movne	r3, #1
 800ecb8:	2300      	moveq	r3, #0
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d001      	beq.n	800ecc4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
            {
                __NOP();
 800ecc0:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800ecc2:	e7f2      	b.n	800ecaa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21e>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800ecc4:	4b0d      	ldr	r3, [pc, #52]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ecc6:	2210      	movs	r2, #16
 800ecc8:	609a      	str	r2, [r3, #8]
        }

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800ecca:	4b0c      	ldr	r3, [pc, #48]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800eccc:	4a0d      	ldr	r2, [pc, #52]	; (800ed04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800ecce:	601a      	str	r2, [r3, #0]
        break;
 800ecd0:	e065      	b.n	800ed9e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	7f1b      	ldrb	r3, [r3, #28]
 800ecd6:	061b      	lsls	r3, r3, #24
 800ecd8:	461a      	mov	r2, r3
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	4a07      	ldr	r2, [pc, #28]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ece0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ece4:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ece6:	4a05      	ldr	r2, [pc, #20]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	68da      	ldr	r2, [r3, #12]
 800ecf0:	4b02      	ldr	r3, [pc, #8]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ecf2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800ecf4:	4b01      	ldr	r3, [pc, #4]	; (800ecfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800ecf6:	4a03      	ldr	r2, [pc, #12]	; (800ed04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800ecf8:	601a      	str	r2, [r3, #0]
        break;
 800ecfa:	e050      	b.n	800ed9e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
 800ecfc:	4002b000 	.word	0x4002b000
 800ed00:	0002000a 	.word	0x0002000a
 800ed04:	00020201 	.word	0x00020201
 800ed08:	00020009 	.word	0x00020009
 800ed0c:	ffff00ef 	.word	0xffff00ef
 800ed10:	0801b698 	.word	0x0801b698
 800ed14:	0801b6b4 	.word	0x0801b6b4
 800ed18:	0801b5b4 	.word	0x0801b5b4
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	7f1b      	ldrb	r3, [r3, #28]
 800ed20:	061b      	lsls	r3, r3, #24
 800ed22:	461a      	mov	r2, r3
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	4313      	orrs	r3, r2
 800ed28:	4a1f      	ldr	r2, [pc, #124]	; (800eda8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800ed2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed2e:	61d3      	str	r3, [r2, #28]

        if (blitOp.srcFormat == Bitmap::L8)
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	7f5b      	ldrb	r3, [r3, #29]
 800ed34:	2b0b      	cmp	r3, #11
 800ed36:	d12d      	bne.n	800ed94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x308>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	1d1a      	adds	r2, r3, #4
 800ed42:	4b19      	ldr	r3, [pc, #100]	; (800eda8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800ed44:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800ed46:	4b18      	ldr	r3, [pc, #96]	; (800eda8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800ed48:	69da      	ldr	r2, [r3, #28]
 800ed4a:	4b18      	ldr	r3, [pc, #96]	; (800edac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 800ed4c:	4013      	ands	r3, r2
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	8852      	ldrh	r2, [r2, #2]
 800ed52:	3a01      	subs	r2, #1
 800ed54:	0212      	lsls	r2, r2, #8
 800ed56:	4313      	orrs	r3, r2
 800ed58:	4a13      	ldr	r2, [pc, #76]	; (800eda8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800ed5a:	f043 0310 	orr.w	r3, r3, #16
 800ed5e:	61d3      	str	r3, [r2, #28]

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800ed60:	4b11      	ldr	r3, [pc, #68]	; (800eda8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800ed62:	69db      	ldr	r3, [r3, #28]
 800ed64:	4a10      	ldr	r2, [pc, #64]	; (800eda8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800ed66:	f043 0320 	orr.w	r3, r3, #32
 800ed6a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800ed6c:	4b0e      	ldr	r3, [pc, #56]	; (800eda8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800ed6e:	69db      	ldr	r3, [r3, #28]
 800ed70:	f003 0320 	and.w	r3, r3, #32
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	bf14      	ite	ne
 800ed78:	2301      	movne	r3, #1
 800ed7a:	2300      	moveq	r3, #0
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d001      	beq.n	800ed86 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2fa>
            {
                __NOP();
 800ed82:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800ed84:	e7f2      	b.n	800ed6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e0>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800ed86:	4b08      	ldr	r3, [pc, #32]	; (800eda8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800ed88:	2210      	movs	r2, #16
 800ed8a:	609a      	str	r2, [r3, #8]
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800ed8c:	4b06      	ldr	r3, [pc, #24]	; (800eda8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800ed8e:	4a08      	ldr	r2, [pc, #32]	; (800edb0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 800ed90:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 800ed92:	e003      	b.n	800ed9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x310>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800ed94:	4b04      	ldr	r3, [pc, #16]	; (800eda8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800ed96:	f240 2201 	movw	r2, #513	; 0x201
 800ed9a:	601a      	str	r2, [r3, #0]
        break;
 800ed9c:	bf00      	nop
    }
}
 800ed9e:	bf00      	nop
 800eda0:	3724      	adds	r7, #36	; 0x24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd90      	pop	{r4, r7, pc}
 800eda6:	bf00      	nop
 800eda8:	4002b000 	.word	0x4002b000
 800edac:	ffff00ef 	.word	0xffff00ef
 800edb0:	00010201 	.word	0x00010201

0800edb4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 800edb4:	b590      	push	{r4, r7, lr}
 800edb6:	b085      	sub	sp, #20
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	7f9b      	ldrb	r3, [r3, #30]
 800edc2:	4619      	mov	r1, r3
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f7ff fe17 	bl	800e9f8 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800edca:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800edcc:	4a53      	ldr	r2, [pc, #332]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	8a5b      	ldrh	r3, [r3, #18]
 800edd6:	461a      	mov	r2, r3
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	8a1b      	ldrh	r3, [r3, #16]
 800eddc:	041b      	lsls	r3, r3, #16
 800edde:	431a      	orrs	r2, r3
 800ede0:	4b4e      	ldr	r3, [pc, #312]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800ede2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	68da      	ldr	r2, [r3, #12]
 800ede8:	4b4c      	ldr	r3, [pc, #304]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800edea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	8adb      	ldrh	r3, [r3, #22]
 800edf0:	461a      	mov	r2, r3
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	8a1b      	ldrh	r3, [r3, #16]
 800edf6:	1ad2      	subs	r2, r2, r3
 800edf8:	4b48      	ldr	r3, [pc, #288]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800edfa:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b08      	cmp	r3, #8
 800ee02:	d14c      	bne.n	800ee9e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xea>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	8adb      	ldrh	r3, [r3, #22]
 800ee08:	461a      	mov	r2, r3
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	8a1b      	ldrh	r3, [r3, #16]
 800ee0e:	1ad2      	subs	r2, r2, r3
 800ee10:	4b42      	ldr	r3, [pc, #264]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800ee12:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	8adb      	ldrh	r3, [r3, #22]
 800ee18:	461a      	mov	r2, r3
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	8a1b      	ldrh	r3, [r3, #16]
 800ee1e:	1ad2      	subs	r2, r2, r3
 800ee20:	4b3e      	ldr	r3, [pc, #248]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800ee22:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ee24:	4a3d      	ldr	r2, [pc, #244]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	7f1b      	ldrb	r3, [r3, #28]
 800ee2e:	061b      	lsls	r3, r3, #24
 800ee30:	4619      	mov	r1, r3
 800ee32:	4a3a      	ldr	r2, [pc, #232]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800ee34:	4b3a      	ldr	r3, [pc, #232]	; (800ef20 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x16c>)
 800ee36:	430b      	orrs	r3, r1
 800ee38:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	7f1b      	ldrb	r3, [r3, #28]
 800ee3e:	061b      	lsls	r3, r3, #24
 800ee40:	461c      	mov	r4, r3
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	3318      	adds	r3, #24
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fe fd00 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	021b      	lsls	r3, r3, #8
 800ee50:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 800ee54:	431c      	orrs	r4, r3
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	3318      	adds	r3, #24
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fe fcf6 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800ee60:	4603      	mov	r3, r0
 800ee62:	015b      	lsls	r3, r3, #5
 800ee64:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800ee68:	431c      	orrs	r4, r3
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	3318      	adds	r3, #24
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fe fcec 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800ee74:	4603      	mov	r3, r0
 800ee76:	00db      	lsls	r3, r3, #3
 800ee78:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800ee7c:	4323      	orrs	r3, r4
 800ee7e:	4a27      	ldr	r2, [pc, #156]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800ee80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ee84:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	68da      	ldr	r2, [r3, #12]
 800ee8a:	4b24      	ldr	r3, [pc, #144]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800ee8c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	68da      	ldr	r2, [r3, #12]
 800ee92:	4b22      	ldr	r3, [pc, #136]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800ee94:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800ee96:	4b21      	ldr	r3, [pc, #132]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800ee98:	4a22      	ldr	r2, [pc, #136]	; (800ef24 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x170>)
 800ee9a:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800ee9c:	e039      	b.n	800ef12 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15e>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ee9e:	4a1f      	ldr	r2, [pc, #124]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800eea4:	4b1d      	ldr	r3, [pc, #116]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800eea6:	2200      	movs	r2, #0
 800eea8:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	7f9b      	ldrb	r3, [r3, #30]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d108      	bne.n	800eec4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	3318      	adds	r3, #24
 800eeb6:	4c19      	ldr	r4, [pc, #100]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fe fcc7 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800eebe:	4603      	mov	r3, r0
 800eec0:	63a3      	str	r3, [r4, #56]	; 0x38
 800eec2:	e023      	b.n	800ef0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x158>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	7f1b      	ldrb	r3, [r3, #28]
 800eec8:	061b      	lsls	r3, r3, #24
 800eeca:	461c      	mov	r4, r3
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	3318      	adds	r3, #24
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fe fcbb 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800eed6:	4603      	mov	r3, r0
 800eed8:	021b      	lsls	r3, r3, #8
 800eeda:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 800eede:	431c      	orrs	r4, r3
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	3318      	adds	r3, #24
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7fe fcb1 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800eeea:	4603      	mov	r3, r0
 800eeec:	015b      	lsls	r3, r3, #5
 800eeee:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800eef2:	431c      	orrs	r4, r3
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	3318      	adds	r3, #24
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7fe fca7 	bl	800d84c <_ZNK8touchgfx9colortypecvmEv>
 800eefe:	4603      	mov	r3, r0
 800ef00:	00db      	lsls	r3, r3, #3
 800ef02:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800ef06:	4a05      	ldr	r2, [pc, #20]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800ef08:	4323      	orrs	r3, r4
 800ef0a:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800ef0c:	4b03      	ldr	r3, [pc, #12]	; (800ef1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800ef0e:	4a06      	ldr	r2, [pc, #24]	; (800ef28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x174>)
 800ef10:	601a      	str	r2, [r3, #0]
}
 800ef12:	bf00      	nop
 800ef14:	3714      	adds	r7, #20
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd90      	pop	{r4, r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	4002b000 	.word	0x4002b000
 800ef20:	00010009 	.word	0x00010009
 800ef24:	00020201 	.word	0x00020201
 800ef28:	00030201 	.word	0x00030201

0800ef2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	4a05      	ldr	r2, [pc, #20]	; (800ef4c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	601a      	str	r2, [r3, #0]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7ff fbe5 	bl	800e70c <_ZN8touchgfx9DMA_QueueD1Ev>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4618      	mov	r0, r3
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	0801cf88 	.word	0x0801cf88

0800ef50 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f7ff ffe7 	bl	800ef2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800ef5e:	2114      	movs	r1, #20
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f00a fbb3 	bl	80196cc <_ZdlPvj>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
    {
 800ef78:	4a04      	ldr	r2, [pc, #16]	; (800ef8c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	601a      	str	r2, [r3, #0]
    }
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4618      	mov	r0, r3
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr
 800ef8c:	0801d05c 	.word	0x0801d05c

0800ef90 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
    }
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f7ff ffe9 	bl	800ef70 <_ZN8touchgfx3LCDD1Ev>
 800ef9e:	2108      	movs	r1, #8
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f00a fb93 	bl	80196cc <_ZdlPvj>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	4618      	mov	r0, r3
 800efaa:	3708      	adds	r7, #8
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	801a      	strh	r2, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2200      	movs	r2, #0
 800efc2:	805a      	strh	r2, [r3, #2]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	809a      	strh	r2, [r3, #4]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	80da      	strh	r2, [r3, #6]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	811a      	strh	r2, [r3, #8]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2200      	movs	r2, #0
 800efda:	815a      	strh	r2, [r3, #10]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2200      	movs	r2, #0
 800efe0:	819a      	strh	r2, [r3, #12]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	739a      	strb	r2, [r3, #14]
        {
        }
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4618      	mov	r0, r3
 800efec:	370c      	adds	r7, #12
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr

0800eff6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b082      	sub	sp, #8
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4618      	mov	r0, r3
 800f002:	f7ff ffd5 	bl	800efb0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2200      	movs	r2, #0
 800f00a:	611a      	str	r2, [r3, #16]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2200      	movs	r2, #0
 800f010:	829a      	strh	r2, [r3, #20]
    {
    }
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	4618      	mov	r0, r3
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	60b9      	str	r1, [r7, #8]
 800f026:	607a      	str	r2, [r7, #4]
 800f028:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 800f02a:	4a4a      	ldr	r2, [pc, #296]	; (800f154 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	601a      	str	r2, [r3, #0]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	68ba      	ldr	r2, [r7, #8]
 800f034:	605a      	str	r2, [r3, #4]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	609a      	str	r2, [r3, #8]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	683a      	ldr	r2, [r7, #0]
 800f040:	60da      	str	r2, [r3, #12]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2200      	movs	r2, #0
 800f046:	611a      	str	r2, [r3, #16]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2200      	movs	r2, #0
 800f04c:	615a      	str	r2, [r3, #20]
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2200      	movs	r2, #0
 800f052:	619a      	str	r2, [r3, #24]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	331c      	adds	r3, #28
 800f058:	4618      	mov	r0, r3
 800f05a:	f7ff ffcc 	bl	800eff6 <_ZN8touchgfx8GesturesC1Ev>
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2200      	movs	r2, #0
 800f062:	639a      	str	r2, [r3, #56]	; 0x38
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2200      	movs	r2, #0
 800f068:	63da      	str	r2, [r3, #60]	; 0x3c
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2200      	movs	r2, #0
 800f06e:	641a      	str	r2, [r3, #64]	; 0x40
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2200      	movs	r2, #0
 800f074:	645a      	str	r2, [r3, #68]	; 0x44
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2200      	movs	r2, #0
 800f07a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2201      	movs	r2, #1
 800f082:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2200      	movs	r2, #0
 800f08a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2200      	movs	r2, #0
 800f092:	64da      	str	r2, [r3, #76]	; 0x4c
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	3350      	adds	r3, #80	; 0x50
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fe fbe3 	bl	800d864 <_ZN8touchgfx4RectC1Ev>
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	671a      	str	r2, [r3, #112]	; 0x70
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2201      	movs	r2, #1
 800f100:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2201      	movs	r2, #1
 800f108:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800f10c:	4a12      	ldr	r2, [pc, #72]	; (800f158 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 800f112:	4a12      	ldr	r2, [pc, #72]	; (800f15c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 800f114:	8b3b      	ldrh	r3, [r7, #24]
 800f116:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 800f118:	4a11      	ldr	r2, [pc, #68]	; (800f160 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 800f11a:	8bbb      	ldrh	r3, [r7, #28]
 800f11c:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 800f11e:	4b11      	ldr	r3, [pc, #68]	; (800f164 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 800f120:	2200      	movs	r2, #0
 800f122:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800f124:	4b0d      	ldr	r3, [pc, #52]	; (800f15c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 800f126:	881a      	ldrh	r2, [r3, #0]
 800f128:	4b0f      	ldr	r3, [pc, #60]	; (800f168 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 800f12a:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800f12c:	4b0c      	ldr	r3, [pc, #48]	; (800f160 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 800f12e:	881a      	ldrh	r2, [r3, #0]
 800f130:	4b0e      	ldr	r3, [pc, #56]	; (800f16c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 800f132:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800f134:	8b3a      	ldrh	r2, [r7, #24]
 800f136:	8bbb      	ldrh	r3, [r7, #28]
 800f138:	429a      	cmp	r2, r3
 800f13a:	bf34      	ite	cc
 800f13c:	2301      	movcc	r3, #1
 800f13e:	2300      	movcs	r3, #0
 800f140:	b2db      	uxtb	r3, r3
 800f142:	461a      	mov	r2, r3
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	4618      	mov	r0, r3
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	0801caec 	.word	0x0801caec
 800f158:	20001ca0 	.word	0x20001ca0
 800f15c:	20001c92 	.word	0x20001c92
 800f160:	20001c94 	.word	0x20001c94
 800f164:	20001c96 	.word	0x20001c96
 800f168:	20001c98 	.word	0x20001c98
 800f16c:	20001c9a 	.word	0x20001c9a

0800f170 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800f170:	b580      	push	{r7, lr}
 800f172:	b086      	sub	sp, #24
 800f174:	af02      	add	r7, sp, #8
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	607a      	str	r2, [r7, #4]
 800f17c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800f17e:	68f8      	ldr	r0, [r7, #12]
 800f180:	8bbb      	ldrh	r3, [r7, #28]
 800f182:	9301      	str	r3, [sp, #4]
 800f184:	8b3b      	ldrh	r3, [r7, #24]
 800f186:	9300      	str	r3, [sp, #0]
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	68b9      	ldr	r1, [r7, #8]
 800f18e:	f7ff ff45 	bl	800f01c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800f192:	4a04      	ldr	r2, [pc, #16]	; (800f1a4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	601a      	str	r2, [r3, #0]
    }
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	4618      	mov	r0, r3
 800f19c:	3710      	adds	r7, #16
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	0801c49c 	.word	0x0801c49c

0800f1a8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b086      	sub	sp, #24
 800f1ac:	af02      	add	r7, sp, #8
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
 800f1b4:	603b      	str	r3, [r7, #0]
 800f1b6:	68f8      	ldr	r0, [r7, #12]
 800f1b8:	8bbb      	ldrh	r3, [r7, #28]
 800f1ba:	9301      	str	r3, [sp, #4]
 800f1bc:	8b3b      	ldrh	r3, [r7, #24]
 800f1be:	9300      	str	r3, [sp, #0]
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	68b9      	ldr	r1, [r7, #8]
 800f1c6:	f7ff ffd3 	bl	800f170 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800f1ca:	4a04      	ldr	r2, [pc, #16]	; (800f1dc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	601a      	str	r2, [r3, #0]
    }
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	0801c36c 	.word	0x0801c36c

0800f1e0 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800f1e0:	b480      	push	{r7}
 800f1e2:	b083      	sub	sp, #12
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	4a04      	ldr	r2, [pc, #16]	; (800f1fc <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	601a      	str	r2, [r3, #0]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	370c      	adds	r7, #12
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fa:	4770      	bx	lr
 800f1fc:	0801c354 	.word	0x0801c354

0800f200 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800f200:	b580      	push	{r7, lr}
 800f202:	b082      	sub	sp, #8
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7ff ffe8 	bl	800f1e0 <_ZN8touchgfx15TouchControllerC1Ev>
 800f210:	4a03      	ldr	r2, [pc, #12]	; (800f220 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	601a      	str	r2, [r3, #0]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	4618      	mov	r0, r3
 800f21a:	3708      	adds	r7, #8
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	0801c33c 	.word	0x0801c33c

0800f224 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	4a05      	ldr	r2, [pc, #20]	; (800f244 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	601a      	str	r2, [r3, #0]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4618      	mov	r0, r3
 800f236:	f7ff fe9b 	bl	800ef70 <_ZN8touchgfx3LCDD1Ev>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4618      	mov	r0, r3
 800f23e:	3708      	adds	r7, #8
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	0801dd18 	.word	0x0801dd18

0800f248 <_ZN8touchgfx8LCD16bppD0Ev>:
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f7ff ffe7 	bl	800f224 <_ZN8touchgfx8LCD16bppD1Ev>
 800f256:	2178      	movs	r1, #120	; 0x78
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f00a fa37 	bl	80196cc <_ZdlPvj>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4618      	mov	r0, r3
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <_Z41__static_initialization_and_destruction_0ii>:
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
}
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af02      	add	r7, sp, #8
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b01      	cmp	r3, #1
 800f276:	d119      	bne.n	800f2ac <_Z41__static_initialization_and_destruction_0ii+0x44>
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f27e:	4293      	cmp	r3, r2
 800f280:	d114      	bne.n	800f2ac <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800f282:	4818      	ldr	r0, [pc, #96]	; (800f2e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f284:	f7ff ffbc 	bl	800f200 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 800f288:	4817      	ldr	r0, [pc, #92]	; (800f2e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f28a:	f7ff faef 	bl	800e86c <_ZN10STM32F7DMAC1Ev>
static LCD16bpp display;
 800f28e:	4817      	ldr	r0, [pc, #92]	; (800f2ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f290:	f009 f870 	bl	8018374 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800f294:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f298:	9301      	str	r3, [sp, #4]
 800f29a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	4b10      	ldr	r3, [pc, #64]	; (800f2e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f2a2:	4a12      	ldr	r2, [pc, #72]	; (800f2ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f2a4:	4910      	ldr	r1, [pc, #64]	; (800f2e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f2a6:	4812      	ldr	r0, [pc, #72]	; (800f2f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800f2a8:	f7ff ff7e 	bl	800f1a8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d113      	bne.n	800f2da <_Z41__static_initialization_and_destruction_0ii+0x72>
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d10e      	bne.n	800f2da <_Z41__static_initialization_and_destruction_0ii+0x72>
 800f2bc:	480c      	ldr	r0, [pc, #48]	; (800f2f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800f2be:	f7ff f921 	bl	800e504 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800f2c2:	480c      	ldr	r0, [pc, #48]	; (800f2f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800f2c4:	f7fd fff6 	bl	800d2b4 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800f2c8:	4808      	ldr	r0, [pc, #32]	; (800f2ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f2ca:	f7ff ffab 	bl	800f224 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F7DMA dma;
 800f2ce:	4806      	ldr	r0, [pc, #24]	; (800f2e8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f2d0:	f7ff faf6 	bl	800e8c0 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 800f2d4:	4803      	ldr	r0, [pc, #12]	; (800f2e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f2d6:	f7fe fe61 	bl	800df9c <_ZN20STM32TouchControllerD1Ev>
}
 800f2da:	bf00      	nop
 800f2dc:	3708      	adds	r7, #8
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	200004f0 	.word	0x200004f0
 800f2e8:	200004f4 	.word	0x200004f4
 800f2ec:	20001114 	.word	0x20001114
 800f2f0:	2000118c 	.word	0x2000118c
 800f2f4:	20000058 	.word	0x20000058

0800f2f8 <_GLOBAL__sub_I_touchgfx_init>:
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f300:	2001      	movs	r0, #1
 800f302:	f7ff ffb1 	bl	800f268 <_Z41__static_initialization_and_destruction_0ii>
 800f306:	bd80      	pop	{r7, pc}

0800f308 <_GLOBAL__sub_D_touchgfx_init>:
 800f308:	b580      	push	{r7, lr}
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f310:	2000      	movs	r0, #0
 800f312:	f7ff ffa9 	bl	800f268 <_Z41__static_initialization_and_destruction_0ii>
 800f316:	bd80      	pop	{r7, pc}

0800f318 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	3318      	adds	r3, #24
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	4798      	blx	r3
    }
 800f32c:	bf00      	nop
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800f342:	3301      	adds	r3, #1
 800f344:	b2da      	uxtb	r2, r3
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800f34c:	bf00      	nop
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <__NVIC_EnableIRQ>:
{
 800f358:	b480      	push	{r7}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	4603      	mov	r3, r0
 800f360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f366:	2b00      	cmp	r3, #0
 800f368:	db0b      	blt.n	800f382 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f36a:	79fb      	ldrb	r3, [r7, #7]
 800f36c:	f003 021f 	and.w	r2, r3, #31
 800f370:	4907      	ldr	r1, [pc, #28]	; (800f390 <__NVIC_EnableIRQ+0x38>)
 800f372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f376:	095b      	lsrs	r3, r3, #5
 800f378:	2001      	movs	r0, #1
 800f37a:	fa00 f202 	lsl.w	r2, r0, r2
 800f37e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f382:	bf00      	nop
 800f384:	370c      	adds	r7, #12
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop
 800f390:	e000e100 	.word	0xe000e100

0800f394 <__NVIC_DisableIRQ>:
{
 800f394:	b480      	push	{r7}
 800f396:	b083      	sub	sp, #12
 800f398:	af00      	add	r7, sp, #0
 800f39a:	4603      	mov	r3, r0
 800f39c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f39e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	db12      	blt.n	800f3cc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f3a6:	79fb      	ldrb	r3, [r7, #7]
 800f3a8:	f003 021f 	and.w	r2, r3, #31
 800f3ac:	490a      	ldr	r1, [pc, #40]	; (800f3d8 <__NVIC_DisableIRQ+0x44>)
 800f3ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3b2:	095b      	lsrs	r3, r3, #5
 800f3b4:	2001      	movs	r0, #1
 800f3b6:	fa00 f202 	lsl.w	r2, r0, r2
 800f3ba:	3320      	adds	r3, #32
 800f3bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800f3c0:	f3bf 8f4f 	dsb	sy
}
 800f3c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f3c6:	f3bf 8f6f 	isb	sy
}
 800f3ca:	bf00      	nop
}
 800f3cc:	bf00      	nop
 800f3ce:	370c      	adds	r7, #12
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr
 800f3d8:	e000e100 	.word	0xe000e100

0800f3dc <__NVIC_SetPriority>:
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	6039      	str	r1, [r7, #0]
 800f3e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f3e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	db0a      	blt.n	800f406 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	490c      	ldr	r1, [pc, #48]	; (800f428 <__NVIC_SetPriority+0x4c>)
 800f3f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3fa:	0112      	lsls	r2, r2, #4
 800f3fc:	b2d2      	uxtb	r2, r2
 800f3fe:	440b      	add	r3, r1
 800f400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f404:	e00a      	b.n	800f41c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	b2da      	uxtb	r2, r3
 800f40a:	4908      	ldr	r1, [pc, #32]	; (800f42c <__NVIC_SetPriority+0x50>)
 800f40c:	79fb      	ldrb	r3, [r7, #7]
 800f40e:	f003 030f 	and.w	r3, r3, #15
 800f412:	3b04      	subs	r3, #4
 800f414:	0112      	lsls	r2, r2, #4
 800f416:	b2d2      	uxtb	r2, r2
 800f418:	440b      	add	r3, r1
 800f41a:	761a      	strb	r2, [r3, #24]
}
 800f41c:	bf00      	nop
 800f41e:	370c      	adds	r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr
 800f428:	e000e100 	.word	0xe000e100
 800f42c:	e000ed00 	.word	0xe000ed00

0800f430 <SCB_CleanInvalidateDCache>:
{
 800f430:	b480      	push	{r7}
 800f432:	b085      	sub	sp, #20
 800f434:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800f436:	4b21      	ldr	r3, [pc, #132]	; (800f4bc <SCB_CleanInvalidateDCache+0x8c>)
 800f438:	2200      	movs	r2, #0
 800f43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800f43e:	f3bf 8f4f 	dsb	sy
}
 800f442:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800f444:	4b1d      	ldr	r3, [pc, #116]	; (800f4bc <SCB_CleanInvalidateDCache+0x8c>)
 800f446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f44a:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	0b5b      	lsrs	r3, r3, #13
 800f450:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f454:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	08db      	lsrs	r3, r3, #3
 800f45a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f45e:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	015a      	lsls	r2, r3, #5
 800f464:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800f468:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800f46a:	68ba      	ldr	r2, [r7, #8]
 800f46c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800f46e:	4913      	ldr	r1, [pc, #76]	; (800f4bc <SCB_CleanInvalidateDCache+0x8c>)
 800f470:	4313      	orrs	r3, r2
 800f472:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	1e5a      	subs	r2, r3, #1
 800f47a:	60ba      	str	r2, [r7, #8]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	bf14      	ite	ne
 800f480:	2301      	movne	r3, #1
 800f482:	2300      	moveq	r3, #0
 800f484:	b2db      	uxtb	r3, r3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d000      	beq.n	800f48c <SCB_CleanInvalidateDCache+0x5c>
      do {
 800f48a:	e7e9      	b.n	800f460 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	1e5a      	subs	r2, r3, #1
 800f490:	60fa      	str	r2, [r7, #12]
 800f492:	2b00      	cmp	r3, #0
 800f494:	bf14      	ite	ne
 800f496:	2301      	movne	r3, #1
 800f498:	2300      	moveq	r3, #0
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d000      	beq.n	800f4a2 <SCB_CleanInvalidateDCache+0x72>
    do {
 800f4a0:	e7d9      	b.n	800f456 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800f4a2:	f3bf 8f4f 	dsb	sy
}
 800f4a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f4a8:	f3bf 8f6f 	isb	sy
}
 800f4ac:	bf00      	nop
}
 800f4ae:	bf00      	nop
 800f4b0:	3714      	adds	r7, #20
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b8:	4770      	bx	lr
 800f4ba:	bf00      	nop
 800f4bc:	e000ed00 	.word	0xe000ed00

0800f4c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    registerEventListener(*(Application::getInstance()));
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC003FC00, (void*)0);
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b082      	sub	sp, #8
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800f4c8:	2109      	movs	r1, #9
 800f4ca:	205a      	movs	r0, #90	; 0x5a
 800f4cc:	f7ff ff86 	bl	800f3dc <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800f4d0:	2109      	movs	r1, #9
 800f4d2:	2058      	movs	r0, #88	; 0x58
 800f4d4:	f7ff ff82 	bl	800f3dc <__NVIC_SetPriority>
}
 800f4d8:	bf00      	nop
 800f4da:	3708      	adds	r7, #8
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800f4e8:	205a      	movs	r0, #90	; 0x5a
 800f4ea:	f7ff ff35 	bl	800f358 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800f4ee:	2058      	movs	r0, #88	; 0x58
 800f4f0:	f7ff ff32 	bl	800f358 <__NVIC_EnableIRQ>
}
 800f4f4:	bf00      	nop
 800f4f6:	3708      	adds	r7, #8
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800f504:	205a      	movs	r0, #90	; 0x5a
 800f506:	f7ff ff45 	bl	800f394 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800f50a:	2058      	movs	r0, #88	; 0x58
 800f50c:	f7ff ff42 	bl	800f394 <__NVIC_DisableIRQ>
}
 800f510:	bf00      	nop
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800f518:	b480      	push	{r7}
 800f51a:	b083      	sub	sp, #12
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800f520:	4b11      	ldr	r3, [pc, #68]	; (800f568 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	b29b      	uxth	r3, r3
 800f526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	3b01      	subs	r3, #1
 800f52e:	b29a      	uxth	r2, r3
 800f530:	4b0e      	ldr	r3, [pc, #56]	; (800f56c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800f532:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800f534:	4b0c      	ldr	r3, [pc, #48]	; (800f568 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800f536:	691b      	ldr	r3, [r3, #16]
 800f538:	b29b      	uxth	r3, r3
 800f53a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f53e:	b29b      	uxth	r3, r3
 800f540:	3b01      	subs	r3, #1
 800f542:	b29a      	uxth	r2, r3
 800f544:	4b0a      	ldr	r3, [pc, #40]	; (800f570 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800f546:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800f548:	4b08      	ldr	r3, [pc, #32]	; (800f56c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800f54a:	881a      	ldrh	r2, [r3, #0]
 800f54c:	4b06      	ldr	r3, [pc, #24]	; (800f568 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800f54e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800f550:	4b05      	ldr	r3, [pc, #20]	; (800f568 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800f552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f554:	4a04      	ldr	r2, [pc, #16]	; (800f568 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800f556:	f043 0301 	orr.w	r3, r3, #1
 800f55a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800f55c:	bf00      	nop
 800f55e:	370c      	adds	r7, #12
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr
 800f568:	40016800 	.word	0x40016800
 800f56c:	20001208 	.word	0x20001208
 800f570:	2000120a 	.word	0x2000120a

0800f574 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800f574:	b480      	push	{r7}
 800f576:	b083      	sub	sp, #12
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800f57c:	4b03      	ldr	r3, [pc, #12]	; (800f58c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800f57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800f580:	4618      	mov	r0, r3
 800f582:	370c      	adds	r7, #12
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr
 800f58c:	40016884 	.word	0x40016884

0800f590 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800f59a:	4a06      	ldr	r2, [pc, #24]	; (800f5b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800f5a0:	4b05      	ldr	r3, [pc, #20]	; (800f5b8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f5a6:	bf00      	nop
 800f5a8:	370c      	adds	r7, #12
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	40016884 	.word	0x40016884
 800f5b8:	40016800 	.word	0x40016800

0800f5bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6839      	ldr	r1, [r7, #0]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f005 fa62 	bl	8014a94 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().
    if ((SCB->CCR & SCB_CCR_DC_Msk) != 0)   // Check data cache is enabled
 800f5d0:	4b08      	ldr	r3, [pc, #32]	; (800f5f4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 800f5d2:	695b      	ldr	r3, [r3, #20]
 800f5d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	bf14      	ite	ne
 800f5dc:	2301      	movne	r3, #1
 800f5de:	2300      	moveq	r3, #0
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d001      	beq.n	800f5ea <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 800f5e6:	f7ff ff23 	bl	800f430 <SCB_CleanInvalidateDCache>
    }
}
 800f5ea:	bf00      	nop
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	e000ed00 	.word	0xe000ed00

0800f5f8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b084      	sub	sp, #16
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	607a      	str	r2, [r7, #4]
 800f604:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 800f606:	68f8      	ldr	r0, [r7, #12]
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	68b9      	ldr	r1, [r7, #8]
 800f60e:	f005 fb76 	bl	8014cfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800f612:	4603      	mov	r3, r0
}
 800f614:	4618      	mov	r0, r3
 800f616:	3710      	adds	r7, #16
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().
    if ((SCB->CCR & SCB_CCR_DC_Msk) != 0)   // Check data cache is enabled
 800f624:	4b08      	ldr	r3, [pc, #32]	; (800f648 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 800f626:	695b      	ldr	r3, [r3, #20]
 800f628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	bf14      	ite	ne
 800f630:	2301      	movne	r3, #1
 800f632:	2300      	moveq	r3, #0
 800f634:	b2db      	uxtb	r3, r3
 800f636:	2b00      	cmp	r3, #0
 800f638:	d001      	beq.n	800f63e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800f63a:	f7ff fef9 	bl	800f430 <SCB_CleanInvalidateDCache>
    }
}
 800f63e:	bf00      	nop
 800f640:	3708      	adds	r7, #8
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	e000ed00 	.word	0xe000ed00

0800f64c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().
    if ((SCB->CCR & SCB_CCR_DC_Msk) != 0)   // Check data cache is enabled
 800f654:	4b08      	ldr	r3, [pc, #32]	; (800f678 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 800f656:	695b      	ldr	r3, [r3, #20]
 800f658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	bf14      	ite	ne
 800f660:	2301      	movne	r3, #1
 800f662:	2300      	moveq	r3, #0
 800f664:	b2db      	uxtb	r3, r3
 800f666:	2b00      	cmp	r3, #0
 800f668:	d001      	beq.n	800f66e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800f66a:	f7ff fee1 	bl	800f430 <SCB_CleanInvalidateDCache>
    }
}
 800f66e:	bf00      	nop
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	e000ed00 	.word	0xe000ed00

0800f67c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 800f684:	4b1a      	ldr	r3, [pc, #104]	; (800f6f0 <HAL_LTDC_LineEventCallback+0x74>)
 800f686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f688:	4a1a      	ldr	r2, [pc, #104]	; (800f6f4 <HAL_LTDC_LineEventCallback+0x78>)
 800f68a:	8812      	ldrh	r2, [r2, #0]
 800f68c:	4293      	cmp	r3, r2
 800f68e:	bf0c      	ite	eq
 800f690:	2301      	moveq	r3, #1
 800f692:	2300      	movne	r3, #0
 800f694:	b2db      	uxtb	r3, r3
 800f696:	2b00      	cmp	r3, #0
 800f698:	d017      	beq.n	800f6ca <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800f69a:	4b17      	ldr	r3, [pc, #92]	; (800f6f8 <HAL_LTDC_LineEventCallback+0x7c>)
 800f69c:	881b      	ldrh	r3, [r3, #0]
 800f69e:	4619      	mov	r1, r3
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f7f6 feff 	bl	80064a4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800f6a6:	f7fe f8a9 	bl	800d7fc <_ZN8touchgfx3HAL11getInstanceEv>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7ff fe41 	bl	800f334 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800f6b2:	f7fe ffb5 	bl	800e620 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800f6b6:	f7fe f8a1 	bl	800d7fc <_ZN8touchgfx3HAL11getInstanceEv>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f005 ff4b 	bl	8015558 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800f6c2:	2000      	movs	r0, #0
 800f6c4:	f7fe fc8c 	bl	800dfe0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 800f6c8:	e00e      	b.n	800f6e8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800f6ca:	4b0a      	ldr	r3, [pc, #40]	; (800f6f4 <HAL_LTDC_LineEventCallback+0x78>)
 800f6cc:	881b      	ldrh	r3, [r3, #0]
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f7f6 fee7 	bl	80064a4 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800f6d6:	2000      	movs	r0, #0
 800f6d8:	f7fe fc8d 	bl	800dff6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 800f6dc:	f7fe f88e 	bl	800d7fc <_ZN8touchgfx3HAL11getInstanceEv>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7ff fe18 	bl	800f318 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 800f6e8:	bf00      	nop
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	40016800 	.word	0x40016800
 800f6f4:	20001208 	.word	0x20001208
 800f6f8:	2000120a 	.word	0x2000120a

0800f6fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f700:	2201      	movs	r2, #1
 800f702:	490e      	ldr	r1, [pc, #56]	; (800f73c <MX_USB_HOST_Init+0x40>)
 800f704:	480e      	ldr	r0, [pc, #56]	; (800f740 <MX_USB_HOST_Init+0x44>)
 800f706:	f7fc fa39 	bl	800bb7c <USBH_Init>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d001      	beq.n	800f714 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f710:	f7f2 f8bc 	bl	800188c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f714:	490b      	ldr	r1, [pc, #44]	; (800f744 <MX_USB_HOST_Init+0x48>)
 800f716:	480a      	ldr	r0, [pc, #40]	; (800f740 <MX_USB_HOST_Init+0x44>)
 800f718:	f7fc fabe 	bl	800bc98 <USBH_RegisterClass>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d001      	beq.n	800f726 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f722:	f7f2 f8b3 	bl	800188c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f726:	4806      	ldr	r0, [pc, #24]	; (800f740 <MX_USB_HOST_Init+0x44>)
 800f728:	f7fc fb42 	bl	800bdb0 <USBH_Start>
 800f72c:	4603      	mov	r3, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d001      	beq.n	800f736 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f732:	f7f2 f8ab 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f736:	bf00      	nop
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	0800f75d 	.word	0x0800f75d
 800f740:	2000120c 	.word	0x2000120c
 800f744:	20000034 	.word	0x20000034

0800f748 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f74c:	4802      	ldr	r0, [pc, #8]	; (800f758 <MX_USB_HOST_Process+0x10>)
 800f74e:	f7fc fb3f 	bl	800bdd0 <USBH_Process>
}
 800f752:	bf00      	nop
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	2000120c 	.word	0x2000120c

0800f75c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b083      	sub	sp, #12
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	460b      	mov	r3, r1
 800f766:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f768:	78fb      	ldrb	r3, [r7, #3]
 800f76a:	3b01      	subs	r3, #1
 800f76c:	2b04      	cmp	r3, #4
 800f76e:	d819      	bhi.n	800f7a4 <USBH_UserProcess+0x48>
 800f770:	a201      	add	r2, pc, #4	; (adr r2, 800f778 <USBH_UserProcess+0x1c>)
 800f772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f776:	bf00      	nop
 800f778:	0800f7a5 	.word	0x0800f7a5
 800f77c:	0800f795 	.word	0x0800f795
 800f780:	0800f7a5 	.word	0x0800f7a5
 800f784:	0800f79d 	.word	0x0800f79d
 800f788:	0800f78d 	.word	0x0800f78d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f78c:	4b09      	ldr	r3, [pc, #36]	; (800f7b4 <USBH_UserProcess+0x58>)
 800f78e:	2203      	movs	r2, #3
 800f790:	701a      	strb	r2, [r3, #0]
  break;
 800f792:	e008      	b.n	800f7a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f794:	4b07      	ldr	r3, [pc, #28]	; (800f7b4 <USBH_UserProcess+0x58>)
 800f796:	2202      	movs	r2, #2
 800f798:	701a      	strb	r2, [r3, #0]
  break;
 800f79a:	e004      	b.n	800f7a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f79c:	4b05      	ldr	r3, [pc, #20]	; (800f7b4 <USBH_UserProcess+0x58>)
 800f79e:	2201      	movs	r2, #1
 800f7a0:	701a      	strb	r2, [r3, #0]
  break;
 800f7a2:	e000      	b.n	800f7a6 <USBH_UserProcess+0x4a>

  default:
  break;
 800f7a4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f7a6:	bf00      	nop
 800f7a8:	370c      	adds	r7, #12
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	200015e4 	.word	0x200015e4

0800f7b8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b08a      	sub	sp, #40	; 0x28
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f7c0:	f107 0314 	add.w	r3, r7, #20
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	601a      	str	r2, [r3, #0]
 800f7c8:	605a      	str	r2, [r3, #4]
 800f7ca:	609a      	str	r2, [r3, #8]
 800f7cc:	60da      	str	r2, [r3, #12]
 800f7ce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f7d8:	d13c      	bne.n	800f854 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f7da:	4b20      	ldr	r3, [pc, #128]	; (800f85c <HAL_HCD_MspInit+0xa4>)
 800f7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7de:	4a1f      	ldr	r2, [pc, #124]	; (800f85c <HAL_HCD_MspInit+0xa4>)
 800f7e0:	f043 0301 	orr.w	r3, r3, #1
 800f7e4:	6313      	str	r3, [r2, #48]	; 0x30
 800f7e6:	4b1d      	ldr	r3, [pc, #116]	; (800f85c <HAL_HCD_MspInit+0xa4>)
 800f7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ea:	f003 0301 	and.w	r3, r3, #1
 800f7ee:	613b      	str	r3, [r7, #16]
 800f7f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800f7f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f7f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7f8:	2302      	movs	r3, #2
 800f7fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f800:	2303      	movs	r3, #3
 800f802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f804:	230a      	movs	r3, #10
 800f806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f808:	f107 0314 	add.w	r3, r7, #20
 800f80c:	4619      	mov	r1, r3
 800f80e:	4814      	ldr	r0, [pc, #80]	; (800f860 <HAL_HCD_MspInit+0xa8>)
 800f810:	f7f3 ff04 	bl	800361c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f814:	4b11      	ldr	r3, [pc, #68]	; (800f85c <HAL_HCD_MspInit+0xa4>)
 800f816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f818:	4a10      	ldr	r2, [pc, #64]	; (800f85c <HAL_HCD_MspInit+0xa4>)
 800f81a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f81e:	6353      	str	r3, [r2, #52]	; 0x34
 800f820:	4b0e      	ldr	r3, [pc, #56]	; (800f85c <HAL_HCD_MspInit+0xa4>)
 800f822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f828:	60fb      	str	r3, [r7, #12]
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	4b0b      	ldr	r3, [pc, #44]	; (800f85c <HAL_HCD_MspInit+0xa4>)
 800f82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f830:	4a0a      	ldr	r2, [pc, #40]	; (800f85c <HAL_HCD_MspInit+0xa4>)
 800f832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f836:	6453      	str	r3, [r2, #68]	; 0x44
 800f838:	4b08      	ldr	r3, [pc, #32]	; (800f85c <HAL_HCD_MspInit+0xa4>)
 800f83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f83c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f840:	60bb      	str	r3, [r7, #8]
 800f842:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f844:	2200      	movs	r2, #0
 800f846:	2100      	movs	r1, #0
 800f848:	2043      	movs	r0, #67	; 0x43
 800f84a:	f7f3 fb59 	bl	8002f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f84e:	2043      	movs	r0, #67	; 0x43
 800f850:	f7f3 fb72 	bl	8002f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f854:	bf00      	nop
 800f856:	3728      	adds	r7, #40	; 0x28
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	40023800 	.word	0x40023800
 800f860:	40020000 	.word	0x40020000

0800f864 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f872:	4618      	mov	r0, r3
 800f874:	f7fc fe7f 	bl	800c576 <USBH_LL_IncTimer>
}
 800f878:	bf00      	nop
 800f87a:	3708      	adds	r7, #8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fc feb7 	bl	800c602 <USBH_LL_Connect>
}
 800f894:	bf00      	nop
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fc fec0 	bl	800c630 <USBH_LL_Disconnect>
}
 800f8b0:	bf00      	nop
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b083      	sub	sp, #12
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	70fb      	strb	r3, [r7, #3]
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f8c8:	bf00      	nop
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fc fe71 	bl	800c5ca <USBH_LL_PortEnabled>
}
 800f8e8:	bf00      	nop
 800f8ea:	3708      	adds	r7, #8
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}

0800f8f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7fc fe71 	bl	800c5e6 <USBH_LL_PortDisabled>
}
 800f904:	bf00      	nop
 800f906:	3708      	adds	r7, #8
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d12a      	bne.n	800f974 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f91e:	4a18      	ldr	r2, [pc, #96]	; (800f980 <USBH_LL_Init+0x74>)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a15      	ldr	r2, [pc, #84]	; (800f980 <USBH_LL_Init+0x74>)
 800f92a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f92e:	4b14      	ldr	r3, [pc, #80]	; (800f980 <USBH_LL_Init+0x74>)
 800f930:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f934:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f936:	4b12      	ldr	r3, [pc, #72]	; (800f980 <USBH_LL_Init+0x74>)
 800f938:	2208      	movs	r2, #8
 800f93a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f93c:	4b10      	ldr	r3, [pc, #64]	; (800f980 <USBH_LL_Init+0x74>)
 800f93e:	2201      	movs	r2, #1
 800f940:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f942:	4b0f      	ldr	r3, [pc, #60]	; (800f980 <USBH_LL_Init+0x74>)
 800f944:	2200      	movs	r2, #0
 800f946:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f948:	4b0d      	ldr	r3, [pc, #52]	; (800f980 <USBH_LL_Init+0x74>)
 800f94a:	2202      	movs	r2, #2
 800f94c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f94e:	4b0c      	ldr	r3, [pc, #48]	; (800f980 <USBH_LL_Init+0x74>)
 800f950:	2200      	movs	r2, #0
 800f952:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f954:	480a      	ldr	r0, [pc, #40]	; (800f980 <USBH_LL_Init+0x74>)
 800f956:	f7f4 f97d 	bl	8003c54 <HAL_HCD_Init>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d001      	beq.n	800f964 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f960:	f7f1 ff94 	bl	800188c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f964:	4806      	ldr	r0, [pc, #24]	; (800f980 <USBH_LL_Init+0x74>)
 800f966:	f7f4 fd60 	bl	800442a <HAL_HCD_GetCurrentFrame>
 800f96a:	4603      	mov	r3, r0
 800f96c:	4619      	mov	r1, r3
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f7fc fdf2 	bl	800c558 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	200015e8 	.word	0x200015e8

0800f984 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f98c:	2300      	movs	r3, #0
 800f98e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f990:	2300      	movs	r3, #0
 800f992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7f4 fccf 	bl	800433e <HAL_HCD_Start>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f9a4:	7bfb      	ldrb	r3, [r7, #15]
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f000 f95c 	bl	800fc64 <USBH_Get_USB_Status>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b084      	sub	sp, #16
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7f4 fcd7 	bl	8004384 <HAL_HCD_Stop>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f9da:	7bfb      	ldrb	r3, [r7, #15]
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f000 f941 	bl	800fc64 <USBH_Get_USB_Status>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7f4 fd1f 	bl	8004446 <HAL_HCD_GetCurrentSpeed>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b02      	cmp	r3, #2
 800fa0c:	d00c      	beq.n	800fa28 <USBH_LL_GetSpeed+0x38>
 800fa0e:	2b02      	cmp	r3, #2
 800fa10:	d80d      	bhi.n	800fa2e <USBH_LL_GetSpeed+0x3e>
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d002      	beq.n	800fa1c <USBH_LL_GetSpeed+0x2c>
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d003      	beq.n	800fa22 <USBH_LL_GetSpeed+0x32>
 800fa1a:	e008      	b.n	800fa2e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa20:	e008      	b.n	800fa34 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fa22:	2301      	movs	r3, #1
 800fa24:	73fb      	strb	r3, [r7, #15]
    break;
 800fa26:	e005      	b.n	800fa34 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fa28:	2302      	movs	r3, #2
 800fa2a:	73fb      	strb	r3, [r7, #15]
    break;
 800fa2c:	e002      	b.n	800fa34 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	73fb      	strb	r3, [r7, #15]
    break;
 800fa32:	bf00      	nop
  }
  return  speed;
 800fa34:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3710      	adds	r7, #16
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b084      	sub	sp, #16
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa46:	2300      	movs	r3, #0
 800fa48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7f4 fcb2 	bl	80043be <HAL_HCD_ResetPort>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa5e:	7bfb      	ldrb	r3, [r7, #15]
 800fa60:	4618      	mov	r0, r3
 800fa62:	f000 f8ff 	bl	800fc64 <USBH_Get_USB_Status>
 800fa66:	4603      	mov	r3, r0
 800fa68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3710      	adds	r7, #16
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa86:	78fa      	ldrb	r2, [r7, #3]
 800fa88:	4611      	mov	r1, r2
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7f4 fcb9 	bl	8004402 <HAL_HCD_HC_GetXferCount>
 800fa90:	4603      	mov	r3, r0
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3708      	adds	r7, #8
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}

0800fa9a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fa9a:	b590      	push	{r4, r7, lr}
 800fa9c:	b089      	sub	sp, #36	; 0x24
 800fa9e:	af04      	add	r7, sp, #16
 800faa0:	6078      	str	r0, [r7, #4]
 800faa2:	4608      	mov	r0, r1
 800faa4:	4611      	mov	r1, r2
 800faa6:	461a      	mov	r2, r3
 800faa8:	4603      	mov	r3, r0
 800faaa:	70fb      	strb	r3, [r7, #3]
 800faac:	460b      	mov	r3, r1
 800faae:	70bb      	strb	r3, [r7, #2]
 800fab0:	4613      	mov	r3, r2
 800fab2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fab4:	2300      	movs	r3, #0
 800fab6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fab8:	2300      	movs	r3, #0
 800faba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fac2:	787c      	ldrb	r4, [r7, #1]
 800fac4:	78ba      	ldrb	r2, [r7, #2]
 800fac6:	78f9      	ldrb	r1, [r7, #3]
 800fac8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800faca:	9302      	str	r3, [sp, #8]
 800facc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fad0:	9301      	str	r3, [sp, #4]
 800fad2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	4623      	mov	r3, r4
 800fada:	f7f4 f91d 	bl	8003d18 <HAL_HCD_HC_Init>
 800fade:	4603      	mov	r3, r0
 800fae0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fae2:	7bfb      	ldrb	r3, [r7, #15]
 800fae4:	4618      	mov	r0, r3
 800fae6:	f000 f8bd 	bl	800fc64 <USBH_Get_USB_Status>
 800faea:	4603      	mov	r3, r0
 800faec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faee:	7bbb      	ldrb	r3, [r7, #14]
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3714      	adds	r7, #20
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd90      	pop	{r4, r7, pc}

0800faf8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	460b      	mov	r3, r1
 800fb02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb04:	2300      	movs	r3, #0
 800fb06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb12:	78fa      	ldrb	r2, [r7, #3]
 800fb14:	4611      	mov	r1, r2
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7f4 f98d 	bl	8003e36 <HAL_HCD_HC_Halt>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb20:	7bfb      	ldrb	r3, [r7, #15]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f000 f89e 	bl	800fc64 <USBH_Get_USB_Status>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3710      	adds	r7, #16
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}

0800fb36 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fb36:	b590      	push	{r4, r7, lr}
 800fb38:	b089      	sub	sp, #36	; 0x24
 800fb3a:	af04      	add	r7, sp, #16
 800fb3c:	6078      	str	r0, [r7, #4]
 800fb3e:	4608      	mov	r0, r1
 800fb40:	4611      	mov	r1, r2
 800fb42:	461a      	mov	r2, r3
 800fb44:	4603      	mov	r3, r0
 800fb46:	70fb      	strb	r3, [r7, #3]
 800fb48:	460b      	mov	r3, r1
 800fb4a:	70bb      	strb	r3, [r7, #2]
 800fb4c:	4613      	mov	r3, r2
 800fb4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb50:	2300      	movs	r3, #0
 800fb52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb54:	2300      	movs	r3, #0
 800fb56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fb5e:	787c      	ldrb	r4, [r7, #1]
 800fb60:	78ba      	ldrb	r2, [r7, #2]
 800fb62:	78f9      	ldrb	r1, [r7, #3]
 800fb64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fb68:	9303      	str	r3, [sp, #12]
 800fb6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fb6c:	9302      	str	r3, [sp, #8]
 800fb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb70:	9301      	str	r3, [sp, #4]
 800fb72:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb76:	9300      	str	r3, [sp, #0]
 800fb78:	4623      	mov	r3, r4
 800fb7a:	f7f4 f97f 	bl	8003e7c <HAL_HCD_HC_SubmitRequest>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fb82:	7bfb      	ldrb	r3, [r7, #15]
 800fb84:	4618      	mov	r0, r3
 800fb86:	f000 f86d 	bl	800fc64 <USBH_Get_USB_Status>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3714      	adds	r7, #20
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd90      	pop	{r4, r7, pc}

0800fb98 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	460b      	mov	r3, r1
 800fba2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fbaa:	78fa      	ldrb	r2, [r7, #3]
 800fbac:	4611      	mov	r1, r2
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7f4 fc13 	bl	80043da <HAL_HCD_HC_GetURBState>
 800fbb4:	4603      	mov	r3, r0
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b082      	sub	sp, #8
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	6078      	str	r0, [r7, #4]
 800fbc6:	460b      	mov	r3, r1
 800fbc8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d103      	bne.n	800fbdc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fbd4:	78fb      	ldrb	r3, [r7, #3]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f000 f870 	bl	800fcbc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fbdc:	20c8      	movs	r0, #200	; 0xc8
 800fbde:	f7f2 fc0b 	bl	80023f8 <HAL_Delay>
  return USBH_OK;
 800fbe2:	2300      	movs	r3, #0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3708      	adds	r7, #8
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	70fb      	strb	r3, [r7, #3]
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fc02:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fc04:	78fb      	ldrb	r3, [r7, #3]
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	212c      	movs	r1, #44	; 0x2c
 800fc0a:	fb01 f303 	mul.w	r3, r1, r3
 800fc0e:	4413      	add	r3, r2
 800fc10:	333b      	adds	r3, #59	; 0x3b
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d009      	beq.n	800fc2c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fc18:	78fb      	ldrb	r3, [r7, #3]
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	212c      	movs	r1, #44	; 0x2c
 800fc1e:	fb01 f303 	mul.w	r3, r1, r3
 800fc22:	4413      	add	r3, r2
 800fc24:	3354      	adds	r3, #84	; 0x54
 800fc26:	78ba      	ldrb	r2, [r7, #2]
 800fc28:	701a      	strb	r2, [r3, #0]
 800fc2a:	e008      	b.n	800fc3e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fc2c:	78fb      	ldrb	r3, [r7, #3]
 800fc2e:	68fa      	ldr	r2, [r7, #12]
 800fc30:	212c      	movs	r1, #44	; 0x2c
 800fc32:	fb01 f303 	mul.w	r3, r1, r3
 800fc36:	4413      	add	r3, r2
 800fc38:	3355      	adds	r3, #85	; 0x55
 800fc3a:	78ba      	ldrb	r2, [r7, #2]
 800fc3c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fc3e:	2300      	movs	r3, #0
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3714      	adds	r7, #20
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f7f2 fbcf 	bl	80023f8 <HAL_Delay>
}
 800fc5a:	bf00      	nop
 800fc5c:	3708      	adds	r7, #8
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
	...

0800fc64 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b085      	sub	sp, #20
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc72:	79fb      	ldrb	r3, [r7, #7]
 800fc74:	2b03      	cmp	r3, #3
 800fc76:	d817      	bhi.n	800fca8 <USBH_Get_USB_Status+0x44>
 800fc78:	a201      	add	r2, pc, #4	; (adr r2, 800fc80 <USBH_Get_USB_Status+0x1c>)
 800fc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc7e:	bf00      	nop
 800fc80:	0800fc91 	.word	0x0800fc91
 800fc84:	0800fc97 	.word	0x0800fc97
 800fc88:	0800fc9d 	.word	0x0800fc9d
 800fc8c:	0800fca3 	.word	0x0800fca3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fc90:	2300      	movs	r3, #0
 800fc92:	73fb      	strb	r3, [r7, #15]
    break;
 800fc94:	e00b      	b.n	800fcae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fc96:	2302      	movs	r3, #2
 800fc98:	73fb      	strb	r3, [r7, #15]
    break;
 800fc9a:	e008      	b.n	800fcae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	73fb      	strb	r3, [r7, #15]
    break;
 800fca0:	e005      	b.n	800fcae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fca2:	2302      	movs	r3, #2
 800fca4:	73fb      	strb	r3, [r7, #15]
    break;
 800fca6:	e002      	b.n	800fcae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fca8:	2302      	movs	r3, #2
 800fcaa:	73fb      	strb	r3, [r7, #15]
    break;
 800fcac:	bf00      	nop
  }
  return usb_status;
 800fcae:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3714      	adds	r7, #20
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr

0800fcbc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b084      	sub	sp, #16
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fcc6:	79fb      	ldrb	r3, [r7, #7]
 800fcc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fcca:	79fb      	ldrb	r3, [r7, #7]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d102      	bne.n	800fcd6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	73fb      	strb	r3, [r7, #15]
 800fcd4:	e001      	b.n	800fcda <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 800fcda:	7bfb      	ldrb	r3, [r7, #15]
 800fcdc:	461a      	mov	r2, r3
 800fcde:	2120      	movs	r1, #32
 800fce0:	4803      	ldr	r0, [pc, #12]	; (800fcf0 <MX_DriverVbusFS+0x34>)
 800fce2:	f7f3 ff6b 	bl	8003bbc <HAL_GPIO_WritePin>
}
 800fce6:	bf00      	nop
 800fce8:	3710      	adds	r7, #16
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	40020c00 	.word	0x40020c00

0800fcf4 <_ZN9interface11GuiObserverD1Ev>:
namespace interface {

class GuiObserver
{
public:
    virtual ~GuiObserver() {}
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	4a04      	ldr	r2, [pc, #16]	; (800fd10 <_ZN9interface11GuiObserverD1Ev+0x1c>)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	601a      	str	r2, [r3, #0]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	4618      	mov	r0, r3
 800fd06:	370c      	adds	r7, #12
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	0801c568 	.word	0x0801c568

0800fd14 <_ZN9interface11GuiObserverD0Ev>:
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b082      	sub	sp, #8
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f7ff ffe9 	bl	800fcf4 <_ZN9interface11GuiObserverD1Ev>
 800fd22:	2104      	movs	r1, #4
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f009 fcd1 	bl	80196cc <_ZdlPvj>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3708      	adds	r7, #8
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <_ZN12oscilloscope10ControllerD1Ev>:
class Controller : public XFBehavior,
                   public interface::GuiObserver
{
public:
	Controller();
	virtual ~Controller() {}
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	4a09      	ldr	r2, [pc, #36]	; (800fd64 <_ZN12oscilloscope10ControllerD1Ev+0x30>)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	601a      	str	r2, [r3, #0]
 800fd42:	4a09      	ldr	r2, [pc, #36]	; (800fd68 <_ZN12oscilloscope10ControllerD1Ev+0x34>)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	611a      	str	r2, [r3, #16]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	3310      	adds	r3, #16
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7ff ffd1 	bl	800fcf4 <_ZN9interface11GuiObserverD1Ev>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	4618      	mov	r0, r3
 800fd56:	f002 f867 	bl	8011e28 <_ZN10XFBehaviorD1Ev>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3708      	adds	r7, #8
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	0801c5c4 	.word	0x0801c5c4
 800fd68:	0801c5fc 	.word	0x0801c5fc

0800fd6c <_ZThn16_N12oscilloscope10ControllerD1Ev>:
 800fd6c:	f1a0 0010 	sub.w	r0, r0, #16
 800fd70:	e7e0      	b.n	800fd34 <_ZN12oscilloscope10ControllerD1Ev>
 800fd72:	bf00      	nop

0800fd74 <_ZN12oscilloscope10ControllerD0Ev>:
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f7ff ffd9 	bl	800fd34 <_ZN12oscilloscope10ControllerD1Ev>
 800fd82:	212c      	movs	r1, #44	; 0x2c
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f009 fca1 	bl	80196cc <_ZdlPvj>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <_ZThn16_N12oscilloscope10ControllerD0Ev>:
 800fd94:	f1a0 0010 	sub.w	r0, r0, #16
 800fd98:	e7ec      	b.n	800fd74 <_ZN12oscilloscope10ControllerD0Ev>
	...

0800fd9c <_ZN9interface33ButtonsControllerCallbackProviderD1Ev>:
 *
 */
class ButtonsControllerCallbackProvider
{
public:
    virtual ~ButtonsControllerCallbackProvider() {}
 800fd9c:	b480      	push	{r7}
 800fd9e:	b083      	sub	sp, #12
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	4a04      	ldr	r2, [pc, #16]	; (800fdb8 <_ZN9interface33ButtonsControllerCallbackProviderD1Ev+0x1c>)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	601a      	str	r2, [r3, #0]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	4618      	mov	r0, r3
 800fdae:	370c      	adds	r7, #12
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr
 800fdb8:	0801c558 	.word	0x0801c558

0800fdbc <_ZN9interface33ButtonsControllerCallbackProviderD0Ev>:
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b082      	sub	sp, #8
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7ff ffe9 	bl	800fd9c <_ZN9interface33ButtonsControllerCallbackProviderD1Ev>
 800fdca:	2104      	movs	r1, #4
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f009 fc7d 	bl	80196cc <_ZdlPvj>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3708      	adds	r7, #8
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <_ZN7Factory21getFrequencyGeneratorEv>:
    static TouchGfxTask touchGfxTask;
    return touchGfxTask;
}
#endif  // TOUCHGFX_BAREMETAL

FrequencyGenerator& Factory::getFrequencyGenerator() {
 800fddc:	b480      	push	{r7}
 800fdde:	af00      	add	r7, sp, #0
	return _fgen;
 800fde0:	4b02      	ldr	r3, [pc, #8]	; (800fdec <_ZN7Factory21getFrequencyGeneratorEv+0x10>)
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr
 800fdec:	20001924 	.word	0x20001924

0800fdf0 <_ZN12oscilloscope17FreqGenControllerD1Ev>:
} Frequency;

/**
 * @brief Frequency generator controller to drive external MinGen module with buttons.
 */
class FreqGenController : public interface::ButtonsControllerCallbackProvider,
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	4a09      	ldr	r2, [pc, #36]	; (800fe20 <_ZN12oscilloscope17FreqGenControllerD1Ev+0x30>)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	601a      	str	r2, [r3, #0]
 800fdfe:	4a09      	ldr	r2, [pc, #36]	; (800fe24 <_ZN12oscilloscope17FreqGenControllerD1Ev+0x34>)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	605a      	str	r2, [r3, #4]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	3304      	adds	r3, #4
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f002 f80d 	bl	8011e28 <_ZN10XFBehaviorD1Ev>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7ff ffc3 	bl	800fd9c <_ZN9interface33ButtonsControllerCallbackProviderD1Ev>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3708      	adds	r7, #8
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	0801c588 	.word	0x0801c588
 800fe24:	0801c59c 	.word	0x0801c59c

0800fe28 <_ZThn4_N12oscilloscope17FreqGenControllerD1Ev>:
 800fe28:	f1a0 0004 	sub.w	r0, r0, #4
 800fe2c:	e7e0      	b.n	800fdf0 <_ZN12oscilloscope17FreqGenControllerD1Ev>
 800fe2e:	bf00      	nop

0800fe30 <_ZN12oscilloscope17FreqGenControllerD0Ev>:
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f7ff ffd9 	bl	800fdf0 <_ZN12oscilloscope17FreqGenControllerD1Ev>
 800fe3e:	211c      	movs	r1, #28
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f009 fc43 	bl	80196cc <_ZdlPvj>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3708      	adds	r7, #8
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <_ZThn4_N12oscilloscope17FreqGenControllerD0Ev>:
 800fe50:	f1a0 0004 	sub.w	r0, r0, #4
 800fe54:	e7ec      	b.n	800fe30 <_ZN12oscilloscope17FreqGenControllerD0Ev>
	...

0800fe58 <_Z41__static_initialization_and_destruction_0ii>:
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d113      	bne.n	800fe90 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d10e      	bne.n	800fe90 <_Z41__static_initialization_and_destruction_0ii+0x38>
oscilloscope::Controller Factory::_oscilloscopeController;
 800fe72:	4812      	ldr	r0, [pc, #72]	; (800febc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800fe74:	f000 fd40 	bl	80108f8 <_ZN12oscilloscope10ControllerC1Ev>
oscilloscope::Gui Factory::_gui;
 800fe78:	4811      	ldr	r0, [pc, #68]	; (800fec0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800fe7a:	f000 fc27 	bl	80106cc <_ZN12oscilloscope3GuiC1Ev>
external::FrequencyGenerator Factory::_fgen;
 800fe7e:	4811      	ldr	r0, [pc, #68]	; (800fec4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800fe80:	f001 f8c8 	bl	8011014 <_ZN8external18FrequencyGeneratorC1Ev>
oscilloscope::FreqGenController Factory::_fgenctrl;
 800fe84:	4810      	ldr	r0, [pc, #64]	; (800fec8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800fe86:	f000 f887 	bl	800ff98 <_ZN12oscilloscope17FreqGenControllerC1Ev>
ButtonsController Factory::_bc;
 800fe8a:	4810      	ldr	r0, [pc, #64]	; (800fecc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800fe8c:	f001 f984 	bl	8011198 <_ZN17ButtonsControllerC1Ev>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d10d      	bne.n	800feb2 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d108      	bne.n	800feb2 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800fea0:	480a      	ldr	r0, [pc, #40]	; (800fecc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800fea2:	f001 f9c9 	bl	8011238 <_ZN17ButtonsControllerD1Ev>
oscilloscope::FreqGenController Factory::_fgenctrl;
 800fea6:	4808      	ldr	r0, [pc, #32]	; (800fec8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800fea8:	f7ff ffa2 	bl	800fdf0 <_ZN12oscilloscope17FreqGenControllerD1Ev>
oscilloscope::Controller Factory::_oscilloscopeController;
 800feac:	4803      	ldr	r0, [pc, #12]	; (800febc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800feae:	f7ff ff41 	bl	800fd34 <_ZN12oscilloscope10ControllerD1Ev>
}
 800feb2:	bf00      	nop
 800feb4:	3708      	adds	r7, #8
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	200018ec 	.word	0x200018ec
 800fec0:	20001918 	.word	0x20001918
 800fec4:	20001924 	.word	0x20001924
 800fec8:	2000192c 	.word	0x2000192c
 800fecc:	20001948 	.word	0x20001948

0800fed0 <_GLOBAL__sub_I__ZN7Factory23_oscilloscopeControllerE>:
 800fed0:	b580      	push	{r7, lr}
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fed8:	2001      	movs	r0, #1
 800feda:	f7ff ffbd 	bl	800fe58 <_Z41__static_initialization_and_destruction_0ii>
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <_GLOBAL__sub_D__ZN7Factory23_oscilloscopeControllerE>:
 800fee0:	b580      	push	{r7, lr}
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fee8:	2000      	movs	r0, #0
 800feea:	f7ff ffb5 	bl	800fe58 <_Z41__static_initialization_and_destruction_0ii>
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <_ZNK7XFEvent12getEventTypeEv>:

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline XFEventType getEventType() const { return eventType_; }
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fefe:	4618      	mov	r0, r3
 800ff00:	370c      	adds	r7, #12
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr

0800ff0a <_ZNK7XFEvent5getIdEv>:
    /** \brief Sets pointer to behavioral class (see #_pBehavior).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFReactive * pBehavior) { pBehavior_ = pBehavior; }

    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 800ff0a:	b480      	push	{r7}
 800ff0c:	b083      	sub	sp, #12
 800ff0e:	af00      	add	r7, sp, #0
 800ff10:	6078      	str	r0, [r7, #4]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	689b      	ldr	r3, [r3, #8]
 800ff16:	4618      	mov	r0, r3
 800ff18:	370c      	adds	r7, #12
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr

0800ff22 <_ZN13XFEventStatusC1ENS_12eEventStatusE>:
	/**
	 * Constructor
	 *
	 * \param eventStatus Initial value of the event status.
	 */
    XFEventStatus(eEventStatus eventStatus = Unknown) : status_(eventStatus) {}
 800ff22:	b480      	push	{r7}
 800ff24:	b083      	sub	sp, #12
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6078      	str	r0, [r7, #4]
 800ff2a:	460b      	mov	r3, r1
 800ff2c:	70fb      	strb	r3, [r7, #3]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	78fa      	ldrb	r2, [r7, #3]
 800ff32:	701a      	strb	r2, [r3, #0]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4618      	mov	r0, r3
 800ff38:	370c      	adds	r7, #12
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
	...

0800ff44 <_ZN9interface33ButtonsControllerCallbackProviderC1Ev>:
     *
     */
    typedef void (ButtonsControllerCallbackProvider::*CallbackMethod)(uint16_t buttonIndex, bool pressed);

protected:
    ButtonsControllerCallbackProvider() {}                                  ///< Not allowing to instantiate object of interface.
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	4a04      	ldr	r2, [pc, #16]	; (800ff60 <_ZN9interface33ButtonsControllerCallbackProviderC1Ev+0x1c>)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	601a      	str	r2, [r3, #0]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4618      	mov	r0, r3
 800ff56:	370c      	adds	r7, #12
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr
 800ff60:	0801c558 	.word	0x0801c558

0800ff64 <_ZNK12oscilloscope17FreqGenController3guiEv>:
    XFEventStatus processEvent();
    void start();
    void initialize(oscilloscope::Gui & gui);

protected:
    inline oscilloscope::Gui & gui() const { assert(_pGui); return *_pGui; }
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	695b      	ldr	r3, [r3, #20]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d105      	bne.n	800ff80 <_ZNK12oscilloscope17FreqGenController3guiEv+0x1c>
 800ff74:	4b05      	ldr	r3, [pc, #20]	; (800ff8c <_ZNK12oscilloscope17FreqGenController3guiEv+0x28>)
 800ff76:	4a06      	ldr	r2, [pc, #24]	; (800ff90 <_ZNK12oscilloscope17FreqGenController3guiEv+0x2c>)
 800ff78:	213d      	movs	r1, #61	; 0x3d
 800ff7a:	4806      	ldr	r0, [pc, #24]	; (800ff94 <_ZNK12oscilloscope17FreqGenController3guiEv+0x30>)
 800ff7c:	f009 fdde 	bl	8019b3c <__assert_func>
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	695b      	ldr	r3, [r3, #20]
 800ff84:	4618      	mov	r0, r3
 800ff86:	3708      	adds	r7, #8
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	0801b6f4 	.word	0x0801b6f4
 800ff90:	0801b6fc 	.word	0x0801b6fc
 800ff94:	0801b73c 	.word	0x0801b73c

0800ff98 <_ZN12oscilloscope17FreqGenControllerC1Ev>:
namespace oscilloscope
{

FreqGenController* FreqGenController::_instance = nullptr;

FreqGenController::FreqGenController():
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
    _pGui(nullptr)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff ffce 	bl	800ff44 <_ZN9interface33ButtonsControllerCallbackProviderC1Ev>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	3304      	adds	r3, #4
 800ffac:	2100      	movs	r1, #0
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f001 feec 	bl	8011d8c <_ZN10XFBehaviorC1Eb>
 800ffb4:	4a13      	ldr	r2, [pc, #76]	; (8010004 <_ZN12oscilloscope17FreqGenControllerC1Ev+0x6c>)
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	601a      	str	r2, [r3, #0]
 800ffba:	4a13      	ldr	r2, [pc, #76]	; (8010008 <_ZN12oscilloscope17FreqGenControllerC1Ev+0x70>)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	605a      	str	r2, [r3, #4]
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	615a      	str	r2, [r3, #20]
{
    assert (_instance==nullptr);
 800ffc6:	4b11      	ldr	r3, [pc, #68]	; (801000c <_ZN12oscilloscope17FreqGenControllerC1Ev+0x74>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d005      	beq.n	800ffda <_ZN12oscilloscope17FreqGenControllerC1Ev+0x42>
 800ffce:	4b10      	ldr	r3, [pc, #64]	; (8010010 <_ZN12oscilloscope17FreqGenControllerC1Ev+0x78>)
 800ffd0:	4a10      	ldr	r2, [pc, #64]	; (8010014 <_ZN12oscilloscope17FreqGenControllerC1Ev+0x7c>)
 800ffd2:	2110      	movs	r1, #16
 800ffd4:	4810      	ldr	r0, [pc, #64]	; (8010018 <_ZN12oscilloscope17FreqGenControllerC1Ev+0x80>)
 800ffd6:	f009 fdb1 	bl	8019b3c <__assert_func>
    _instance = this;
 800ffda:	4a0c      	ldr	r2, [pc, #48]	; (801000c <_ZN12oscilloscope17FreqGenControllerC1Ev+0x74>)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6013      	str	r3, [r2, #0]
		EXTFREQGEN_START_FREQUENCY == HZ_700  ||
		EXTFREQGEN_START_FREQUENCY == HZ_1000 ||
		EXTFREQGEN_START_FREQUENCY == HZ_5000 ||
		EXTFREQGEN_START_FREQUENCY == HZ_10000)
    {
    	_frequency = EXTFREQGEN_START_FREQUENCY;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ffe6:	831a      	strh	r2, [r3, #24]
    }
    if (EXTFREQGEN_START_WAVEFORM == SINUS   ||
    	EXTFREQGEN_START_WAVEFORM == TRIANGLE   ||
		EXTFREQGEN_START_WAVEFORM == SQUARE)
    {
    	_mode = EXTFREQGEN_START_WAVEFORM;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2201      	movs	r2, #1
 800ffec:	769a      	strb	r2, [r3, #26]
    }
    else
    {
    	_mode = SINUS;
    }
    change();
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f000 fac2 	bl	8010578 <_ZN12oscilloscope17FreqGenController6changeEv>

    state = ST_INIT;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2200      	movs	r2, #0
 800fff8:	76da      	strb	r2, [r3, #27]
}
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4618      	mov	r0, r3
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	0801c588 	.word	0x0801c588
 8010008:	0801c59c 	.word	0x0801c59c
 801000c:	200019c4 	.word	0x200019c4
 8010010:	0801b7b4 	.word	0x0801b7b4
 8010014:	0801b7c8 	.word	0x0801b7c8
 8010018:	0801b800 	.word	0x0801b800

0801001c <_ZN12oscilloscope17FreqGenController12processEventEv>:
FreqGenController* FreqGenController::getInstance() {
	return _instance;
}


 XFEventStatus FreqGenController::processEvent() {
 801001c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801001e:	b087      	sub	sp, #28
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	XFEventStatus retVal = XFEventStatus::NotConsumed;
 8010024:	f107 0308 	add.w	r3, r7, #8
 8010028:	2102      	movs	r1, #2
 801002a:	4618      	mov	r0, r3
 801002c:	f7ff ff79 	bl	800ff22 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
	FCG_STATES oldState = state;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	7edb      	ldrb	r3, [r3, #27]
 8010034:	75fb      	strb	r3, [r7, #23]
	const XFEvent* ev = getCurrentEvent();
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	3304      	adds	r3, #4
 801003a:	4618      	mov	r0, r3
 801003c:	f001 ffa7 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 8010040:	6138      	str	r0, [r7, #16]
	switch (state)
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	7edb      	ldrb	r3, [r3, #27]
 8010046:	2b04      	cmp	r3, #4
 8010048:	dc50      	bgt.n	80100ec <_ZN12oscilloscope17FreqGenController12processEventEv+0xd0>
 801004a:	2b02      	cmp	r3, #2
 801004c:	da3f      	bge.n	80100ce <_ZN12oscilloscope17FreqGenController12processEventEv+0xb2>
 801004e:	2b00      	cmp	r3, #0
 8010050:	d002      	beq.n	8010058 <_ZN12oscilloscope17FreqGenController12processEventEv+0x3c>
 8010052:	2b01      	cmp	r3, #1
 8010054:	d00f      	beq.n	8010076 <_ZN12oscilloscope17FreqGenController12processEventEv+0x5a>
		{
			state = ST_WAITBUTTON;
		}
		break;
	default:
		break;
 8010056:	e049      	b.n	80100ec <_ZN12oscilloscope17FreqGenController12processEventEv+0xd0>
		if (ev->getEventType()==XFEvent::Initial)
 8010058:	6938      	ldr	r0, [r7, #16]
 801005a:	f7ff ff49 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 801005e:	4603      	mov	r3, r0
 8010060:	2b01      	cmp	r3, #1
 8010062:	bf0c      	ite	eq
 8010064:	2301      	moveq	r3, #1
 8010066:	2300      	movne	r3, #0
 8010068:	b2db      	uxtb	r3, r3
 801006a:	2b00      	cmp	r3, #0
 801006c:	d040      	beq.n	80100f0 <_ZN12oscilloscope17FreqGenController12processEventEv+0xd4>
			state = ST_WAITBUTTON;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2201      	movs	r2, #1
 8010072:	76da      	strb	r2, [r3, #27]
		break;
 8010074:	e03c      	b.n	80100f0 <_ZN12oscilloscope17FreqGenController12processEventEv+0xd4>
		if (ev->getEventType()==XFEvent::Event && ev->getId() == evButtonPressedId)
 8010076:	6938      	ldr	r0, [r7, #16]
 8010078:	f7ff ff3a 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 801007c:	4603      	mov	r3, r0
 801007e:	2b03      	cmp	r3, #3
 8010080:	d107      	bne.n	8010092 <_ZN12oscilloscope17FreqGenController12processEventEv+0x76>
 8010082:	6938      	ldr	r0, [r7, #16]
 8010084:	f7ff ff41 	bl	800ff0a <_ZNK7XFEvent5getIdEv>
 8010088:	4603      	mov	r3, r0
 801008a:	2b02      	cmp	r3, #2
 801008c:	d101      	bne.n	8010092 <_ZN12oscilloscope17FreqGenController12processEventEv+0x76>
 801008e:	2301      	movs	r3, #1
 8010090:	e000      	b.n	8010094 <_ZN12oscilloscope17FreqGenController12processEventEv+0x78>
 8010092:	2300      	movs	r3, #0
 8010094:	2b00      	cmp	r3, #0
 8010096:	d02d      	beq.n	80100f4 <_ZN12oscilloscope17FreqGenController12processEventEv+0xd8>
			switch (((evButtonPressed*) ev)->buttonIndex())
 8010098:	6938      	ldr	r0, [r7, #16]
 801009a:	f000 ff73 	bl	8010f84 <_ZN15evButtonPressed11buttonIndexEv>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b03      	cmp	r3, #3
 80100a2:	d00e      	beq.n	80100c2 <_ZN12oscilloscope17FreqGenController12processEventEv+0xa6>
 80100a4:	2b03      	cmp	r3, #3
 80100a6:	dc10      	bgt.n	80100ca <_ZN12oscilloscope17FreqGenController12processEventEv+0xae>
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d002      	beq.n	80100b2 <_ZN12oscilloscope17FreqGenController12processEventEv+0x96>
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	d004      	beq.n	80100ba <_ZN12oscilloscope17FreqGenController12processEventEv+0x9e>
					break;
 80100b0:	e00b      	b.n	80100ca <_ZN12oscilloscope17FreqGenController12processEventEv+0xae>
					state = ST_CHANGEFREQDOWN;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2203      	movs	r2, #3
 80100b6:	76da      	strb	r2, [r3, #27]
					break;
 80100b8:	e008      	b.n	80100cc <_ZN12oscilloscope17FreqGenController12processEventEv+0xb0>
					state = ST_CHANGEFREQUP;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2202      	movs	r2, #2
 80100be:	76da      	strb	r2, [r3, #27]
					break;
 80100c0:	e004      	b.n	80100cc <_ZN12oscilloscope17FreqGenController12processEventEv+0xb0>
					state = ST_CHANGEMODE;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2204      	movs	r2, #4
 80100c6:	76da      	strb	r2, [r3, #27]
						break;
 80100c8:	e000      	b.n	80100cc <_ZN12oscilloscope17FreqGenController12processEventEv+0xb0>
					break;
 80100ca:	bf00      	nop
		break;
 80100cc:	e012      	b.n	80100f4 <_ZN12oscilloscope17FreqGenController12processEventEv+0xd8>
		if (ev->getEventType()==XFEvent::NullTransition )
 80100ce:	6938      	ldr	r0, [r7, #16]
 80100d0:	f7ff ff0e 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b02      	cmp	r3, #2
 80100d8:	bf0c      	ite	eq
 80100da:	2301      	moveq	r3, #1
 80100dc:	2300      	movne	r3, #0
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d009      	beq.n	80100f8 <_ZN12oscilloscope17FreqGenController12processEventEv+0xdc>
			state = ST_WAITBUTTON;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2201      	movs	r2, #1
 80100e8:	76da      	strb	r2, [r3, #27]
		break;
 80100ea:	e005      	b.n	80100f8 <_ZN12oscilloscope17FreqGenController12processEventEv+0xdc>
		break;
 80100ec:	bf00      	nop
 80100ee:	e004      	b.n	80100fa <_ZN12oscilloscope17FreqGenController12processEventEv+0xde>
		break;
 80100f0:	bf00      	nop
 80100f2:	e002      	b.n	80100fa <_ZN12oscilloscope17FreqGenController12processEventEv+0xde>
		break;
 80100f4:	bf00      	nop
 80100f6:	e000      	b.n	80100fa <_ZN12oscilloscope17FreqGenController12processEventEv+0xde>
		break;
 80100f8:	bf00      	nop
	}
	if (oldState != state)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	7edb      	ldrb	r3, [r3, #27]
 80100fe:	7dfa      	ldrb	r2, [r7, #23]
 8010100:	429a      	cmp	r2, r3
 8010102:	d068      	beq.n	80101d6 <_ZN12oscilloscope17FreqGenController12processEventEv+0x1ba>
	{
		retVal = XFEventStatus::Consumed;
 8010104:	f107 030c 	add.w	r3, r7, #12
 8010108:	2101      	movs	r1, #1
 801010a:	4618      	mov	r0, r3
 801010c:	f7ff ff09 	bl	800ff22 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 8010110:	7b3b      	ldrb	r3, [r7, #12]
 8010112:	723b      	strb	r3, [r7, #8]
		switch (state)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	7edb      	ldrb	r3, [r3, #27]
 8010118:	2b04      	cmp	r3, #4
 801011a:	d85b      	bhi.n	80101d4 <_ZN12oscilloscope17FreqGenController12processEventEv+0x1b8>
 801011c:	a201      	add	r2, pc, #4	; (adr r2, 8010124 <_ZN12oscilloscope17FreqGenController12processEventEv+0x108>)
 801011e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010122:	bf00      	nop
 8010124:	080101d5 	.word	0x080101d5
 8010128:	080101d5 	.word	0x080101d5
 801012c:	08010139 	.word	0x08010139
 8010130:	0801016d 	.word	0x0801016d
 8010134:	080101a1 	.word	0x080101a1
		case ST_INIT:
			break;
		case ST_WAITBUTTON:
			break;
		case ST_CHANGEFREQUP:
			frequencyUp();
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 f855 	bl	80101e8 <_ZN12oscilloscope17FreqGenController11frequencyUpEv>
			change();
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 fa1a 	bl	8010578 <_ZN12oscilloscope17FreqGenController6changeEv>
			GEN(XFNullTransition());
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	1d1d      	adds	r5, r3, #4
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	330c      	adds	r3, #12
 801014e:	681c      	ldr	r4, [r3, #0]
 8010150:	2010      	movs	r0, #16
 8010152:	f009 facc 	bl	80196ee <_Znwj>
 8010156:	4603      	mov	r3, r0
 8010158:	461e      	mov	r6, r3
 801015a:	2100      	movs	r1, #0
 801015c:	4630      	mov	r0, r6
 801015e:	f001 ffa1 	bl	80120a4 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8010162:	2200      	movs	r2, #0
 8010164:	4631      	mov	r1, r6
 8010166:	4628      	mov	r0, r5
 8010168:	47a0      	blx	r4
			break;
 801016a:	e034      	b.n	80101d6 <_ZN12oscilloscope17FreqGenController12processEventEv+0x1ba>
		case ST_CHANGEFREQDOWN:
			frequencyDown();
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 f8d3 	bl	8010318 <_ZN12oscilloscope17FreqGenController13frequencyDownEv>
			change();
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f000 fa00 	bl	8010578 <_ZN12oscilloscope17FreqGenController6changeEv>
			GEN(XFNullTransition());
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	1d1d      	adds	r5, r3, #4
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	330c      	adds	r3, #12
 8010182:	681c      	ldr	r4, [r3, #0]
 8010184:	2010      	movs	r0, #16
 8010186:	f009 fab2 	bl	80196ee <_Znwj>
 801018a:	4603      	mov	r3, r0
 801018c:	461e      	mov	r6, r3
 801018e:	2100      	movs	r1, #0
 8010190:	4630      	mov	r0, r6
 8010192:	f001 ff87 	bl	80120a4 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8010196:	2200      	movs	r2, #0
 8010198:	4631      	mov	r1, r6
 801019a:	4628      	mov	r0, r5
 801019c:	47a0      	blx	r4
			break;
 801019e:	e01a      	b.n	80101d6 <_ZN12oscilloscope17FreqGenController12processEventEv+0x1ba>
		case ST_CHANGEMODE:
			shiftMode();
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 f951 	bl	8010448 <_ZN12oscilloscope17FreqGenController9shiftModeEv>
			change();
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f000 f9e6 	bl	8010578 <_ZN12oscilloscope17FreqGenController6changeEv>
			GEN(XFNullTransition());
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	1d1d      	adds	r5, r3, #4
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	330c      	adds	r3, #12
 80101b6:	681c      	ldr	r4, [r3, #0]
 80101b8:	2010      	movs	r0, #16
 80101ba:	f009 fa98 	bl	80196ee <_Znwj>
 80101be:	4603      	mov	r3, r0
 80101c0:	461e      	mov	r6, r3
 80101c2:	2100      	movs	r1, #0
 80101c4:	4630      	mov	r0, r6
 80101c6:	f001 ff6d 	bl	80120a4 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 80101ca:	2200      	movs	r2, #0
 80101cc:	4631      	mov	r1, r6
 80101ce:	4628      	mov	r0, r5
 80101d0:	47a0      	blx	r4
			break;
 80101d2:	e000      	b.n	80101d6 <_ZN12oscilloscope17FreqGenController12processEventEv+0x1ba>
		default:
			break;
 80101d4:	bf00      	nop
		}
	}
	return retVal;
 80101d6:	7a3b      	ldrb	r3, [r7, #8]
}
 80101d8:	4618      	mov	r0, r3
 80101da:	371c      	adds	r7, #28
 80101dc:	46bd      	mov	sp, r7
 80101de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080101e0 <_ZThn4_N12oscilloscope17FreqGenController12processEventEv>:
    XFEventStatus processEvent();
 80101e0:	f1a0 0004 	sub.w	r0, r0, #4
 80101e4:	f7ff bf1a 	b.w	801001c <_ZN12oscilloscope17FreqGenController12processEventEv>

080101e8 <_ZN12oscilloscope17FreqGenController11frequencyUpEv>:

void FreqGenController::start() {
	startBehavior();
}

void FreqGenController::frequencyUp() {
 80101e8:	b590      	push	{r4, r7, lr}
 80101ea:	b08f      	sub	sp, #60	; 0x3c
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
	//change the frequency up
	switch (_frequency)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	8b1b      	ldrh	r3, [r3, #24]
 80101f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d052      	beq.n	80102a2 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xba>
 80101fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8010200:	4293      	cmp	r3, r2
 8010202:	dc52      	bgt.n	80102aa <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 8010204:	f241 3288 	movw	r2, #5000	; 0x1388
 8010208:	4293      	cmp	r3, r2
 801020a:	d045      	beq.n	8010298 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xb0>
 801020c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010210:	4293      	cmp	r3, r2
 8010212:	dc4a      	bgt.n	80102aa <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 8010214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010218:	d039      	beq.n	801028e <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xa6>
 801021a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801021e:	dc44      	bgt.n	80102aa <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 8010220:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8010224:	d02e      	beq.n	8010284 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x9c>
 8010226:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801022a:	dc3e      	bgt.n	80102aa <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 801022c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010230:	d023      	beq.n	801027a <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x92>
 8010232:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010236:	dc38      	bgt.n	80102aa <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 8010238:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 801023c:	d018      	beq.n	8010270 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x88>
 801023e:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 8010242:	dc32      	bgt.n	80102aa <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 8010244:	2bf0      	cmp	r3, #240	; 0xf0
 8010246:	d00e      	beq.n	8010266 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x7e>
 8010248:	2bf0      	cmp	r3, #240	; 0xf0
 801024a:	dc2e      	bgt.n	80102aa <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 801024c:	2b32      	cmp	r3, #50	; 0x32
 801024e:	d002      	beq.n	8010256 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x6e>
 8010250:	2b6e      	cmp	r3, #110	; 0x6e
 8010252:	d004      	beq.n	801025e <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x76>
		break;
	case HZ_10000:
		_frequency = HZ_50;
		break;
	default:
		break;
 8010254:	e029      	b.n	80102aa <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
		_frequency = HZ_110;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	226e      	movs	r2, #110	; 0x6e
 801025a:	831a      	strh	r2, [r3, #24]
		break;
 801025c:	e026      	b.n	80102ac <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_240;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	22f0      	movs	r2, #240	; 0xf0
 8010262:	831a      	strh	r2, [r3, #24]
		break;
 8010264:	e022      	b.n	80102ac <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_370;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f44f 72b9 	mov.w	r2, #370	; 0x172
 801026c:	831a      	strh	r2, [r3, #24]
		break;
 801026e:	e01d      	b.n	80102ac <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_500;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010276:	831a      	strh	r2, [r3, #24]
		break;
 8010278:	e018      	b.n	80102ac <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_700;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8010280:	831a      	strh	r2, [r3, #24]
		break;
 8010282:	e013      	b.n	80102ac <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_1000;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801028a:	831a      	strh	r2, [r3, #24]
		break;
 801028c:	e00e      	b.n	80102ac <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_5000;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f241 3288 	movw	r2, #5000	; 0x1388
 8010294:	831a      	strh	r2, [r3, #24]
		break;
 8010296:	e009      	b.n	80102ac <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_10000;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f242 7210 	movw	r2, #10000	; 0x2710
 801029e:	831a      	strh	r2, [r3, #24]
		break;
 80102a0:	e004      	b.n	80102ac <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_50;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2232      	movs	r2, #50	; 0x32
 80102a6:	831a      	strh	r2, [r3, #24]
		break;
 80102a8:	e000      	b.n	80102ac <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		break;
 80102aa:	bf00      	nop
	}

	Trace::out("Frequency up to %s", toString(_frequency).c_str());
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f103 0218 	add.w	r2, r3, #24
 80102b2:	f107 0308 	add.w	r3, r7, #8
 80102b6:	4611      	mov	r1, r2
 80102b8:	4618      	mov	r0, r3
 80102ba:	f000 f977 	bl	80105ac <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE>
 80102be:	f107 0308 	add.w	r3, r7, #8
 80102c2:	4618      	mov	r0, r3
 80102c4:	f009 fba5 	bl	8019a12 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80102c8:	4603      	mov	r3, r0
 80102ca:	4619      	mov	r1, r3
 80102cc:	4811      	ldr	r0, [pc, #68]	; (8010314 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x12c>)
 80102ce:	f001 fadb 	bl	8011888 <_ZN5Trace3outEPKcz>
 80102d2:	f107 0308 	add.w	r3, r7, #8
 80102d6:	4618      	mov	r0, r3
 80102d8:	f009 fafe 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	// Update LCD display
	gui().setFreqGenFrequencyText(toString(_frequency));
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f7ff fe41 	bl	800ff64 <_ZNK12oscilloscope17FreqGenController3guiEv>
 80102e2:	4604      	mov	r4, r0
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f103 0218 	add.w	r2, r3, #24
 80102ea:	f107 0320 	add.w	r3, r7, #32
 80102ee:	4611      	mov	r1, r2
 80102f0:	4618      	mov	r0, r3
 80102f2:	f000 f95b 	bl	80105ac <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE>
 80102f6:	f107 0320 	add.w	r3, r7, #32
 80102fa:	4619      	mov	r1, r3
 80102fc:	4620      	mov	r0, r4
 80102fe:	f000 fa45 	bl	801078c <_ZN12oscilloscope3Gui23setFreqGenFrequencyTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8010302:	f107 0320 	add.w	r3, r7, #32
 8010306:	4618      	mov	r0, r3
 8010308:	f009 fae6 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 801030c:	bf00      	nop
 801030e:	373c      	adds	r7, #60	; 0x3c
 8010310:	46bd      	mov	sp, r7
 8010312:	bd90      	pop	{r4, r7, pc}
 8010314:	0801b878 	.word	0x0801b878

08010318 <_ZN12oscilloscope17FreqGenController13frequencyDownEv>:

void FreqGenController::frequencyDown() {
 8010318:	b590      	push	{r4, r7, lr}
 801031a:	b08f      	sub	sp, #60	; 0x3c
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
	//change the frequency down
	switch (_frequency)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	8b1b      	ldrh	r3, [r3, #24]
 8010324:	f242 7210 	movw	r2, #10000	; 0x2710
 8010328:	4293      	cmp	r3, r2
 801032a:	d051      	beq.n	80103d0 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xb8>
 801032c:	f242 7210 	movw	r2, #10000	; 0x2710
 8010330:	4293      	cmp	r3, r2
 8010332:	dc52      	bgt.n	80103da <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 8010334:	f241 3288 	movw	r2, #5000	; 0x1388
 8010338:	4293      	cmp	r3, r2
 801033a:	d044      	beq.n	80103c6 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xae>
 801033c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010340:	4293      	cmp	r3, r2
 8010342:	dc4a      	bgt.n	80103da <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 8010344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010348:	d038      	beq.n	80103bc <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xa4>
 801034a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801034e:	dc44      	bgt.n	80103da <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 8010350:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8010354:	d02d      	beq.n	80103b2 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x9a>
 8010356:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801035a:	dc3e      	bgt.n	80103da <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 801035c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010360:	d022      	beq.n	80103a8 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x90>
 8010362:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010366:	dc38      	bgt.n	80103da <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 8010368:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 801036c:	d018      	beq.n	80103a0 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x88>
 801036e:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 8010372:	dc32      	bgt.n	80103da <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 8010374:	2bf0      	cmp	r3, #240	; 0xf0
 8010376:	d00f      	beq.n	8010398 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x80>
 8010378:	2bf0      	cmp	r3, #240	; 0xf0
 801037a:	dc2e      	bgt.n	80103da <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 801037c:	2b32      	cmp	r3, #50	; 0x32
 801037e:	d002      	beq.n	8010386 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x6e>
 8010380:	2b6e      	cmp	r3, #110	; 0x6e
 8010382:	d005      	beq.n	8010390 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x78>
		break;
	case HZ_10000:
		_frequency = HZ_5000;
		break;
	default:
		break;
 8010384:	e029      	b.n	80103da <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
		_frequency = HZ_10000;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f242 7210 	movw	r2, #10000	; 0x2710
 801038c:	831a      	strh	r2, [r3, #24]
		break;
 801038e:	e025      	b.n	80103dc <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_50;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2232      	movs	r2, #50	; 0x32
 8010394:	831a      	strh	r2, [r3, #24]
		break;
 8010396:	e021      	b.n	80103dc <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_110;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	226e      	movs	r2, #110	; 0x6e
 801039c:	831a      	strh	r2, [r3, #24]
		break;
 801039e:	e01d      	b.n	80103dc <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_240;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	22f0      	movs	r2, #240	; 0xf0
 80103a4:	831a      	strh	r2, [r3, #24]
		break;
 80103a6:	e019      	b.n	80103dc <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_370;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80103ae:	831a      	strh	r2, [r3, #24]
		break;
 80103b0:	e014      	b.n	80103dc <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_500;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80103b8:	831a      	strh	r2, [r3, #24]
		break;
 80103ba:	e00f      	b.n	80103dc <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_700;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80103c2:	831a      	strh	r2, [r3, #24]
		break;
 80103c4:	e00a      	b.n	80103dc <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_1000;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80103cc:	831a      	strh	r2, [r3, #24]
		break;
 80103ce:	e005      	b.n	80103dc <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_5000;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80103d6:	831a      	strh	r2, [r3, #24]
		break;
 80103d8:	e000      	b.n	80103dc <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		break;
 80103da:	bf00      	nop
	}

	Trace::out("Frequency down to %s", toString(_frequency).c_str());
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f103 0218 	add.w	r2, r3, #24
 80103e2:	f107 0308 	add.w	r3, r7, #8
 80103e6:	4611      	mov	r1, r2
 80103e8:	4618      	mov	r0, r3
 80103ea:	f000 f8df 	bl	80105ac <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE>
 80103ee:	f107 0308 	add.w	r3, r7, #8
 80103f2:	4618      	mov	r0, r3
 80103f4:	f009 fb0d 	bl	8019a12 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80103f8:	4603      	mov	r3, r0
 80103fa:	4619      	mov	r1, r3
 80103fc:	4811      	ldr	r0, [pc, #68]	; (8010444 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x12c>)
 80103fe:	f001 fa43 	bl	8011888 <_ZN5Trace3outEPKcz>
 8010402:	f107 0308 	add.w	r3, r7, #8
 8010406:	4618      	mov	r0, r3
 8010408:	f009 fa66 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	// Update LCD display
	gui().setFreqGenFrequencyText(toString(_frequency));
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f7ff fda9 	bl	800ff64 <_ZNK12oscilloscope17FreqGenController3guiEv>
 8010412:	4604      	mov	r4, r0
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f103 0218 	add.w	r2, r3, #24
 801041a:	f107 0320 	add.w	r3, r7, #32
 801041e:	4611      	mov	r1, r2
 8010420:	4618      	mov	r0, r3
 8010422:	f000 f8c3 	bl	80105ac <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE>
 8010426:	f107 0320 	add.w	r3, r7, #32
 801042a:	4619      	mov	r1, r3
 801042c:	4620      	mov	r0, r4
 801042e:	f000 f9ad 	bl	801078c <_ZN12oscilloscope3Gui23setFreqGenFrequencyTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8010432:	f107 0320 	add.w	r3, r7, #32
 8010436:	4618      	mov	r0, r3
 8010438:	f009 fa4e 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 801043c:	bf00      	nop
 801043e:	373c      	adds	r7, #60	; 0x3c
 8010440:	46bd      	mov	sp, r7
 8010442:	bd90      	pop	{r4, r7, pc}
 8010444:	0801b88c 	.word	0x0801b88c

08010448 <_ZN12oscilloscope17FreqGenController9shiftModeEv>:

void FreqGenController::shiftMode() {
 8010448:	b590      	push	{r4, r7, lr}
 801044a:	b099      	sub	sp, #100	; 0x64
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
	//change the waveform
	switch (_mode)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	7e9b      	ldrb	r3, [r3, #26]
 8010454:	2b02      	cmp	r3, #2
 8010456:	d056      	beq.n	8010506 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0xbe>
 8010458:	2b02      	cmp	r3, #2
 801045a:	dc7c      	bgt.n	8010556 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x10e>
 801045c:	2b00      	cmp	r3, #0
 801045e:	d002      	beq.n	8010466 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x1e>
 8010460:	2b01      	cmp	r3, #1
 8010462:	d028      	beq.n	80104b6 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x6e>
		    Trace::out("Sine\n");
            gui().setFreqGenWaveformText("Sine -");
		}
		break;
	default:
		break;
 8010464:	e077      	b.n	8010556 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x10e>
		_mode = TRIANGLE;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2201      	movs	r2, #1
 801046a:	769a      	strb	r2, [r3, #26]
			Trace::out("Triangle\n");
 801046c:	483c      	ldr	r0, [pc, #240]	; (8010560 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x118>)
 801046e:	f001 fa0b 	bl	8011888 <_ZN5Trace3outEPKcz>
			gui().setFreqGenWaveformText("Tria -");
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7ff fd76 	bl	800ff64 <_ZNK12oscilloscope17FreqGenController3guiEv>
 8010478:	4604      	mov	r4, r0
 801047a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801047e:	4618      	mov	r0, r3
 8010480:	f009 f949 	bl	8019716 <_ZNSaIcEC1Ev>
 8010484:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010488:	f107 030c 	add.w	r3, r7, #12
 801048c:	4935      	ldr	r1, [pc, #212]	; (8010564 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x11c>)
 801048e:	4618      	mov	r0, r3
 8010490:	f009 fb1a 	bl	8019ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010494:	f107 030c 	add.w	r3, r7, #12
 8010498:	4619      	mov	r1, r3
 801049a:	4620      	mov	r0, r4
 801049c:	f000 f956 	bl	801074c <_ZN12oscilloscope3Gui22setFreqGenWaveformTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80104a0:	f107 030c 	add.w	r3, r7, #12
 80104a4:	4618      	mov	r0, r3
 80104a6:	f009 fa17 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80104aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104ae:	4618      	mov	r0, r3
 80104b0:	f009 f932 	bl	8019718 <_ZNSaIcED1Ev>
		break;
 80104b4:	e050      	b.n	8010558 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x110>
		_mode = SQUARE;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2202      	movs	r2, #2
 80104ba:	769a      	strb	r2, [r3, #26]
		    Trace::out("Square\n");
 80104bc:	482a      	ldr	r0, [pc, #168]	; (8010568 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x120>)
 80104be:	f001 f9e3 	bl	8011888 <_ZN5Trace3outEPKcz>
            gui().setFreqGenWaveformText("Rect -");
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f7ff fd4e 	bl	800ff64 <_ZNK12oscilloscope17FreqGenController3guiEv>
 80104c8:	4604      	mov	r4, r0
 80104ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80104ce:	4618      	mov	r0, r3
 80104d0:	f009 f921 	bl	8019716 <_ZNSaIcEC1Ev>
 80104d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80104d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104dc:	4923      	ldr	r1, [pc, #140]	; (801056c <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x124>)
 80104de:	4618      	mov	r0, r3
 80104e0:	f009 faf2 	bl	8019ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80104e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104e8:	4619      	mov	r1, r3
 80104ea:	4620      	mov	r0, r4
 80104ec:	f000 f92e 	bl	801074c <_ZN12oscilloscope3Gui22setFreqGenWaveformTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80104f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104f4:	4618      	mov	r0, r3
 80104f6:	f009 f9ef 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80104fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80104fe:	4618      	mov	r0, r3
 8010500:	f009 f90a 	bl	8019718 <_ZNSaIcED1Ev>
		break;
 8010504:	e028      	b.n	8010558 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x110>
		_mode = SINUS;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	769a      	strb	r2, [r3, #26]
		    Trace::out("Sine\n");
 801050c:	4818      	ldr	r0, [pc, #96]	; (8010570 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x128>)
 801050e:	f001 f9bb 	bl	8011888 <_ZN5Trace3outEPKcz>
            gui().setFreqGenWaveformText("Sine -");
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f7ff fd26 	bl	800ff64 <_ZNK12oscilloscope17FreqGenController3guiEv>
 8010518:	4604      	mov	r4, r0
 801051a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801051e:	4618      	mov	r0, r3
 8010520:	f009 f8f9 	bl	8019716 <_ZNSaIcEC1Ev>
 8010524:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8010528:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801052c:	4911      	ldr	r1, [pc, #68]	; (8010574 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x12c>)
 801052e:	4618      	mov	r0, r3
 8010530:	f009 faca 	bl	8019ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010534:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010538:	4619      	mov	r1, r3
 801053a:	4620      	mov	r0, r4
 801053c:	f000 f906 	bl	801074c <_ZN12oscilloscope3Gui22setFreqGenWaveformTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8010540:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010544:	4618      	mov	r0, r3
 8010546:	f009 f9c7 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801054a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801054e:	4618      	mov	r0, r3
 8010550:	f009 f8e2 	bl	8019718 <_ZNSaIcED1Ev>
		break;
 8010554:	e000      	b.n	8010558 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x110>
		break;
 8010556:	bf00      	nop
	}
}
 8010558:	bf00      	nop
 801055a:	3764      	adds	r7, #100	; 0x64
 801055c:	46bd      	mov	sp, r7
 801055e:	bd90      	pop	{r4, r7, pc}
 8010560:	0801b8a4 	.word	0x0801b8a4
 8010564:	0801b8b0 	.word	0x0801b8b0
 8010568:	0801b8b8 	.word	0x0801b8b8
 801056c:	0801b8c0 	.word	0x0801b8c0
 8010570:	0801b8c8 	.word	0x0801b8c8
 8010574:	0801b8d0 	.word	0x0801b8d0

08010578 <_ZN12oscilloscope17FreqGenController6changeEv>:
    _pGui = &gui;
    Factory::getFrequencyGenerator().setFrequency(_frequency);
    Factory::getFrequencyGenerator().setWaveForm(_mode);
}

void FreqGenController::change() {
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
	Factory::getFrequencyGenerator().setWaveForm(_mode);
 8010580:	f7ff fc2c 	bl	800fddc <_ZN7Factory21getFrequencyGeneratorEv>
 8010584:	4602      	mov	r2, r0
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	7e9b      	ldrb	r3, [r3, #26]
 801058a:	4619      	mov	r1, r3
 801058c:	4610      	mov	r0, r2
 801058e:	f000 fd69 	bl	8011064 <_ZN8external18FrequencyGenerator11setWaveFormE6f_mode>
	Factory::getFrequencyGenerator().setFrequency(_frequency);
 8010592:	f7ff fc23 	bl	800fddc <_ZN7Factory21getFrequencyGeneratorEv>
 8010596:	4602      	mov	r2, r0
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	8b1b      	ldrh	r3, [r3, #24]
 801059c:	4619      	mov	r1, r3
 801059e:	4610      	mov	r0, r2
 80105a0:	f000 fd70 	bl	8011084 <_ZN8external18FrequencyGenerator12setFrequencyEm>
}
 80105a4:	bf00      	nop
 80105a6:	3708      	adds	r7, #8
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE>:

//static
std::string FreqGenController::toString(const Frequency & frequency)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
    std::string freqString("n/a");
 80105b6:	f107 030c 	add.w	r3, r7, #12
 80105ba:	4618      	mov	r0, r3
 80105bc:	f009 f8ab 	bl	8019716 <_ZNSaIcEC1Ev>
 80105c0:	f107 030c 	add.w	r3, r7, #12
 80105c4:	461a      	mov	r2, r3
 80105c6:	4937      	ldr	r1, [pc, #220]	; (80106a4 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xf8>)
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f009 fa7d 	bl	8019ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80105ce:	f107 030c 	add.w	r3, r7, #12
 80105d2:	4618      	mov	r0, r3
 80105d4:	f009 f8a0 	bl	8019718 <_ZNSaIcED1Ev>

    switch (frequency)
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	881b      	ldrh	r3, [r3, #0]
 80105dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d054      	beq.n	801068e <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xe2>
 80105e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80105e8:	4293      	cmp	r3, r2
 80105ea:	dc55      	bgt.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 80105ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d047      	beq.n	8010684 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xd8>
 80105f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80105f8:	4293      	cmp	r3, r2
 80105fa:	dc4d      	bgt.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 80105fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010600:	d03b      	beq.n	801067a <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xce>
 8010602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010606:	dc47      	bgt.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 8010608:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801060c:	d030      	beq.n	8010670 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xc4>
 801060e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8010612:	dc41      	bgt.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 8010614:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010618:	d025      	beq.n	8010666 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xba>
 801061a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801061e:	dc3b      	bgt.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 8010620:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 8010624:	d01a      	beq.n	801065c <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xb0>
 8010626:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 801062a:	dc35      	bgt.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 801062c:	2bf0      	cmp	r3, #240	; 0xf0
 801062e:	d010      	beq.n	8010652 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xa6>
 8010630:	2bf0      	cmp	r3, #240	; 0xf0
 8010632:	dc31      	bgt.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 8010634:	2b32      	cmp	r3, #50	; 0x32
 8010636:	d002      	beq.n	801063e <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x92>
 8010638:	2b6e      	cmp	r3, #110	; 0x6e
 801063a:	d005      	beq.n	8010648 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x9c>
    case HZ_10000:
        freqString = "10 kHz";
        break;
    }

    return freqString;
 801063c:	e02c      	b.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "50 Hz";
 801063e:	491a      	ldr	r1, [pc, #104]	; (80106a8 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xfc>)
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f009 f9e2 	bl	8019a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 8010646:	e027      	b.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "110 Hz";
 8010648:	4918      	ldr	r1, [pc, #96]	; (80106ac <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x100>)
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f009 f9dd 	bl	8019a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 8010650:	e022      	b.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "240 Hz";
 8010652:	4917      	ldr	r1, [pc, #92]	; (80106b0 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x104>)
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f009 f9d8 	bl	8019a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 801065a:	e01d      	b.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "370 Hz";
 801065c:	4915      	ldr	r1, [pc, #84]	; (80106b4 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x108>)
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f009 f9d3 	bl	8019a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 8010664:	e018      	b.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "500 Hz";
 8010666:	4914      	ldr	r1, [pc, #80]	; (80106b8 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x10c>)
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f009 f9ce 	bl	8019a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 801066e:	e013      	b.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "700 Hz";
 8010670:	4912      	ldr	r1, [pc, #72]	; (80106bc <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x110>)
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f009 f9c9 	bl	8019a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 8010678:	e00e      	b.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "1 kHz";
 801067a:	4911      	ldr	r1, [pc, #68]	; (80106c0 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x114>)
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f009 f9c4 	bl	8019a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 8010682:	e009      	b.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "5 kHz";
 8010684:	490f      	ldr	r1, [pc, #60]	; (80106c4 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x118>)
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f009 f9bf 	bl	8019a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 801068c:	e004      	b.n	8010698 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "10 kHz";
 801068e:	490e      	ldr	r1, [pc, #56]	; (80106c8 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x11c>)
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f009 f9ba 	bl	8019a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 8010696:	bf00      	nop
    return freqString;
 8010698:	bf00      	nop
}
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
 80106a2:	bf00      	nop
 80106a4:	0801b8d8 	.word	0x0801b8d8
 80106a8:	0801b8dc 	.word	0x0801b8dc
 80106ac:	0801b8e4 	.word	0x0801b8e4
 80106b0:	0801b8ec 	.word	0x0801b8ec
 80106b4:	0801b8f4 	.word	0x0801b8f4
 80106b8:	0801b8fc 	.word	0x0801b8fc
 80106bc:	0801b904 	.word	0x0801b904
 80106c0:	0801b90c 	.word	0x0801b90c
 80106c4:	0801b914 	.word	0x0801b914
 80106c8:	0801b91c 	.word	0x0801b91c

080106cc <_ZN12oscilloscope3GuiC1Ev>:

namespace oscilloscope {

Gui* Gui::_instance = nullptr;

Gui::Gui() :
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
    _pGuiObserver(nullptr),
    _redLedOn(false),
    _xAxisPixelsPerField(roundf(460.0/8))     // Width of the chart graph divided by the number of divisions to show
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2200      	movs	r2, #0
 80106d8:	601a      	str	r2, [r3, #0]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2200      	movs	r2, #0
 80106de:	711a      	strb	r2, [r3, #4]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	4a08      	ldr	r2, [pc, #32]	; (8010704 <_ZN12oscilloscope3GuiC1Ev+0x38>)
 80106e4:	609a      	str	r2, [r3, #8]
{
	if(_instance==nullptr){
 80106e6:	4b08      	ldr	r3, [pc, #32]	; (8010708 <_ZN12oscilloscope3GuiC1Ev+0x3c>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d102      	bne.n	80106f4 <_ZN12oscilloscope3GuiC1Ev+0x28>
		    _instance = this;
 80106ee:	4a06      	ldr	r2, [pc, #24]	; (8010708 <_ZN12oscilloscope3GuiC1Ev+0x3c>)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6013      	str	r3, [r2, #0]
		}
}
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	4618      	mov	r0, r3
 80106f8:	370c      	adds	r7, #12
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop
 8010704:	42680000 	.word	0x42680000
 8010708:	200019c8 	.word	0x200019c8

0801070c <_ZN12oscilloscope3Gui19setTimeDivisionTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
	return true;
}

void Gui::setTimeDivisionText(std::string text)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b08a      	sub	sp, #40	; 0x28
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
	Model* model = Model::getInstance();
 8010716:	f7fd fa0b 	bl	800db30 <_ZN5Model11getInstanceEv>
 801071a:	6278      	str	r0, [r7, #36]	; 0x24
	if(model!=nullptr){
 801071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071e:	2b00      	cmp	r3, #0
 8010720:	d010      	beq.n	8010744 <_ZN12oscilloscope3Gui19setTimeDivisionTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
		model->setDivTimLabel(text);
 8010722:	f107 030c 	add.w	r3, r7, #12
 8010726:	6839      	ldr	r1, [r7, #0]
 8010728:	4618      	mov	r0, r3
 801072a:	f009 f999 	bl	8019a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801072e:	f107 030c 	add.w	r3, r7, #12
 8010732:	4619      	mov	r1, r3
 8010734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010736:	f7fd fa07 	bl	800db48 <_ZN5Model14setDivTimLabelENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 801073a:	f107 030c 	add.w	r3, r7, #12
 801073e:	4618      	mov	r0, r3
 8010740:	f009 f8ca 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8010744:	bf00      	nop
 8010746:	3728      	adds	r7, #40	; 0x28
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <_ZN12oscilloscope3Gui22setFreqGenWaveformTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Gui::setFreqGenWaveformText(std::string text)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b08a      	sub	sp, #40	; 0x28
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
	Model* model = Model::getInstance();
 8010756:	f7fd f9eb 	bl	800db30 <_ZN5Model11getInstanceEv>
 801075a:	6278      	str	r0, [r7, #36]	; 0x24
	if(model!=nullptr){
 801075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075e:	2b00      	cmp	r3, #0
 8010760:	d010      	beq.n	8010784 <_ZN12oscilloscope3Gui22setFreqGenWaveformTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
		model->setModeSignal(text);
 8010762:	f107 030c 	add.w	r3, r7, #12
 8010766:	6839      	ldr	r1, [r7, #0]
 8010768:	4618      	mov	r0, r3
 801076a:	f009 f979 	bl	8019a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801076e:	f107 030c 	add.w	r3, r7, #12
 8010772:	4619      	mov	r1, r3
 8010774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010776:	f7fd f9fa 	bl	800db6e <_ZN5Model13setModeSignalENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 801077a:	f107 030c 	add.w	r3, r7, #12
 801077e:	4618      	mov	r0, r3
 8010780:	f009 f8aa 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8010784:	bf00      	nop
 8010786:	3728      	adds	r7, #40	; 0x28
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <_ZN12oscilloscope3Gui23setFreqGenFrequencyTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Gui::setFreqGenFrequencyText(std::string text)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b08a      	sub	sp, #40	; 0x28
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
	Model* model = Model::getInstance();
 8010796:	f7fd f9cb 	bl	800db30 <_ZN5Model11getInstanceEv>
 801079a:	6278      	str	r0, [r7, #36]	; 0x24
	if(model!=nullptr){
 801079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d010      	beq.n	80107c4 <_ZN12oscilloscope3Gui23setFreqGenFrequencyTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
		model->setFreqSignal(text);
 80107a2:	f107 030c 	add.w	r3, r7, #12
 80107a6:	6839      	ldr	r1, [r7, #0]
 80107a8:	4618      	mov	r0, r3
 80107aa:	f009 f959 	bl	8019a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80107ae:	f107 030c 	add.w	r3, r7, #12
 80107b2:	4619      	mov	r1, r3
 80107b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107b6:	f7fd f9ed 	bl	800db94 <_ZN5Model13setFreqSignalENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80107ba:	f107 030c 	add.w	r3, r7, #12
 80107be:	4618      	mov	r0, r3
 80107c0:	f009 f88a 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 80107c4:	bf00      	nop
 80107c6:	3728      	adds	r7, #40	; 0x28
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>:
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : eventType_(eventType), id_(id), pBehavior_(pBehavior) {}
 80107cc:	b480      	push	{r7}
 80107ce:	b085      	sub	sp, #20
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	607a      	str	r2, [r7, #4]
 80107d6:	603b      	str	r3, [r7, #0]
 80107d8:	460b      	mov	r3, r1
 80107da:	72fb      	strb	r3, [r7, #11]
 80107dc:	4a09      	ldr	r2, [pc, #36]	; (8010804 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE+0x38>)
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	601a      	str	r2, [r3, #0]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	7afa      	ldrb	r2, [r7, #11]
 80107e6:	711a      	strb	r2, [r3, #4]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	687a      	ldr	r2, [r7, #4]
 80107ec:	609a      	str	r2, [r3, #8]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	683a      	ldr	r2, [r7, #0]
 80107f2:	60da      	str	r2, [r3, #12]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	4618      	mov	r0, r3
 80107f8:	3714      	adds	r7, #20
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop
 8010804:	0801c61c 	.word	0x0801c61c

08010808 <_ZN7XFEventD1Ev>:
    virtual ~XFEvent() {}		///< Class destructor
 8010808:	b480      	push	{r7}
 801080a:	b083      	sub	sp, #12
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	4a04      	ldr	r2, [pc, #16]	; (8010824 <_ZN7XFEventD1Ev+0x1c>)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	601a      	str	r2, [r3, #0]
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	4618      	mov	r0, r3
 801081a:	370c      	adds	r7, #12
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr
 8010824:	0801c61c 	.word	0x0801c61c

08010828 <_ZN7XFEventD0Ev>:
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f7ff ffe9 	bl	8010808 <_ZN7XFEventD1Ev>
 8010836:	2110      	movs	r1, #16
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f008 ff47 	bl	80196cc <_ZdlPvj>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	4618      	mov	r0, r3
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <_ZNK7XFEvent18deleteAfterConsumeEv>:

    virtual bool deleteAfterConsume() const { return false; }	///< Tells the dispatcher if the event must be deleted or not.
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	2300      	movs	r3, #0
 8010852:	4618      	mov	r0, r3
 8010854:	370c      	adds	r7, #12
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
	...

08010860 <_ZN9interface11GuiObserverC1Ev>:
    virtual void onCheckBoxTriggerCheckState(bool checked) = 0;

    virtual uint32_t getTDivCount() const = 0;      // Returns the of x-axis grid count

protected:
    GuiObserver() {}
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	4a04      	ldr	r2, [pc, #16]	; (801087c <_ZN9interface11GuiObserverC1Ev+0x1c>)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	601a      	str	r2, [r3, #0]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	4618      	mov	r0, r3
 8010872:	370c      	adds	r7, #12
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	0801c568 	.word	0x0801c568

08010880 <_ZN10XFBehavior15scheduleTimeoutEii>:
     *
     * Will work only if the current event is of type IXFEvent::Timeout.
     */
    const XFTimeout * getCurrentTimeout();

    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 8010880:	b590      	push	{r4, r7, lr}
 8010882:	b085      	sub	sp, #20
 8010884:	af00      	add	r7, sp, #0
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	60b9      	str	r1, [r7, #8]
 801088a:	607a      	str	r2, [r7, #4]
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	f001 fb64 	bl	8011f5a <_ZN10XFBehavior13getDispatcherEv>
 8010892:	6803      	ldr	r3, [r0, #0]
 8010894:	3318      	adds	r3, #24
 8010896:	681c      	ldr	r4, [r3, #0]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	68b9      	ldr	r1, [r7, #8]
 801089e:	47a0      	blx	r4
 80108a0:	bf00      	nop
 80108a2:	3714      	adds	r7, #20
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd90      	pop	{r4, r7, pc}

080108a8 <_ZNK12oscilloscope10Controller12getTDivCountEv>:
	// GuiObserver interface implementation
protected:
    void onButtonTimePlusPressed() override;
    void onButtonTimeMinusPressed() override;
    void onCheckBoxTriggerCheckState(bool checked) override;
    uint32_t getTDivCount() const override { return 8; };
 80108a8:	b480      	push	{r7}
 80108aa:	b083      	sub	sp, #12
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	2308      	movs	r3, #8
 80108b2:	4618      	mov	r0, r3
 80108b4:	370c      	adds	r7, #12
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr

080108be <_ZThn16_NK12oscilloscope10Controller12getTDivCountEv>:
 80108be:	f1a0 0010 	sub.w	r0, r0, #16
 80108c2:	e7f1      	b.n	80108a8 <_ZNK12oscilloscope10Controller12getTDivCountEv>

080108c4 <_ZNK12oscilloscope10Controller3guiEv>:

protected:
	void doShowAnalogSignal();
	void doButtonTimePlusPressed();
	void doButtonTimeMinusPressed();
	inline Gui & gui() const { assert(_pGui); return *_pGui; }
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	695b      	ldr	r3, [r3, #20]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d105      	bne.n	80108e0 <_ZNK12oscilloscope10Controller3guiEv+0x1c>
 80108d4:	4b05      	ldr	r3, [pc, #20]	; (80108ec <_ZNK12oscilloscope10Controller3guiEv+0x28>)
 80108d6:	4a06      	ldr	r2, [pc, #24]	; (80108f0 <_ZNK12oscilloscope10Controller3guiEv+0x2c>)
 80108d8:	2142      	movs	r1, #66	; 0x42
 80108da:	4806      	ldr	r0, [pc, #24]	; (80108f4 <_ZNK12oscilloscope10Controller3guiEv+0x30>)
 80108dc:	f009 f92e 	bl	8019b3c <__assert_func>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	695b      	ldr	r3, [r3, #20]
 80108e4:	4618      	mov	r0, r3
 80108e6:	3708      	adds	r7, #8
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	0801b924 	.word	0x0801b924
 80108f0:	0801b92c 	.word	0x0801b92c
 80108f4:	0801b968 	.word	0x0801b968

080108f8 <_ZN12oscilloscope10ControllerC1Ev>:
                                               {TDIV_1ms,     "1 ms / div"},
                                               {TDIV_2ms,     "2 ms / div"},
                                               {TDIV_5ms,     "5 ms / div"},
                                               {TDIV_10ms,   "10 ms / div"}};

Controller::Controller() :
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
    _pGui(nullptr),
    _adcValuesBuffer(nullptr),
	_adcValuesBufferSize(0),
	_tdivValue(TDIV_1ms)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2100      	movs	r1, #0
 8010904:	4618      	mov	r0, r3
 8010906:	f001 fa41 	bl	8011d8c <_ZN10XFBehaviorC1Eb>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	3310      	adds	r3, #16
 801090e:	4618      	mov	r0, r3
 8010910:	f7ff ffa6 	bl	8010860 <_ZN9interface11GuiObserverC1Ev>
 8010914:	4a15      	ldr	r2, [pc, #84]	; (801096c <_ZN12oscilloscope10ControllerC1Ev+0x74>)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	601a      	str	r2, [r3, #0]
 801091a:	4a15      	ldr	r2, [pc, #84]	; (8010970 <_ZN12oscilloscope10ControllerC1Ev+0x78>)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	611a      	str	r2, [r3, #16]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2200      	movs	r2, #0
 8010924:	615a      	str	r2, [r3, #20]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2200      	movs	r2, #0
 801092a:	619a      	str	r2, [r3, #24]
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2200      	movs	r2, #0
 8010930:	61da      	str	r2, [r3, #28]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2200      	movs	r2, #0
 8010936:	621a      	str	r2, [r3, #32]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2214      	movs	r2, #20
 801093c:	625a      	str	r2, [r3, #36]	; 0x24
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2202      	movs	r2, #2
 8010942:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
{
    assert(!_pInstance);    // Only one instance of this class allowed!
 8010946:	4b0b      	ldr	r3, [pc, #44]	; (8010974 <_ZN12oscilloscope10ControllerC1Ev+0x7c>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d005      	beq.n	801095a <_ZN12oscilloscope10ControllerC1Ev+0x62>
 801094e:	4b0a      	ldr	r3, [pc, #40]	; (8010978 <_ZN12oscilloscope10ControllerC1Ev+0x80>)
 8010950:	4a0a      	ldr	r2, [pc, #40]	; (801097c <_ZN12oscilloscope10ControllerC1Ev+0x84>)
 8010952:	2119      	movs	r1, #25
 8010954:	480a      	ldr	r0, [pc, #40]	; (8010980 <_ZN12oscilloscope10ControllerC1Ev+0x88>)
 8010956:	f009 f8f1 	bl	8019b3c <__assert_func>
    _pInstance = this;
 801095a:	4a06      	ldr	r2, [pc, #24]	; (8010974 <_ZN12oscilloscope10ControllerC1Ev+0x7c>)
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6013      	str	r3, [r2, #0]
}
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	4618      	mov	r0, r3
 8010964:	3708      	adds	r7, #8
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	0801c5c4 	.word	0x0801c5c4
 8010970:	0801c5fc 	.word	0x0801c5fc
 8010974:	200019cc 	.word	0x200019cc
 8010978:	0801b9e4 	.word	0x0801b9e4
 801097c:	0801b9f0 	.word	0x0801b9f0
 8010980:	0801ba18 	.word	0x0801ba18

08010984 <_ZN12oscilloscope10Controller12processEventEv>:
{
    startBehavior();
}

XFEventStatus Controller::processEvent()
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
    if (!_adcValuesBuffer)
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	699b      	ldr	r3, [r3, #24]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d102      	bne.n	801099a <_ZN12oscilloscope10Controller12processEventEv+0x16>
    {
        Trace::out("oscilloscope::Controller Error: Attribute '_adcValuesBuffer' not set!");
 8010994:	4850      	ldr	r0, [pc, #320]	; (8010ad8 <_ZN12oscilloscope10Controller12processEventEv+0x154>)
 8010996:	f000 ff77 	bl	8011888 <_ZN5Trace3outEPKcz>
    }

    assert(_adcValuesBuffer);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	699b      	ldr	r3, [r3, #24]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d105      	bne.n	80109ae <_ZN12oscilloscope10Controller12processEventEv+0x2a>
 80109a2:	4b4e      	ldr	r3, [pc, #312]	; (8010adc <_ZN12oscilloscope10Controller12processEventEv+0x158>)
 80109a4:	4a4e      	ldr	r2, [pc, #312]	; (8010ae0 <_ZN12oscilloscope10Controller12processEventEv+0x15c>)
 80109a6:	2139      	movs	r1, #57	; 0x39
 80109a8:	484e      	ldr	r0, [pc, #312]	; (8010ae4 <_ZN12oscilloscope10Controller12processEventEv+0x160>)
 80109aa:	f009 f8c7 	bl	8019b3c <__assert_func>
    assert(_adcValuesBufferSize > 0);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	69db      	ldr	r3, [r3, #28]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d105      	bne.n	80109c2 <_ZN12oscilloscope10Controller12processEventEv+0x3e>
 80109b6:	4b4c      	ldr	r3, [pc, #304]	; (8010ae8 <_ZN12oscilloscope10Controller12processEventEv+0x164>)
 80109b8:	4a49      	ldr	r2, [pc, #292]	; (8010ae0 <_ZN12oscilloscope10Controller12processEventEv+0x15c>)
 80109ba:	213a      	movs	r1, #58	; 0x3a
 80109bc:	4849      	ldr	r0, [pc, #292]	; (8010ae4 <_ZN12oscilloscope10Controller12processEventEv+0x160>)
 80109be:	f009 f8bd 	bl	8019b3c <__assert_func>

	if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4618      	mov	r0, r3
 80109c6:	f001 fae2 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 80109ca:	4603      	mov	r3, r0
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7ff fa8f 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	bf0c      	ite	eq
 80109d8:	2301      	moveq	r3, #1
 80109da:	2300      	movne	r3, #0
 80109dc:	b2db      	uxtb	r3, r3
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d00a      	beq.n	80109f8 <_ZN12oscilloscope10Controller12processEventEv+0x74>
	{
		scheduleTimeout(TIMEOUT_ID, TIMEOUT_INTERVAL);
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6a19      	ldr	r1, [r3, #32]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ec:	461a      	mov	r2, r3
 80109ee:	f7ff ff47 	bl	8010880 <_ZN10XFBehavior15scheduleTimeoutEii>

		doShowAnalogSignal();
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 f8ec 	bl	8010bd0 <_ZN12oscilloscope10Controller18doShowAnalogSignalEv>
	}

	if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	4618      	mov	r0, r3
 80109fc:	f001 fac7 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 8010a00:	4603      	mov	r3, r0
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7ff fa74 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	2b04      	cmp	r3, #4
 8010a0c:	d10e      	bne.n	8010a2c <_ZN12oscilloscope10Controller12processEventEv+0xa8>
		getCurrentTimeout()->getId() == TIMEOUT_ID)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4618      	mov	r0, r3
 8010a12:	f001 fac9 	bl	8011fa8 <_ZN10XFBehavior17getCurrentTimeoutEv>
 8010a16:	4603      	mov	r3, r0
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7ff fa76 	bl	800ff0a <_ZNK7XFEvent5getIdEv>
 8010a1e:	4602      	mov	r2, r0
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6a1b      	ldr	r3, [r3, #32]
	if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d101      	bne.n	8010a2c <_ZN12oscilloscope10Controller12processEventEv+0xa8>
 8010a28:	2301      	movs	r3, #1
 8010a2a:	e000      	b.n	8010a2e <_ZN12oscilloscope10Controller12processEventEv+0xaa>
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d00a      	beq.n	8010a48 <_ZN12oscilloscope10Controller12processEventEv+0xc4>
	{
		scheduleTimeout(TIMEOUT_ID, TIMEOUT_INTERVAL);
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6a19      	ldr	r1, [r3, #32]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	f7ff ff1f 	bl	8010880 <_ZN10XFBehavior15scheduleTimeoutEii>

		doShowAnalogSignal();
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f000 f8c4 	bl	8010bd0 <_ZN12oscilloscope10Controller18doShowAnalogSignalEv>
	}

	if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f001 fa9f 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 8010a50:	4603      	mov	r3, r0
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7ff fa4c 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b03      	cmp	r3, #3
 8010a5c:	d10c      	bne.n	8010a78 <_ZN12oscilloscope10Controller12processEventEv+0xf4>
		getCurrentEvent()->getId() == BTN_PLUS_ID)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	4618      	mov	r0, r3
 8010a62:	f001 fa94 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 8010a66:	4603      	mov	r3, r0
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7ff fa4e 	bl	800ff0a <_ZNK7XFEvent5getIdEv>
 8010a6e:	4603      	mov	r3, r0
	if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d101      	bne.n	8010a78 <_ZN12oscilloscope10Controller12processEventEv+0xf4>
 8010a74:	2301      	movs	r3, #1
 8010a76:	e000      	b.n	8010a7a <_ZN12oscilloscope10Controller12processEventEv+0xf6>
 8010a78:	2300      	movs	r3, #0
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d002      	beq.n	8010a84 <_ZN12oscilloscope10Controller12processEventEv+0x100>
	{
		doButtonTimePlusPressed();
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f000 f8b0 	bl	8010be4 <_ZN12oscilloscope10Controller23doButtonTimePlusPressedEv>
	}

	if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	4618      	mov	r0, r3
 8010a88:	f001 fa81 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7ff fa2e 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b03      	cmp	r3, #3
 8010a98:	d10c      	bne.n	8010ab4 <_ZN12oscilloscope10Controller12processEventEv+0x130>
		getCurrentEvent()->getId() == BTN_MINUS_ID)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f001 fa76 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7ff fa30 	bl	800ff0a <_ZNK7XFEvent5getIdEv>
 8010aaa:	4603      	mov	r3, r0
	if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d101      	bne.n	8010ab4 <_ZN12oscilloscope10Controller12processEventEv+0x130>
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	e000      	b.n	8010ab6 <_ZN12oscilloscope10Controller12processEventEv+0x132>
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d002      	beq.n	8010ac0 <_ZN12oscilloscope10Controller12processEventEv+0x13c>
	{
		doButtonTimeMinusPressed();
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f000 f8bf 	bl	8010c3e <_ZN12oscilloscope10Controller24doButtonTimeMinusPressedEv>
	}

	return XFEventStatus::Consumed;
 8010ac0:	f107 030c 	add.w	r3, r7, #12
 8010ac4:	2101      	movs	r1, #1
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7ff fa2b 	bl	800ff22 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 8010acc:	7b3b      	ldrb	r3, [r7, #12]
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3710      	adds	r7, #16
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	0801baec 	.word	0x0801baec
 8010adc:	0801bb34 	.word	0x0801bb34
 8010ae0:	0801bb48 	.word	0x0801bb48
 8010ae4:	0801ba18 	.word	0x0801ba18
 8010ae8:	0801bb88 	.word	0x0801bb88

08010aec <_ZN12oscilloscope10Controller23onButtonTimePlusPressedEv>:

void Controller::onButtonTimePlusPressed()
{
 8010aec:	b590      	push	{r4, r7, lr}
 8010aee:	b085      	sub	sp, #20
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
	XFEvent* evButtonPlus =new XFEvent(XFEvent::Event, BTN_PLUS_ID, this);
 8010af4:	2010      	movs	r0, #16
 8010af6:	f008 fdfa 	bl	80196ee <_Znwj>
 8010afa:	4603      	mov	r3, r0
 8010afc:	461c      	mov	r4, r3
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2200      	movs	r2, #0
 8010b02:	2103      	movs	r1, #3
 8010b04:	4620      	mov	r0, r4
 8010b06:	f7ff fe61 	bl	80107cc <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 8010b0a:	60fc      	str	r4, [r7, #12]

	pushEvent(evButtonPlus);
 8010b0c:	6878      	ldr	r0, [r7, #4]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	330c      	adds	r3, #12
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	2200      	movs	r2, #0
 8010b18:	68f9      	ldr	r1, [r7, #12]
 8010b1a:	4798      	blx	r3
}
 8010b1c:	bf00      	nop
 8010b1e:	3714      	adds	r7, #20
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd90      	pop	{r4, r7, pc}

08010b24 <_ZThn16_N12oscilloscope10Controller23onButtonTimePlusPressedEv>:
    void onButtonTimePlusPressed() override;
 8010b24:	f1a0 0010 	sub.w	r0, r0, #16
 8010b28:	f7ff bfe0 	b.w	8010aec <_ZN12oscilloscope10Controller23onButtonTimePlusPressedEv>

08010b2c <_ZN12oscilloscope10Controller24onButtonTimeMinusPressedEv>:

void Controller::onButtonTimeMinusPressed()
{
 8010b2c:	b590      	push	{r4, r7, lr}
 8010b2e:	b085      	sub	sp, #20
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
	XFEvent* evButtonMinus =new XFEvent(XFEvent::Event, BTN_MINUS_ID, this);
 8010b34:	2010      	movs	r0, #16
 8010b36:	f008 fdda 	bl	80196ee <_Znwj>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	461c      	mov	r4, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2201      	movs	r2, #1
 8010b42:	2103      	movs	r1, #3
 8010b44:	4620      	mov	r0, r4
 8010b46:	f7ff fe41 	bl	80107cc <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 8010b4a:	60fc      	str	r4, [r7, #12]

	pushEvent(evButtonMinus);
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	330c      	adds	r3, #12
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2200      	movs	r2, #0
 8010b58:	68f9      	ldr	r1, [r7, #12]
 8010b5a:	4798      	blx	r3
}
 8010b5c:	bf00      	nop
 8010b5e:	3714      	adds	r7, #20
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd90      	pop	{r4, r7, pc}

08010b64 <_ZThn16_N12oscilloscope10Controller24onButtonTimeMinusPressedEv>:
    void onButtonTimeMinusPressed() override;
 8010b64:	f1a0 0010 	sub.w	r0, r0, #16
 8010b68:	f7ff bfe0 	b.w	8010b2c <_ZN12oscilloscope10Controller24onButtonTimeMinusPressedEv>

08010b6c <_ZN12oscilloscope10Controller27onCheckBoxTriggerCheckStateEb>:

void Controller::onCheckBoxTriggerCheckState(bool checked)
{
 8010b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	460b      	mov	r3, r1
 8010b76:	70fb      	strb	r3, [r7, #3]
    Trace::out("Trigger checkbox: %s", (checked) ? "checked" : "unchecked");
 8010b78:	78fb      	ldrb	r3, [r7, #3]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d001      	beq.n	8010b82 <_ZN12oscilloscope10Controller27onCheckBoxTriggerCheckStateEb+0x16>
 8010b7e:	4b0f      	ldr	r3, [pc, #60]	; (8010bbc <_ZN12oscilloscope10Controller27onCheckBoxTriggerCheckStateEb+0x50>)
 8010b80:	e000      	b.n	8010b84 <_ZN12oscilloscope10Controller27onCheckBoxTriggerCheckStateEb+0x18>
 8010b82:	4b0f      	ldr	r3, [pc, #60]	; (8010bc0 <_ZN12oscilloscope10Controller27onCheckBoxTriggerCheckStateEb+0x54>)
 8010b84:	4619      	mov	r1, r3
 8010b86:	480f      	ldr	r0, [pc, #60]	; (8010bc4 <_ZN12oscilloscope10Controller27onCheckBoxTriggerCheckStateEb+0x58>)
 8010b88:	f000 fe7e 	bl	8011888 <_ZN5Trace3outEPKcz>

    GEN(evCheckBoxTrigger(checked, CHECK_BOX_TRIGGER_ID));
 8010b8c:	687d      	ldr	r5, [r7, #4]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	330c      	adds	r3, #12
 8010b94:	681c      	ldr	r4, [r3, #0]
 8010b96:	2014      	movs	r0, #20
 8010b98:	f008 fda9 	bl	80196ee <_Znwj>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	461e      	mov	r6, r3
 8010ba0:	78fb      	ldrb	r3, [r7, #3]
 8010ba2:	2202      	movs	r2, #2
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	4630      	mov	r0, r6
 8010ba8:	f000 f9f8 	bl	8010f9c <_ZN17evCheckBoxTriggerC1Ebi>
 8010bac:	2200      	movs	r2, #0
 8010bae:	4631      	mov	r1, r6
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	47a0      	blx	r4
}
 8010bb4:	bf00      	nop
 8010bb6:	370c      	adds	r7, #12
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bbc:	0801bba4 	.word	0x0801bba4
 8010bc0:	0801bbac 	.word	0x0801bbac
 8010bc4:	0801bbb8 	.word	0x0801bbb8

08010bc8 <_ZThn16_N12oscilloscope10Controller27onCheckBoxTriggerCheckStateEb>:
    void onCheckBoxTriggerCheckState(bool checked) override;
 8010bc8:	f1a0 0010 	sub.w	r0, r0, #16
 8010bcc:	f7ff bfce 	b.w	8010b6c <_ZN12oscilloscope10Controller27onCheckBoxTriggerCheckStateEb>

08010bd0 <_ZN12oscilloscope10Controller18doShowAnalogSignalEv>:

void Controller::doShowAnalogSignal()
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
	// TODO: Call gui().drawGraphPoints() with the appropriate data.
}
 8010bd8:	bf00      	nop
 8010bda:	370c      	adds	r7, #12
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <_ZN12oscilloscope10Controller23doButtonTimePlusPressedEv>:

void Controller::doButtonTimePlusPressed()
{
 8010be4:	b590      	push	{r4, r7, lr}
 8010be6:	b089      	sub	sp, #36	; 0x24
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
    if (_tdivValue < (TDIV_MAX - 1))
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010bf2:	2b04      	cmp	r3, #4
 8010bf4:	d81f      	bhi.n	8010c36 <_ZN12oscilloscope10Controller23doButtonTimePlusPressedEv+0x52>
    {
        _tdivValue = (TDivValue)(_tdivValue + 1);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	b2da      	uxtb	r2, r3
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        gui().setTimeDivisionText(getText(_tdivValue));
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f7ff fe5c 	bl	80108c4 <_ZNK12oscilloscope10Controller3guiEv>
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8010c14:	f107 0308 	add.w	r3, r7, #8
 8010c18:	6879      	ldr	r1, [r7, #4]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f000 f83c 	bl	8010c98 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE>
 8010c20:	f107 0308 	add.w	r3, r7, #8
 8010c24:	4619      	mov	r1, r3
 8010c26:	4620      	mov	r0, r4
 8010c28:	f7ff fd70 	bl	801070c <_ZN12oscilloscope3Gui19setTimeDivisionTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8010c2c:	f107 0308 	add.w	r3, r7, #8
 8010c30:	4618      	mov	r0, r3
 8010c32:	f008 fe51 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
}
 8010c36:	bf00      	nop
 8010c38:	3724      	adds	r7, #36	; 0x24
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd90      	pop	{r4, r7, pc}

08010c3e <_ZN12oscilloscope10Controller24doButtonTimeMinusPressedEv>:

void Controller::doButtonTimeMinusPressed()
{
 8010c3e:	b590      	push	{r4, r7, lr}
 8010c40:	b089      	sub	sp, #36	; 0x24
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	6078      	str	r0, [r7, #4]
    if (_tdivValue > (TDIV_MIN + 1))
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010c4c:	2b01      	cmp	r3, #1
 8010c4e:	d91f      	bls.n	8010c90 <_ZN12oscilloscope10Controller24doButtonTimeMinusPressedEv+0x52>
    {
        _tdivValue = (TDivValue)(_tdivValue - 1);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010c56:	3b01      	subs	r3, #1
 8010c58:	b2da      	uxtb	r2, r3
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        gui().setTimeDivisionText(getText(_tdivValue));
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f7ff fe2f 	bl	80108c4 <_ZNK12oscilloscope10Controller3guiEv>
 8010c66:	4604      	mov	r4, r0
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8010c6e:	f107 0308 	add.w	r3, r7, #8
 8010c72:	6879      	ldr	r1, [r7, #4]
 8010c74:	4618      	mov	r0, r3
 8010c76:	f000 f80f 	bl	8010c98 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE>
 8010c7a:	f107 0308 	add.w	r3, r7, #8
 8010c7e:	4619      	mov	r1, r3
 8010c80:	4620      	mov	r0, r4
 8010c82:	f7ff fd43 	bl	801070c <_ZN12oscilloscope3Gui19setTimeDivisionTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8010c86:	f107 0308 	add.w	r3, r7, #8
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f008 fe24 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
}
 8010c90:	bf00      	nop
 8010c92:	3724      	adds	r7, #36	; 0x24
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd90      	pop	{r4, r7, pc}

08010c98 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE>:

std::string Controller::getText(TDivValue tdivValue)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b088      	sub	sp, #32
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	71fb      	strb	r3, [r7, #7]
    const uint32_t count = sizeof(_tdivOptions)/sizeof(_tdivOptions[0]);
 8010ca6:	2305      	movs	r3, #5
 8010ca8:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = 0; i < count; i++)
 8010caa:	2300      	movs	r3, #0
 8010cac:	61fb      	str	r3, [r7, #28]
 8010cae:	69fb      	ldr	r3, [r7, #28]
 8010cb0:	2b04      	cmp	r3, #4
 8010cb2:	d81b      	bhi.n	8010cec <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x54>
    {
        if (_tdivOptions[i].tdivValue == tdivValue)
 8010cb4:	4918      	ldr	r1, [pc, #96]	; (8010d18 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x80>)
 8010cb6:	69fa      	ldr	r2, [r7, #28]
 8010cb8:	4613      	mov	r3, r2
 8010cba:	00db      	lsls	r3, r3, #3
 8010cbc:	1a9b      	subs	r3, r3, r2
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	440b      	add	r3, r1
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	79fa      	ldrb	r2, [r7, #7]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d10c      	bne.n	8010ce4 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x4c>
        {
            return _tdivOptions[i].text;
 8010cca:	69fa      	ldr	r2, [r7, #28]
 8010ccc:	4613      	mov	r3, r2
 8010cce:	00db      	lsls	r3, r3, #3
 8010cd0:	1a9b      	subs	r3, r3, r2
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	4a10      	ldr	r2, [pc, #64]	; (8010d18 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x80>)
 8010cd6:	4413      	add	r3, r2
 8010cd8:	3304      	adds	r3, #4
 8010cda:	4619      	mov	r1, r3
 8010cdc:	68f8      	ldr	r0, [r7, #12]
 8010cde:	f008 febf 	bl	8019a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010ce2:	e014      	b.n	8010d0e <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x76>
    for (uint32_t i = 0; i < count; i++)
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	61fb      	str	r3, [r7, #28]
 8010cea:	e7e0      	b.n	8010cae <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x16>
        }
    }
    return "n/a";
 8010cec:	f107 0314 	add.w	r3, r7, #20
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f008 fd10 	bl	8019716 <_ZNSaIcEC1Ev>
 8010cf6:	f107 0314 	add.w	r3, r7, #20
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	4907      	ldr	r1, [pc, #28]	; (8010d1c <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x84>)
 8010cfe:	68f8      	ldr	r0, [r7, #12]
 8010d00:	f008 fee2 	bl	8019ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010d04:	f107 0314 	add.w	r3, r7, #20
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f008 fd05 	bl	8019718 <_ZNSaIcED1Ev>
}
 8010d0e:	68f8      	ldr	r0, [r7, #12]
 8010d10:	3720      	adds	r7, #32
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	200019d0 	.word	0x200019d0
 8010d1c:	0801bbd0 	.word	0x0801bbd0

08010d20 <_ZN12oscilloscope10TDivOptionD1Ev>:
} TDivOption;
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	3304      	adds	r3, #4
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f008 fdd3 	bl	80198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	4618      	mov	r0, r3
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <_Z41__static_initialization_and_destruction_0ii>:

}   // namespace oscilloscope
 8010d3c:	b5b0      	push	{r4, r5, r7, lr}
 8010d3e:	b088      	sub	sp, #32
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	6039      	str	r1, [r7, #0]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	d16e      	bne.n	8010e2a <_Z41__static_initialization_and_destruction_0ii+0xee>
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d52:	4293      	cmp	r3, r2
 8010d54:	d169      	bne.n	8010e2a <_Z41__static_initialization_and_destruction_0ii+0xee>
                                               {TDIV_10ms,   "10 ms / div"}};
 8010d56:	4c3f      	ldr	r4, [pc, #252]	; (8010e54 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8010d58:	2301      	movs	r3, #1
 8010d5a:	7023      	strb	r3, [r4, #0]
 8010d5c:	1d25      	adds	r5, r4, #4
 8010d5e:	f107 030c 	add.w	r3, r7, #12
 8010d62:	4618      	mov	r0, r3
 8010d64:	f008 fcd7 	bl	8019716 <_ZNSaIcEC1Ev>
 8010d68:	f107 030c 	add.w	r3, r7, #12
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	493a      	ldr	r1, [pc, #232]	; (8010e58 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8010d70:	4628      	mov	r0, r5
 8010d72:	f008 fea9 	bl	8019ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010d76:	f107 030c 	add.w	r3, r7, #12
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f008 fccc 	bl	8019718 <_ZNSaIcED1Ev>
 8010d80:	341c      	adds	r4, #28
 8010d82:	2302      	movs	r3, #2
 8010d84:	7023      	strb	r3, [r4, #0]
 8010d86:	1d25      	adds	r5, r4, #4
 8010d88:	f107 0310 	add.w	r3, r7, #16
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f008 fcc2 	bl	8019716 <_ZNSaIcEC1Ev>
 8010d92:	f107 0310 	add.w	r3, r7, #16
 8010d96:	461a      	mov	r2, r3
 8010d98:	4930      	ldr	r1, [pc, #192]	; (8010e5c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	f008 fe94 	bl	8019ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010da0:	f107 0310 	add.w	r3, r7, #16
 8010da4:	4618      	mov	r0, r3
 8010da6:	f008 fcb7 	bl	8019718 <_ZNSaIcED1Ev>
 8010daa:	341c      	adds	r4, #28
 8010dac:	2303      	movs	r3, #3
 8010dae:	7023      	strb	r3, [r4, #0]
 8010db0:	1d25      	adds	r5, r4, #4
 8010db2:	f107 0314 	add.w	r3, r7, #20
 8010db6:	4618      	mov	r0, r3
 8010db8:	f008 fcad 	bl	8019716 <_ZNSaIcEC1Ev>
 8010dbc:	f107 0314 	add.w	r3, r7, #20
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	4927      	ldr	r1, [pc, #156]	; (8010e60 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	f008 fe7f 	bl	8019ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010dca:	f107 0314 	add.w	r3, r7, #20
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f008 fca2 	bl	8019718 <_ZNSaIcED1Ev>
 8010dd4:	341c      	adds	r4, #28
 8010dd6:	2304      	movs	r3, #4
 8010dd8:	7023      	strb	r3, [r4, #0]
 8010dda:	1d25      	adds	r5, r4, #4
 8010ddc:	f107 0318 	add.w	r3, r7, #24
 8010de0:	4618      	mov	r0, r3
 8010de2:	f008 fc98 	bl	8019716 <_ZNSaIcEC1Ev>
 8010de6:	f107 0318 	add.w	r3, r7, #24
 8010dea:	461a      	mov	r2, r3
 8010dec:	491d      	ldr	r1, [pc, #116]	; (8010e64 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8010dee:	4628      	mov	r0, r5
 8010df0:	f008 fe6a 	bl	8019ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010df4:	f107 0318 	add.w	r3, r7, #24
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f008 fc8d 	bl	8019718 <_ZNSaIcED1Ev>
 8010dfe:	f104 031c 	add.w	r3, r4, #28
 8010e02:	2205      	movs	r2, #5
 8010e04:	701a      	strb	r2, [r3, #0]
 8010e06:	1d1c      	adds	r4, r3, #4
 8010e08:	f107 031c 	add.w	r3, r7, #28
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f008 fc82 	bl	8019716 <_ZNSaIcEC1Ev>
 8010e12:	f107 031c 	add.w	r3, r7, #28
 8010e16:	461a      	mov	r2, r3
 8010e18:	4913      	ldr	r1, [pc, #76]	; (8010e68 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f008 fe54 	bl	8019ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010e20:	f107 031c 	add.w	r3, r7, #28
 8010e24:	4618      	mov	r0, r3
 8010e26:	f008 fc77 	bl	8019718 <_ZNSaIcED1Ev>
const TDivOption Controller::_tdivOptions[] = {{TDIV_500us, "500 us / div"},
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d10d      	bne.n	8010e4c <_Z41__static_initialization_and_destruction_0ii+0x110>
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d108      	bne.n	8010e4c <_Z41__static_initialization_and_destruction_0ii+0x110>
 8010e3a:	4c0c      	ldr	r4, [pc, #48]	; (8010e6c <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8010e3c:	4b05      	ldr	r3, [pc, #20]	; (8010e54 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8010e3e:	429c      	cmp	r4, r3
 8010e40:	d004      	beq.n	8010e4c <_Z41__static_initialization_and_destruction_0ii+0x110>
 8010e42:	3c1c      	subs	r4, #28
 8010e44:	4620      	mov	r0, r4
 8010e46:	f7ff ff6b 	bl	8010d20 <_ZN12oscilloscope10TDivOptionD1Ev>
 8010e4a:	e7f7      	b.n	8010e3c <_Z41__static_initialization_and_destruction_0ii+0x100>
}   // namespace oscilloscope
 8010e4c:	bf00      	nop
 8010e4e:	3720      	adds	r7, #32
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bdb0      	pop	{r4, r5, r7, pc}
 8010e54:	200019d0 	.word	0x200019d0
 8010e58:	0801bbd4 	.word	0x0801bbd4
 8010e5c:	0801bbe4 	.word	0x0801bbe4
 8010e60:	0801bbf0 	.word	0x0801bbf0
 8010e64:	0801bbfc 	.word	0x0801bbfc
 8010e68:	0801bc08 	.word	0x0801bc08
 8010e6c:	20001a5c 	.word	0x20001a5c

08010e70 <_GLOBAL__sub_I__ZN12oscilloscope10Controller10_pInstanceE>:
 8010e70:	b580      	push	{r7, lr}
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010e78:	2001      	movs	r0, #1
 8010e7a:	f7ff ff5f 	bl	8010d3c <_Z41__static_initialization_and_destruction_0ii>
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <_GLOBAL__sub_D__ZN12oscilloscope10Controller10_pInstanceE>:
 8010e80:	b580      	push	{r7, lr}
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010e88:	2000      	movs	r0, #0
 8010e8a:	f7ff ff57 	bl	8010d3c <_Z41__static_initialization_and_destruction_0ii>
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <_ZNK13XFCustomEvent18deleteAfterConsumeEv>:

    /**
     * @brief Tells the XF if the event should be deleted after processing.
     * @return True if the event should be deleted.
     */
    bool deleteAfterConsume() const override { return bDeleteAfterConsume_; }
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	7c1b      	ldrb	r3, [r3, #16]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	370c      	adds	r7, #12
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	4770      	bx	lr

08010ea8 <_ZN13XFCustomEvent21setDeleteAfterConsumeEb>:
protected:
    /**
     * @brief Setter for #_bDeleteAfterConsume attribute.
     * @param bDeleteAfterConsume Parameter to be assigned. Default: true.
     */
    void setDeleteAfterConsume(bool bDeleteAfterConsume = true) { bDeleteAfterConsume_ = bDeleteAfterConsume; }
 8010ea8:	b480      	push	{r7}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	70fb      	strb	r3, [r7, #3]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	78fa      	ldrb	r2, [r7, #3]
 8010eb8:	741a      	strb	r2, [r3, #16]
 8010eba:	bf00      	nop
 8010ebc:	370c      	adds	r7, #12
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec4:	4770      	bx	lr
	...

08010ec8 <_ZN13XFCustomEventD1Ev>:
class XFCustomEvent : public XFEvent
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b082      	sub	sp, #8
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	4a05      	ldr	r2, [pc, #20]	; (8010ee8 <_ZN13XFCustomEventD1Ev+0x20>)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	601a      	str	r2, [r3, #0]
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7ff fc95 	bl	8010808 <_ZN7XFEventD1Ev>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	0801c644 	.word	0x0801c644

08010eec <_ZN13XFCustomEventD0Ev>:
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f7ff ffe7 	bl	8010ec8 <_ZN13XFCustomEventD1Ev>
 8010efa:	2114      	movs	r1, #20
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f008 fbe5 	bl	80196cc <_ZdlPvj>
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	4618      	mov	r0, r3
 8010f06:	3708      	adds	r7, #8
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <_ZN11evButtonIrqC1Ev>:
#include "events.h"
#include "evbuttonirq.h"

evButtonIrq::evButtonIrq() :
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
    XFCustomEvent(evButtonIrqId)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2200      	movs	r2, #0
 8010f18:	2101      	movs	r1, #1
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f001 f866 	bl	8011fec <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8010f20:	4a06      	ldr	r2, [pc, #24]	; (8010f3c <_ZN11evButtonIrqC1Ev+0x30>)
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	601a      	str	r2, [r3, #0]
{
	setDeleteAfterConsume(false);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2100      	movs	r1, #0
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7ff ffbc 	bl	8010ea8 <_ZN13XFCustomEvent21setDeleteAfterConsumeEb>
}
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	4618      	mov	r0, r3
 8010f34:	3708      	adds	r7, #8
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	0801c630 	.word	0x0801c630

08010f40 <_ZN11evButtonIrqD1Ev>:
#define EVBUTTONIRQ_H

#include "xf/customevent.h"
#include "events.h"

class evButtonIrq : public XFCustomEvent
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b082      	sub	sp, #8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	4a05      	ldr	r2, [pc, #20]	; (8010f60 <_ZN11evButtonIrqD1Ev+0x20>)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	601a      	str	r2, [r3, #0]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7ff ffb9 	bl	8010ec8 <_ZN13XFCustomEventD1Ev>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	0801c630 	.word	0x0801c630

08010f64 <_ZN11evButtonIrqD0Ev>:
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f7ff ffe7 	bl	8010f40 <_ZN11evButtonIrqD1Ev>
 8010f72:	2114      	movs	r1, #20
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f008 fba9 	bl	80196cc <_ZdlPvj>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3708      	adds	r7, #8
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}

08010f84 <_ZN15evButtonPressed11buttonIndexEv>:
    XFCustomEvent(evButtonPressedId)
{
	_buttonIndex = buttonIndex;
}

uint16_t evButtonPressed::buttonIndex() {
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
	return _buttonIndex;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	8a5b      	ldrh	r3, [r3, #18]
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	370c      	adds	r7, #12
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr

08010f9c <_ZN17evCheckBoxTriggerC1Ebi>:
#include "events.h"
#include "evcheckboxtrigger.h"

evCheckBoxTrigger::evCheckBoxTrigger(bool checked, int eventId) :
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	460b      	mov	r3, r1
 8010fa6:	607a      	str	r2, [r7, #4]
 8010fa8:	72fb      	strb	r3, [r7, #11]
    XFCustomEvent(eventId),
    checked(checked)
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2200      	movs	r2, #0
 8010fae:	6879      	ldr	r1, [r7, #4]
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f001 f81b 	bl	8011fec <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8010fb6:	4a05      	ldr	r2, [pc, #20]	; (8010fcc <_ZN17evCheckBoxTriggerC1Ebi+0x30>)
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	601a      	str	r2, [r3, #0]
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	7afa      	ldrb	r2, [r7, #11]
 8010fc0:	745a      	strb	r2, [r3, #17]
{

}
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3710      	adds	r7, #16
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	0801c658 	.word	0x0801c658

08010fd0 <_ZN17evCheckBoxTriggerD1Ev>:

#include "xf/customevent.h"
#include "events.h"
#include <stdint.h>

class evCheckBoxTrigger : public XFCustomEvent
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	4a05      	ldr	r2, [pc, #20]	; (8010ff0 <_ZN17evCheckBoxTriggerD1Ev+0x20>)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	601a      	str	r2, [r3, #0]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7ff ff71 	bl	8010ec8 <_ZN13XFCustomEventD1Ev>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	0801c658 	.word	0x0801c658

08010ff4 <_ZN17evCheckBoxTriggerD0Ev>:
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f7ff ffe7 	bl	8010fd0 <_ZN17evCheckBoxTriggerD1Ev>
 8011002:	2114      	movs	r1, #20
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f008 fb61 	bl	80196cc <_ZdlPvj>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	4618      	mov	r0, r3
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <_ZN8external18FrequencyGeneratorC1Ev>:

namespace external
{

FrequencyGenerator* FrequencyGenerator::_instance = nullptr;
FrequencyGenerator::FrequencyGenerator()
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
{
	assert (_instance==nullptr);
 801101c:	4b0d      	ldr	r3, [pc, #52]	; (8011054 <_ZN8external18FrequencyGeneratorC1Ev+0x40>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d005      	beq.n	8011030 <_ZN8external18FrequencyGeneratorC1Ev+0x1c>
 8011024:	4b0c      	ldr	r3, [pc, #48]	; (8011058 <_ZN8external18FrequencyGeneratorC1Ev+0x44>)
 8011026:	4a0d      	ldr	r2, [pc, #52]	; (801105c <_ZN8external18FrequencyGeneratorC1Ev+0x48>)
 8011028:	210b      	movs	r1, #11
 801102a:	480d      	ldr	r0, [pc, #52]	; (8011060 <_ZN8external18FrequencyGeneratorC1Ev+0x4c>)
 801102c:	f008 fd86 	bl	8019b3c <__assert_func>
	_instance = this;
 8011030:	4a08      	ldr	r2, [pc, #32]	; (8011054 <_ZN8external18FrequencyGeneratorC1Ev+0x40>)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6013      	str	r3, [r2, #0]
	_mode = SINUS;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2200      	movs	r2, #0
 801103a:	711a      	strb	r2, [r3, #4]
	_frequency = 500;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8011042:	601a      	str	r2, [r3, #0]
	_initialized = false;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2200      	movs	r2, #0
 8011048:	715a      	strb	r2, [r3, #5]

}
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	4618      	mov	r0, r3
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}
 8011054:	20001a5c 	.word	0x20001a5c
 8011058:	0801bc14 	.word	0x0801bc14
 801105c:	0801bc28 	.word	0x0801bc28
 8011060:	0801bc5c 	.word	0x0801bc5c

08011064 <_ZN8external18FrequencyGenerator11setWaveFormE6f_mode>:
	{
		_initialized = true;
	}
}

void FrequencyGenerator::setWaveForm(f_mode mode) {
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	460b      	mov	r3, r1
 801106e:	70fb      	strb	r3, [r7, #3]
	_mode = mode;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	78fa      	ldrb	r2, [r7, #3]
 8011074:	711a      	strb	r2, [r3, #4]
	setGen();
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f000 f814 	bl	80110a4 <_ZN8external18FrequencyGenerator6setGenEv>
}
 801107c:	bf00      	nop
 801107e:	3708      	adds	r7, #8
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}

08011084 <_ZN8external18FrequencyGenerator12setFrequencyEm>:

void FrequencyGenerator::setFrequency(uint32_t frequency) {
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	6039      	str	r1, [r7, #0]
	_frequency = frequency;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	683a      	ldr	r2, [r7, #0]
 8011092:	601a      	str	r2, [r3, #0]
	setGen();
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f000 f805 	bl	80110a4 <_ZN8external18FrequencyGenerator6setGenEv>
}
 801109a:	bf00      	nop
 801109c:	3708      	adds	r7, #8
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
	...

080110a4 <_ZN8external18FrequencyGenerator6setGenEv>:

FrequencyGenerator* FrequencyGenerator::getInstance() {
	return _instance;
}

void FrequencyGenerator::setGen() {
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
	if (_initialized )
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	795b      	ldrb	r3, [r3, #5]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d008      	beq.n	80110c6 <_ZN8external18FrequencyGenerator6setGenEv+0x22>
	{
		Ext_FreqGen_Set(_frequency, _mode);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	791b      	ldrb	r3, [r3, #4]
 80110bc:	4619      	mov	r1, r3
 80110be:	4610      	mov	r0, r2
 80110c0:	f000 fc40 	bl	8011944 <Ext_FreqGen_Set>
	}
	else
	{
		trace_out("Frequency Generator not initialized\n");
	}
}
 80110c4:	e002      	b.n	80110cc <_ZN8external18FrequencyGenerator6setGenEv+0x28>
		trace_out("Frequency Generator not initialized\n");
 80110c6:	4803      	ldr	r0, [pc, #12]	; (80110d4 <_ZN8external18FrequencyGenerator6setGenEv+0x30>)
 80110c8:	f000 fb96 	bl	80117f8 <trace_out>
}
 80110cc:	bf00      	nop
 80110ce:	3708      	adds	r7, #8
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	0801bce0 	.word	0x0801bce0

080110d8 <_ZN9interface9ButtonIrqD1Ev>:
 * the ISR calls this method.
 */
class ButtonIrq
{
protected:
    virtual ~ButtonIrq() {}
 80110d8:	b480      	push	{r7}
 80110da:	b083      	sub	sp, #12
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	4a04      	ldr	r2, [pc, #16]	; (80110f4 <_ZN9interface9ButtonIrqD1Ev+0x1c>)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	601a      	str	r2, [r3, #0]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	4618      	mov	r0, r3
 80110ea:	370c      	adds	r7, #12
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr
 80110f4:	0801c6d8 	.word	0x0801c6d8

080110f8 <_ZN9interface9ButtonIrqD0Ev>:
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f7ff ffe9 	bl	80110d8 <_ZN9interface9ButtonIrqD1Ev>
 8011106:	2104      	movs	r1, #4
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f008 fadf 	bl	80196cc <_ZdlPvj>
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	4618      	mov	r0, r3
 8011112:	3708      	adds	r7, #8
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}

08011118 <_ZN9interface9ButtonIrqC1Ev>:

	virtual void onIrq() = 0;	///< @brief Called by the ISR.

protected:
	ButtonIrq() {}              ///< Not allowing to instantiate object of interface.
 8011118:	b480      	push	{r7}
 801111a:	b083      	sub	sp, #12
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	4a04      	ldr	r2, [pc, #16]	; (8011134 <_ZN9interface9ButtonIrqC1Ev+0x1c>)
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	601a      	str	r2, [r3, #0]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4618      	mov	r0, r3
 801112a:	370c      	adds	r7, #12
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr
 8011134:	0801c6d8 	.word	0x0801c6d8

08011138 <_ZN9interface31ButtonsControllerCallbackCallerD1Ev>:
 *
 */
class ButtonsControllerCallbackCaller
{
protected:
    virtual ~ButtonsControllerCallbackCaller() {}
 8011138:	b480      	push	{r7}
 801113a:	b083      	sub	sp, #12
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	4a04      	ldr	r2, [pc, #16]	; (8011154 <_ZN9interface31ButtonsControllerCallbackCallerD1Ev+0x1c>)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	601a      	str	r2, [r3, #0]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	4618      	mov	r0, r3
 801114a:	370c      	adds	r7, #12
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr
 8011154:	0801c6c4 	.word	0x0801c6c4

08011158 <_ZN9interface31ButtonsControllerCallbackCallerD0Ev>:
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f7ff ffe9 	bl	8011138 <_ZN9interface31ButtonsControllerCallbackCallerD1Ev>
 8011166:	2104      	movs	r1, #4
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f008 faaf 	bl	80196cc <_ZdlPvj>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	4618      	mov	r0, r3
 8011172:	3708      	adds	r7, #8
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <_ZN9interface31ButtonsControllerCallbackCallerC1Ev>:
     */
    virtual bool registerCallback(ButtonsControllerCallbackProvider * callbackProvider,
                                  ButtonsControllerCallbackProvider::CallbackMethod callbackMethod) = 0;

protected:
    ButtonsControllerCallbackCaller() {}                        ///< Not allowing to instantiate object of interface.
 8011178:	b480      	push	{r7}
 801117a:	b083      	sub	sp, #12
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	4a04      	ldr	r2, [pc, #16]	; (8011194 <_ZN9interface31ButtonsControllerCallbackCallerC1Ev+0x1c>)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	601a      	str	r2, [r3, #0]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	4618      	mov	r0, r3
 801118a:	370c      	adds	r7, #12
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr
 8011194:	0801c6c4 	.word	0x0801c6c4

08011198 <_ZN17ButtonsControllerC1Ev>:

#include "event/evbuttonirq.h"

ButtonsController * ButtonsController::_pInstance(nullptr);

ButtonsController::ButtonsController()
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7ff ffb8 	bl	8011118 <_ZN9interface9ButtonIrqC1Ev>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	3304      	adds	r3, #4
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7ff ffe3 	bl	8011178 <_ZN9interface31ButtonsControllerCallbackCallerC1Ev>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	3308      	adds	r3, #8
 80111b6:	2100      	movs	r1, #0
 80111b8:	4618      	mov	r0, r3
 80111ba:	f000 fde7 	bl	8011d8c <_ZN10XFBehaviorC1Eb>
 80111be:	4a17      	ldr	r2, [pc, #92]	; (801121c <_ZN17ButtonsControllerC1Ev+0x84>)
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	601a      	str	r2, [r3, #0]
 80111c4:	4a16      	ldr	r2, [pc, #88]	; (8011220 <_ZN17ButtonsControllerC1Ev+0x88>)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	605a      	str	r2, [r3, #4]
 80111ca:	4a16      	ldr	r2, [pc, #88]	; (8011224 <_ZN17ButtonsControllerC1Ev+0x8c>)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	609a      	str	r2, [r3, #8]
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	331c      	adds	r3, #28
 80111d4:	2260      	movs	r2, #96	; 0x60
 80111d6:	2100      	movs	r1, #0
 80111d8:	4618      	mov	r0, r3
 80111da:	f008 fd47 	bl	8019c6c <memset>
{
    assert(!_pInstance);        // Singleton pattern. Only one instance allowed.
 80111de:	4b12      	ldr	r3, [pc, #72]	; (8011228 <_ZN17ButtonsControllerC1Ev+0x90>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d005      	beq.n	80111f2 <_ZN17ButtonsControllerC1Ev+0x5a>
 80111e6:	4b11      	ldr	r3, [pc, #68]	; (801122c <_ZN17ButtonsControllerC1Ev+0x94>)
 80111e8:	4a11      	ldr	r2, [pc, #68]	; (8011230 <_ZN17ButtonsControllerC1Ev+0x98>)
 80111ea:	2113      	movs	r1, #19
 80111ec:	4811      	ldr	r0, [pc, #68]	; (8011234 <_ZN17ButtonsControllerC1Ev+0x9c>)
 80111ee:	f008 fca5 	bl	8019b3c <__assert_func>
    _pInstance = this;          // Store 'this' to static pointer
 80111f2:	4a0d      	ldr	r2, [pc, #52]	; (8011228 <_ZN17ButtonsControllerC1Ev+0x90>)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6013      	str	r3, [r2, #0]

    _currentState = STATE_UNKOWN;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	761a      	strb	r2, [r3, #24]

    // Now the actual state of the buttons can be read
    _currentButtonsValue = readButtonsValue();
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 f8ee 	bl	80113e0 <_ZN17ButtonsController16readButtonsValueEv>
 8011204:	4603      	mov	r3, r0
 8011206:	461a      	mov	r2, r3
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	765a      	strb	r2, [r3, #25]

    _callbacksCount = 0;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2200      	movs	r2, #0
 8011210:	769a      	strb	r2, [r3, #26]
}
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4618      	mov	r0, r3
 8011216:	3708      	adds	r7, #8
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}
 801121c:	0801c66c 	.word	0x0801c66c
 8011220:	0801c688 	.word	0x0801c688
 8011224:	0801c69c 	.word	0x0801c69c
 8011228:	20001a60 	.word	0x20001a60
 801122c:	0801bd08 	.word	0x0801bd08
 8011230:	0801bd14 	.word	0x0801bd14
 8011234:	0801bd3c 	.word	0x0801bd3c

08011238 <_ZN17ButtonsControllerD1Ev>:

ButtonsController::~ButtonsController()
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	4a0d      	ldr	r2, [pc, #52]	; (8011278 <_ZN17ButtonsControllerD1Ev+0x40>)
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	601a      	str	r2, [r3, #0]
 8011246:	4a0d      	ldr	r2, [pc, #52]	; (801127c <_ZN17ButtonsControllerD1Ev+0x44>)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	605a      	str	r2, [r3, #4]
 801124c:	4a0c      	ldr	r2, [pc, #48]	; (8011280 <_ZN17ButtonsControllerD1Ev+0x48>)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	609a      	str	r2, [r3, #8]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	3308      	adds	r3, #8
 8011256:	4618      	mov	r0, r3
 8011258:	f000 fde6 	bl	8011e28 <_ZN10XFBehaviorD1Ev>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	3304      	adds	r3, #4
 8011260:	4618      	mov	r0, r3
 8011262:	f7ff ff69 	bl	8011138 <_ZN9interface31ButtonsControllerCallbackCallerD1Ev>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	4618      	mov	r0, r3
 801126a:	f7ff ff35 	bl	80110d8 <_ZN9interface9ButtonIrqD1Ev>
{

}
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	4618      	mov	r0, r3
 8011272:	3708      	adds	r7, #8
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	0801c66c 	.word	0x0801c66c
 801127c:	0801c688 	.word	0x0801c688
 8011280:	0801c69c 	.word	0x0801c69c

08011284 <_ZThn4_N17ButtonsControllerD1Ev>:
    virtual ~ButtonsController();
 8011284:	f1a0 0004 	sub.w	r0, r0, #4
 8011288:	f7ff bfd6 	b.w	8011238 <_ZN17ButtonsControllerD1Ev>

0801128c <_ZThn8_N17ButtonsControllerD1Ev>:
 801128c:	f1a0 0008 	sub.w	r0, r0, #8
 8011290:	f7ff bfd2 	b.w	8011238 <_ZN17ButtonsControllerD1Ev>

08011294 <_ZN17ButtonsControllerD0Ev>:
ButtonsController::~ButtonsController()
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
}
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7ff ffcb 	bl	8011238 <_ZN17ButtonsControllerD1Ev>
 80112a2:	217c      	movs	r1, #124	; 0x7c
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f008 fa11 	bl	80196cc <_ZdlPvj>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	4618      	mov	r0, r3
 80112ae:	3708      	adds	r7, #8
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <_ZThn8_N17ButtonsControllerD0Ev>:
 80112b4:	f1a0 0008 	sub.w	r0, r0, #8
 80112b8:	f7ff bfec 	b.w	8011294 <_ZN17ButtonsControllerD0Ev>

080112bc <_ZThn4_N17ButtonsControllerD0Ev>:
 80112bc:	f1a0 0004 	sub.w	r0, r0, #4
 80112c0:	f7ff bfe8 	b.w	8011294 <_ZN17ButtonsControllerD0Ev>

080112c4 <__tcf_0>:

void ButtonsController::onIrq()
{
    static evButtonIrq evButtonIrq;
 80112c4:	b580      	push	{r7, lr}
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	4801      	ldr	r0, [pc, #4]	; (80112d0 <__tcf_0+0xc>)
 80112ca:	f7ff fe39 	bl	8010f40 <_ZN11evButtonIrqD1Ev>
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	20001a64 	.word	0x20001a64

080112d4 <_ZN17ButtonsController5onIrqEv>:
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b082      	sub	sp, #8
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
    static evButtonIrq evButtonIrq;
 80112dc:	4b17      	ldr	r3, [pc, #92]	; (801133c <_ZN17ButtonsController5onIrqEv+0x68>)
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	f3bf 8f5b 	dmb	ish
 80112e4:	b2db      	uxtb	r3, r3
 80112e6:	f003 0301 	and.w	r3, r3, #1
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	bf0c      	ite	eq
 80112ee:	2301      	moveq	r3, #1
 80112f0:	2300      	movne	r3, #0
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d013      	beq.n	8011320 <_ZN17ButtonsController5onIrqEv+0x4c>
 80112f8:	4810      	ldr	r0, [pc, #64]	; (801133c <_ZN17ButtonsController5onIrqEv+0x68>)
 80112fa:	f008 f9e9 	bl	80196d0 <__cxa_guard_acquire>
 80112fe:	4603      	mov	r3, r0
 8011300:	2b00      	cmp	r3, #0
 8011302:	bf14      	ite	ne
 8011304:	2301      	movne	r3, #1
 8011306:	2300      	moveq	r3, #0
 8011308:	b2db      	uxtb	r3, r3
 801130a:	2b00      	cmp	r3, #0
 801130c:	d008      	beq.n	8011320 <_ZN17ButtonsController5onIrqEv+0x4c>
 801130e:	480c      	ldr	r0, [pc, #48]	; (8011340 <_ZN17ButtonsController5onIrqEv+0x6c>)
 8011310:	f7ff fdfc 	bl	8010f0c <_ZN11evButtonIrqC1Ev>
 8011314:	480b      	ldr	r0, [pc, #44]	; (8011344 <_ZN17ButtonsController5onIrqEv+0x70>)
 8011316:	f008 fc2f 	bl	8019b78 <atexit>
 801131a:	4808      	ldr	r0, [pc, #32]	; (801133c <_ZN17ButtonsController5onIrqEv+0x68>)
 801131c:	f008 f9e4 	bl	80196e8 <__cxa_guard_release>

    pushEvent(&evButtonIrq, true);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f103 0008 	add.w	r0, r3, #8
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	689b      	ldr	r3, [r3, #8]
 801132a:	330c      	adds	r3, #12
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	2201      	movs	r2, #1
 8011330:	4903      	ldr	r1, [pc, #12]	; (8011340 <_ZN17ButtonsController5onIrqEv+0x6c>)
 8011332:	4798      	blx	r3
}
 8011334:	bf00      	nop
 8011336:	3708      	adds	r7, #8
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}
 801133c:	20001a78 	.word	0x20001a78
 8011340:	20001a64 	.word	0x20001a64
 8011344:	080112c5 	.word	0x080112c5

08011348 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE>:

bool ButtonsController::registerCallback(interface::ButtonsControllerCallbackProvider * callbackProvider,
                                         interface::ButtonsControllerCallbackProvider::CallbackMethod callbackMethod)
{
 8011348:	b480      	push	{r7}
 801134a:	b087      	sub	sp, #28
 801134c:	af00      	add	r7, sp, #0
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	4639      	mov	r1, r7
 8011354:	e881 000c 	stmia.w	r1, {r2, r3}
    if (_callbacksCount < MAX_CALLBACKS)
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	7e9b      	ldrb	r3, [r3, #26]
 801135c:	2b07      	cmp	r3, #7
 801135e:	d834      	bhi.n	80113ca <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x82>
    {
        for (uint8_t i = 0; i < MAX_CALLBACKS; i++)
 8011360:	2300      	movs	r3, #0
 8011362:	75fb      	strb	r3, [r7, #23]
 8011364:	7dfb      	ldrb	r3, [r7, #23]
 8011366:	2b07      	cmp	r3, #7
 8011368:	d82d      	bhi.n	80113c6 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x7e>
        {
            if (_callbackProvider[i].first == nullptr)
 801136a:	7dfa      	ldrb	r2, [r7, #23]
 801136c:	68f9      	ldr	r1, [r7, #12]
 801136e:	4613      	mov	r3, r2
 8011370:	005b      	lsls	r3, r3, #1
 8011372:	4413      	add	r3, r2
 8011374:	009b      	lsls	r3, r3, #2
 8011376:	440b      	add	r3, r1
 8011378:	331c      	adds	r3, #28
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d11e      	bne.n	80113be <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x76>
            {
                _callbackProvider[i].first = callbackProvider;
 8011380:	7dfa      	ldrb	r2, [r7, #23]
 8011382:	68f9      	ldr	r1, [r7, #12]
 8011384:	4613      	mov	r3, r2
 8011386:	005b      	lsls	r3, r3, #1
 8011388:	4413      	add	r3, r2
 801138a:	009b      	lsls	r3, r3, #2
 801138c:	440b      	add	r3, r1
 801138e:	331c      	adds	r3, #28
 8011390:	68ba      	ldr	r2, [r7, #8]
 8011392:	601a      	str	r2, [r3, #0]
                _callbackProvider[i].second = callbackMethod;
 8011394:	7dfa      	ldrb	r2, [r7, #23]
 8011396:	68f9      	ldr	r1, [r7, #12]
 8011398:	4613      	mov	r3, r2
 801139a:	005b      	lsls	r3, r3, #1
 801139c:	4413      	add	r3, r2
 801139e:	009b      	lsls	r3, r3, #2
 80113a0:	440b      	add	r3, r1
 80113a2:	3320      	adds	r3, #32
 80113a4:	461a      	mov	r2, r3
 80113a6:	463b      	mov	r3, r7
 80113a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80113ac:	e882 0003 	stmia.w	r2, {r0, r1}
                _callbacksCount++;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	7e9b      	ldrb	r3, [r3, #26]
 80113b4:	3301      	adds	r3, #1
 80113b6:	b2da      	uxtb	r2, r3
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	769a      	strb	r2, [r3, #26]
                break;
 80113bc:	e003      	b.n	80113c6 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x7e>
        for (uint8_t i = 0; i < MAX_CALLBACKS; i++)
 80113be:	7dfb      	ldrb	r3, [r7, #23]
 80113c0:	3301      	adds	r3, #1
 80113c2:	75fb      	strb	r3, [r7, #23]
 80113c4:	e7ce      	b.n	8011364 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x1c>
            }
        }
        return true;
 80113c6:	2301      	movs	r3, #1
 80113c8:	e000      	b.n	80113cc <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x84>
    }
    return false;
 80113ca:	2300      	movs	r3, #0
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	371c      	adds	r7, #28
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <_ZThn4_N17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE>:

protected:
    void onIrq() override;

public:
    bool registerCallback(interface::ButtonsControllerCallbackProvider * callbackProvider,
 80113d8:	f1a0 0004 	sub.w	r0, r0, #4
 80113dc:	f7ff bfb4 	b.w	8011348 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE>

080113e0 <_ZN17ButtonsController16readButtonsValueEv>:

ButtonsController::tButtonsValue ButtonsController::readButtonsValue()
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
    tButtonsValue value = 0;
 80113e8:	2300      	movs	r3, #0
 80113ea:	73fb      	strb	r3, [r7, #15]

    // Button BTN0
    value |= (HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin) == GPIO_PIN_SET) ? 0x01 : 0x00;
 80113ec:	2104      	movs	r1, #4
 80113ee:	4822      	ldr	r0, [pc, #136]	; (8011478 <_ZN17ButtonsController16readButtonsValueEv+0x98>)
 80113f0:	f7f2 fbcc 	bl	8003b8c <HAL_GPIO_ReadPin>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d101      	bne.n	80113fe <_ZN17ButtonsController16readButtonsValueEv+0x1e>
 80113fa:	2301      	movs	r3, #1
 80113fc:	e000      	b.n	8011400 <_ZN17ButtonsController16readButtonsValueEv+0x20>
 80113fe:	2300      	movs	r3, #0
 8011400:	b25a      	sxtb	r2, r3
 8011402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011406:	4313      	orrs	r3, r2
 8011408:	b25b      	sxtb	r3, r3
 801140a:	73fb      	strb	r3, [r7, #15]

    // Button BTN1
    value |= (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_SET) ? 0x02 : 0x00;
 801140c:	2108      	movs	r1, #8
 801140e:	481a      	ldr	r0, [pc, #104]	; (8011478 <_ZN17ButtonsController16readButtonsValueEv+0x98>)
 8011410:	f7f2 fbbc 	bl	8003b8c <HAL_GPIO_ReadPin>
 8011414:	4603      	mov	r3, r0
 8011416:	2b01      	cmp	r3, #1
 8011418:	d101      	bne.n	801141e <_ZN17ButtonsController16readButtonsValueEv+0x3e>
 801141a:	2302      	movs	r3, #2
 801141c:	e000      	b.n	8011420 <_ZN17ButtonsController16readButtonsValueEv+0x40>
 801141e:	2300      	movs	r3, #0
 8011420:	b25a      	sxtb	r2, r3
 8011422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011426:	4313      	orrs	r3, r2
 8011428:	b25b      	sxtb	r3, r3
 801142a:	73fb      	strb	r3, [r7, #15]

    // Button BTN2
    value |= (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_SET) ? 0x04 : 0x00;
 801142c:	2180      	movs	r1, #128	; 0x80
 801142e:	4813      	ldr	r0, [pc, #76]	; (801147c <_ZN17ButtonsController16readButtonsValueEv+0x9c>)
 8011430:	f7f2 fbac 	bl	8003b8c <HAL_GPIO_ReadPin>
 8011434:	4603      	mov	r3, r0
 8011436:	2b01      	cmp	r3, #1
 8011438:	d101      	bne.n	801143e <_ZN17ButtonsController16readButtonsValueEv+0x5e>
 801143a:	2304      	movs	r3, #4
 801143c:	e000      	b.n	8011440 <_ZN17ButtonsController16readButtonsValueEv+0x60>
 801143e:	2300      	movs	r3, #0
 8011440:	b25a      	sxtb	r2, r3
 8011442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011446:	4313      	orrs	r3, r2
 8011448:	b25b      	sxtb	r3, r3
 801144a:	73fb      	strb	r3, [r7, #15]

    // Button BTN3
    value |= (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == GPIO_PIN_SET) ? 0x08 : 0x00;
 801144c:	2140      	movs	r1, #64	; 0x40
 801144e:	480b      	ldr	r0, [pc, #44]	; (801147c <_ZN17ButtonsController16readButtonsValueEv+0x9c>)
 8011450:	f7f2 fb9c 	bl	8003b8c <HAL_GPIO_ReadPin>
 8011454:	4603      	mov	r3, r0
 8011456:	2b01      	cmp	r3, #1
 8011458:	d101      	bne.n	801145e <_ZN17ButtonsController16readButtonsValueEv+0x7e>
 801145a:	2308      	movs	r3, #8
 801145c:	e000      	b.n	8011460 <_ZN17ButtonsController16readButtonsValueEv+0x80>
 801145e:	2300      	movs	r3, #0
 8011460:	b25a      	sxtb	r2, r3
 8011462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011466:	4313      	orrs	r3, r2
 8011468:	b25b      	sxtb	r3, r3
 801146a:	73fb      	strb	r3, [r7, #15]

    return value;
 801146c:	7bfb      	ldrb	r3, [r7, #15]
}
 801146e:	4618      	mov	r0, r3
 8011470:	3710      	adds	r7, #16
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop
 8011478:	40022000 	.word	0x40022000
 801147c:	40021800 	.word	0x40021800

08011480 <_ZN17ButtonsController12processEventEv>:

XFEventStatus ButtonsController::processEvent()
{
 8011480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011482:	b085      	sub	sp, #20
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
    eMainState newState = _currentState;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	7e1b      	ldrb	r3, [r3, #24]
 801148c:	73fb      	strb	r3, [r7, #15]

    // Handle transition changes
    switch (_currentState)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	7e1b      	ldrb	r3, [r3, #24]
 8011492:	2b03      	cmp	r3, #3
 8011494:	d879      	bhi.n	801158a <_ZN17ButtonsController12processEventEv+0x10a>
 8011496:	a201      	add	r2, pc, #4	; (adr r2, 801149c <_ZN17ButtonsController12processEventEv+0x1c>)
 8011498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801149c:	080114ad 	.word	0x080114ad
 80114a0:	080114d5 	.word	0x080114d5
 80114a4:	080114fd 	.word	0x080114fd
 80114a8:	0801153d 	.word	0x0801153d
    {
    case STATE_UNKOWN:
        // Decouple caller of startBehavior() with
        // the transition from UNKNOWN to INITIAL.
        if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	3308      	adds	r3, #8
 80114b0:	4618      	mov	r0, r3
 80114b2:	f000 fd6c 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 80114b6:	4603      	mov	r3, r0
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7fe fd19 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	bf0c      	ite	eq
 80114c4:	2301      	moveq	r3, #1
 80114c6:	2300      	movne	r3, #0
 80114c8:	b2db      	uxtb	r3, r3
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d056      	beq.n	801157c <_ZN17ButtonsController12processEventEv+0xfc>
        {
            newState = STATE_INITIAL;
 80114ce:	2301      	movs	r3, #1
 80114d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80114d2:	e053      	b.n	801157c <_ZN17ButtonsController12processEventEv+0xfc>
    case STATE_INITIAL:
        if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	3308      	adds	r3, #8
 80114d8:	4618      	mov	r0, r3
 80114da:	f000 fd58 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 80114de:	4603      	mov	r3, r0
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7fe fd05 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 80114e6:	4603      	mov	r3, r0
 80114e8:	2b02      	cmp	r3, #2
 80114ea:	bf0c      	ite	eq
 80114ec:	2301      	moveq	r3, #1
 80114ee:	2300      	movne	r3, #0
 80114f0:	b2db      	uxtb	r3, r3
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d044      	beq.n	8011580 <_ZN17ButtonsController12processEventEv+0x100>
        {
            newState = STATE_CHECK_BUTTONS;
 80114f6:	2302      	movs	r3, #2
 80114f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80114fa:	e041      	b.n	8011580 <_ZN17ButtonsController12processEventEv+0x100>
    case STATE_CHECK_BUTTONS:
        if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	3308      	adds	r3, #8
 8011500:	4618      	mov	r0, r3
 8011502:	f000 fd44 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 8011506:	4603      	mov	r3, r0
 8011508:	4618      	mov	r0, r3
 801150a:	f7fe fcf1 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 801150e:	4603      	mov	r3, r0
 8011510:	2b03      	cmp	r3, #3
 8011512:	d10d      	bne.n	8011530 <_ZN17ButtonsController12processEventEv+0xb0>
            getCurrentEvent()->getId() == evButtonIrqId)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	3308      	adds	r3, #8
 8011518:	4618      	mov	r0, r3
 801151a:	f000 fd38 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 801151e:	4603      	mov	r3, r0
 8011520:	4618      	mov	r0, r3
 8011522:	f7fe fcf2 	bl	800ff0a <_ZNK7XFEvent5getIdEv>
 8011526:	4603      	mov	r3, r0
        if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8011528:	2b01      	cmp	r3, #1
 801152a:	d101      	bne.n	8011530 <_ZN17ButtonsController12processEventEv+0xb0>
 801152c:	2301      	movs	r3, #1
 801152e:	e000      	b.n	8011532 <_ZN17ButtonsController12processEventEv+0xb2>
 8011530:	2300      	movs	r3, #0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d026      	beq.n	8011584 <_ZN17ButtonsController12processEventEv+0x104>
        {
            newState = STATE_DEBOUNCE;
 8011536:	2303      	movs	r3, #3
 8011538:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801153a:	e023      	b.n	8011584 <_ZN17ButtonsController12processEventEv+0x104>
    case STATE_DEBOUNCE:
        if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	3308      	adds	r3, #8
 8011540:	4618      	mov	r0, r3
 8011542:	f000 fd24 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 8011546:	4603      	mov	r3, r0
 8011548:	4618      	mov	r0, r3
 801154a:	f7fe fcd1 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 801154e:	4603      	mov	r3, r0
 8011550:	2b04      	cmp	r3, #4
 8011552:	d10d      	bne.n	8011570 <_ZN17ButtonsController12processEventEv+0xf0>
            getCurrentTimeout()->getId() == Timeout_DEBOUNCE_id)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	3308      	adds	r3, #8
 8011558:	4618      	mov	r0, r3
 801155a:	f000 fd25 	bl	8011fa8 <_ZN10XFBehavior17getCurrentTimeoutEv>
 801155e:	4603      	mov	r3, r0
 8011560:	4618      	mov	r0, r3
 8011562:	f7fe fcd2 	bl	800ff0a <_ZNK7XFEvent5getIdEv>
 8011566:	4603      	mov	r3, r0
        if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8011568:	2b01      	cmp	r3, #1
 801156a:	d101      	bne.n	8011570 <_ZN17ButtonsController12processEventEv+0xf0>
 801156c:	2301      	movs	r3, #1
 801156e:	e000      	b.n	8011572 <_ZN17ButtonsController12processEventEv+0xf2>
 8011570:	2300      	movs	r3, #0
 8011572:	2b00      	cmp	r3, #0
 8011574:	d008      	beq.n	8011588 <_ZN17ButtonsController12processEventEv+0x108>
        {
            newState = STATE_CHECK_BUTTONS;
 8011576:	2302      	movs	r3, #2
 8011578:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801157a:	e005      	b.n	8011588 <_ZN17ButtonsController12processEventEv+0x108>
        break;
 801157c:	bf00      	nop
 801157e:	e004      	b.n	801158a <_ZN17ButtonsController12processEventEv+0x10a>
        break;
 8011580:	bf00      	nop
 8011582:	e002      	b.n	801158a <_ZN17ButtonsController12processEventEv+0x10a>
        break;
 8011584:	bf00      	nop
 8011586:	e000      	b.n	801158a <_ZN17ButtonsController12processEventEv+0x10a>
        break;
 8011588:	bf00      	nop
    }

    // Handle transitions
    if (_currentState != newState)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	7e1b      	ldrb	r3, [r3, #24]
 801158e:	7bfa      	ldrb	r2, [r7, #15]
 8011590:	429a      	cmp	r2, r3
 8011592:	d02e      	beq.n	80115f2 <_ZN17ButtonsController12processEventEv+0x172>
    {
        switch (newState)
 8011594:	7bfb      	ldrb	r3, [r7, #15]
 8011596:	2b03      	cmp	r3, #3
 8011598:	d01f      	beq.n	80115da <_ZN17ButtonsController12processEventEv+0x15a>
 801159a:	2b03      	cmp	r3, #3
 801159c:	dc25      	bgt.n	80115ea <_ZN17ButtonsController12processEventEv+0x16a>
 801159e:	2b01      	cmp	r3, #1
 80115a0:	d002      	beq.n	80115a8 <_ZN17ButtonsController12processEventEv+0x128>
 80115a2:	2b02      	cmp	r3, #2
 80115a4:	d015      	beq.n	80115d2 <_ZN17ButtonsController12processEventEv+0x152>
            break;
        case STATE_DEBOUNCE:
            scheduleTimeout(Timeout_DEBOUNCE_id, BUTTONSCONTROLLER_DEBOUNCE_TIME);
            break;
        default:
            break;
 80115a6:	e020      	b.n	80115ea <_ZN17ButtonsController12processEventEv+0x16a>
            GEN(XFNullTransition());
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f103 0508 	add.w	r5, r3, #8
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	689b      	ldr	r3, [r3, #8]
 80115b2:	330c      	adds	r3, #12
 80115b4:	681c      	ldr	r4, [r3, #0]
 80115b6:	2010      	movs	r0, #16
 80115b8:	f008 f899 	bl	80196ee <_Znwj>
 80115bc:	4603      	mov	r3, r0
 80115be:	461e      	mov	r6, r3
 80115c0:	2100      	movs	r1, #0
 80115c2:	4630      	mov	r0, r6
 80115c4:	f000 fd6e 	bl	80120a4 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 80115c8:	2200      	movs	r2, #0
 80115ca:	4631      	mov	r1, r6
 80115cc:	4628      	mov	r0, r5
 80115ce:	47a0      	blx	r4
            break;
 80115d0:	e00c      	b.n	80115ec <_ZN17ButtonsController12processEventEv+0x16c>
            doCheckButtons();
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f000 f81c 	bl	8011610 <_ZN17ButtonsController14doCheckButtonsEv>
            break;
 80115d8:	e008      	b.n	80115ec <_ZN17ButtonsController12processEventEv+0x16c>
            scheduleTimeout(Timeout_DEBOUNCE_id, BUTTONSCONTROLLER_DEBOUNCE_TIME);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	3308      	adds	r3, #8
 80115de:	220a      	movs	r2, #10
 80115e0:	2101      	movs	r1, #1
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7ff f94c 	bl	8010880 <_ZN10XFBehavior15scheduleTimeoutEii>
            break;
 80115e8:	e000      	b.n	80115ec <_ZN17ButtonsController12processEventEv+0x16c>
            break;
 80115ea:	bf00      	nop
        }

        _currentState = newState;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	7bfa      	ldrb	r2, [r7, #15]
 80115f0:	761a      	strb	r2, [r3, #24]
    }
    return XFEventStatus::Consumed;
 80115f2:	f107 030c 	add.w	r3, r7, #12
 80115f6:	2101      	movs	r1, #1
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fe fc92 	bl	800ff22 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 80115fe:	7b3b      	ldrb	r3, [r7, #12]
}
 8011600:	4618      	mov	r0, r3
 8011602:	3714      	adds	r7, #20
 8011604:	46bd      	mov	sp, r7
 8011606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011608 <_ZThn8_N17ButtonsController12processEventEv>:
                          interface::ButtonsControllerCallbackProvider::CallbackMethod callbackMethod) override;

public:
    XFEventStatus processEvent() override;
 8011608:	f1a0 0008 	sub.w	r0, r0, #8
 801160c:	f7ff bf38 	b.w	8011480 <_ZN17ButtonsController12processEventEv>

08011610 <_ZN17ButtonsController14doCheckButtonsEv>:


void ButtonsController::doCheckButtons()
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b086      	sub	sp, #24
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
    tButtonsValue newButtonsValue = readButtonsValue();
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f7ff fee1 	bl	80113e0 <_ZN17ButtonsController16readButtonsValueEv>
 801161e:	4603      	mov	r3, r0
 8011620:	73fb      	strb	r3, [r7, #15]
    uint8_t mask = 0x01;
 8011622:	2301      	movs	r3, #1
 8011624:	75fb      	strb	r3, [r7, #23]

    if (_currentButtonsValue != newButtonsValue)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	7e5b      	ldrb	r3, [r3, #25]
 801162a:	7bfa      	ldrb	r2, [r7, #15]
 801162c:	429a      	cmp	r2, r3
 801162e:	d027      	beq.n	8011680 <_ZN17ButtonsController14doCheckButtonsEv+0x70>
    {
        for (uint32_t i = 0; i < BUTTONS_COUNT; i++)
 8011630:	2300      	movs	r3, #0
 8011632:	613b      	str	r3, [r7, #16]
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	2b03      	cmp	r3, #3
 8011638:	d81f      	bhi.n	801167a <_ZN17ButtonsController14doCheckButtonsEv+0x6a>
        {
            if ((_currentButtonsValue & mask) != (newButtonsValue & mask))
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	7e5a      	ldrb	r2, [r3, #25]
 801163e:	7bfb      	ldrb	r3, [r7, #15]
 8011640:	4053      	eors	r3, r2
 8011642:	b2da      	uxtb	r2, r3
 8011644:	7dfb      	ldrb	r3, [r7, #23]
 8011646:	4013      	ands	r3, r2
 8011648:	b2db      	uxtb	r3, r3
 801164a:	2b00      	cmp	r3, #0
 801164c:	d00e      	beq.n	801166c <_ZN17ButtonsController14doCheckButtonsEv+0x5c>
            {
                notifyButtonChange(i, !(newButtonsValue & mask));
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	b299      	uxth	r1, r3
 8011652:	7bfa      	ldrb	r2, [r7, #15]
 8011654:	7dfb      	ldrb	r3, [r7, #23]
 8011656:	4013      	ands	r3, r2
 8011658:	b2db      	uxtb	r3, r3
 801165a:	2b00      	cmp	r3, #0
 801165c:	bf0c      	ite	eq
 801165e:	2301      	moveq	r3, #1
 8011660:	2300      	movne	r3, #0
 8011662:	b2db      	uxtb	r3, r3
 8011664:	461a      	mov	r2, r3
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f000 f80e 	bl	8011688 <_ZN17ButtonsController18notifyButtonChangeEtb>
            }

            mask <<= 0x01;
 801166c:	7dfb      	ldrb	r3, [r7, #23]
 801166e:	005b      	lsls	r3, r3, #1
 8011670:	75fb      	strb	r3, [r7, #23]
        for (uint32_t i = 0; i < BUTTONS_COUNT; i++)
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	3301      	adds	r3, #1
 8011676:	613b      	str	r3, [r7, #16]
 8011678:	e7dc      	b.n	8011634 <_ZN17ButtonsController14doCheckButtonsEv+0x24>
        }

        _currentButtonsValue = newButtonsValue;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	7bfa      	ldrb	r2, [r7, #15]
 801167e:	765a      	strb	r2, [r3, #25]
    }
}
 8011680:	bf00      	nop
 8011682:	3718      	adds	r7, #24
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}

08011688 <_ZN17ButtonsController18notifyButtonChangeEtb>:

void ButtonsController::notifyButtonChange(uint16_t buttonIndex, bool pressed)
{
 8011688:	b590      	push	{r4, r7, lr}
 801168a:	b085      	sub	sp, #20
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	460b      	mov	r3, r1
 8011692:	807b      	strh	r3, [r7, #2]
 8011694:	4613      	mov	r3, r2
 8011696:	707b      	strb	r3, [r7, #1]
#if (TRACE_BUTTONSCONTROLLER_NOTIFICATIONS != 0)
    Trace::out("Button %d %s", buttonIndex, (pressed) ? "pressed" : "released");
#endif

    for (uint8_t i = 0; i < MAX_CALLBACKS; i++)
 8011698:	2300      	movs	r3, #0
 801169a:	73fb      	strb	r3, [r7, #15]
 801169c:	7bfb      	ldrb	r3, [r7, #15]
 801169e:	2b07      	cmp	r3, #7
 80116a0:	d85b      	bhi.n	801175a <_ZN17ButtonsController18notifyButtonChangeEtb+0xd2>
    {
        if (_callbackProvider[i].first != nullptr)
 80116a2:	7bfa      	ldrb	r2, [r7, #15]
 80116a4:	6879      	ldr	r1, [r7, #4]
 80116a6:	4613      	mov	r3, r2
 80116a8:	005b      	lsls	r3, r3, #1
 80116aa:	4413      	add	r3, r2
 80116ac:	009b      	lsls	r3, r3, #2
 80116ae:	440b      	add	r3, r1
 80116b0:	331c      	adds	r3, #28
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d04f      	beq.n	8011758 <_ZN17ButtonsController18notifyButtonChangeEtb+0xd0>
        {
            (_callbackProvider[i].first->*_callbackProvider[i].second)(buttonIndex, pressed);
 80116b8:	7bfa      	ldrb	r2, [r7, #15]
 80116ba:	6879      	ldr	r1, [r7, #4]
 80116bc:	4613      	mov	r3, r2
 80116be:	005b      	lsls	r3, r3, #1
 80116c0:	4413      	add	r3, r2
 80116c2:	009b      	lsls	r3, r3, #2
 80116c4:	440b      	add	r3, r1
 80116c6:	331c      	adds	r3, #28
 80116c8:	6819      	ldr	r1, [r3, #0]
 80116ca:	7bfa      	ldrb	r2, [r7, #15]
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	4613      	mov	r3, r2
 80116d0:	005b      	lsls	r3, r3, #1
 80116d2:	4413      	add	r3, r2
 80116d4:	009b      	lsls	r3, r3, #2
 80116d6:	4403      	add	r3, r0
 80116d8:	3324      	adds	r3, #36	; 0x24
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	105b      	asrs	r3, r3, #1
 80116de:	18cc      	adds	r4, r1, r3
 80116e0:	7bfa      	ldrb	r2, [r7, #15]
 80116e2:	6879      	ldr	r1, [r7, #4]
 80116e4:	4613      	mov	r3, r2
 80116e6:	005b      	lsls	r3, r3, #1
 80116e8:	4413      	add	r3, r2
 80116ea:	009b      	lsls	r3, r3, #2
 80116ec:	440b      	add	r3, r1
 80116ee:	3324      	adds	r3, #36	; 0x24
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f003 0301 	and.w	r3, r3, #1
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d109      	bne.n	801170e <_ZN17ButtonsController18notifyButtonChangeEtb+0x86>
 80116fa:	7bfa      	ldrb	r2, [r7, #15]
 80116fc:	6879      	ldr	r1, [r7, #4]
 80116fe:	4613      	mov	r3, r2
 8011700:	005b      	lsls	r3, r3, #1
 8011702:	4413      	add	r3, r2
 8011704:	009b      	lsls	r3, r3, #2
 8011706:	440b      	add	r3, r1
 8011708:	3320      	adds	r3, #32
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	e01f      	b.n	801174e <_ZN17ButtonsController18notifyButtonChangeEtb+0xc6>
 801170e:	7bfa      	ldrb	r2, [r7, #15]
 8011710:	6879      	ldr	r1, [r7, #4]
 8011712:	4613      	mov	r3, r2
 8011714:	005b      	lsls	r3, r3, #1
 8011716:	4413      	add	r3, r2
 8011718:	009b      	lsls	r3, r3, #2
 801171a:	440b      	add	r3, r1
 801171c:	331c      	adds	r3, #28
 801171e:	6819      	ldr	r1, [r3, #0]
 8011720:	7bfa      	ldrb	r2, [r7, #15]
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	4613      	mov	r3, r2
 8011726:	005b      	lsls	r3, r3, #1
 8011728:	4413      	add	r3, r2
 801172a:	009b      	lsls	r3, r3, #2
 801172c:	4403      	add	r3, r0
 801172e:	3324      	adds	r3, #36	; 0x24
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	105b      	asrs	r3, r3, #1
 8011734:	440b      	add	r3, r1
 8011736:	6819      	ldr	r1, [r3, #0]
 8011738:	7bfa      	ldrb	r2, [r7, #15]
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	4613      	mov	r3, r2
 801173e:	005b      	lsls	r3, r3, #1
 8011740:	4413      	add	r3, r2
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	4403      	add	r3, r0
 8011746:	3320      	adds	r3, #32
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	440b      	add	r3, r1
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	787a      	ldrb	r2, [r7, #1]
 8011750:	8879      	ldrh	r1, [r7, #2]
 8011752:	4620      	mov	r0, r4
 8011754:	4798      	blx	r3
            break;
 8011756:	e000      	b.n	801175a <_ZN17ButtonsController18notifyButtonChangeEtb+0xd2>
        }
        else
        {
            break;
 8011758:	bf00      	nop
        }
    }
}
 801175a:	bf00      	nop
 801175c:	3714      	adds	r7, #20
 801175e:	46bd      	mov	sp, r7
 8011760:	bd90      	pop	{r4, r7, pc}
	...

08011764 <_ZL10traceMutexv>:
static char strTrace[255];

static int32_t checkStringEnding(char * str, uint32_t len);

static interface::XFMutex & traceMutex()
{
 8011764:	b580      	push	{r7, lr}
 8011766:	af00      	add	r7, sp, #0
	static XFMutex * mutex = XFResourceFactory::getInstance()->createMutex();
 8011768:	4b15      	ldr	r3, [pc, #84]	; (80117c0 <_ZL10traceMutexv+0x5c>)
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	f3bf 8f5b 	dmb	ish
 8011770:	b2db      	uxtb	r3, r3
 8011772:	f003 0301 	and.w	r3, r3, #1
 8011776:	2b00      	cmp	r3, #0
 8011778:	bf0c      	ite	eq
 801177a:	2301      	moveq	r3, #1
 801177c:	2300      	movne	r3, #0
 801177e:	b2db      	uxtb	r3, r3
 8011780:	2b00      	cmp	r3, #0
 8011782:	d018      	beq.n	80117b6 <_ZL10traceMutexv+0x52>
 8011784:	480e      	ldr	r0, [pc, #56]	; (80117c0 <_ZL10traceMutexv+0x5c>)
 8011786:	f007 ffa3 	bl	80196d0 <__cxa_guard_acquire>
 801178a:	4603      	mov	r3, r0
 801178c:	2b00      	cmp	r3, #0
 801178e:	bf14      	ite	ne
 8011790:	2301      	movne	r3, #1
 8011792:	2300      	moveq	r3, #0
 8011794:	b2db      	uxtb	r3, r3
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00d      	beq.n	80117b6 <_ZL10traceMutexv+0x52>
 801179a:	f000 ff13 	bl	80125c4 <_ZN9interface17XFResourceFactory11getInstanceEv>
 801179e:	4603      	mov	r3, r0
 80117a0:	681a      	ldr	r2, [r3, #0]
 80117a2:	320c      	adds	r2, #12
 80117a4:	6812      	ldr	r2, [r2, #0]
 80117a6:	4618      	mov	r0, r3
 80117a8:	4790      	blx	r2
 80117aa:	4603      	mov	r3, r0
 80117ac:	4a05      	ldr	r2, [pc, #20]	; (80117c4 <_ZL10traceMutexv+0x60>)
 80117ae:	6013      	str	r3, [r2, #0]
 80117b0:	4803      	ldr	r0, [pc, #12]	; (80117c0 <_ZL10traceMutexv+0x5c>)
 80117b2:	f007 ff99 	bl	80196e8 <__cxa_guard_release>
	return *mutex;
 80117b6:	4b03      	ldr	r3, [pc, #12]	; (80117c4 <_ZL10traceMutexv+0x60>)
 80117b8:	681b      	ldr	r3, [r3, #0]
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	20001c10 	.word	0x20001c10
 80117c4:	20001c0c 	.word	0x20001c0c

080117c8 <_ZL14traceMutexLockv>:

static void traceMutexLock()
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	af00      	add	r7, sp, #0
    traceMutex().lock();
 80117cc:	f7ff ffca 	bl	8011764 <_ZL10traceMutexv>
 80117d0:	4603      	mov	r3, r0
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	3208      	adds	r2, #8
 80117d6:	6812      	ldr	r2, [r2, #0]
 80117d8:	4618      	mov	r0, r3
 80117da:	4790      	blx	r2
}
 80117dc:	bf00      	nop
 80117de:	bd80      	pop	{r7, pc}

080117e0 <_ZL16traceMutexUnlockv>:

static void traceMutexUnlock()
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	af00      	add	r7, sp, #0
    traceMutex().unlock();
 80117e4:	f7ff ffbe 	bl	8011764 <_ZL10traceMutexv>
 80117e8:	4603      	mov	r3, r0
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	320c      	adds	r2, #12
 80117ee:	6812      	ldr	r2, [r2, #0]
 80117f0:	4618      	mov	r0, r3
 80117f2:	4790      	blx	r2
}
 80117f4:	bf00      	nop
 80117f6:	bd80      	pop	{r7, pc}

080117f8 <trace_out>:
{
    Trace::initialize();
}

void trace_out(const char * const format , ...)
{
 80117f8:	b40f      	push	{r0, r1, r2, r3}
 80117fa:	b580      	push	{r7, lr}
 80117fc:	b082      	sub	sp, #8
 80117fe:	af00      	add	r7, sp, #0
    va_list args;

    // Format string
    va_start(args, format);
 8011800:	f107 0314 	add.w	r3, r7, #20
 8011804:	607b      	str	r3, [r7, #4]
    vsprintf(strTrace, format, args);
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	6939      	ldr	r1, [r7, #16]
 801180a:	480b      	ldr	r0, [pc, #44]	; (8011838 <trace_out+0x40>)
 801180c:	f008 fe6e 	bl	801a4ec <vsiprintf>
    va_end(args);

    checkStringEnding(strTrace, strlen(strTrace));
 8011810:	4809      	ldr	r0, [pc, #36]	; (8011838 <trace_out+0x40>)
 8011812:	f7ee fd4d 	bl	80002b0 <strlen>
 8011816:	4603      	mov	r3, r0
 8011818:	4619      	mov	r1, r3
 801181a:	4807      	ldr	r0, [pc, #28]	; (8011838 <trace_out+0x40>)
 801181c:	f000 f810 	bl	8011840 <_ZL17checkStringEndingPcm>

    traceUart.write(strTrace);
 8011820:	2200      	movs	r2, #0
 8011822:	4905      	ldr	r1, [pc, #20]	; (8011838 <trace_out+0x40>)
 8011824:	4805      	ldr	r0, [pc, #20]	; (801183c <trace_out+0x44>)
 8011826:	f000 f9f7 	bl	8011c18 <_ZN4Uart5writeEPKcj>
}
 801182a:	bf00      	nop
 801182c:	3708      	adds	r7, #8
 801182e:	46bd      	mov	sp, r7
 8011830:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011834:	b004      	add	sp, #16
 8011836:	4770      	bx	lr
 8011838:	20001b0c 	.word	0x20001b0c
 801183c:	20001a7c 	.word	0x20001a7c

08011840 <_ZL17checkStringEndingPcm>:
{
	traceUart.initialize(TRACE_UART_BAUD_RATE);
}

static int32_t checkStringEnding(char * str, uint32_t len)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
 8011848:	6039      	str	r1, [r7, #0]
	if (!len)
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d101      	bne.n	8011854 <_ZL17checkStringEndingPcm+0x14>
	{
		return 0;
 8011850:	2300      	movs	r3, #0
 8011852:	e015      	b.n	8011880 <_ZL17checkStringEndingPcm+0x40>
	}

	if (str[len-1] != '\n')
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	3b01      	subs	r3, #1
 8011858:	687a      	ldr	r2, [r7, #4]
 801185a:	4413      	add	r3, r2
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	2b0a      	cmp	r3, #10
 8011860:	d00a      	beq.n	8011878 <_ZL17checkStringEndingPcm+0x38>
		str[len] = '\r';
		str[len+1] = '\n';
		str[len+2] = '\0';
#else
		// Add "\n" at the end of the string
		str[len] = '\n';
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	4413      	add	r3, r2
 8011868:	220a      	movs	r2, #10
 801186a:	701a      	strb	r2, [r3, #0]
		str[len+1] = '\0';
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	3301      	adds	r3, #1
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	4413      	add	r3, r2
 8011874:	2200      	movs	r2, #0
 8011876:	701a      	strb	r2, [r3, #0]
			memmove(&str[len], &str[len-1], 2);
			str[len-1] = '\r';
		}
	}
#endif // TRACE_ADD_CRLF_SEQU
	return strlen(str);
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f7ee fd19 	bl	80002b0 <strlen>
 801187e:	4603      	mov	r3, r0
}
 8011880:	4618      	mov	r0, r3
 8011882:	3708      	adds	r7, #8
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}

08011888 <_ZN5Trace3outEPKcz>:
	traceUart.write(str.data(), str.length());
	traceMutexUnlock();
}

void Trace::out(const char * format, ...)
{
 8011888:	b40f      	push	{r0, r1, r2, r3}
 801188a:	b580      	push	{r7, lr}
 801188c:	b082      	sub	sp, #8
 801188e:	af00      	add	r7, sp, #0
	traceMutexLock();
 8011890:	f7ff ff9a 	bl	80117c8 <_ZL14traceMutexLockv>
	va_list args;

	// Format string
	va_start(args, format);
 8011894:	f107 0314 	add.w	r3, r7, #20
 8011898:	607b      	str	r3, [r7, #4]
	vsprintf(strTrace, format, args);
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	6939      	ldr	r1, [r7, #16]
 801189e:	480c      	ldr	r0, [pc, #48]	; (80118d0 <_ZN5Trace3outEPKcz+0x48>)
 80118a0:	f008 fe24 	bl	801a4ec <vsiprintf>
	va_end(args);

	checkStringEnding(strTrace, strlen(strTrace));
 80118a4:	480a      	ldr	r0, [pc, #40]	; (80118d0 <_ZN5Trace3outEPKcz+0x48>)
 80118a6:	f7ee fd03 	bl	80002b0 <strlen>
 80118aa:	4603      	mov	r3, r0
 80118ac:	4619      	mov	r1, r3
 80118ae:	4808      	ldr	r0, [pc, #32]	; (80118d0 <_ZN5Trace3outEPKcz+0x48>)
 80118b0:	f7ff ffc6 	bl	8011840 <_ZL17checkStringEndingPcm>

	traceUart.write(strTrace);
 80118b4:	2200      	movs	r2, #0
 80118b6:	4906      	ldr	r1, [pc, #24]	; (80118d0 <_ZN5Trace3outEPKcz+0x48>)
 80118b8:	4806      	ldr	r0, [pc, #24]	; (80118d4 <_ZN5Trace3outEPKcz+0x4c>)
 80118ba:	f000 f9ad 	bl	8011c18 <_ZN4Uart5writeEPKcj>
	traceMutexUnlock();
 80118be:	f7ff ff8f 	bl	80117e0 <_ZL16traceMutexUnlockv>
}
 80118c2:	bf00      	nop
 80118c4:	3708      	adds	r7, #8
 80118c6:	46bd      	mov	sp, r7
 80118c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80118cc:	b004      	add	sp, #16
 80118ce:	4770      	bx	lr
 80118d0:	20001b0c 	.word	0x20001b0c
 80118d4:	20001a7c 	.word	0x20001a7c

080118d8 <_Z41__static_initialization_and_destruction_0ii>:

//static
void Trace::unlock()
{
    traceMutexUnlock();
}
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	6039      	str	r1, [r7, #0]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d10a      	bne.n	80118fe <_Z41__static_initialization_and_destruction_0ii+0x26>
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d105      	bne.n	80118fe <_Z41__static_initialization_and_destruction_0ii+0x26>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 80118f2:	2300      	movs	r3, #0
 80118f4:	4a09      	ldr	r2, [pc, #36]	; (801191c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80118f6:	2100      	movs	r1, #0
 80118f8:	4809      	ldr	r0, [pc, #36]	; (8011920 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80118fa:	f000 f921 	bl	8011b40 <_ZN4UartC1EhP20__UART_HandleTypeDefb>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d107      	bne.n	8011914 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801190a:	4293      	cmp	r3, r2
 801190c:	d102      	bne.n	8011914 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 801190e:	4804      	ldr	r0, [pc, #16]	; (8011920 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8011910:	f000 f962 	bl	8011bd8 <_ZN4UartD1Ev>
}
 8011914:	bf00      	nop
 8011916:	3708      	adds	r7, #8
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}
 801191c:	20000340 	.word	0x20000340
 8011920:	20001a7c 	.word	0x20001a7c

08011924 <_GLOBAL__sub_I_trace_initialize>:
 8011924:	b580      	push	{r7, lr}
 8011926:	af00      	add	r7, sp, #0
 8011928:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801192c:	2001      	movs	r0, #1
 801192e:	f7ff ffd3 	bl	80118d8 <_Z41__static_initialization_and_destruction_0ii>
 8011932:	bd80      	pop	{r7, pc}

08011934 <_GLOBAL__sub_D_trace_initialize>:
 8011934:	b580      	push	{r7, lr}
 8011936:	af00      	add	r7, sp, #0
 8011938:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801193c:	2000      	movs	r0, #0
 801193e:	f7ff ffcb 	bl	80118d8 <_Z41__static_initialization_and_destruction_0ii>
 8011942:	bd80      	pop	{r7, pc}

08011944 <Ext_FreqGen_Set>:
	return 0;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
void Ext_FreqGen_Set(uint32_t frequency,f_mode mode)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b086      	sub	sp, #24
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
 801194c:	460b      	mov	r3, r1
 801194e:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	float calcDivisor;
	uint32_t divisorInt;
	calcDivisor = ((float)frequency * 268435456L) / 16000000L;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	ee07 3a90 	vmov	s15, r3
 8011956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801195a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8011a78 <Ext_FreqGen_Set+0x134>
 801195e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011962:	eddf 6a46 	vldr	s13, [pc, #280]	; 8011a7c <Ext_FreqGen_Set+0x138>
 8011966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801196a:	edc7 7a05 	vstr	s15, [r7, #20]
	divisorInt = (uint32_t)calcDivisor - 1;
 801196e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011976:	ee17 3a90 	vmov	r3, s15
 801197a:	3b01      	subs	r3, #1
 801197c:	613b      	str	r3, [r7, #16]
	//----------------------------------------------------------------------------
	// reset generator
	data[0] = 0x21;
 801197e:	2321      	movs	r3, #33	; 0x21
 8011980:	733b      	strb	r3, [r7, #12]
	data[1] = 0x00;
 8011982:	2300      	movs	r3, #0
 8011984:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_RESET);
 8011986:	2200      	movs	r2, #0
 8011988:	2140      	movs	r1, #64	; 0x40
 801198a:	483d      	ldr	r0, [pc, #244]	; (8011a80 <Ext_FreqGen_Set+0x13c>)
 801198c:	f7f2 f916 	bl	8003bbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,data,2,10);
 8011990:	f107 010c 	add.w	r1, r7, #12
 8011994:	230a      	movs	r3, #10
 8011996:	2202      	movs	r2, #2
 8011998:	483a      	ldr	r0, [pc, #232]	; (8011a84 <Ext_FreqGen_Set+0x140>)
 801199a:	f7f6 f940 	bl	8007c1e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_SET);
 801199e:	2201      	movs	r2, #1
 80119a0:	2140      	movs	r1, #64	; 0x40
 80119a2:	4837      	ldr	r0, [pc, #220]	; (8011a80 <Ext_FreqGen_Set+0x13c>)
 80119a4:	f7f2 f90a 	bl	8003bbc <HAL_GPIO_WritePin>
	//----------------------------------------------------------------------------
	// set frequency LSB (14 bits)
	data[0] = ((divisorInt & 0x3FFF) | 0x4000) >> 8;
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	0a1b      	lsrs	r3, r3, #8
 80119ac:	b2db      	uxtb	r3, r3
 80119ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119b8:	b2db      	uxtb	r3, r3
 80119ba:	733b      	strb	r3, [r7, #12]
	data[1] = ((divisorInt & 0x3FFF) | 0x4000) >> 0;
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_RESET);
 80119c2:	2200      	movs	r2, #0
 80119c4:	2140      	movs	r1, #64	; 0x40
 80119c6:	482e      	ldr	r0, [pc, #184]	; (8011a80 <Ext_FreqGen_Set+0x13c>)
 80119c8:	f7f2 f8f8 	bl	8003bbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,data,2,10);
 80119cc:	f107 010c 	add.w	r1, r7, #12
 80119d0:	230a      	movs	r3, #10
 80119d2:	2202      	movs	r2, #2
 80119d4:	482b      	ldr	r0, [pc, #172]	; (8011a84 <Ext_FreqGen_Set+0x140>)
 80119d6:	f7f6 f922 	bl	8007c1e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_SET);
 80119da:	2201      	movs	r2, #1
 80119dc:	2140      	movs	r1, #64	; 0x40
 80119de:	4828      	ldr	r0, [pc, #160]	; (8011a80 <Ext_FreqGen_Set+0x13c>)
 80119e0:	f7f2 f8ec 	bl	8003bbc <HAL_GPIO_WritePin>
	//----------------------------------------------------------------------------
	// set frequency MSB (14 bits)
	data[0] = (((divisorInt>>14) & 0x3FFF) | 0x4000) >> 8;
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	0b9b      	lsrs	r3, r3, #14
 80119e8:	0a1b      	lsrs	r3, r3, #8
 80119ea:	b2db      	uxtb	r3, r3
 80119ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	733b      	strb	r3, [r7, #12]
	data[1] = (((divisorInt>>14) & 0x3FFF) | 0x4000) >> 0;
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	0b9b      	lsrs	r3, r3, #14
 80119fe:	b2db      	uxtb	r3, r3
 8011a00:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_RESET);
 8011a02:	2200      	movs	r2, #0
 8011a04:	2140      	movs	r1, #64	; 0x40
 8011a06:	481e      	ldr	r0, [pc, #120]	; (8011a80 <Ext_FreqGen_Set+0x13c>)
 8011a08:	f7f2 f8d8 	bl	8003bbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,data,2,10);
 8011a0c:	f107 010c 	add.w	r1, r7, #12
 8011a10:	230a      	movs	r3, #10
 8011a12:	2202      	movs	r2, #2
 8011a14:	481b      	ldr	r0, [pc, #108]	; (8011a84 <Ext_FreqGen_Set+0x140>)
 8011a16:	f7f6 f902 	bl	8007c1e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_SET);
 8011a1a:	2201      	movs	r2, #1
 8011a1c:	2140      	movs	r1, #64	; 0x40
 8011a1e:	4818      	ldr	r0, [pc, #96]	; (8011a80 <Ext_FreqGen_Set+0x13c>)
 8011a20:	f7f2 f8cc 	bl	8003bbc <HAL_GPIO_WritePin>
	//----------------------------------------------------------------------------
	// set output signal
	data[0] = 0x20;		// unreset
 8011a24:	2320      	movs	r3, #32
 8011a26:	733b      	strb	r3, [r7, #12]
	switch(mode)
 8011a28:	78fb      	ldrb	r3, [r7, #3]
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	d00c      	beq.n	8011a48 <Ext_FreqGen_Set+0x104>
 8011a2e:	2b02      	cmp	r3, #2
 8011a30:	dc0d      	bgt.n	8011a4e <Ext_FreqGen_Set+0x10a>
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d002      	beq.n	8011a3c <Ext_FreqGen_Set+0xf8>
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	d003      	beq.n	8011a42 <Ext_FreqGen_Set+0xfe>
 8011a3a:	e008      	b.n	8011a4e <Ext_FreqGen_Set+0x10a>
	{
		case SINUS:
			data[1] = 0x00;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	737b      	strb	r3, [r7, #13]
			break;		
 8011a40:	e005      	b.n	8011a4e <Ext_FreqGen_Set+0x10a>
		case TRIANGLE:
			data[1] = 0x02;
 8011a42:	2302      	movs	r3, #2
 8011a44:	737b      	strb	r3, [r7, #13]
			break;		
 8011a46:	e002      	b.n	8011a4e <Ext_FreqGen_Set+0x10a>
		case SQUARE:
			data[1] = 0x28;
 8011a48:	2328      	movs	r3, #40	; 0x28
 8011a4a:	737b      	strb	r3, [r7, #13]
			break;
 8011a4c:	bf00      	nop
	}
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_RESET);
 8011a4e:	2200      	movs	r2, #0
 8011a50:	2140      	movs	r1, #64	; 0x40
 8011a52:	480b      	ldr	r0, [pc, #44]	; (8011a80 <Ext_FreqGen_Set+0x13c>)
 8011a54:	f7f2 f8b2 	bl	8003bbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,data,2,10);
 8011a58:	f107 010c 	add.w	r1, r7, #12
 8011a5c:	230a      	movs	r3, #10
 8011a5e:	2202      	movs	r2, #2
 8011a60:	4808      	ldr	r0, [pc, #32]	; (8011a84 <Ext_FreqGen_Set+0x140>)
 8011a62:	f7f6 f8dc 	bl	8007c1e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_SET);
 8011a66:	2201      	movs	r2, #1
 8011a68:	2140      	movs	r1, #64	; 0x40
 8011a6a:	4805      	ldr	r0, [pc, #20]	; (8011a80 <Ext_FreqGen_Set+0x13c>)
 8011a6c:	f7f2 f8a6 	bl	8003bbc <HAL_GPIO_WritePin>
}
 8011a70:	bf00      	nop
 8011a72:	3718      	adds	r7, #24
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}
 8011a78:	4d800000 	.word	0x4d800000
 8011a7c:	4b742400 	.word	0x4b742400
 8011a80:	40021400 	.word	0x40021400
 8011a84:	20000290 	.word	0x20000290

08011a88 <critical_enter>:

static volatile int inIsr_ = 0;
static volatile int enterCriticalNested_ = 0;

void critical_enter()
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	af00      	add	r7, sp, #0
	// Only disable interrupts when not calling from an ISR
	if (!critical_inIsr())
 8011a8c:	f000 f83c 	bl	8011b08 <critical_inIsr>
 8011a90:	4603      	mov	r3, r0
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	bf0c      	ite	eq
 8011a96:	2301      	moveq	r3, #1
 8011a98:	2300      	movne	r3, #0
 8011a9a:	b2db      	uxtb	r3, r3
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d00f      	beq.n	8011ac0 <critical_enter+0x38>
	{
		if (!enterCriticalNested_)
 8011aa0:	4b08      	ldr	r3, [pc, #32]	; (8011ac4 <critical_enter+0x3c>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	bf0c      	ite	eq
 8011aa8:	2301      	moveq	r3, #1
 8011aaa:	2300      	movne	r3, #0
 8011aac:	b2db      	uxtb	r3, r3
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d001      	beq.n	8011ab6 <critical_enter+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8011ab2:	b672      	cpsid	i
}
 8011ab4:	bf00      	nop
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		enterCriticalNested_++;
 8011ab6:	4b03      	ldr	r3, [pc, #12]	; (8011ac4 <critical_enter+0x3c>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	3301      	adds	r3, #1
 8011abc:	4a01      	ldr	r2, [pc, #4]	; (8011ac4 <critical_enter+0x3c>)
 8011abe:	6013      	str	r3, [r2, #0]
	}
}
 8011ac0:	bf00      	nop
 8011ac2:	bd80      	pop	{r7, pc}
 8011ac4:	20001c18 	.word	0x20001c18

08011ac8 <critical_exit>:

void critical_exit()
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	af00      	add	r7, sp, #0
	// Only enable interrupts when not calling from an ISR
	if (!critical_inIsr())
 8011acc:	f000 f81c 	bl	8011b08 <critical_inIsr>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	bf0c      	ite	eq
 8011ad6:	2301      	moveq	r3, #1
 8011ad8:	2300      	movne	r3, #0
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d00f      	beq.n	8011b00 <critical_exit+0x38>
	{
		enterCriticalNested_--;
 8011ae0:	4b08      	ldr	r3, [pc, #32]	; (8011b04 <critical_exit+0x3c>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	3b01      	subs	r3, #1
 8011ae6:	4a07      	ldr	r2, [pc, #28]	; (8011b04 <critical_exit+0x3c>)
 8011ae8:	6013      	str	r3, [r2, #0]

		if (!enterCriticalNested_)
 8011aea:	4b06      	ldr	r3, [pc, #24]	; (8011b04 <critical_exit+0x3c>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	bf0c      	ite	eq
 8011af2:	2301      	moveq	r3, #1
 8011af4:	2300      	movne	r3, #0
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d001      	beq.n	8011b00 <critical_exit+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 8011afc:	b662      	cpsie	i
}
 8011afe:	bf00      	nop
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 8011b00:	bf00      	nop
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	20001c18 	.word	0x20001c18

08011b08 <critical_inIsr>:

int critical_inIsr()
{
 8011b08:	b480      	push	{r7}
 8011b0a:	af00      	add	r7, sp, #0
    // Variable must be put to TRUE in every ISR to indicate execution
    // of an ISR and need to put back to FALSE before leaving ISR.
    return inIsr_;
 8011b0c:	4b03      	ldr	r3, [pc, #12]	; (8011b1c <critical_inIsr+0x14>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	46bd      	mov	sp, r7
 8011b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop
 8011b1c:	20001c14 	.word	0x20001c14

08011b20 <critical_setInIsr>:

void critical_setInIsr(bool inIsr)
{
 8011b20:	b480      	push	{r7}
 8011b22:	b083      	sub	sp, #12
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	4603      	mov	r3, r0
 8011b28:	71fb      	strb	r3, [r7, #7]
    inIsr_ = inIsr;
 8011b2a:	79fb      	ldrb	r3, [r7, #7]
 8011b2c:	4a03      	ldr	r2, [pc, #12]	; (8011b3c <critical_setInIsr+0x1c>)
 8011b2e:	6013      	str	r3, [r2, #0]
}
 8011b30:	bf00      	nop
 8011b32:	370c      	adds	r7, #12
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr
 8011b3c:	20001c14 	.word	0x20001c14

08011b40 <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
#endif

Uart * Uart::_sUart[Uart::UART_COUNT];				// Comment: Startup script should initialize pointers to zero (.bss section)
bool Uart::_sInitialized[Uart::UART_COUNT];			// Same for other arrays

Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b084      	sub	sp, #16
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	607a      	str	r2, [r7, #4]
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	72fb      	strb	r3, [r7, #11]
 8011b50:	4613      	mov	r3, r2
 8011b52:	72bb      	strb	r3, [r7, #10]
 : _uartNbr(-1),
   _pUartHandle(NULL),
   _bTxDMA(bTxDMA)
 8011b54:	4a1a      	ldr	r2, [pc, #104]	; (8011bc0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x80>)
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	601a      	str	r2, [r3, #0]
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	22ff      	movs	r2, #255	; 0xff
 8011b5e:	711a      	strb	r2, [r3, #4]
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	2200      	movs	r2, #0
 8011b64:	609a      	str	r2, [r3, #8]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	7aba      	ldrb	r2, [r7, #10]
 8011b6a:	731a      	strb	r2, [r3, #12]
{
	assert(uartNbr < UART_COUNT);
 8011b6c:	7afb      	ldrb	r3, [r7, #11]
 8011b6e:	2b02      	cmp	r3, #2
 8011b70:	d905      	bls.n	8011b7e <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x3e>
 8011b72:	4b14      	ldr	r3, [pc, #80]	; (8011bc4 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x84>)
 8011b74:	4a14      	ldr	r2, [pc, #80]	; (8011bc8 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 8011b76:	2111      	movs	r1, #17
 8011b78:	4814      	ldr	r0, [pc, #80]	; (8011bcc <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 8011b7a:	f007 ffdf 	bl	8019b3c <__assert_func>

	if (uartNbr < UART_COUNT)
 8011b7e:	7afb      	ldrb	r3, [r7, #11]
 8011b80:	2b02      	cmp	r3, #2
 8011b82:	d817      	bhi.n	8011bb4 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
    {
        if (!_sUart[uartNbr])
 8011b84:	7afb      	ldrb	r3, [r7, #11]
 8011b86:	4a12      	ldr	r2, [pc, #72]	; (8011bd0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 8011b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10b      	bne.n	8011ba8 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x68>
        {
            // Register instance
            _sUart[uartNbr] = this;
 8011b90:	7afb      	ldrb	r3, [r7, #11]
 8011b92:	490f      	ldr	r1, [pc, #60]	; (8011bd0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 8011b94:	68fa      	ldr	r2, [r7, #12]
 8011b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            _uartNbr = uartNbr;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	7afa      	ldrb	r2, [r7, #11]
 8011b9e:	711a      	strb	r2, [r3, #4]

            _pUartHandle = uartHandle;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	687a      	ldr	r2, [r7, #4]
 8011ba4:	609a      	str	r2, [r3, #8]
 8011ba6:	e005      	b.n	8011bb4 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
        }
        else
        {
            assert(false);  // Error: Instance for specified UART already exists.
 8011ba8:	4b0a      	ldr	r3, [pc, #40]	; (8011bd4 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x94>)
 8011baa:	4a07      	ldr	r2, [pc, #28]	; (8011bc8 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 8011bac:	211f      	movs	r1, #31
 8011bae:	4807      	ldr	r0, [pc, #28]	; (8011bcc <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 8011bb0:	f007 ffc4 	bl	8019b3c <__assert_func>
        }
    }
}
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3710      	adds	r7, #16
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	0801c6ec 	.word	0x0801c6ec
 8011bc4:	0801bdcc 	.word	0x0801bdcc
 8011bc8:	0801bde4 	.word	0x0801bde4
 8011bcc:	0801be1c 	.word	0x0801be1c
 8011bd0:	20001c1c 	.word	0x20001c1c
 8011bd4:	0801bea0 	.word	0x0801bea0

08011bd8 <_ZN4UartD1Ev>:

Uart::~Uart()
 8011bd8:	b480      	push	{r7}
 8011bda:	b083      	sub	sp, #12
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	4a04      	ldr	r2, [pc, #16]	; (8011bf4 <_ZN4UartD1Ev+0x1c>)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	601a      	str	r2, [r3, #0]
{

}
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4618      	mov	r0, r3
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr
 8011bf4:	0801c6ec 	.word	0x0801c6ec

08011bf8 <_ZN4UartD0Ev>:
Uart::~Uart()
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
}
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f7ff ffe9 	bl	8011bd8 <_ZN4UartD1Ev>
 8011c06:	2190      	movs	r1, #144	; 0x90
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f007 fd5f 	bl	80196cc <_ZdlPvj>
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	4618      	mov	r0, r3
 8011c12:	3708      	adds	r7, #8
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <_ZN4Uart5writeEPKcj>:
    __HAL_UART_DISABLE(_pUartHandle);
    return true;
}

void Uart::write(const char * str, unsigned int length /* = 0 */)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b084      	sub	sp, #16
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	60f8      	str	r0, [r7, #12]
 8011c20:	60b9      	str	r1, [r7, #8]
 8011c22:	607a      	str	r2, [r7, #4]
	if (!length)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d103      	bne.n	8011c32 <_ZN4Uart5writeEPKcj+0x1a>
	{
		length = strlen(str);
 8011c2a:	68b8      	ldr	r0, [r7, #8]
 8011c2c:	f7ee fb40 	bl	80002b0 <strlen>
 8011c30:	6078      	str	r0, [r7, #4]
	}

    if (!_bTxDMA)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	7b1b      	ldrb	r3, [r3, #12]
 8011c36:	f083 0301 	eor.w	r3, r3, #1
 8011c3a:	b2db      	uxtb	r3, r3
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d008      	beq.n	8011c52 <_ZN4Uart5writeEPKcj+0x3a>
    {   // Transmit without DMA
        // Send next character
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	6898      	ldr	r0, [r3, #8]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	2332      	movs	r3, #50	; 0x32
 8011c4a:	68b9      	ldr	r1, [r7, #8]
 8011c4c:	f7f7 fd10 	bl	8009670 <HAL_UART_Transmit>
    }
    else
    {   // TX DMA enabled
        writeUsingDMA((const uint8_t *)str, length);
    }
}
 8011c50:	e004      	b.n	8011c5c <_ZN4Uart5writeEPKcj+0x44>
        writeUsingDMA((const uint8_t *)str, length);
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	68b9      	ldr	r1, [r7, #8]
 8011c56:	68f8      	ldr	r0, [r7, #12]
 8011c58:	f000 f804 	bl	8011c64 <_ZN4Uart13writeUsingDMAEPKhm>
}
 8011c5c:	bf00      	nop
 8011c5e:	3710      	adds	r7, #16
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}

08011c64 <_ZN4Uart13writeUsingDMAEPKhm>:

void Uart::writeUsingDMA(const uint8_t * str, uint32_t length)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b084      	sub	sp, #16
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	607a      	str	r2, [r7, #4]
    assert(length <= sizeof(_pTxDmaBuffer));
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2b80      	cmp	r3, #128	; 0x80
 8011c74:	d905      	bls.n	8011c82 <_ZN4Uart13writeUsingDMAEPKhm+0x1e>
 8011c76:	4b13      	ldr	r3, [pc, #76]	; (8011cc4 <_ZN4Uart13writeUsingDMAEPKhm+0x60>)
 8011c78:	4a13      	ldr	r2, [pc, #76]	; (8011cc8 <_ZN4Uart13writeUsingDMAEPKhm+0x64>)
 8011c7a:	2150      	movs	r1, #80	; 0x50
 8011c7c:	4813      	ldr	r0, [pc, #76]	; (8011ccc <_ZN4Uart13writeUsingDMAEPKhm+0x68>)
 8011c7e:	f007 ff5d 	bl	8019b3c <__assert_func>

    // Copy data to TX DMA buffer
    ::memcpy(_pTxDmaBuffer, str, length);
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	330d      	adds	r3, #13
 8011c86:	687a      	ldr	r2, [r7, #4]
 8011c88:	68b9      	ldr	r1, [r7, #8]
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f007 ffc6 	bl	8019c1c <memcpy>

    // Check that a Tx process is not already ongoing
    // (should never happen, but who knows!)
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	689b      	ldr	r3, [r3, #8]
 8011c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c96:	2b20      	cmp	r3, #32
 8011c98:	bf14      	ite	ne
 8011c9a:	2301      	movne	r3, #1
 8011c9c:	2300      	moveq	r3, #0
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d001      	beq.n	8011ca8 <_ZN4Uart13writeUsingDMAEPKhm+0x44>
    { continue; }
 8011ca4:	bf00      	nop
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8011ca6:	e7f3      	b.n	8011c90 <_ZN4Uart13writeUsingDMAEPKhm+0x2c>

    // Give data to TX DMA
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	6898      	ldr	r0, [r3, #8]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	330d      	adds	r3, #13
 8011cb0:	687a      	ldr	r2, [r7, #4]
 8011cb2:	b292      	uxth	r2, r2
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	f7f7 fd6f 	bl	8009798 <HAL_UART_Transmit_DMA>
}
 8011cba:	bf00      	nop
 8011cbc:	3710      	adds	r7, #16
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	0801bea8 	.word	0x0801bea8
 8011cc8:	0801bec8 	.word	0x0801bec8
 8011ccc:	0801be1c 	.word	0x0801be1c

08011cd0 <_ZN7XFEvent11setBehaviorEPN9interface10XFReactiveE>:
    inline void setBehavior(interface::XFReactive * pBehavior) { pBehavior_ = pBehavior; }
 8011cd0:	b480      	push	{r7}
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	683a      	ldr	r2, [r7, #0]
 8011cde:	60da      	str	r2, [r3, #12]
 8011ce0:	bf00      	nop
 8011ce2:	370c      	adds	r7, #12
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cea:	4770      	bx	lr

08011cec <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>:

	/**
	 * Checks if both variables contain the same event status.
	 */
    bool operator == (const XFEventStatus::eEventStatus & eventStatus) const
 8011cec:	b480      	push	{r7}
 8011cee:	b083      	sub	sp, #12
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	6039      	str	r1, [r7, #0]
	{
        return (this->status_ == eventStatus);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	781a      	ldrb	r2, [r3, #0]
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	bf0c      	ite	eq
 8011d02:	2301      	moveq	r3, #1
 8011d04:	2300      	movne	r3, #0
 8011d06:	b2db      	uxtb	r3, r3
	}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	370c      	adds	r7, #12
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d12:	4770      	bx	lr

08011d14 <_ZNK10XFBehavior16hasOwnDispatcherEv>:
    inline bool hasOwnDispatcher() const { return hasOwnDispatcher_; }	///< True if behavior has its own dispatcher.
 8011d14:	b480      	push	{r7}
 8011d16:	b083      	sub	sp, #12
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	7a1b      	ldrb	r3, [r3, #8]
 8011d20:	4618      	mov	r0, r3
 8011d22:	370c      	adds	r7, #12
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <_ZN9interface10XFReactiveC1Ev>:

protected:
    virtual TerminateBehavior process(const XFEvent * pEvent) = 0;  ///< Called by the dispatcher to process an event.

protected:
    XFReactive() = default;
 8011d2c:	b480      	push	{r7}
 8011d2e:	b083      	sub	sp, #12
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	4a04      	ldr	r2, [pc, #16]	; (8011d48 <_ZN9interface10XFReactiveC1Ev+0x1c>)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	601a      	str	r2, [r3, #0]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	370c      	adds	r7, #12
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr
 8011d48:	0801c724 	.word	0x0801c724

08011d4c <_ZN9interface10XFReactiveD1Ev>:
    virtual ~XFReactive() = default;
 8011d4c:	b480      	push	{r7}
 8011d4e:	b083      	sub	sp, #12
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
 8011d54:	4a04      	ldr	r2, [pc, #16]	; (8011d68 <_ZN9interface10XFReactiveD1Ev+0x1c>)
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	601a      	str	r2, [r3, #0]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	370c      	adds	r7, #12
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr
 8011d68:	0801c724 	.word	0x0801c724

08011d6c <_ZN9interface10XFReactiveD0Ev>:
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	f7ff ffe9 	bl	8011d4c <_ZN9interface10XFReactiveD1Ev>
 8011d7a:	2104      	movs	r1, #4
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f007 fca5 	bl	80196cc <_ZdlPvj>
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	4618      	mov	r0, r3
 8011d86:	3708      	adds	r7, #8
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <_ZN10XFBehaviorC1Eb>:
#include "xf/initialevent.h"
#include "xf/behavior.h"

using interface::XFResourceFactory;

XFBehavior::XFBehavior(bool ownDispatcher /* = false */) :
 8011d8c:	b590      	push	{r4, r7, lr}
 8011d8e:	b083      	sub	sp, #12
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	460b      	mov	r3, r1
 8011d96:	70fb      	strb	r3, [r7, #3]
    pDispatcher_(nullptr),
    hasOwnDispatcher_(ownDispatcher),
    deleteOnTerminate_(false),
    pCurrentEvent_(nullptr)
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f7ff ffc6 	bl	8011d2c <_ZN9interface10XFReactiveC1Ev>
 8011da0:	4a20      	ldr	r2, [pc, #128]	; (8011e24 <_ZN10XFBehaviorC1Eb+0x98>)
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	601a      	str	r2, [r3, #0]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2200      	movs	r2, #0
 8011daa:	605a      	str	r2, [r3, #4]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	78fa      	ldrb	r2, [r7, #3]
 8011db0:	721a      	strb	r2, [r3, #8]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2200      	movs	r2, #0
 8011db6:	725a      	strb	r2, [r3, #9]
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	60da      	str	r2, [r3, #12]
{
    if (ownDispatcher)
 8011dbe:	78fb      	ldrb	r3, [r7, #3]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d00b      	beq.n	8011ddc <_ZN10XFBehaviorC1Eb+0x50>
    {
        pDispatcher_ = XFResourceFactory::getInstance()->createDispatcher();
 8011dc4:	f000 fbfe 	bl	80125c4 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	681a      	ldr	r2, [r3, #0]
 8011dcc:	3204      	adds	r2, #4
 8011dce:	6812      	ldr	r2, [r2, #0]
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	4790      	blx	r2
 8011dd4:	4602      	mov	r2, r0
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	605a      	str	r2, [r3, #4]
 8011dda:	e009      	b.n	8011df0 <_ZN10XFBehaviorC1Eb+0x64>
    }
    else
    {
        pDispatcher_ = XFResourceFactory::getInstance()->getDefaultDispatcher();
 8011ddc:	f000 fbf2 	bl	80125c4 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8011de0:	4603      	mov	r3, r0
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	6812      	ldr	r2, [r2, #0]
 8011de6:	4618      	mov	r0, r3
 8011de8:	4790      	blx	r2
 8011dea:	4602      	mov	r2, r0
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	605a      	str	r2, [r3, #4]

    // Force hasOwnDispatcher attribute to false in case actual
    // dispatcher is the default dispatcher. This may happen
    // if in an IDF an other dispatcher is requested, but
    // only the default dispatcher is present.
    if (pDispatcher_ == XFResourceFactory::getInstance()->getDefaultDispatcher())
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	685c      	ldr	r4, [r3, #4]
 8011df4:	f000 fbe6 	bl	80125c4 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	681a      	ldr	r2, [r3, #0]
 8011dfc:	6812      	ldr	r2, [r2, #0]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	4790      	blx	r2
 8011e02:	4603      	mov	r3, r0
 8011e04:	429c      	cmp	r4, r3
 8011e06:	bf0c      	ite	eq
 8011e08:	2301      	moveq	r3, #1
 8011e0a:	2300      	movne	r3, #0
 8011e0c:	b2db      	uxtb	r3, r3
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d002      	beq.n	8011e18 <_ZN10XFBehaviorC1Eb+0x8c>
    {
        hasOwnDispatcher_ = false;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2200      	movs	r2, #0
 8011e16:	721a      	strb	r2, [r3, #8]
    }
}
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	370c      	adds	r7, #12
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd90      	pop	{r4, r7, pc}
 8011e22:	bf00      	nop
 8011e24:	0801c6fc 	.word	0x0801c6fc

08011e28 <_ZN10XFBehaviorD1Ev>:

XFBehavior::~XFBehavior()
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	4a05      	ldr	r2, [pc, #20]	; (8011e48 <_ZN10XFBehaviorD1Ev+0x20>)
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	601a      	str	r2, [r3, #0]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7ff ff87 	bl	8011d4c <_ZN9interface10XFReactiveD1Ev>
{

}
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	4618      	mov	r0, r3
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	0801c6fc 	.word	0x0801c6fc

08011e4c <_ZN10XFBehavior13startBehaviorEv>:

void XFBehavior::startBehavior()
{
 8011e4c:	b5b0      	push	{r4, r5, r7, lr}
 8011e4e:	b082      	sub	sp, #8
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
    // Send initial event to state machine
    GEN(XFInitialEvent());
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	330c      	adds	r3, #12
 8011e5a:	681c      	ldr	r4, [r3, #0]
 8011e5c:	2010      	movs	r0, #16
 8011e5e:	f007 fc46 	bl	80196ee <_Znwj>
 8011e62:	4603      	mov	r3, r0
 8011e64:	461d      	mov	r5, r3
 8011e66:	4628      	mov	r0, r5
 8011e68:	f000 f8da 	bl	8012020 <_ZN14XFInitialEventC1Ev>
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	4629      	mov	r1, r5
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	47a0      	blx	r4

    // Start dispatcher if behavior has its own dispatcher
    if (hasOwnDispatcher())
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f7ff ff4d 	bl	8011d14 <_ZNK10XFBehavior16hasOwnDispatcherEv>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d008      	beq.n	8011e92 <_ZN10XFBehavior13startBehaviorEv+0x46>
    {
        getDispatcher()->start();
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f000 f86a 	bl	8011f5a <_ZN10XFBehavior13getDispatcherEv>
 8011e86:	4603      	mov	r3, r0
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	320c      	adds	r2, #12
 8011e8c:	6812      	ldr	r2, [r2, #0]
 8011e8e:	4618      	mov	r0, r3
 8011e90:	4790      	blx	r2
    }
}
 8011e92:	bf00      	nop
 8011e94:	3708      	adds	r7, #8
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bdb0      	pop	{r4, r5, r7, pc}

08011e9a <_ZN10XFBehavior9pushEventEP7XFEventb>:

void XFBehavior::pushEvent(XFEvent * pEvent, bool fromISR)
{
 8011e9a:	b590      	push	{r4, r7, lr}
 8011e9c:	b085      	sub	sp, #20
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	60f8      	str	r0, [r7, #12]
 8011ea2:	60b9      	str	r1, [r7, #8]
 8011ea4:	4613      	mov	r3, r2
 8011ea6:	71fb      	strb	r3, [r7, #7]
    // Set owner
    pEvent->setBehavior(this);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	4619      	mov	r1, r3
 8011eac:	68b8      	ldr	r0, [r7, #8]
 8011eae:	f7ff ff0f 	bl	8011cd0 <_ZN7XFEvent11setBehaviorEPN9interface10XFReactiveE>
    // Push to dispatchers event queue
    getDispatcher()->pushEvent(pEvent, fromISR);
 8011eb2:	68f8      	ldr	r0, [r7, #12]
 8011eb4:	f000 f851 	bl	8011f5a <_ZN10XFBehavior13getDispatcherEv>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	681a      	ldr	r2, [r3, #0]
 8011ebc:	3214      	adds	r2, #20
 8011ebe:	6814      	ldr	r4, [r2, #0]
 8011ec0:	79fa      	ldrb	r2, [r7, #7]
 8011ec2:	68b9      	ldr	r1, [r7, #8]
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	47a0      	blx	r4
}
 8011ec8:	bf00      	nop
 8011eca:	3714      	adds	r7, #20
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd90      	pop	{r4, r7, pc}

08011ed0 <_ZNK10XFBehavior17deleteOnTerminateEv>:

bool XFBehavior::deleteOnTerminate() const
{
 8011ed0:	b480      	push	{r7}
 8011ed2:	b083      	sub	sp, #12
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
    return deleteOnTerminate_;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	7a5b      	ldrb	r3, [r3, #9]
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	370c      	adds	r7, #12
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee6:	4770      	bx	lr

08011ee8 <_ZN10XFBehavior20setDeleteOnTerminateEb>:

void XFBehavior::setDeleteOnTerminate(bool deleteBehaviour)
{
 8011ee8:	b480      	push	{r7}
 8011eea:	b083      	sub	sp, #12
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	460b      	mov	r3, r1
 8011ef2:	70fb      	strb	r3, [r7, #3]
    deleteOnTerminate_ = deleteBehaviour;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	78fa      	ldrb	r2, [r7, #3]
 8011ef8:	725a      	strb	r2, [r3, #9]
}
 8011efa:	bf00      	nop
 8011efc:	370c      	adds	r7, #12
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr

08011f06 <_ZN10XFBehavior7processEPK7XFEvent>:

XFBehavior::TerminateBehavior XFBehavior::process(const XFEvent * pEvent)
{
 8011f06:	b580      	push	{r7, lr}
 8011f08:	b084      	sub	sp, #16
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
 8011f0e:	6039      	str	r1, [r7, #0]
    XFEventStatus eventStatus;
 8011f10:	f107 030c 	add.w	r3, r7, #12
 8011f14:	2100      	movs	r1, #0
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7fe f803 	bl	800ff22 <_ZN13XFEventStatusC1ENS_12eEventStatusE>

    setCurrentEvent(pEvent);
 8011f1c:	6839      	ldr	r1, [r7, #0]
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f000 f827 	bl	8011f72 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>

    eventStatus = processEvent();
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	331c      	adds	r3, #28
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	4798      	blx	r3
 8011f30:	4603      	mov	r3, r0
 8011f32:	733b      	strb	r3, [r7, #12]

    setCurrentEvent(nullptr);
 8011f34:	2100      	movs	r1, #0
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f000 f81b 	bl	8011f72 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>

    return (eventStatus == XFEventStatus::Terminate);
 8011f3c:	2308      	movs	r3, #8
 8011f3e:	73fb      	strb	r3, [r7, #15]
 8011f40:	f107 020f 	add.w	r2, r7, #15
 8011f44:	f107 030c 	add.w	r3, r7, #12
 8011f48:	4611      	mov	r1, r2
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7ff fece 	bl	8011cec <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>
 8011f50:	4603      	mov	r3, r0
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3710      	adds	r7, #16
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}

08011f5a <_ZN10XFBehavior13getDispatcherEv>:

interface::XFDispatcher * XFBehavior::getDispatcher()
{
 8011f5a:	b480      	push	{r7}
 8011f5c:	b083      	sub	sp, #12
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
    return pDispatcher_;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	685b      	ldr	r3, [r3, #4]
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	370c      	adds	r7, #12
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr

08011f72 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>:

void XFBehavior::setCurrentEvent(const XFEvent * pEvent)
{
 8011f72:	b480      	push	{r7}
 8011f74:	b083      	sub	sp, #12
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	6078      	str	r0, [r7, #4]
 8011f7a:	6039      	str	r1, [r7, #0]
    pCurrentEvent_ = pEvent;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	683a      	ldr	r2, [r7, #0]
 8011f80:	60da      	str	r2, [r3, #12]
}
 8011f82:	bf00      	nop
 8011f84:	370c      	adds	r7, #12
 8011f86:	46bd      	mov	sp, r7
 8011f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8c:	4770      	bx	lr

08011f8e <_ZNK10XFBehavior15getCurrentEventEv>:

const XFEvent * XFBehavior::getCurrentEvent() const
{
 8011f8e:	b480      	push	{r7}
 8011f90:	b083      	sub	sp, #12
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	6078      	str	r0, [r7, #4]
    return pCurrentEvent_;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	68db      	ldr	r3, [r3, #12]
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	370c      	adds	r7, #12
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa4:	4770      	bx	lr
	...

08011fa8 <_ZN10XFBehavior17getCurrentTimeoutEv>:

const XFTimeout * XFBehavior::getCurrentTimeout()
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b082      	sub	sp, #8
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
    assert(getCurrentEvent()->getEventType() == XFEvent::Timeout);
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f7ff ffec 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7fd ff99 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	2b04      	cmp	r3, #4
 8011fc2:	d005      	beq.n	8011fd0 <_ZN10XFBehavior17getCurrentTimeoutEv+0x28>
 8011fc4:	4b06      	ldr	r3, [pc, #24]	; (8011fe0 <_ZN10XFBehavior17getCurrentTimeoutEv+0x38>)
 8011fc6:	4a07      	ldr	r2, [pc, #28]	; (8011fe4 <_ZN10XFBehavior17getCurrentTimeoutEv+0x3c>)
 8011fc8:	2165      	movs	r1, #101	; 0x65
 8011fca:	4807      	ldr	r0, [pc, #28]	; (8011fe8 <_ZN10XFBehavior17getCurrentTimeoutEv+0x40>)
 8011fcc:	f007 fdb6 	bl	8019b3c <__assert_func>

    return static_cast<const XFTimeout *>(getCurrentEvent());
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f7ff ffdc 	bl	8011f8e <_ZNK10XFBehavior15getCurrentEventEv>
 8011fd6:	4603      	mov	r3, r0
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	3708      	adds	r7, #8
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	0801befc 	.word	0x0801befc
 8011fe4:	0801bf34 	.word	0x0801bf34
 8011fe8:	0801bf68 	.word	0x0801bf68

08011fec <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>:
#include "xf/customevent.h"

XFCustomEvent::XFCustomEvent(int id, interface::XFReactive * pBehavior)
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b084      	sub	sp, #16
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	60f8      	str	r0, [r7, #12]
 8011ff4:	60b9      	str	r1, [r7, #8]
 8011ff6:	607a      	str	r2, [r7, #4]
    : XFEvent(XFEvent::Event, id, pBehavior),
      bDeleteAfterConsume_(true)
 8011ff8:	68f8      	ldr	r0, [r7, #12]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	68ba      	ldr	r2, [r7, #8]
 8011ffe:	2103      	movs	r1, #3
 8012000:	f7fe fbe4 	bl	80107cc <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 8012004:	4a05      	ldr	r2, [pc, #20]	; (801201c <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE+0x30>)
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	601a      	str	r2, [r3, #0]
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	2201      	movs	r2, #1
 801200e:	741a      	strb	r2, [r3, #16]
{

}
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	4618      	mov	r0, r3
 8012014:	3710      	adds	r7, #16
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
 801201a:	bf00      	nop
 801201c:	0801c644 	.word	0x0801c644

08012020 <_ZN14XFInitialEventC1Ev>:
#include "xf/initialevent.h"

XFInitialEvent::XFInitialEvent()
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
    : XFEvent(XFEvent::Initial, 0, nullptr)
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	2300      	movs	r3, #0
 801202c:	2200      	movs	r2, #0
 801202e:	2101      	movs	r1, #1
 8012030:	f7fe fbcc 	bl	80107cc <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 8012034:	4a03      	ldr	r2, [pc, #12]	; (8012044 <_ZN14XFInitialEventC1Ev+0x24>)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	601a      	str	r2, [r3, #0]
{
}
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	4618      	mov	r0, r3
 801203e:	3708      	adds	r7, #8
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	0801c748 	.word	0x0801c748

08012048 <_ZNK14XFInitialEvent18deleteAfterConsumeEv>:

bool XFInitialEvent::deleteAfterConsume() const
{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
    return true;
 8012050:	2301      	movs	r3, #1
}
 8012052:	4618      	mov	r0, r3
 8012054:	370c      	adds	r7, #12
 8012056:	46bd      	mov	sp, r7
 8012058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205c:	4770      	bx	lr
	...

08012060 <_ZN14XFInitialEventD1Ev>:
 * @brief Initial event to start a behavior.
 *
 * Represents for example the first transition executed
 * in a state machine.
 */
class XFInitialEvent : public XFEvent
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	4a05      	ldr	r2, [pc, #20]	; (8012080 <_ZN14XFInitialEventD1Ev+0x20>)
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	601a      	str	r2, [r3, #0]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	4618      	mov	r0, r3
 8012072:	f7fe fbc9 	bl	8010808 <_ZN7XFEventD1Ev>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	4618      	mov	r0, r3
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}
 8012080:	0801c748 	.word	0x0801c748

08012084 <_ZN14XFInitialEventD0Ev>:
 8012084:	b580      	push	{r7, lr}
 8012086:	b082      	sub	sp, #8
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f7ff ffe7 	bl	8012060 <_ZN14XFInitialEventD1Ev>
 8012092:	2110      	movs	r1, #16
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f007 fb19 	bl	80196cc <_ZdlPvj>
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	4618      	mov	r0, r3
 801209e:	3708      	adds	r7, #8
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>:
#include "xf/nulltransition.h"

XFNullTransition::XFNullTransition(interface::XFReactive * pBehavior)
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
 : XFEvent(XFEvent::NullTransition, 0, pBehavior)
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	2200      	movs	r2, #0
 80120b4:	2102      	movs	r1, #2
 80120b6:	f7fe fb89 	bl	80107cc <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 80120ba:	4a04      	ldr	r2, [pc, #16]	; (80120cc <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE+0x28>)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	601a      	str	r2, [r3, #0]
{
}
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	4618      	mov	r0, r3
 80120c4:	3708      	adds	r7, #8
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}
 80120ca:	bf00      	nop
 80120cc:	0801c75c 	.word	0x0801c75c

080120d0 <_ZNK16XFNullTransition18deleteAfterConsumeEv>:

bool XFNullTransition::deleteAfterConsume() const
{
 80120d0:	b480      	push	{r7}
 80120d2:	b083      	sub	sp, #12
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
    return true;
 80120d8:	2301      	movs	r3, #1
}
 80120da:	4618      	mov	r0, r3
 80120dc:	370c      	adds	r7, #12
 80120de:	46bd      	mov	sp, r7
 80120e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e4:	4770      	bx	lr
	...

080120e8 <_ZN16XFNullTransitionD1Ev>:
 * Represents a transition in a state machine having no trigger.
 *
 * In case one wants to directly transition from one state to
 * an other (without a trigger) a null transition must be pushed.
 */
class XFNullTransition : public XFEvent
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b082      	sub	sp, #8
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	4a05      	ldr	r2, [pc, #20]	; (8012108 <_ZN16XFNullTransitionD1Ev+0x20>)
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	601a      	str	r2, [r3, #0]
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7fe fb85 	bl	8010808 <_ZN7XFEventD1Ev>
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	4618      	mov	r0, r3
 8012102:	3708      	adds	r7, #8
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}
 8012108:	0801c75c 	.word	0x0801c75c

0801210c <_ZN16XFNullTransitionD0Ev>:
 801210c:	b580      	push	{r7, lr}
 801210e:	b082      	sub	sp, #8
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f7ff ffe7 	bl	80120e8 <_ZN16XFNullTransitionD1Ev>
 801211a:	2110      	movs	r1, #16
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f007 fad5 	bl	80196cc <_ZdlPvj>
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	4618      	mov	r0, r3
 8012126:	3708      	adds	r7, #8
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>:
#include "xf/timeout.h"

XFTimeout::XFTimeout(int id, int interval, interface::XFReactive * pBehavior)
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	60b9      	str	r1, [r7, #8]
 8012136:	607a      	str	r2, [r7, #4]
 8012138:	603b      	str	r3, [r7, #0]
 : XFEvent(XFEvent::Timeout, id, pBehavior),
   interval_(interval),
   relTicks_(interval)
 801213a:	68f8      	ldr	r0, [r7, #12]
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	68ba      	ldr	r2, [r7, #8]
 8012140:	2104      	movs	r1, #4
 8012142:	f7fe fb43 	bl	80107cc <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 8012146:	4a07      	ldr	r2, [pc, #28]	; (8012164 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE+0x38>)
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	601a      	str	r2, [r3, #0]
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	687a      	ldr	r2, [r7, #4]
 8012150:	611a      	str	r2, [r3, #16]
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	687a      	ldr	r2, [r7, #4]
 8012156:	615a      	str	r2, [r3, #20]
{
}
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	4618      	mov	r0, r3
 801215c:	3710      	adds	r7, #16
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}
 8012162:	bf00      	nop
 8012164:	0801c770 	.word	0x0801c770

08012168 <_ZNK9XFTimeouteqERKS_>:

bool XFTimeout::operator ==(const XFTimeout & timeout) const
{
 8012168:	b590      	push	{r4, r7, lr}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
    // Check behavior and timeout id attributes, if there are equal
    return (pBehavior_ == timeout.pBehavior_ && getId() == timeout.getId()) ? true : false;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	68da      	ldr	r2, [r3, #12]
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	68db      	ldr	r3, [r3, #12]
 801217a:	429a      	cmp	r2, r3
 801217c:	d10d      	bne.n	801219a <_ZNK9XFTimeouteqERKS_+0x32>
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	4618      	mov	r0, r3
 8012182:	f7fd fec2 	bl	800ff0a <_ZNK7XFEvent5getIdEv>
 8012186:	4604      	mov	r4, r0
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	4618      	mov	r0, r3
 801218c:	f7fd febd 	bl	800ff0a <_ZNK7XFEvent5getIdEv>
 8012190:	4603      	mov	r3, r0
 8012192:	429c      	cmp	r4, r3
 8012194:	d101      	bne.n	801219a <_ZNK9XFTimeouteqERKS_+0x32>
 8012196:	2301      	movs	r3, #1
 8012198:	e000      	b.n	801219c <_ZNK9XFTimeouteqERKS_+0x34>
 801219a:	2300      	movs	r3, #0
}
 801219c:	4618      	mov	r0, r3
 801219e:	370c      	adds	r7, #12
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd90      	pop	{r4, r7, pc}

080121a4 <_ZNK9XFTimeout18deleteAfterConsumeEv>:

bool XFTimeout::deleteAfterConsume() const
{
 80121a4:	b480      	push	{r7}
 80121a6:	b083      	sub	sp, #12
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
    return true;
 80121ac:	2301      	movs	r3, #1
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	370c      	adds	r7, #12
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr
	...

080121bc <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	4a05      	ldr	r2, [pc, #20]	; (80121dc <_ZN9XFTimeoutD1Ev+0x20>)
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	601a      	str	r2, [r3, #0]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7fe fb1b 	bl	8010808 <_ZN7XFEventD1Ev>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	4618      	mov	r0, r3
 80121d6:	3708      	adds	r7, #8
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}
 80121dc:	0801c770 	.word	0x0801c770

080121e0 <_ZN9XFTimeoutD0Ev>:
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b082      	sub	sp, #8
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f7ff ffe7 	bl	80121bc <_ZN9XFTimeoutD1Ev>
 80121ee:	2118      	movs	r1, #24
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f007 fa6b 	bl	80196cc <_ZdlPvj>
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	4618      	mov	r0, r3
 80121fa:	3708      	adds	r7, #8
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}

08012200 <_ZNK7XFEvent11getBehaviorEv>:
    inline interface::XFReactive * getBehavior() const { return pBehavior_; }
 8012200:	b480      	push	{r7}
 8012202:	b083      	sub	sp, #12
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	68db      	ldr	r3, [r3, #12]
 801220c:	4618      	mov	r0, r3
 801220e:	370c      	adds	r7, #12
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr

08012218 <_ZNK9interface12XFDispatcher9getThreadEv>:
     * @brief Returns pointer to thread executing the behavior.
     *
     * Within an IDF no threads are present and this method returns
     * always null.
     */
    virtual interface::XFThread * getThread() const { return nullptr; }
 8012218:	b480      	push	{r7}
 801221a:	b083      	sub	sp, #12
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	2300      	movs	r3, #0
 8012222:	4618      	mov	r0, r3
 8012224:	370c      	adds	r7, #12
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr

0801222e <_ZNK19XFDispatcherDefault8isActiveEv>:
{
public:
	XFDispatcherDefault();
	virtual  ~XFDispatcherDefault();

	virtual bool isActive() const { return false; }		///< Default dispatcher does not have a composite thread.
 801222e:	b480      	push	{r7}
 8012230:	b083      	sub	sp, #12
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
 8012236:	2300      	movs	r3, #0
 8012238:	4618      	mov	r0, r3
 801223a:	370c      	adds	r7, #12
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr

08012244 <_ZN9interface12XFDispatcherC1Ev>:
    XFDispatcher() = default;
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	4a04      	ldr	r2, [pc, #16]	; (8012260 <_ZN9interface12XFDispatcherC1Ev+0x1c>)
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	601a      	str	r2, [r3, #0]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	4618      	mov	r0, r3
 8012256:	370c      	adds	r7, #12
 8012258:	46bd      	mov	sp, r7
 801225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225e:	4770      	bx	lr
 8012260:	0801c7bc 	.word	0x0801c7bc

08012264 <_ZN9interface12XFDispatcherD1Ev>:
    virtual ~XFDispatcher() = default;
 8012264:	b480      	push	{r7}
 8012266:	b083      	sub	sp, #12
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	4a04      	ldr	r2, [pc, #16]	; (8012280 <_ZN9interface12XFDispatcherD1Ev+0x1c>)
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	601a      	str	r2, [r3, #0]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	4618      	mov	r0, r3
 8012276:	370c      	adds	r7, #12
 8012278:	46bd      	mov	sp, r7
 801227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227e:	4770      	bx	lr
 8012280:	0801c7bc 	.word	0x0801c7bc

08012284 <_ZN9interface12XFDispatcherD0Ev>:
 8012284:	b580      	push	{r7, lr}
 8012286:	b082      	sub	sp, #8
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7ff ffe9 	bl	8012264 <_ZN9interface12XFDispatcherD1Ev>
 8012292:	2104      	movs	r1, #4
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f007 fa19 	bl	80196cc <_ZdlPvj>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	4618      	mov	r0, r3
 801229e:	3708      	adds	r7, #8
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <_ZN19XFDispatcherDefaultC1Ev>:
using interface::XFTimeoutManager;
using interface::XFResourceFactory;
using interface::XFReactive;
using interface::XFMutex;

XFDispatcherDefault::XFDispatcherDefault() :
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
	_bExecuting(false),
	_pMutex(nullptr)
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7ff ffc8 	bl	8012244 <_ZN9interface12XFDispatcherC1Ev>
 80122b4:	4a10      	ldr	r2, [pc, #64]	; (80122f8 <_ZN19XFDispatcherDefaultC1Ev+0x54>)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	601a      	str	r2, [r3, #0]
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2200      	movs	r2, #0
 80122be:	711a      	strb	r2, [r3, #4]
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	3308      	adds	r3, #8
 80122c4:	4618      	mov	r0, r3
 80122c6:	f001 fad1 	bl	801386c <_ZN19XFEventQueueDefaultC1Ev>
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2200      	movs	r2, #0
 80122ce:	639a      	str	r2, [r3, #56]	; 0x38
{
	_pMutex = XFMutex::create();
 80122d0:	f002 fab6 	bl	8014840 <_ZN9interface7XFMutex6createEv>
 80122d4:	4602      	mov	r2, r0
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	639a      	str	r2, [r3, #56]	; 0x38
	assert(_pMutex);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d105      	bne.n	80122ee <_ZN19XFDispatcherDefaultC1Ev+0x4a>
 80122e2:	4b06      	ldr	r3, [pc, #24]	; (80122fc <_ZN19XFDispatcherDefaultC1Ev+0x58>)
 80122e4:	4a06      	ldr	r2, [pc, #24]	; (8012300 <_ZN19XFDispatcherDefaultC1Ev+0x5c>)
 80122e6:	2118      	movs	r1, #24
 80122e8:	4806      	ldr	r0, [pc, #24]	; (8012304 <_ZN19XFDispatcherDefaultC1Ev+0x60>)
 80122ea:	f007 fc27 	bl	8019b3c <__assert_func>
}
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	4618      	mov	r0, r3
 80122f2:	3708      	adds	r7, #8
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	0801c784 	.word	0x0801c784
 80122fc:	0801bfdc 	.word	0x0801bfdc
 8012300:	0801bfe4 	.word	0x0801bfe4
 8012304:	0801c010 	.word	0x0801c010

08012308 <_ZN19XFDispatcherDefaultD1Ev>:

XFDispatcherDefault::~XFDispatcherDefault()
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
 8012310:	4a08      	ldr	r2, [pc, #32]	; (8012334 <_ZN19XFDispatcherDefaultD1Ev+0x2c>)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	601a      	str	r2, [r3, #0]
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	3308      	adds	r3, #8
 801231a:	4618      	mov	r0, r3
 801231c:	f001 fac2 	bl	80138a4 <_ZN19XFEventQueueDefaultD1Ev>
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	4618      	mov	r0, r3
 8012324:	f7ff ff9e 	bl	8012264 <_ZN9interface12XFDispatcherD1Ev>
{

}
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	4618      	mov	r0, r3
 801232c:	3708      	adds	r7, #8
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}
 8012332:	bf00      	nop
 8012334:	0801c784 	.word	0x0801c784

08012338 <_ZN19XFDispatcherDefaultD0Ev>:
XFDispatcherDefault::~XFDispatcherDefault()
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
}
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f7ff ffe1 	bl	8012308 <_ZN19XFDispatcherDefaultD1Ev>
 8012346:	213c      	movs	r1, #60	; 0x3c
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f007 f9bf 	bl	80196cc <_ZdlPvj>
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4618      	mov	r0, r3
 8012352:	3708      	adds	r7, #8
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}

08012358 <_ZN19XFDispatcherDefault5startEv>:

void XFDispatcherDefault::start()
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
        assert(_pMutex);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012364:	2b00      	cmp	r3, #0
 8012366:	d105      	bne.n	8012374 <_ZN19XFDispatcherDefault5startEv+0x1c>
 8012368:	4b06      	ldr	r3, [pc, #24]	; (8012384 <_ZN19XFDispatcherDefault5startEv+0x2c>)
 801236a:	4a07      	ldr	r2, [pc, #28]	; (8012388 <_ZN19XFDispatcherDefault5startEv+0x30>)
 801236c:	2122      	movs	r1, #34	; 0x22
 801236e:	4807      	ldr	r0, [pc, #28]	; (801238c <_ZN19XFDispatcherDefault5startEv+0x34>)
 8012370:	f007 fbe4 	bl	8019b3c <__assert_func>
	_bExecuting = true;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2201      	movs	r2, #1
 8012378:	711a      	strb	r2, [r3, #4]
}
 801237a:	bf00      	nop
 801237c:	3708      	adds	r7, #8
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	0801bfdc 	.word	0x0801bfdc
 8012388:	0801c094 	.word	0x0801c094
 801238c:	0801c010 	.word	0x0801c010

08012390 <_ZN19XFDispatcherDefault4stopEv>:

void XFDispatcherDefault::stop()
{
 8012390:	b480      	push	{r7}
 8012392:	b083      	sub	sp, #12
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
	_bExecuting = false;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2200      	movs	r2, #0
 801239c:	711a      	strb	r2, [r3, #4]
}
 801239e:	bf00      	nop
 80123a0:	370c      	adds	r7, #12
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr

080123aa <_ZN19XFDispatcherDefault9pushEventEP7XFEventb>:

void XFDispatcherDefault::pushEvent(XFEvent * pEvent, bool fromISR)
{
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b084      	sub	sp, #16
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	60f8      	str	r0, [r7, #12]
 80123b2:	60b9      	str	r1, [r7, #8]
 80123b4:	4613      	mov	r3, r2
 80123b6:	71fb      	strb	r3, [r7, #7]
	(void)fromISR;
	_pMutex->lock();
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	3308      	adds	r3, #8
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	4610      	mov	r0, r2
 80123c8:	4798      	blx	r3
	{
#ifdef XF_TRACE_EVENT_PUSH_POP
	    Trace::out("Push event: 0x%x", pEvent);
#endif // XF_TRACE_EVENT_PUSH_POP
		_events.push(pEvent);
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	3308      	adds	r3, #8
 80123ce:	2200      	movs	r2, #0
 80123d0:	68b9      	ldr	r1, [r7, #8]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f001 faa0 	bl	8013918 <_ZN19XFEventQueueDefault4pushEPK7XFEventb>
	}
	_pMutex->unlock();
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	330c      	adds	r3, #12
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	4610      	mov	r0, r2
 80123e8:	4798      	blx	r3
}
 80123ea:	bf00      	nop
 80123ec:	3710      	adds	r7, #16
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}

080123f2 <_ZN19XFDispatcherDefault15scheduleTimeoutEiiPN9interface10XFReactiveE>:

void XFDispatcherDefault::scheduleTimeout(int timeoutId, int interval, interface::XFReactive * pReactive)
{
 80123f2:	b590      	push	{r4, r7, lr}
 80123f4:	b085      	sub	sp, #20
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	60f8      	str	r0, [r7, #12]
 80123fa:	60b9      	str	r1, [r7, #8]
 80123fc:	607a      	str	r2, [r7, #4]
 80123fe:	603b      	str	r3, [r7, #0]
	// Forward timeout to the timeout manager
	XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId, interval, pReactive);
 8012400:	f000 fa6a 	bl	80128d8 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8012404:	6803      	ldr	r3, [r0, #0]
 8012406:	3314      	adds	r3, #20
 8012408:	681c      	ldr	r4, [r3, #0]
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	68b9      	ldr	r1, [r7, #8]
 8012410:	47a0      	blx	r4
}
 8012412:	bf00      	nop
 8012414:	3714      	adds	r7, #20
 8012416:	46bd      	mov	sp, r7
 8012418:	bd90      	pop	{r4, r7, pc}

0801241a <_ZN19XFDispatcherDefault17unscheduleTimeoutEiPN9interface10XFReactiveE>:

void XFDispatcherDefault::unscheduleTimeout(int timeoutId, interface::XFReactive * pReactive)
{
 801241a:	b590      	push	{r4, r7, lr}
 801241c:	b085      	sub	sp, #20
 801241e:	af00      	add	r7, sp, #0
 8012420:	60f8      	str	r0, [r7, #12]
 8012422:	60b9      	str	r1, [r7, #8]
 8012424:	607a      	str	r2, [r7, #4]
	// Forward timeout to the timeout manager
	XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId, pReactive);
 8012426:	f000 fa57 	bl	80128d8 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 801242a:	4603      	mov	r3, r0
 801242c:	681a      	ldr	r2, [r3, #0]
 801242e:	3218      	adds	r2, #24
 8012430:	6814      	ldr	r4, [r2, #0]
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	68b9      	ldr	r1, [r7, #8]
 8012436:	4618      	mov	r0, r3
 8012438:	47a0      	blx	r4
}
 801243a:	bf00      	nop
 801243c:	3714      	adds	r7, #20
 801243e:	46bd      	mov	sp, r7
 8012440:	bd90      	pop	{r4, r7, pc}

08012442 <_ZN19XFDispatcherDefault7executeEPKv>:

int XFDispatcherDefault::execute(const void * param /* = nullptr */)
{
 8012442:	b580      	push	{r7, lr}
 8012444:	b082      	sub	sp, #8
 8012446:	af00      	add	r7, sp, #0
 8012448:	6078      	str	r0, [r7, #4]
 801244a:	6039      	str	r1, [r7, #0]
	(void)param;	// Parameter not used at the method

	while(_bExecuting)
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	791b      	ldrb	r3, [r3, #4]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d019      	beq.n	8012488 <_ZN19XFDispatcherDefault7executeEPKv+0x46>
	{
		while (_events.empty() && _bExecuting)
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	3308      	adds	r3, #8
 8012458:	4618      	mov	r0, r3
 801245a:	f001 fa4f 	bl	80138fc <_ZNK19XFEventQueueDefault5emptyEv>
 801245e:	4603      	mov	r3, r0
 8012460:	2b00      	cmp	r3, #0
 8012462:	d005      	beq.n	8012470 <_ZN19XFDispatcherDefault7executeEPKv+0x2e>
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	791b      	ldrb	r3, [r3, #4]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d001      	beq.n	8012470 <_ZN19XFDispatcherDefault7executeEPKv+0x2e>
 801246c:	2301      	movs	r3, #1
 801246e:	e000      	b.n	8012472 <_ZN19XFDispatcherDefault7executeEPKv+0x30>
 8012470:	2300      	movs	r3, #0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <_ZN19XFDispatcherDefault7executeEPKv+0x38>
		{
			continue;	// Wait until something to do
 8012476:	bf00      	nop
		while (_events.empty() && _bExecuting)
 8012478:	e7ec      	b.n	8012454 <_ZN19XFDispatcherDefault7executeEPKv+0x12>
		}

		executeOnce();  // Dispatch next event
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	3328      	adds	r3, #40	; 0x28
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	4798      	blx	r3
	while(_bExecuting)
 8012486:	e7e1      	b.n	801244c <_ZN19XFDispatcherDefault7executeEPKv+0xa>
	}

	return 0;
 8012488:	2300      	movs	r3, #0
}
 801248a:	4618      	mov	r0, r3
 801248c:	3708      	adds	r7, #8
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <_ZN19XFDispatcherDefault11executeOnceEv>:

int XFDispatcherDefault::executeOnce()
{
 8012492:	b580      	push	{r7, lr}
 8012494:	b084      	sub	sp, #16
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
    if (!_events.empty() and _bExecuting)
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	3308      	adds	r3, #8
 801249e:	4618      	mov	r0, r3
 80124a0:	f001 fa2c 	bl	80138fc <_ZNK19XFEventQueueDefault5emptyEv>
 80124a4:	4603      	mov	r3, r0
 80124a6:	f083 0301 	eor.w	r3, r3, #1
 80124aa:	b2db      	uxtb	r3, r3
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d005      	beq.n	80124bc <_ZN19XFDispatcherDefault11executeOnceEv+0x2a>
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	791b      	ldrb	r3, [r3, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d001      	beq.n	80124bc <_ZN19XFDispatcherDefault11executeOnceEv+0x2a>
 80124b8:	2301      	movs	r3, #1
 80124ba:	e000      	b.n	80124be <_ZN19XFDispatcherDefault11executeOnceEv+0x2c>
 80124bc:	2300      	movs	r3, #0
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d046      	beq.n	8012550 <_ZN19XFDispatcherDefault11executeOnceEv+0xbe>
    {
        const XFEvent * pEvent;

        _pMutex->lock();
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	3308      	adds	r3, #8
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	4610      	mov	r0, r2
 80124d2:	4798      	blx	r3
        {
        	// Deque next event from queue
        	pEvent = _events.front(); _events.pop();
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	3308      	adds	r3, #8
 80124d8:	4618      	mov	r0, r3
 80124da:	f001 fa3b 	bl	8013954 <_ZN19XFEventQueueDefault5frontEv>
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	3308      	adds	r3, #8
 80124e4:	4618      	mov	r0, r3
 80124e6:	f001 fa50 	bl	801398a <_ZN19XFEventQueueDefault3popEv>
#ifdef XF_TRACE_EVENT_PUSH_POP
        	Trace::out("Pop event:  0x%x", pEvent);
#endif // XF_TRACE_EVENT_PUSH_POP
    	}
    	_pMutex->unlock();
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	330c      	adds	r3, #12
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	4610      	mov	r0, r2
 80124fa:	4798      	blx	r3

        if (pEvent)
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d026      	beq.n	8012550 <_ZN19XFDispatcherDefault11executeOnceEv+0xbe>
        {
            // Forward the event to the behavioral class
            dispatchEvent(pEvent);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	332c      	adds	r3, #44	; 0x2c
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	68f9      	ldr	r1, [r7, #12]
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	4798      	blx	r3

            if (pEvent->getEventType() == XFEvent::Terminate)
 8012510:	68f8      	ldr	r0, [r7, #12]
 8012512:	f7fd fced 	bl	800fef0 <_ZNK7XFEvent12getEventTypeEv>
 8012516:	4603      	mov	r3, r0
 8012518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801251c:	bf0c      	ite	eq
 801251e:	2301      	moveq	r3, #1
 8012520:	2300      	movne	r3, #0
 8012522:	b2db      	uxtb	r3, r3
 8012524:	2b00      	cmp	r3, #0
 8012526:	d002      	beq.n	801252e <_ZN19XFDispatcherDefault11executeOnceEv+0x9c>
            {
                // Exit the event loop
                _bExecuting = false;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2200      	movs	r2, #0
 801252c:	711a      	strb	r2, [r3, #4]
            }

            if (pEvent->deleteAfterConsume())
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	3308      	adds	r3, #8
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	68f8      	ldr	r0, [r7, #12]
 8012538:	4798      	blx	r3
 801253a:	4603      	mov	r3, r0
 801253c:	2b00      	cmp	r3, #0
 801253e:	d007      	beq.n	8012550 <_ZN19XFDispatcherDefault11executeOnceEv+0xbe>
            {
                // Remove the consumed event
                delete pEvent;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d004      	beq.n	8012550 <_ZN19XFDispatcherDefault11executeOnceEv+0xbe>
 8012546:	681a      	ldr	r2, [r3, #0]
 8012548:	3204      	adds	r2, #4
 801254a:	6812      	ldr	r2, [r2, #0]
 801254c:	4618      	mov	r0, r3
 801254e:	4790      	blx	r2
            }
        }
    }

    return _bExecuting;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	791b      	ldrb	r3, [r3, #4]
}
 8012554:	4618      	mov	r0, r3
 8012556:	3710      	adds	r7, #16
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent>:

void XFDispatcherDefault::dispatchEvent(const XFEvent * pEvent) const
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
    XFReactive::TerminateBehavior terminateBehavior;

	terminateBehavior = pEvent->getBehavior()->process(pEvent);
 8012566:	6838      	ldr	r0, [r7, #0]
 8012568:	f7ff fe4a 	bl	8012200 <_ZNK7XFEvent11getBehaviorEv>
 801256c:	4603      	mov	r3, r0
 801256e:	681a      	ldr	r2, [r3, #0]
 8012570:	3218      	adds	r2, #24
 8012572:	6812      	ldr	r2, [r2, #0]
 8012574:	6839      	ldr	r1, [r7, #0]
 8012576:	4618      	mov	r0, r3
 8012578:	4790      	blx	r2
 801257a:	4603      	mov	r3, r0
 801257c:	73fb      	strb	r3, [r7, #15]

	// Check if behavior should be deleted
	if (terminateBehavior and pEvent->getBehavior()->deleteOnTerminate())
 801257e:	7bfb      	ldrb	r3, [r7, #15]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d00d      	beq.n	80125a0 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x44>
 8012584:	6838      	ldr	r0, [r7, #0]
 8012586:	f7ff fe3b 	bl	8012200 <_ZNK7XFEvent11getBehaviorEv>
 801258a:	4603      	mov	r3, r0
 801258c:	681a      	ldr	r2, [r3, #0]
 801258e:	3210      	adds	r2, #16
 8012590:	6812      	ldr	r2, [r2, #0]
 8012592:	4618      	mov	r0, r3
 8012594:	4790      	blx	r2
 8012596:	4603      	mov	r3, r0
 8012598:	2b00      	cmp	r3, #0
 801259a:	d001      	beq.n	80125a0 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x44>
 801259c:	2301      	movs	r3, #1
 801259e:	e000      	b.n	80125a2 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x46>
 80125a0:	2300      	movs	r3, #0
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d00a      	beq.n	80125bc <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x60>
	{
		delete pEvent->getBehavior();
 80125a6:	6838      	ldr	r0, [r7, #0]
 80125a8:	f7ff fe2a 	bl	8012200 <_ZNK7XFEvent11getBehaviorEv>
 80125ac:	4603      	mov	r3, r0
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d004      	beq.n	80125bc <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x60>
 80125b2:	681a      	ldr	r2, [r3, #0]
 80125b4:	3204      	adds	r2, #4
 80125b6:	6812      	ldr	r2, [r2, #0]
 80125b8:	4618      	mov	r0, r3
 80125ba:	4790      	blx	r2
	}
}
 80125bc:	bf00      	nop
 80125be:	3710      	adds	r7, #16
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <_ZN9interface17XFResourceFactory11getInstanceEv>:
#include "resourcefactory-default.h"
#include "mutex-default.h"

//static
interface::XFResourceFactory * interface::XFResourceFactory::getInstance()
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	af00      	add	r7, sp, #0
	return XFResourceFactoryDefault::getInstance();
 80125c8:	f000 f82c 	bl	8012624 <_ZN24XFResourceFactoryDefault11getInstanceEv>
 80125cc:	4603      	mov	r3, r0
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	bd80      	pop	{r7, pc}
	...

080125d4 <_ZN9interface17XFResourceFactoryD1Ev>:
     * @brief Returns a new mutex.
     * @return Pointer to new mutex.
     */
    virtual interface::XFMutex * createMutex() = 0;

    virtual ~XFResourceFactory() = default;
 80125d4:	b480      	push	{r7}
 80125d6:	b083      	sub	sp, #12
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	4a04      	ldr	r2, [pc, #16]	; (80125f0 <_ZN9interface17XFResourceFactoryD1Ev+0x1c>)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	601a      	str	r2, [r3, #0]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	4618      	mov	r0, r3
 80125e6:	370c      	adds	r7, #12
 80125e8:	46bd      	mov	sp, r7
 80125ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ee:	4770      	bx	lr
 80125f0:	0801c814 	.word	0x0801c814

080125f4 <_ZN9interface17XFResourceFactoryD0Ev>:
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b082      	sub	sp, #8
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f7ff ffe9 	bl	80125d4 <_ZN9interface17XFResourceFactoryD1Ev>
 8012602:	2104      	movs	r1, #4
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f007 f861 	bl	80196cc <_ZdlPvj>
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	4618      	mov	r0, r3
 801260e:	3708      	adds	r7, #8
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}

08012614 <__tcf_0>:

//static
interface::XFResourceFactory * XFResourceFactoryDefault::getInstance()
{
    static XFResourceFactoryDefault theResourceFactory;
 8012614:	b580      	push	{r7, lr}
 8012616:	af00      	add	r7, sp, #0
 8012618:	4801      	ldr	r0, [pc, #4]	; (8012620 <__tcf_0+0xc>)
 801261a:	f000 f8bf 	bl	801279c <_ZN24XFResourceFactoryDefaultD1Ev>
 801261e:	bd80      	pop	{r7, pc}
 8012620:	2000005c 	.word	0x2000005c

08012624 <_ZN24XFResourceFactoryDefault11getInstanceEv>:
{
 8012624:	b580      	push	{r7, lr}
 8012626:	af00      	add	r7, sp, #0
    static XFResourceFactoryDefault theResourceFactory;
 8012628:	4b10      	ldr	r3, [pc, #64]	; (801266c <_ZN24XFResourceFactoryDefault11getInstanceEv+0x48>)
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	f3bf 8f5b 	dmb	ish
 8012630:	b2db      	uxtb	r3, r3
 8012632:	f003 0301 	and.w	r3, r3, #1
 8012636:	2b00      	cmp	r3, #0
 8012638:	bf0c      	ite	eq
 801263a:	2301      	moveq	r3, #1
 801263c:	2300      	movne	r3, #0
 801263e:	b2db      	uxtb	r3, r3
 8012640:	2b00      	cmp	r3, #0
 8012642:	d010      	beq.n	8012666 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x42>
 8012644:	4809      	ldr	r0, [pc, #36]	; (801266c <_ZN24XFResourceFactoryDefault11getInstanceEv+0x48>)
 8012646:	f007 f843 	bl	80196d0 <__cxa_guard_acquire>
 801264a:	4603      	mov	r3, r0
 801264c:	2b00      	cmp	r3, #0
 801264e:	bf14      	ite	ne
 8012650:	2301      	movne	r3, #1
 8012652:	2300      	moveq	r3, #0
 8012654:	b2db      	uxtb	r3, r3
 8012656:	2b00      	cmp	r3, #0
 8012658:	d005      	beq.n	8012666 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x42>
 801265a:	4805      	ldr	r0, [pc, #20]	; (8012670 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x4c>)
 801265c:	f007 fa8c 	bl	8019b78 <atexit>
 8012660:	4802      	ldr	r0, [pc, #8]	; (801266c <_ZN24XFResourceFactoryDefault11getInstanceEv+0x48>)
 8012662:	f007 f841 	bl	80196e8 <__cxa_guard_release>

	return &theResourceFactory;
 8012666:	4b03      	ldr	r3, [pc, #12]	; (8012674 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x50>)
}
 8012668:	4618      	mov	r0, r3
 801266a:	bd80      	pop	{r7, pc}
 801266c:	20001c28 	.word	0x20001c28
 8012670:	08012615 	.word	0x08012615
 8012674:	2000005c 	.word	0x2000005c

08012678 <__tcf_1>:

interface::XFDispatcher * XFResourceFactoryDefault::getDefaultDispatcher()
{
	static XFDispatcherDefault mainDispatcher;
 8012678:	b580      	push	{r7, lr}
 801267a:	af00      	add	r7, sp, #0
 801267c:	4801      	ldr	r0, [pc, #4]	; (8012684 <__tcf_1+0xc>)
 801267e:	f7ff fe43 	bl	8012308 <_ZN19XFDispatcherDefaultD1Ev>
 8012682:	bd80      	pop	{r7, pc}
 8012684:	20001c2c 	.word	0x20001c2c

08012688 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv>:
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b082      	sub	sp, #8
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
	static XFDispatcherDefault mainDispatcher;
 8012690:	4b13      	ldr	r3, [pc, #76]	; (80126e0 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x58>)
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	f3bf 8f5b 	dmb	ish
 8012698:	b2db      	uxtb	r3, r3
 801269a:	f003 0301 	and.w	r3, r3, #1
 801269e:	2b00      	cmp	r3, #0
 80126a0:	bf0c      	ite	eq
 80126a2:	2301      	moveq	r3, #1
 80126a4:	2300      	movne	r3, #0
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d013      	beq.n	80126d4 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x4c>
 80126ac:	480c      	ldr	r0, [pc, #48]	; (80126e0 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x58>)
 80126ae:	f007 f80f 	bl	80196d0 <__cxa_guard_acquire>
 80126b2:	4603      	mov	r3, r0
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	bf14      	ite	ne
 80126b8:	2301      	movne	r3, #1
 80126ba:	2300      	moveq	r3, #0
 80126bc:	b2db      	uxtb	r3, r3
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d008      	beq.n	80126d4 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x4c>
 80126c2:	4808      	ldr	r0, [pc, #32]	; (80126e4 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x5c>)
 80126c4:	f7ff fdee 	bl	80122a4 <_ZN19XFDispatcherDefaultC1Ev>
 80126c8:	4807      	ldr	r0, [pc, #28]	; (80126e8 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x60>)
 80126ca:	f007 fa55 	bl	8019b78 <atexit>
 80126ce:	4804      	ldr	r0, [pc, #16]	; (80126e0 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x58>)
 80126d0:	f007 f80a 	bl	80196e8 <__cxa_guard_release>

	return &mainDispatcher;
 80126d4:	4b03      	ldr	r3, [pc, #12]	; (80126e4 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x5c>)
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
 80126de:	bf00      	nop
 80126e0:	20001c68 	.word	0x20001c68
 80126e4:	20001c2c 	.word	0x20001c2c
 80126e8:	08012679 	.word	0x08012679

080126ec <_ZN24XFResourceFactoryDefault16createDispatcherEv>:

interface::XFDispatcher * XFResourceFactoryDefault::createDispatcher()
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b082      	sub	sp, #8
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
	// Default implementation cannot create new dispatcher. Return the default dispatcher
	return getDefaultDispatcher();
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	4798      	blx	r3
 80126fe:	4603      	mov	r3, r0
}
 8012700:	4618      	mov	r0, r3
 8012702:	3708      	adds	r7, #8
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <_ZN24XFResourceFactoryDefault12createThreadEPN9interface26XFThreadEntryPointProviderEMS1_FvPKvEPKcm>:

interface::XFThread * XFResourceFactoryDefault::createThread(interface::XFThreadEntryPointProvider * pProvider,
												  	  	     interface::XFThread::EntryMethodBody entryMethod,
														     const char * threadName,
														     const uint32_t stackSize /* = 0 */)
{
 8012708:	b480      	push	{r7}
 801270a:	b085      	sub	sp, #20
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	4639      	mov	r1, r7
 8012714:	e881 000c 	stmia.w	r1, {r2, r3}
	// Default implementation cannot create threads (no underlying OS present)
	return nullptr;
 8012718:	2300      	movs	r3, #0
}
 801271a:	4618      	mov	r0, r3
 801271c:	3714      	adds	r7, #20
 801271e:	46bd      	mov	sp, r7
 8012720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012724:	4770      	bx	lr
	...

08012728 <__tcf_2>:

interface::XFMutex * XFResourceFactoryDefault::createMutex()
{
	static XFMutexDefault mutex;
 8012728:	b580      	push	{r7, lr}
 801272a:	af00      	add	r7, sp, #0
 801272c:	4801      	ldr	r0, [pc, #4]	; (8012734 <__tcf_2+0xc>)
 801272e:	f002 f8d7 	bl	80148e0 <_ZN14XFMutexDefaultD1Ev>
 8012732:	bd80      	pop	{r7, pc}
 8012734:	20001c6c 	.word	0x20001c6c

08012738 <_ZN24XFResourceFactoryDefault11createMutexEv>:
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
	static XFMutexDefault mutex;
 8012740:	4b13      	ldr	r3, [pc, #76]	; (8012790 <_ZN24XFResourceFactoryDefault11createMutexEv+0x58>)
 8012742:	781b      	ldrb	r3, [r3, #0]
 8012744:	f3bf 8f5b 	dmb	ish
 8012748:	b2db      	uxtb	r3, r3
 801274a:	f003 0301 	and.w	r3, r3, #1
 801274e:	2b00      	cmp	r3, #0
 8012750:	bf0c      	ite	eq
 8012752:	2301      	moveq	r3, #1
 8012754:	2300      	movne	r3, #0
 8012756:	b2db      	uxtb	r3, r3
 8012758:	2b00      	cmp	r3, #0
 801275a:	d013      	beq.n	8012784 <_ZN24XFResourceFactoryDefault11createMutexEv+0x4c>
 801275c:	480c      	ldr	r0, [pc, #48]	; (8012790 <_ZN24XFResourceFactoryDefault11createMutexEv+0x58>)
 801275e:	f006 ffb7 	bl	80196d0 <__cxa_guard_acquire>
 8012762:	4603      	mov	r3, r0
 8012764:	2b00      	cmp	r3, #0
 8012766:	bf14      	ite	ne
 8012768:	2301      	movne	r3, #1
 801276a:	2300      	moveq	r3, #0
 801276c:	b2db      	uxtb	r3, r3
 801276e:	2b00      	cmp	r3, #0
 8012770:	d008      	beq.n	8012784 <_ZN24XFResourceFactoryDefault11createMutexEv+0x4c>
 8012772:	4808      	ldr	r0, [pc, #32]	; (8012794 <_ZN24XFResourceFactoryDefault11createMutexEv+0x5c>)
 8012774:	f002 f8a2 	bl	80148bc <_ZN14XFMutexDefaultC1Ev>
 8012778:	4807      	ldr	r0, [pc, #28]	; (8012798 <_ZN24XFResourceFactoryDefault11createMutexEv+0x60>)
 801277a:	f007 f9fd 	bl	8019b78 <atexit>
 801277e:	4804      	ldr	r0, [pc, #16]	; (8012790 <_ZN24XFResourceFactoryDefault11createMutexEv+0x58>)
 8012780:	f006 ffb2 	bl	80196e8 <__cxa_guard_release>

	return &mutex;
 8012784:	4b03      	ldr	r3, [pc, #12]	; (8012794 <_ZN24XFResourceFactoryDefault11createMutexEv+0x5c>)
}
 8012786:	4618      	mov	r0, r3
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	20001c70 	.word	0x20001c70
 8012794:	20001c6c 	.word	0x20001c6c
 8012798:	08012729 	.word	0x08012729

0801279c <_ZN24XFResourceFactoryDefaultD1Ev>:
 * @brief Default implementation of the XF resource factory.
 */
class XFResourceFactoryDefault : public interface::XFResourceFactory
{
public:
	virtual ~XFResourceFactoryDefault() = default;
 801279c:	b580      	push	{r7, lr}
 801279e:	b082      	sub	sp, #8
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	4a05      	ldr	r2, [pc, #20]	; (80127bc <_ZN24XFResourceFactoryDefaultD1Ev+0x20>)
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	601a      	str	r2, [r3, #0]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7ff ff11 	bl	80125d4 <_ZN9interface17XFResourceFactoryD1Ev>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	4618      	mov	r0, r3
 80127b6:	3708      	adds	r7, #8
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}
 80127bc:	0801c7f4 	.word	0x0801c7f4

080127c0 <_ZN24XFResourceFactoryDefaultD0Ev>:
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f7ff ffe7 	bl	801279c <_ZN24XFResourceFactoryDefaultD1Ev>
 80127ce:	2104      	movs	r1, #4
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f006 ff7b 	bl	80196cc <_ZdlPvj>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	4618      	mov	r0, r3
 80127da:	3708      	adds	r7, #8
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b082      	sub	sp, #8
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 80127e8:	6878      	ldr	r0, [r7, #4]
 80127ea:	f000 f805 	bl	80127f8 <_ZNSt8__detail17_List_node_header7_M_initEv>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4618      	mov	r0, r3
 80127f2:	3708      	adds	r7, #8
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 80127f8:	b480      	push	{r7}
 80127fa:	b083      	sub	sp, #12
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8012800:	687a      	ldr	r2, [r7, #4]
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	605a      	str	r2, [r3, #4]
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	685a      	ldr	r2, [r3, #4]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2200      	movs	r2, #0
 8012812:	609a      	str	r2, [r3, #8]
#endif
      }
 8012814:	bf00      	nop
 8012816:	370c      	adds	r7, #12
 8012818:	46bd      	mov	sp, r7
 801281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281e:	4770      	bx	lr

08012820 <_ZN9interface16XFTimeoutManager10initializeEl>:

    /**
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
 8012820:	b480      	push	{r7}
 8012822:	b083      	sub	sp, #12
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	6039      	str	r1, [r7, #0]
    {
        tickInterval_ = tickInterval;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	683a      	ldr	r2, [r7, #0]
 801282e:	605a      	str	r2, [r3, #4]
    }
 8012830:	bf00      	nop
 8012832:	370c      	adds	r7, #12
 8012834:	46bd      	mov	sp, r7
 8012836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283a:	4770      	bx	lr

0801283c <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:

    /**
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
 801283c:	b480      	push	{r7}
 801283e:	b083      	sub	sp, #12
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
    {
        return tickInterval_;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	685b      	ldr	r3, [r3, #4]
    }
 8012848:	4618      	mov	r0, r3
 801284a:	370c      	adds	r7, #12
 801284c:	46bd      	mov	sp, r7
 801284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012852:	4770      	bx	lr

08012854 <_ZN9interface16XFTimeoutManagerC1Ev>:
     * belongs.
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
 8012854:	b480      	push	{r7}
 8012856:	b083      	sub	sp, #12
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
        tickInterval_(0)
 801285c:	4a06      	ldr	r2, [pc, #24]	; (8012878 <_ZN9interface16XFTimeoutManagerC1Ev+0x24>)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	601a      	str	r2, [r3, #0]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2200      	movs	r2, #0
 8012866:	605a      	str	r2, [r3, #4]
    {}
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	4618      	mov	r0, r3
 801286c:	370c      	adds	r7, #12
 801286e:	46bd      	mov	sp, r7
 8012870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012874:	4770      	bx	lr
 8012876:	bf00      	nop
 8012878:	0801c860 	.word	0x0801c860

0801287c <_ZNK9XFTimeout11getRelTicksEv>:
    bool operator ==(const XFTimeout & timeout) const;

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 801287c:	b480      	push	{r7}
 801287e:	b083      	sub	sp, #12
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	695b      	ldr	r3, [r3, #20]
 8012888:	4618      	mov	r0, r3
 801288a:	370c      	adds	r7, #12
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr

08012894 <_ZN9XFTimeout21substractFromRelTicksEi>:
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8012894:	b480      	push	{r7}
 8012896:	b083      	sub	sp, #12
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	6039      	str	r1, [r7, #0]
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	695a      	ldr	r2, [r3, #20]
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	1ad2      	subs	r2, r2, r3
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	615a      	str	r2, [r3, #20]
 80128aa:	bf00      	nop
 80128ac:	370c      	adds	r7, #12
 80128ae:	46bd      	mov	sp, r7
 80128b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b4:	4770      	bx	lr

080128b6 <_ZN9XFTimeout13addToRelTicksEi>:
    inline void addToRelTicks(int ticksToAdd) { relTicks_ += ticksToAdd; }                          ///< Adds `ticksToAdd` to remaining ticks.
 80128b6:	b480      	push	{r7}
 80128b8:	b083      	sub	sp, #12
 80128ba:	af00      	add	r7, sp, #0
 80128bc:	6078      	str	r0, [r7, #4]
 80128be:	6039      	str	r1, [r7, #0]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	695a      	ldr	r2, [r3, #20]
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	441a      	add	r2, r3
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	615a      	str	r2, [r3, #20]
 80128cc:	bf00      	nop
 80128ce:	370c      	adds	r7, #12
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr

080128d8 <_ZN9interface16XFTimeoutManager11getInstanceEv>:
#include "timeoutmanager-default.h"

using interface::XFMutex;

interface::XFTimeoutManager * interface::XFTimeoutManager::getInstance()
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	af00      	add	r7, sp, #0
    return XFTimeoutManagerDefault::getInstance();
 80128dc:	f000 f80c 	bl	80128f8 <_ZN23XFTimeoutManagerDefault11getInstanceEv>
 80128e0:	4603      	mov	r3, r0
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	bd80      	pop	{r7, pc}
	...

080128e8 <__tcf_0>:

interface::XFTimeoutManager * XFTimeoutManagerDefault::getInstance()
{
    static XFTimeoutManagerDefault timeoutManager;
 80128e8:	b580      	push	{r7, lr}
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	4801      	ldr	r0, [pc, #4]	; (80128f4 <__tcf_0+0xc>)
 80128ee:	f000 f8b5 	bl	8012a5c <_ZN23XFTimeoutManagerDefaultD1Ev>
 80128f2:	bd80      	pop	{r7, pc}
 80128f4:	20001c74 	.word	0x20001c74

080128f8 <_ZN23XFTimeoutManagerDefault11getInstanceEv>:
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	af00      	add	r7, sp, #0
    static XFTimeoutManagerDefault timeoutManager;
 80128fc:	4b12      	ldr	r3, [pc, #72]	; (8012948 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x50>)
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	f3bf 8f5b 	dmb	ish
 8012904:	b2db      	uxtb	r3, r3
 8012906:	f003 0301 	and.w	r3, r3, #1
 801290a:	2b00      	cmp	r3, #0
 801290c:	bf0c      	ite	eq
 801290e:	2301      	moveq	r3, #1
 8012910:	2300      	movne	r3, #0
 8012912:	b2db      	uxtb	r3, r3
 8012914:	2b00      	cmp	r3, #0
 8012916:	d013      	beq.n	8012940 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x48>
 8012918:	480b      	ldr	r0, [pc, #44]	; (8012948 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x50>)
 801291a:	f006 fed9 	bl	80196d0 <__cxa_guard_acquire>
 801291e:	4603      	mov	r3, r0
 8012920:	2b00      	cmp	r3, #0
 8012922:	bf14      	ite	ne
 8012924:	2301      	movne	r3, #1
 8012926:	2300      	moveq	r3, #0
 8012928:	b2db      	uxtb	r3, r3
 801292a:	2b00      	cmp	r3, #0
 801292c:	d008      	beq.n	8012940 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x48>
 801292e:	4807      	ldr	r0, [pc, #28]	; (801294c <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x54>)
 8012930:	f000 f864 	bl	80129fc <_ZN23XFTimeoutManagerDefaultC1Ev>
 8012934:	4806      	ldr	r0, [pc, #24]	; (8012950 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x58>)
 8012936:	f007 f91f 	bl	8019b78 <atexit>
 801293a:	4803      	ldr	r0, [pc, #12]	; (8012948 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x50>)
 801293c:	f006 fed4 	bl	80196e8 <__cxa_guard_release>
    return &timeoutManager;
 8012940:	4b02      	ldr	r3, [pc, #8]	; (801294c <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x54>)
}
 8012942:	4618      	mov	r0, r3
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	20001c8c 	.word	0x20001c8c
 801294c:	20001c74 	.word	0x20001c74
 8012950:	080128e9 	.word	0x080128e9

08012954 <_ZN9interface16XFTimeoutManagerD1Ev>:
    virtual ~XFTimeoutManager() = default;
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
 801295c:	4a04      	ldr	r2, [pc, #16]	; (8012970 <_ZN9interface16XFTimeoutManagerD1Ev+0x1c>)
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	601a      	str	r2, [r3, #0]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	4618      	mov	r0, r3
 8012966:	370c      	adds	r7, #12
 8012968:	46bd      	mov	sp, r7
 801296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296e:	4770      	bx	lr
 8012970:	0801c860 	.word	0x0801c860

08012974 <_ZN9interface16XFTimeoutManagerD0Ev>:
 8012974:	b580      	push	{r7, lr}
 8012976:	b082      	sub	sp, #8
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7ff ffe9 	bl	8012954 <_ZN9interface16XFTimeoutManagerD1Ev>
 8012982:	2108      	movs	r1, #8
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f006 fea1 	bl	80196cc <_ZdlPvj>
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	4618      	mov	r0, r3
 801298e:	3708      	adds	r7, #8
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}

08012994 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 8012994:	b580      	push	{r7, lr}
 8012996:	b082      	sub	sp, #8
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f000 fb88 	bl	80130b2 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	4618      	mov	r0, r3
 80129a6:	3708      	adds	r7, #8
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b082      	sub	sp, #8
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	4618      	mov	r0, r3
 80129b8:	f000 fb6b 	bl	8013092 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	4618      	mov	r0, r3
 80129c0:	3708      	adds	r7, #8
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}

080129c6 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 80129c6:	b580      	push	{r7, lr}
 80129c8:	b082      	sub	sp, #8
 80129ca:	af00      	add	r7, sp, #0
 80129cc:	6078      	str	r0, [r7, #4]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	4618      	mov	r0, r3
 80129d2:	f7ff ffeb 	bl	80129ac <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	4618      	mov	r0, r3
 80129da:	3708      	adds	r7, #8
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}

080129e0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	4618      	mov	r0, r3
 80129ec:	f000 fb6d 	bl	80130ca <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	4618      	mov	r0, r3
 80129f4:	3708      	adds	r7, #8
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}
	...

080129fc <_ZN23XFTimeoutManagerDefaultC1Ev>:

XFTimeoutManagerDefault::XFTimeoutManagerDefault() :
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b082      	sub	sp, #8
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
    pMutex_(nullptr)
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7ff ff24 	bl	8012854 <_ZN9interface16XFTimeoutManagerC1Ev>
 8012a0c:	4a0f      	ldr	r2, [pc, #60]	; (8012a4c <_ZN23XFTimeoutManagerDefaultC1Ev+0x50>)
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	601a      	str	r2, [r3, #0]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	3308      	adds	r3, #8
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7ff ffd5 	bl	80129c6 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	615a      	str	r2, [r3, #20]
{
    pMutex_ = XFMutex::create();
 8012a22:	f001 ff0d 	bl	8014840 <_ZN9interface7XFMutex6createEv>
 8012a26:	4602      	mov	r2, r0
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	615a      	str	r2, [r3, #20]
    assert(pMutex_);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	695b      	ldr	r3, [r3, #20]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d105      	bne.n	8012a40 <_ZN23XFTimeoutManagerDefaultC1Ev+0x44>
 8012a34:	4b06      	ldr	r3, [pc, #24]	; (8012a50 <_ZN23XFTimeoutManagerDefaultC1Ev+0x54>)
 8012a36:	4a07      	ldr	r2, [pc, #28]	; (8012a54 <_ZN23XFTimeoutManagerDefaultC1Ev+0x58>)
 8012a38:	211d      	movs	r1, #29
 8012a3a:	4807      	ldr	r0, [pc, #28]	; (8012a58 <_ZN23XFTimeoutManagerDefaultC1Ev+0x5c>)
 8012a3c:	f007 f87e 	bl	8019b3c <__assert_func>
}
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	4618      	mov	r0, r3
 8012a44:	3708      	adds	r7, #8
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	0801c834 	.word	0x0801c834
 8012a50:	0801c0c0 	.word	0x0801c0c0
 8012a54:	0801c0c8 	.word	0x0801c0c8
 8012a58:	0801c0fc 	.word	0x0801c0fc

08012a5c <_ZN23XFTimeoutManagerDefaultD1Ev>:

XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	4a08      	ldr	r2, [pc, #32]	; (8012a88 <_ZN23XFTimeoutManagerDefaultD1Ev+0x2c>)
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	601a      	str	r2, [r3, #0]
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	3308      	adds	r3, #8
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7ff ffb6 	bl	80129e0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7ff ff6c 	bl	8012954 <_ZN9interface16XFTimeoutManagerD1Ev>
{
}
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3708      	adds	r7, #8
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}
 8012a86:	bf00      	nop
 8012a88:	0801c834 	.word	0x0801c834

08012a8c <_ZN23XFTimeoutManagerDefaultD0Ev>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b082      	sub	sp, #8
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
}
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f7ff ffe1 	bl	8012a5c <_ZN23XFTimeoutManagerDefaultD1Ev>
 8012a9a:	2118      	movs	r1, #24
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f006 fe15 	bl	80196cc <_ZdlPvj>
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	3708      	adds	r7, #8
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}

08012aac <_ZN23XFTimeoutManagerDefault5startEv>:

void XFTimeoutManagerDefault::start()
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b082      	sub	sp, #8
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
    // Check tickInterval. Set default value if not set
    if (tickInterval_ == 0)
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d102      	bne.n	8012ac2 <_ZN23XFTimeoutManagerDefault5startEv+0x16>
    {
        tickInterval_ = 10;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	220a      	movs	r2, #10
 8012ac0:	605a      	str	r2, [r3, #4]
    }

    XF_startTimeoutManagerTimer(uint32_t(tickInterval_));
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f001 ff4c 	bl	8014964 <XF_startTimeoutManagerTimer>
}
 8012acc:	bf00      	nop
 8012ace:	3708      	adds	r7, #8
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}

08012ad4 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFReactive * pReactive)
{
 8012ad4:	b590      	push	{r4, r7, lr}
 8012ad6:	b087      	sub	sp, #28
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	60f8      	str	r0, [r7, #12]
 8012adc:	60b9      	str	r1, [r7, #8]
 8012ade:	607a      	str	r2, [r7, #4]
 8012ae0:	603b      	str	r3, [r7, #0]
    XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 8012ae2:	2018      	movs	r0, #24
 8012ae4:	f006 fe03 	bl	80196ee <_Znwj>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	461c      	mov	r4, r3
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	687a      	ldr	r2, [r7, #4]
 8012af0:	68b9      	ldr	r1, [r7, #8]
 8012af2:	4620      	mov	r0, r4
 8012af4:	f7ff fb1a 	bl	801212c <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
 8012af8:	617c      	str	r4, [r7, #20]

    if (pTimeout)
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d006      	beq.n	8012b0e <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE+0x3a>
    {
        addTimeout(pTimeout);
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	3320      	adds	r3, #32
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	6979      	ldr	r1, [r7, #20]
 8012b0a:	68f8      	ldr	r0, [r7, #12]
 8012b0c:	4798      	blx	r3
    }
}
 8012b0e:	bf00      	nop
 8012b10:	371c      	adds	r7, #28
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd90      	pop	{r4, r7, pc}

08012b16 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::unscheduleTimeout(int32_t timeoutId, interface::XFReactive * pReactive)
{
 8012b16:	b590      	push	{r4, r7, lr}
 8012b18:	b091      	sub	sp, #68	; 0x44
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	60f8      	str	r0, [r7, #12]
 8012b1e:	60b9      	str	r1, [r7, #8]
 8012b20:	607a      	str	r2, [r7, #4]
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8012b22:	f107 0018 	add.w	r0, r7, #24
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	2200      	movs	r2, #0
 8012b2a:	68b9      	ldr	r1, [r7, #8]
 8012b2c:	f7ff fafe 	bl	801212c <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
    XFTimeout * pTimeout;

    pMutex_->lock();
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	695a      	ldr	r2, [r3, #20]
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	695b      	ldr	r3, [r3, #20]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	3308      	adds	r3, #8
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	4610      	mov	r0, r2
 8012b40:	4798      	blx	r3
    {
        for (TimeoutList::iterator i = timeouts_.begin();
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	3308      	adds	r3, #8
 8012b46:	4618      	mov	r0, r3
 8012b48:	f000 facf 	bl	80130ea <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	617b      	str	r3, [r7, #20]
             i != timeouts_.end(); /*Do not increment here!*/)
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	3308      	adds	r3, #8
 8012b54:	4618      	mov	r0, r3
 8012b56:	f000 fad9 	bl	801310c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8012b5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012b62:	f107 0314 	add.w	r3, r7, #20
 8012b66:	4611      	mov	r1, r2
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f000 fadf 	bl	801312c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d058      	beq.n	8012c26 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x110>
        {
            pTimeout = *i;
 8012b74:	f107 0314 	add.w	r3, r7, #20
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f000 faeb 	bl	8013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	63fb      	str	r3, [r7, #60]	; 0x3c

            // Check if behavior and timeout id are equal
            if (*pTimeout == timeout)
 8012b84:	f107 0318 	add.w	r3, r7, #24
 8012b88:	4619      	mov	r1, r3
 8012b8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012b8c:	f7ff faec 	bl	8012168 <_ZNK9XFTimeouteqERKS_>
 8012b90:	4603      	mov	r3, r0
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d040      	beq.n	8012c18 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x102>
            {
                TimeoutList::iterator next = i;
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	613b      	str	r3, [r7, #16]

                // Check if remaining ticks can be given further
                if (++next != timeouts_.end())
 8012b9a:	f107 0310 	add.w	r3, r7, #16
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f000 fae6 	bl	8013170 <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>
 8012ba4:	4604      	mov	r4, r0
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	3308      	adds	r3, #8
 8012baa:	4618      	mov	r0, r3
 8012bac:	f000 faae 	bl	801310c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8012bb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012bb8:	4619      	mov	r1, r3
 8012bba:	4620      	mov	r0, r4
 8012bbc:	f000 fab6 	bl	801312c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d00e      	beq.n	8012be4 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0xce>
                {
                    // Add (remaining) ticks to next timeout in list
                    (*next)->addToRelTicks(pTimeout->getRelTicks());
 8012bc6:	f107 0310 	add.w	r3, r7, #16
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f000 fac2 	bl	8013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	681c      	ldr	r4, [r3, #0]
 8012bd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012bd6:	f7ff fe51 	bl	801287c <_ZNK9XFTimeout11getRelTicksEv>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	4619      	mov	r1, r3
 8012bde:	4620      	mov	r0, r4
 8012be0:	f7ff fe69 	bl	80128b6 <_ZN9XFTimeout13addToRelTicksEi>
                }

                i = timeouts_.erase(i);
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	f103 0408 	add.w	r4, r3, #8
 8012bea:	f107 0214 	add.w	r2, r7, #20
 8012bee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012bf2:	4611      	mov	r1, r2
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f000 facb 	bl	8013190 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8012bfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	f000 fad7 	bl	80131b0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8012c02:	4603      	mov	r3, r0
 8012c04:	617b      	str	r3, [r7, #20]
                // Iterator now points to the next element

                delete pTimeout;
 8012c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d0a1      	beq.n	8012b50 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
 8012c0c:	681a      	ldr	r2, [r3, #0]
 8012c0e:	3204      	adds	r2, #4
 8012c10:	6812      	ldr	r2, [r2, #0]
 8012c12:	4618      	mov	r0, r3
 8012c14:	4790      	blx	r2
 8012c16:	e79b      	b.n	8012b50 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
            }
            else
            {
                i++;
 8012c18:	f107 0314 	add.w	r3, r7, #20
 8012c1c:	2100      	movs	r1, #0
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f000 fae1 	bl	80131e6 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
        for (TimeoutList::iterator i = timeouts_.begin();
 8012c24:	e794      	b.n	8012b50 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
            }
        }
    }
    pMutex_->unlock();
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	695a      	ldr	r2, [r3, #20]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	695b      	ldr	r3, [r3, #20]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	330c      	adds	r3, #12
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	4610      	mov	r0, r2
 8012c36:	4798      	blx	r3
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8012c38:	f107 0318 	add.w	r3, r7, #24
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7ff fabd 	bl	80121bc <_ZN9XFTimeoutD1Ev>
}
 8012c42:	bf00      	nop
 8012c44:	3744      	adds	r7, #68	; 0x44
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd90      	pop	{r4, r7, pc}
	...

08012c4c <_ZN23XFTimeoutManagerDefault4tickEv>:

void XFTimeoutManagerDefault::tick()
{
 8012c4c:	b590      	push	{r4, r7, lr}
 8012c4e:	b089      	sub	sp, #36	; 0x24
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
    assert(tickInterval_);      // Did you call start()?!
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	685b      	ldr	r3, [r3, #4]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d105      	bne.n	8012c68 <_ZN23XFTimeoutManagerDefault4tickEv+0x1c>
 8012c5c:	4b66      	ldr	r3, [pc, #408]	; (8012df8 <_ZN23XFTimeoutManagerDefault4tickEv+0x1ac>)
 8012c5e:	4a67      	ldr	r2, [pc, #412]	; (8012dfc <_ZN23XFTimeoutManagerDefault4tickEv+0x1b0>)
 8012c60:	2161      	movs	r1, #97	; 0x61
 8012c62:	4867      	ldr	r0, [pc, #412]	; (8012e00 <_ZN23XFTimeoutManagerDefault4tickEv+0x1b4>)
 8012c64:	f006 ff6a 	bl	8019b3c <__assert_func>
    int32_t intervalToSubtract = tickInterval_;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	61fb      	str	r3, [r7, #28]

    while (!timeouts_.empty())
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	3308      	adds	r3, #8
 8012c72:	4618      	mov	r0, r3
 8012c74:	f000 facb 	bl	801320e <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	f083 0301 	eor.w	r3, r3, #1
 8012c7e:	b2db      	uxtb	r3, r3
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	f000 80b5 	beq.w	8012df0 <_ZN23XFTimeoutManagerDefault4tickEv+0x1a4>
    {
        pMutex_->lock();
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	695a      	ldr	r2, [r3, #20]
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	695b      	ldr	r3, [r3, #20]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	3308      	adds	r3, #8
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	4610      	mov	r0, r2
 8012c96:	4798      	blx	r3
        {
            XFTimeout * pFirstTimeout = timeouts_.front();
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	3308      	adds	r3, #8
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f000 fac8 	bl	8013232 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	61bb      	str	r3, [r7, #24]

            // Subtract time elapsed
            pFirstTimeout->substractFromRelTicks(intervalToSubtract);
 8012ca8:	69f9      	ldr	r1, [r7, #28]
 8012caa:	69b8      	ldr	r0, [r7, #24]
 8012cac:	f7ff fdf2 	bl	8012894 <_ZN9XFTimeout21substractFromRelTicksEi>

            // From now on set it to zero.
            intervalToSubtract = 0;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	61fb      	str	r3, [r7, #28]

            // Check timeout timed out
            if (pFirstTimeout->getRelTicks() <= 0)
 8012cb4:	69b8      	ldr	r0, [r7, #24]
 8012cb6:	f7ff fde1 	bl	801287c <_ZNK9XFTimeout11getRelTicksEv>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	bfd4      	ite	le
 8012cc0:	2301      	movle	r3, #1
 8012cc2:	2300      	movgt	r3, #0
 8012cc4:	b2db      	uxtb	r3, r3
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d07c      	beq.n	8012dc4 <_ZN23XFTimeoutManagerDefault4tickEv+0x178>
            {
                // Check remaining ticks can be given further
                if (timeouts_.size() > 1)
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	3308      	adds	r3, #8
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f000 fac2 	bl	8013258 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	2b01      	cmp	r3, #1
 8012cd8:	bf8c      	ite	hi
 8012cda:	2301      	movhi	r3, #1
 8012cdc:	2300      	movls	r3, #0
 8012cde:	b2db      	uxtb	r3, r3
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d01e      	beq.n	8012d22 <_ZN23XFTimeoutManagerDefault4tickEv+0xd6>
                {
                    TimeoutList::iterator i = timeouts_.begin();
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	3308      	adds	r3, #8
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f000 f9fe 	bl	80130ea <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	60fb      	str	r3, [r7, #12]

                    // Add ticks overrun to next timeout
                    i++;
 8012cf2:	f107 030c 	add.w	r3, r7, #12
 8012cf6:	2100      	movs	r1, #0
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f000 fa74 	bl	80131e6 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                    (*i)->substractFromRelTicks(abs(pFirstTimeout->getRelTicks()));
 8012cfe:	f107 030c 	add.w	r3, r7, #12
 8012d02:	4618      	mov	r0, r3
 8012d04:	f000 fa26 	bl	8013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	681c      	ldr	r4, [r3, #0]
 8012d0c:	69b8      	ldr	r0, [r7, #24]
 8012d0e:	f7ff fdb5 	bl	801287c <_ZNK9XFTimeout11getRelTicksEv>
 8012d12:	4603      	mov	r3, r0
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	bfb8      	it	lt
 8012d18:	425b      	neglt	r3, r3
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f7ff fdb9 	bl	8012894 <_ZN9XFTimeout21substractFromRelTicksEi>
                }

                // Inject the timeout back to the behavioral class
                returnTimeout(pFirstTimeout);
 8012d22:	69b9      	ldr	r1, [r7, #24]
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	f000 f99f 	bl	8013068 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>

                // Remove timeout
                timeouts_.pop_front();
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	3308      	adds	r3, #8
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f000 fa9e 	bl	8013270 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>

                // Check if timeouts with same timeout value are present
                for (TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); /*Do not increment here!*/)
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	3308      	adds	r3, #8
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f000 f9d6 	bl	80130ea <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	60bb      	str	r3, [r7, #8]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	3308      	adds	r3, #8
 8012d46:	4618      	mov	r0, r3
 8012d48:	f000 f9e0 	bl	801310c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	613b      	str	r3, [r7, #16]
 8012d50:	f107 0210 	add.w	r2, r7, #16
 8012d54:	f107 0308 	add.w	r3, r7, #8
 8012d58:	4611      	mov	r1, r2
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f000 f9e6 	bl	801312c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d03a      	beq.n	8012ddc <_ZN23XFTimeoutManagerDefault4tickEv+0x190>
                {
                    if ((*it)->getRelTicks() == 0)
 8012d66:	f107 0308 	add.w	r3, r7, #8
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f000 f9f2 	bl	8013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8012d70:	4603      	mov	r3, r0
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7ff fd81 	bl	801287c <_ZNK9XFTimeout11getRelTicksEv>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	bf0c      	ite	eq
 8012d80:	2301      	moveq	r3, #1
 8012d82:	2300      	movne	r3, #0
 8012d84:	b2db      	uxtb	r3, r3
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d027      	beq.n	8012dda <_ZN23XFTimeoutManagerDefault4tickEv+0x18e>
                    {
                        returnTimeout(*it);			// Return them true
 8012d8a:	f107 0308 	add.w	r3, r7, #8
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f000 f9e0 	bl	8013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8012d94:	4603      	mov	r3, r0
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	4619      	mov	r1, r3
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f000 f964 	bl	8013068 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>
                        it = timeouts_.erase(it);	// Remove timeout and adjust iterator to next element
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f103 0408 	add.w	r4, r3, #8
 8012da6:	f107 0208 	add.w	r2, r7, #8
 8012daa:	f107 0314 	add.w	r3, r7, #20
 8012dae:	4611      	mov	r1, r2
 8012db0:	4618      	mov	r0, r3
 8012db2:	f000 f9ed 	bl	8013190 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8012db6:	6979      	ldr	r1, [r7, #20]
 8012db8:	4620      	mov	r0, r4
 8012dba:	f000 f9f9 	bl	80131b0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	60bb      	str	r3, [r7, #8]
                for (TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); /*Do not increment here!*/)
 8012dc2:	e7be      	b.n	8012d42 <_ZN23XFTimeoutManagerDefault4tickEv+0xf6>
                    }
                }
            }
            else
            {
                pMutex_->unlock();
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	695a      	ldr	r2, [r3, #20]
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	695b      	ldr	r3, [r3, #20]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	330c      	adds	r3, #12
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	4610      	mov	r0, r2
 8012dd4:	4798      	blx	r3
                // Done. Exit while loop
                break;
 8012dd6:	bf00      	nop
            }
        }
        pMutex_->unlock();
    }
}
 8012dd8:	e00a      	b.n	8012df0 <_ZN23XFTimeoutManagerDefault4tickEv+0x1a4>
                        break;
 8012dda:	bf00      	nop
        pMutex_->unlock();
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	695a      	ldr	r2, [r3, #20]
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	695b      	ldr	r3, [r3, #20]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	330c      	adds	r3, #12
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	4610      	mov	r0, r2
 8012dec:	4798      	blx	r3
    while (!timeouts_.empty())
 8012dee:	e73e      	b.n	8012c6e <_ZN23XFTimeoutManagerDefault4tickEv+0x22>
}
 8012df0:	bf00      	nop
 8012df2:	3724      	adds	r7, #36	; 0x24
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd90      	pop	{r4, r7, pc}
 8012df8:	0801c184 	.word	0x0801c184
 8012dfc:	0801c194 	.word	0x0801c194
 8012e00:	0801c0fc 	.word	0x0801c0fc

08012e04 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout>:

void XFTimeoutManagerDefault::addTimeout(XFTimeout * pNewTimeout)
{
 8012e04:	b590      	push	{r4, r7, lr}
 8012e06:	b08d      	sub	sp, #52	; 0x34
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6039      	str	r1, [r7, #0]
    if (!timeouts_.empty())
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	3308      	adds	r3, #8
 8012e12:	4618      	mov	r0, r3
 8012e14:	f000 f9fb 	bl	801320e <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	f083 0301 	eor.w	r3, r3, #1
 8012e1e:	b2db      	uxtb	r3, r3
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	f000 8116 	beq.w	8013052 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x24e>
    {
        pMutex_->lock();
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	695a      	ldr	r2, [r3, #20]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	695b      	ldr	r3, [r3, #20]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	3308      	adds	r3, #8
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	4610      	mov	r0, r2
 8012e36:	4798      	blx	r3
        {
            // Insert timeout before timeout(s) triggering later
            TimeoutList::iterator i = timeouts_.begin();
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	3308      	adds	r3, #8
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f000 f954 	bl	80130ea <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8012e42:	4603      	mov	r3, r0
 8012e44:	60bb      	str	r3, [r7, #8]

            unsigned int index = 0;
 8012e46:	2300      	movs	r3, #0
 8012e48:	62fb      	str	r3, [r7, #44]	; 0x2c

            // Find the right place to insert new timeout
            while (i != timeouts_.end() &&
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	3308      	adds	r3, #8
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f000 f95c 	bl	801310c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8012e54:	4603      	mov	r3, r0
 8012e56:	60fb      	str	r3, [r7, #12]
 8012e58:	f107 020c 	add.w	r2, r7, #12
 8012e5c:	f107 0308 	add.w	r3, r7, #8
 8012e60:	4611      	mov	r1, r2
 8012e62:	4618      	mov	r0, r3
 8012e64:	f000 f962 	bl	801312c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d013      	beq.n	8012e96 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x92>
                   (*i)->getRelTicks() < pNewTimeout->getRelTicks())
 8012e6e:	f107 0308 	add.w	r3, r7, #8
 8012e72:	4618      	mov	r0, r3
 8012e74:	f000 f96e 	bl	8013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7ff fcfd 	bl	801287c <_ZNK9XFTimeout11getRelTicksEv>
 8012e82:	4604      	mov	r4, r0
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7ff fcf8 	bl	801287c <_ZNK9XFTimeout11getRelTicksEv>
 8012e8c:	4603      	mov	r3, r0
            while (i != timeouts_.end() &&
 8012e8e:	429c      	cmp	r4, r3
 8012e90:	da01      	bge.n	8012e96 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x92>
 8012e92:	2301      	movs	r3, #1
 8012e94:	e000      	b.n	8012e98 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x94>
 8012e96:	2300      	movs	r3, #0
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d019      	beq.n	8012ed0 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0xcc>
            {	// -> by: test4, test5
                pNewTimeout->substractFromRelTicks((*i)->getRelTicks());
 8012e9c:	683c      	ldr	r4, [r7, #0]
 8012e9e:	f107 0308 	add.w	r3, r7, #8
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f000 f956 	bl	8013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7ff fce5 	bl	801287c <_ZNK9XFTimeout11getRelTicksEv>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	4620      	mov	r0, r4
 8012eb8:	f7ff fcec 	bl	8012894 <_ZN9XFTimeout21substractFromRelTicksEi>
                i++; index++;
 8012ebc:	f107 0308 	add.w	r3, r7, #8
 8012ec0:	2100      	movs	r1, #0
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f000 f98f 	bl	80131e6 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 8012ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eca:	3301      	adds	r3, #1
 8012ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (i != timeouts_.end() &&
 8012ece:	e7bc      	b.n	8012e4a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x46>
            }

            if (i != timeouts_.end())
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	3308      	adds	r3, #8
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f000 f919 	bl	801310c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8012eda:	4603      	mov	r3, r0
 8012edc:	613b      	str	r3, [r7, #16]
 8012ede:	f107 0210 	add.w	r2, r7, #16
 8012ee2:	f107 0308 	add.w	r3, r7, #8
 8012ee6:	4611      	mov	r1, r2
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f000 f91f 	bl	801312c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	f000 808c 	beq.w	801300e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x20a>
            {
                if ((*i)->getRelTicks() != pNewTimeout->getRelTicks())
 8012ef6:	f107 0308 	add.w	r3, r7, #8
 8012efa:	4618      	mov	r0, r3
 8012efc:	f000 f92a 	bl	8013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8012f00:	4603      	mov	r3, r0
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7ff fcb9 	bl	801287c <_ZNK9XFTimeout11getRelTicksEv>
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7ff fcb4 	bl	801287c <_ZNK9XFTimeout11getRelTicksEv>
 8012f14:	4603      	mov	r3, r0
 8012f16:	429c      	cmp	r4, r3
 8012f18:	bf14      	ite	ne
 8012f1a:	2301      	movne	r3, #1
 8012f1c:	2300      	moveq	r3, #0
 8012f1e:	b2db      	uxtb	r3, r3
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d021      	beq.n	8012f68 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x164>
                {	// -> by: test1, test4, test5
                    // Timeout are going to timeout at different times

                    // Insert new timeout before
                    timeouts_.insert(i, pNewTimeout);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	f103 0408 	add.w	r4, r3, #8
 8012f2a:	f107 0208 	add.w	r2, r7, #8
 8012f2e:	f107 0314 	add.w	r3, r7, #20
 8012f32:	4611      	mov	r1, r2
 8012f34:	4618      	mov	r0, r3
 8012f36:	f000 f92b 	bl	8013190 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8012f3a:	463b      	mov	r3, r7
 8012f3c:	461a      	mov	r2, r3
 8012f3e:	6979      	ldr	r1, [r7, #20]
 8012f40:	4620      	mov	r0, r4
 8012f42:	f000 f9a5 	bl	8013290 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>

                    // Remove time from following timeout
                    (*i)->substractFromRelTicks(pNewTimeout->getRelTicks());
 8012f46:	f107 0308 	add.w	r3, r7, #8
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f000 f902 	bl	8013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8012f50:	4603      	mov	r3, r0
 8012f52:	681c      	ldr	r4, [r3, #0]
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7ff fc90 	bl	801287c <_ZNK9XFTimeout11getRelTicksEv>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	4619      	mov	r1, r3
 8012f60:	4620      	mov	r0, r4
 8012f62:	f7ff fc97 	bl	8012894 <_ZN9XFTimeout21substractFromRelTicksEi>
 8012f66:	e06a      	b.n	801303e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x23a>

                }
                else
                {	// -> by: test1, test5
                    const int32_t relTicks = (*i)->getRelTicks();
 8012f68:	f107 0308 	add.w	r3, r7, #8
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f000 f8f1 	bl	8013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8012f72:	4603      	mov	r3, r0
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7ff fc80 	bl	801287c <_ZNK9XFTimeout11getRelTicksEv>
 8012f7c:	62b8      	str	r0, [r7, #40]	; 0x28
                    // Timeouts timeout at the same time. Put
                    // the new one behind the actual.
                    i++;
 8012f7e:	f107 0308 	add.w	r3, r7, #8
 8012f82:	2100      	movs	r1, #0
 8012f84:	4618      	mov	r0, r3
 8012f86:	f000 f92e 	bl	80131e6 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>

                    // Check if even more timeouts with the same timeout
                    while(i != timeouts_.end() && (*i)->getRelTicks() == 0)
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	3308      	adds	r3, #8
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f000 f8bc 	bl	801310c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8012f94:	4603      	mov	r3, r0
 8012f96:	61bb      	str	r3, [r7, #24]
 8012f98:	f107 0218 	add.w	r2, r7, #24
 8012f9c:	f107 0308 	add.w	r3, r7, #8
 8012fa0:	4611      	mov	r1, r2
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f000 f8c2 	bl	801312c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d00e      	beq.n	8012fcc <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1c8>
 8012fae:	f107 0308 	add.w	r3, r7, #8
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f000 f8ce 	bl	8013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7ff fc5d 	bl	801287c <_ZNK9XFTimeout11getRelTicksEv>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d101      	bne.n	8012fcc <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1c8>
 8012fc8:	2301      	movs	r3, #1
 8012fca:	e000      	b.n	8012fce <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1ca>
 8012fcc:	2300      	movs	r3, #0
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d006      	beq.n	8012fe0 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1dc>
                    {	// -> by: test5
                        i++;
 8012fd2:	f107 0308 	add.w	r3, r7, #8
 8012fd6:	2100      	movs	r1, #0
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f000 f904 	bl	80131e6 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                    while(i != timeouts_.end() && (*i)->getRelTicks() == 0)
 8012fde:	e7d4      	b.n	8012f8a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x186>
                    }

                    // Insert new timeout behind actual
                    timeouts_.insert(i, pNewTimeout);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f103 0408 	add.w	r4, r3, #8
 8012fe6:	f107 0208 	add.w	r2, r7, #8
 8012fea:	f107 031c 	add.w	r3, r7, #28
 8012fee:	4611      	mov	r1, r2
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f000 f8cd 	bl	8013190 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8012ff6:	463b      	mov	r3, r7
 8012ff8:	461a      	mov	r2, r3
 8012ffa:	69f9      	ldr	r1, [r7, #28]
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	f000 f947 	bl	8013290 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    // Remove time from actual timeout
                    pNewTimeout->substractFromRelTicks(relTicks);
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013006:	4618      	mov	r0, r3
 8013008:	f7ff fc44 	bl	8012894 <_ZN9XFTimeout21substractFromRelTicksEi>
 801300c:	e017      	b.n	801303e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x23a>
                }
            }
            else
            {	// -> by: test4, test5
                // Add timeout at the end of the list
                timeouts_.insert(timeouts_.end(), pNewTimeout);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	f103 0408 	add.w	r4, r3, #8
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	3308      	adds	r3, #8
 8013018:	4618      	mov	r0, r3
 801301a:	f000 f877 	bl	801310c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 801301e:	4603      	mov	r3, r0
 8013020:	627b      	str	r3, [r7, #36]	; 0x24
 8013022:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013026:	f107 0320 	add.w	r3, r7, #32
 801302a:	4611      	mov	r1, r2
 801302c:	4618      	mov	r0, r3
 801302e:	f000 f8af 	bl	8013190 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8013032:	463b      	mov	r3, r7
 8013034:	461a      	mov	r2, r3
 8013036:	6a39      	ldr	r1, [r7, #32]
 8013038:	4620      	mov	r0, r4
 801303a:	f000 f929 	bl	8013290 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
            }
        }
        pMutex_->unlock();
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	695a      	ldr	r2, [r3, #20]
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	695b      	ldr	r3, [r3, #20]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	330c      	adds	r3, #12
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	4610      	mov	r0, r2
 801304e:	4798      	blx	r3
    }
    else
    {	// -> by: test1, test2, test3, test4, test5
        timeouts_.push_front(pNewTimeout);
    }
}
 8013050:	e006      	b.n	8013060 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x25c>
        timeouts_.push_front(pNewTimeout);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	3308      	adds	r3, #8
 8013056:	463a      	mov	r2, r7
 8013058:	4611      	mov	r1, r2
 801305a:	4618      	mov	r0, r3
 801305c:	f000 f93e 	bl	80132dc <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>
}
 8013060:	bf00      	nop
 8013062:	3734      	adds	r7, #52	; 0x34
 8013064:	46bd      	mov	sp, r7
 8013066:	bd90      	pop	{r4, r7, pc}

08013068 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>:

void XFTimeoutManagerDefault::returnTimeout(XFTimeout * pTimeout)
{
 8013068:	b590      	push	{r4, r7, lr}
 801306a:	b083      	sub	sp, #12
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	6039      	str	r1, [r7, #0]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	4618      	mov	r0, r3
 8013076:	f7ff f8c3 	bl	8012200 <_ZNK7XFEvent11getBehaviorEv>
 801307a:	4603      	mov	r3, r0
 801307c:	681a      	ldr	r2, [r3, #0]
 801307e:	320c      	adds	r2, #12
 8013080:	6814      	ldr	r4, [r2, #0]
 8013082:	2200      	movs	r2, #0
 8013084:	6839      	ldr	r1, [r7, #0]
 8013086:	4618      	mov	r0, r3
 8013088:	47a0      	blx	r4
}
 801308a:	bf00      	nop
 801308c:	370c      	adds	r7, #12
 801308e:	46bd      	mov	sp, r7
 8013090:	bd90      	pop	{r4, r7, pc}

08013092 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8013092:	b580      	push	{r7, lr}
 8013094:	b082      	sub	sp, #8
 8013096:	af00      	add	r7, sp, #0
 8013098:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f000 f930 	bl	8013300 <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7ff fb9c 	bl	80127e0 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	4618      	mov	r0, r3
 80130ac:	3708      	adds	r7, #8
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}

080130b2 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80130b2:	b580      	push	{r7, lr}
 80130b4:	b082      	sub	sp, #8
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	6078      	str	r0, [r7, #4]
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f000 f92c 	bl	8013318 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	4618      	mov	r0, r3
 80130c4:	3708      	adds	r7, #8
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}

080130ca <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 80130ca:	b580      	push	{r7, lr}
 80130cc:	b082      	sub	sp, #8
 80130ce:	af00      	add	r7, sp, #0
 80130d0:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f000 f92b 	bl	801332e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	4618      	mov	r0, r3
 80130dc:	f7ff fc5a 	bl	8012994 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	4618      	mov	r0, r3
 80130e4:	3708      	adds	r7, #8
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}

080130ea <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80130ea:	b580      	push	{r7, lr}
 80130ec:	b084      	sub	sp, #16
 80130ee:	af00      	add	r7, sp, #0
 80130f0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681a      	ldr	r2, [r3, #0]
 80130f6:	f107 030c 	add.w	r3, r7, #12
 80130fa:	4611      	mov	r1, r2
 80130fc:	4618      	mov	r0, r3
 80130fe:	f000 f93b 	bl	8013378 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	4618      	mov	r0, r3
 8013106:	3710      	adds	r7, #16
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %list.  Iteration is done in ordinary element
       *  order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 801310c:	b580      	push	{r7, lr}
 801310e:	b084      	sub	sp, #16
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	f107 030c 	add.w	r3, r7, #12
 801311a:	4611      	mov	r1, r2
 801311c:	4618      	mov	r0, r3
 801311e:	f000 f92b 	bl	8013378 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	4618      	mov	r0, r3
 8013126:	3710      	adds	r7, #16
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}

0801312c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801312c:	b480      	push	{r7}
 801312e:	b083      	sub	sp, #12
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
 8013134:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	681a      	ldr	r2, [r3, #0]
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	429a      	cmp	r2, r3
 8013140:	bf14      	ite	ne
 8013142:	2301      	movne	r3, #1
 8013144:	2300      	moveq	r3, #0
 8013146:	b2db      	uxtb	r3, r3
 8013148:	4618      	mov	r0, r3
 801314a:	370c      	adds	r7, #12
 801314c:	46bd      	mov	sp, r7
 801314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013152:	4770      	bx	lr

08013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8013154:	b580      	push	{r7, lr}
 8013156:	b082      	sub	sp, #8
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	4618      	mov	r0, r3
 8013162:	f000 f918 	bl	8013396 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8013166:	4603      	mov	r3, r0
 8013168:	4618      	mov	r0, r3
 801316a:	3708      	adds	r7, #8
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8013170:	b480      	push	{r7}
 8013172:	b083      	sub	sp, #12
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	681a      	ldr	r2, [r3, #0]
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	601a      	str	r2, [r3, #0]
	return *this;
 8013182:	687b      	ldr	r3, [r7, #4]
      }
 8013184:	4618      	mov	r0, r3
 8013186:	370c      	adds	r7, #12
 8013188:	46bd      	mov	sp, r7
 801318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318e:	4770      	bx	lr

08013190 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8013190:	b480      	push	{r7}
 8013192:	b083      	sub	sp, #12
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	681a      	ldr	r2, [r3, #0]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	601a      	str	r2, [r3, #0]
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	4618      	mov	r0, r3
 80131a6:	370c      	adds	r7, #12
 80131a8:	46bd      	mov	sp, r7
 80131aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ae:	4770      	bx	lr

080131b0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	6039      	str	r1, [r7, #0]
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	f107 030c 	add.w	r3, r7, #12
 80131c2:	4611      	mov	r1, r2
 80131c4:	4618      	mov	r0, r3
 80131c6:	f000 f8d7 	bl	8013378 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
      _M_erase(__position._M_const_cast());
 80131ca:	463b      	mov	r3, r7
 80131cc:	4618      	mov	r0, r3
 80131ce:	f000 f916 	bl	80133fe <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 80131d2:	4603      	mov	r3, r0
 80131d4:	4619      	mov	r1, r3
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	f000 f8eb 	bl	80133b2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
      return __ret;
 80131dc:	68fb      	ldr	r3, [r7, #12]
    }
 80131de:	4618      	mov	r0, r3
 80131e0:	3710      	adds	r7, #16
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}

080131e6 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 80131e6:	b480      	push	{r7}
 80131e8:	b085      	sub	sp, #20
 80131ea:	af00      	add	r7, sp, #0
 80131ec:	6078      	str	r0, [r7, #4]
 80131ee:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	60fb      	str	r3, [r7, #12]
	_M_node = _M_node->_M_next;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	681a      	ldr	r2, [r3, #0]
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	601a      	str	r2, [r3, #0]
	return __tmp;
 8013200:	68fb      	ldr	r3, [r7, #12]
      }
 8013202:	4618      	mov	r0, r3
 8013204:	3714      	adds	r7, #20
 8013206:	46bd      	mov	sp, r7
 8013208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320c:	4770      	bx	lr

0801320e <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 801320e:	b480      	push	{r7}
 8013210:	b083      	sub	sp, #12
 8013212:	af00      	add	r7, sp, #0
 8013214:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	429a      	cmp	r2, r3
 801321e:	bf0c      	ite	eq
 8013220:	2301      	moveq	r3, #1
 8013222:	2300      	movne	r3, #0
 8013224:	b2db      	uxtb	r3, r3
 8013226:	4618      	mov	r0, r3
 8013228:	370c      	adds	r7, #12
 801322a:	46bd      	mov	sp, r7
 801322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013230:	4770      	bx	lr

08013232 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8013232:	b580      	push	{r7, lr}
 8013234:	b084      	sub	sp, #16
 8013236:	af00      	add	r7, sp, #0
 8013238:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f7ff ff55 	bl	80130ea <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8013240:	4603      	mov	r3, r0
 8013242:	60fb      	str	r3, [r7, #12]
 8013244:	f107 030c 	add.w	r3, r7, #12
 8013248:	4618      	mov	r0, r3
 801324a:	f7ff ff83 	bl	8013154 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 801324e:	4603      	mov	r3, r0
 8013250:	4618      	mov	r0, r3
 8013252:	3710      	adds	r7, #16
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f000 f8dd 	bl	8013420 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE13_M_node_countEv>
 8013266:	4603      	mov	r3, r0
 8013268:	4618      	mov	r0, r3
 801326a:	3708      	adds	r7, #8
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f7ff ff36 	bl	80130ea <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 801327e:	4603      	mov	r3, r0
 8013280:	4619      	mov	r1, r3
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f000 f895 	bl	80133b2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
 8013288:	bf00      	nop
 801328a:	3708      	adds	r7, #8
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 8013290:	b590      	push	{r4, r7, lr}
 8013292:	b087      	sub	sp, #28
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
      _Node* __tmp = _M_create_node(__x);
 801329c:	6879      	ldr	r1, [r7, #4]
 801329e:	68f8      	ldr	r0, [r7, #12]
 80132a0:	f000 f8cb 	bl	801343a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 80132a4:	6178      	str	r0, [r7, #20]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 80132a6:	697c      	ldr	r4, [r7, #20]
 80132a8:	f107 0308 	add.w	r3, r7, #8
 80132ac:	4618      	mov	r0, r3
 80132ae:	f000 f8a6 	bl	80133fe <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 80132b2:	4603      	mov	r3, r0
 80132b4:	4619      	mov	r1, r3
 80132b6:	4620      	mov	r0, r4
 80132b8:	f006 fa2f 	bl	801971a <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      this->_M_inc_size(1);
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2101      	movs	r1, #1
 80132c0:	4618      	mov	r0, r3
 80132c2:	f000 f8ee 	bl	80134a2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
      return iterator(__tmp);
 80132c6:	f107 0310 	add.w	r3, r7, #16
 80132ca:	6979      	ldr	r1, [r7, #20]
 80132cc:	4618      	mov	r0, r3
 80132ce:	f000 f853 	bl	8013378 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80132d2:	693b      	ldr	r3, [r7, #16]
    }
 80132d4:	4618      	mov	r0, r3
 80132d6:	371c      	adds	r7, #28
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd90      	pop	{r4, r7, pc}

080132dc <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>:
      push_front(const value_type& __x)
 80132dc:	b580      	push	{r7, lr}
 80132de:	b082      	sub	sp, #8
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	6039      	str	r1, [r7, #0]
      { this->_M_insert(begin(), __x); }
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f7ff feff 	bl	80130ea <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 80132ec:	4603      	mov	r3, r0
 80132ee:	683a      	ldr	r2, [r7, #0]
 80132f0:	4619      	mov	r1, r3
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 f8e6 	bl	80134c4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 80132f8:	bf00      	nop
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f000 f8f9 	bl	8013500 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	4618      	mov	r0, r3
 8013312:	3708      	adds	r7, #8
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8013318:	b480      	push	{r7}
 801331a:	b083      	sub	sp, #12
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	4618      	mov	r0, r3
 8013324:	370c      	adds	r7, #12
 8013326:	46bd      	mov	sp, r7
 8013328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332c:	4770      	bx	lr

0801332e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 801332e:	b580      	push	{r7, lr}
 8013330:	b086      	sub	sp, #24
 8013332:	af00      	add	r7, sp, #0
 8013334:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	697a      	ldr	r2, [r7, #20]
 8013340:	429a      	cmp	r2, r3
 8013342:	d015      	beq.n	8013370 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 801334e:	6938      	ldr	r0, [r7, #16]
 8013350:	f000 f821 	bl	8013396 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8013354:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f000 f8dd 	bl	8013516 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 801335c:	4603      	mov	r3, r0
 801335e:	68f9      	ldr	r1, [r7, #12]
 8013360:	4618      	mov	r0, r3
 8013362:	f000 f8e3 	bl	801352c <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 8013366:	6939      	ldr	r1, [r7, #16]
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f000 f8ec 	bl	8013546 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 801336e:	e7e5      	b.n	801333c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0xe>
    }
 8013370:	bf00      	nop
 8013372:	3718      	adds	r7, #24
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}

08013378 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8013378:	b480      	push	{r7}
 801337a:	b083      	sub	sp, #12
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	683a      	ldr	r2, [r7, #0]
 8013386:	601a      	str	r2, [r3, #0]
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	4618      	mov	r0, r3
 801338c:	370c      	adds	r7, #12
 801338e:	46bd      	mov	sp, r7
 8013390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013394:	4770      	bx	lr

08013396 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8013396:	b580      	push	{r7, lr}
 8013398:	b082      	sub	sp, #8
 801339a:	af00      	add	r7, sp, #0
 801339c:	6078      	str	r0, [r7, #4]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	3308      	adds	r3, #8
 80133a2:	4618      	mov	r0, r3
 80133a4:	f000 f8de 	bl	8013564 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>
 80133a8:	4603      	mov	r3, r0
 80133aa:	4618      	mov	r0, r3
 80133ac:	3708      	adds	r7, #8
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}

080133b2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 80133b2:	b590      	push	{r4, r7, lr}
 80133b4:	b085      	sub	sp, #20
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	6078      	str	r0, [r7, #4]
 80133ba:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2101      	movs	r1, #1
 80133c0:	4618      	mov	r0, r3
 80133c2:	f000 f8db 	bl	801357c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	4618      	mov	r0, r3
 80133ca:	f006 f9ad 	bl	8019728 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	4618      	mov	r0, r3
 80133d6:	f000 f89e 	bl	8013516 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 80133da:	4604      	mov	r4, r0
 80133dc:	68f8      	ldr	r0, [r7, #12]
 80133de:	f7ff ffda 	bl	8013396 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 80133e2:	4603      	mov	r3, r0
 80133e4:	4619      	mov	r1, r3
 80133e6:	4620      	mov	r0, r4
 80133e8:	f000 f8a0 	bl	801352c <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	68f9      	ldr	r1, [r7, #12]
 80133f0:	4618      	mov	r0, r3
 80133f2:	f000 f8a8 	bl	8013546 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 80133f6:	bf00      	nop
 80133f8:	3714      	adds	r7, #20
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd90      	pop	{r4, r7, pc}

080133fe <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80133fe:	b580      	push	{r7, lr}
 8013400:	b084      	sub	sp, #16
 8013402:	af00      	add	r7, sp, #0
 8013404:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681a      	ldr	r2, [r3, #0]
 801340a:	f107 030c 	add.w	r3, r7, #12
 801340e:	4611      	mov	r1, r2
 8013410:	4618      	mov	r0, r3
 8013412:	f7ff ffb1 	bl	8013378 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	4618      	mov	r0, r3
 801341a:	3710      	adds	r7, #16
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}

08013420 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE13_M_node_countEv>:
      _M_node_count() const
 8013420:	b580      	push	{r7, lr}
 8013422:	b082      	sub	sp, #8
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	4618      	mov	r0, r3
 801342c:	f000 f8b7 	bl	801359e <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_sizeEv>
 8013430:	4603      	mov	r3, r0
 8013432:	4618      	mov	r0, r3
 8013434:	3708      	adds	r7, #8
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}

0801343a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801343a:	b590      	push	{r4, r7, lr}
 801343c:	b087      	sub	sp, #28
 801343e:	af00      	add	r7, sp, #0
 8013440:	6078      	str	r0, [r7, #4]
 8013442:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	4618      	mov	r0, r3
 8013448:	f000 f8b5 	bl	80135b6 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>
 801344c:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	4618      	mov	r0, r3
 8013452:	f000 f860 	bl	8013516 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8013456:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8013458:	f107 0308 	add.w	r3, r7, #8
 801345c:	697a      	ldr	r2, [r7, #20]
 801345e:	6939      	ldr	r1, [r7, #16]
 8013460:	4618      	mov	r0, r3
 8013462:	f000 f8b6 	bl	80135d2 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8013466:	6978      	ldr	r0, [r7, #20]
 8013468:	f7ff ff95 	bl	8013396 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 801346c:	4604      	mov	r4, r0
 801346e:	6838      	ldr	r0, [r7, #0]
 8013470:	f000 f8d8 	bl	8013624 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8013474:	4603      	mov	r3, r0
 8013476:	461a      	mov	r2, r3
 8013478:	4621      	mov	r1, r4
 801347a:	6938      	ldr	r0, [r7, #16]
 801347c:	f000 f8dd 	bl	801363a <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 8013480:	f107 0308 	add.w	r3, r7, #8
 8013484:	2100      	movs	r1, #0
 8013486:	4618      	mov	r0, r3
 8013488:	f000 f8ea 	bl	8013660 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>
	  return __p;
 801348c:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 801348e:	f107 0308 	add.w	r3, r7, #8
 8013492:	4618      	mov	r0, r3
 8013494:	f000 f8b1 	bl	80135fa <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>
	  return __p;
 8013498:	4623      	mov	r3, r4
	}
 801349a:	4618      	mov	r0, r3
 801349c:	371c      	adds	r7, #28
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd90      	pop	{r4, r7, pc}

080134a2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80134a2:	b480      	push	{r7}
 80134a4:	b083      	sub	sp, #12
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	6078      	str	r0, [r7, #4]
 80134aa:	6039      	str	r1, [r7, #0]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	689a      	ldr	r2, [r3, #8]
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	441a      	add	r2, r3
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	609a      	str	r2, [r3, #8]
 80134b8:	bf00      	nop
 80134ba:	370c      	adds	r7, #12
 80134bc:	46bd      	mov	sp, r7
 80134be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c2:	4770      	bx	lr

080134c4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b086      	sub	sp, #24
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f000 f8a7 	bl	8013624 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 80134d6:	4603      	mov	r3, r0
 80134d8:	4619      	mov	r1, r3
 80134da:	68f8      	ldr	r0, [r7, #12]
 80134dc:	f7ff ffad 	bl	801343a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 80134e0:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 80134e2:	697b      	ldr	r3, [r7, #20]
 80134e4:	68ba      	ldr	r2, [r7, #8]
 80134e6:	4611      	mov	r1, r2
 80134e8:	4618      	mov	r0, r3
 80134ea:	f006 f916 	bl	801971a <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	2101      	movs	r1, #1
 80134f2:	4618      	mov	r0, r3
 80134f4:	f7ff ffd5 	bl	80134a2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
       }
 80134f8:	bf00      	nop
 80134fa:	3718      	adds	r7, #24
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}

08013500 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8013500:	b480      	push	{r7}
 8013502:	b083      	sub	sp, #12
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	4618      	mov	r0, r3
 801350c:	370c      	adds	r7, #12
 801350e:	46bd      	mov	sp, r7
 8013510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013514:	4770      	bx	lr

08013516 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8013516:	b480      	push	{r7}
 8013518:	b083      	sub	sp, #12
 801351a:	af00      	add	r7, sp, #0
 801351c:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	4618      	mov	r0, r3
 8013522:	370c      	adds	r7, #12
 8013524:	46bd      	mov	sp, r7
 8013526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352a:	4770      	bx	lr

0801352c <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8013536:	6839      	ldr	r1, [r7, #0]
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f000 f8a0 	bl	801367e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 801353e:	bf00      	nop
 8013540:	3708      	adds	r7, #8
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}

08013546 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8013546:	b580      	push	{r7, lr}
 8013548:	b082      	sub	sp, #8
 801354a:	af00      	add	r7, sp, #0
 801354c:	6078      	str	r0, [r7, #4]
 801354e:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2201      	movs	r2, #1
 8013554:	6839      	ldr	r1, [r7, #0]
 8013556:	4618      	mov	r0, r3
 8013558:	f000 f89c 	bl	8013694 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
 801355c:	bf00      	nop
 801355e:	3708      	adds	r7, #8
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}

08013564 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	f000 f8a0 	bl	80136b2 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>
 8013572:	4603      	mov	r3, r0
 8013574:	4618      	mov	r0, r3
 8013576:	3708      	adds	r7, #8
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 801357c:	b480      	push	{r7}
 801357e:	b083      	sub	sp, #12
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	6039      	str	r1, [r7, #0]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	689a      	ldr	r2, [r3, #8]
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	1ad2      	subs	r2, r2, r3
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	609a      	str	r2, [r3, #8]
 8013592:	bf00      	nop
 8013594:	370c      	adds	r7, #12
 8013596:	46bd      	mov	sp, r7
 8013598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359c:	4770      	bx	lr

0801359e <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 801359e:	b480      	push	{r7}
 80135a0:	b083      	sub	sp, #12
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	6078      	str	r0, [r7, #4]
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	689b      	ldr	r3, [r3, #8]
 80135aa:	4618      	mov	r0, r3
 80135ac:	370c      	adds	r7, #12
 80135ae:	46bd      	mov	sp, r7
 80135b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b4:	4770      	bx	lr

080135b6 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 80135b6:	b580      	push	{r7, lr}
 80135b8:	b082      	sub	sp, #8
 80135ba:	af00      	add	r7, sp, #0
 80135bc:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	2101      	movs	r1, #1
 80135c2:	4618      	mov	r0, r3
 80135c4:	f000 f880 	bl	80136c8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>
 80135c8:	4603      	mov	r3, r0
 80135ca:	4618      	mov	r0, r3
 80135cc:	3708      	adds	r7, #8
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}

080135d2 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80135d2:	b580      	push	{r7, lr}
 80135d4:	b084      	sub	sp, #16
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	60f8      	str	r0, [r7, #12]
 80135da:	60b9      	str	r1, [r7, #8]
 80135dc:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80135de:	68b8      	ldr	r0, [r7, #8]
 80135e0:	f000 f881 	bl	80136e6 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>
 80135e4:	4602      	mov	r2, r0
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	601a      	str	r2, [r3, #0]
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	605a      	str	r2, [r3, #4]
      { }
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	4618      	mov	r0, r3
 80135f4:	3710      	adds	r7, #16
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}

080135fa <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 80135fa:	b580      	push	{r7, lr}
 80135fc:	b082      	sub	sp, #8
 80135fe:	af00      	add	r7, sp, #0
 8013600:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d007      	beq.n	801361a <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	6818      	ldr	r0, [r3, #0]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	685b      	ldr	r3, [r3, #4]
 8013612:	2201      	movs	r2, #1
 8013614:	4619      	mov	r1, r3
 8013616:	f000 f83d 	bl	8013694 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
      }
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	4618      	mov	r0, r3
 801361e:	3708      	adds	r7, #8
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013624:	b480      	push	{r7}
 8013626:	b083      	sub	sp, #12
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	4618      	mov	r0, r3
 8013630:	370c      	adds	r7, #12
 8013632:	46bd      	mov	sp, r7
 8013634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013638:	4770      	bx	lr

0801363a <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801363a:	b580      	push	{r7, lr}
 801363c:	b084      	sub	sp, #16
 801363e:	af00      	add	r7, sp, #0
 8013640:	60f8      	str	r0, [r7, #12]
 8013642:	60b9      	str	r1, [r7, #8]
 8013644:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f7ff ffec 	bl	8013624 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 801364c:	4603      	mov	r3, r0
 801364e:	461a      	mov	r2, r3
 8013650:	68b9      	ldr	r1, [r7, #8]
 8013652:	68f8      	ldr	r0, [r7, #12]
 8013654:	f000 f852 	bl	80136fc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 8013658:	bf00      	nop
 801365a:	3710      	adds	r7, #16
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}

08013660 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8013660:	b480      	push	{r7}
 8013662:	b083      	sub	sp, #12
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2200      	movs	r2, #0
 801366e:	605a      	str	r2, [r3, #4]
	return *this;
 8013670:	687b      	ldr	r3, [r7, #4]
      }
 8013672:	4618      	mov	r0, r3
 8013674:	370c      	adds	r7, #12
 8013676:	46bd      	mov	sp, r7
 8013678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367c:	4770      	bx	lr

0801367e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 801367e:	b480      	push	{r7}
 8013680:	b083      	sub	sp, #12
 8013682:	af00      	add	r7, sp, #0
 8013684:	6078      	str	r0, [r7, #4]
 8013686:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8013688:	bf00      	nop
 801368a:	370c      	adds	r7, #12
 801368c:	46bd      	mov	sp, r7
 801368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013692:	4770      	bx	lr

08013694 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8013694:	b580      	push	{r7, lr}
 8013696:	b084      	sub	sp, #16
 8013698:	af00      	add	r7, sp, #0
 801369a:	60f8      	str	r0, [r7, #12]
 801369c:	60b9      	str	r1, [r7, #8]
 801369e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80136a0:	687a      	ldr	r2, [r7, #4]
 80136a2:	68b9      	ldr	r1, [r7, #8]
 80136a4:	68f8      	ldr	r0, [r7, #12]
 80136a6:	f000 f83f 	bl	8013728 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>
 80136aa:	bf00      	nop
 80136ac:	3710      	adds	r7, #16
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}

080136b2 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>:
      _M_addr() noexcept
 80136b2:	b480      	push	{r7}
 80136b4:	b083      	sub	sp, #12
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	4618      	mov	r0, r3
 80136be:	370c      	adds	r7, #12
 80136c0:	46bd      	mov	sp, r7
 80136c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c6:	4770      	bx	lr

080136c8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80136d2:	2200      	movs	r2, #0
 80136d4:	6839      	ldr	r1, [r7, #0]
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f000 f839 	bl	801374e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>
 80136dc:	4603      	mov	r3, r0
 80136de:	4618      	mov	r0, r3
 80136e0:	3708      	adds	r7, #8
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}

080136e6 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80136e6:	b480      	push	{r7}
 80136e8:	b083      	sub	sp, #12
 80136ea:	af00      	add	r7, sp, #0
 80136ec:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	4618      	mov	r0, r3
 80136f2:	370c      	adds	r7, #12
 80136f4:	46bd      	mov	sp, r7
 80136f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fa:	4770      	bx	lr

080136fc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80136fc:	b590      	push	{r4, r7, lr}
 80136fe:	b085      	sub	sp, #20
 8013700:	af00      	add	r7, sp, #0
 8013702:	60f8      	str	r0, [r7, #12]
 8013704:	60b9      	str	r1, [r7, #8]
 8013706:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	f7ff ff8b 	bl	8013624 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 801370e:	4603      	mov	r3, r0
 8013710:	681c      	ldr	r4, [r3, #0]
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	4619      	mov	r1, r3
 8013716:	2004      	movs	r0, #4
 8013718:	f7fa f864 	bl	800d7e4 <_ZnwjPv>
 801371c:	4603      	mov	r3, r0
 801371e:	601c      	str	r4, [r3, #0]
 8013720:	bf00      	nop
 8013722:	3714      	adds	r7, #20
 8013724:	46bd      	mov	sp, r7
 8013726:	bd90      	pop	{r4, r7, pc}

08013728 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
 801372e:	60f8      	str	r0, [r7, #12]
 8013730:	60b9      	str	r1, [r7, #8]
 8013732:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8013734:	687a      	ldr	r2, [r7, #4]
 8013736:	4613      	mov	r3, r2
 8013738:	005b      	lsls	r3, r3, #1
 801373a:	4413      	add	r3, r2
 801373c:	009b      	lsls	r3, r3, #2
 801373e:	4619      	mov	r1, r3
 8013740:	68b8      	ldr	r0, [r7, #8]
 8013742:	f005 ffc3 	bl	80196cc <_ZdlPvj>
      }
 8013746:	bf00      	nop
 8013748:	3710      	adds	r7, #16
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}

0801374e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801374e:	b580      	push	{r7, lr}
 8013750:	b084      	sub	sp, #16
 8013752:	af00      	add	r7, sp, #0
 8013754:	60f8      	str	r0, [r7, #12]
 8013756:	60b9      	str	r1, [r7, #8]
 8013758:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801375a:	68f8      	ldr	r0, [r7, #12]
 801375c:	f000 f818 	bl	8013790 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv>
 8013760:	4602      	mov	r2, r0
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	4293      	cmp	r3, r2
 8013766:	bf8c      	ite	hi
 8013768:	2301      	movhi	r3, #1
 801376a:	2300      	movls	r3, #0
 801376c:	b2db      	uxtb	r3, r3
 801376e:	2b00      	cmp	r3, #0
 8013770:	d001      	beq.n	8013776 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013772:	f005 ffde 	bl	8019732 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013776:	68ba      	ldr	r2, [r7, #8]
 8013778:	4613      	mov	r3, r2
 801377a:	005b      	lsls	r3, r3, #1
 801377c:	4413      	add	r3, r2
 801377e:	009b      	lsls	r3, r3, #2
 8013780:	4618      	mov	r0, r3
 8013782:	f005 ffb4 	bl	80196ee <_Znwj>
 8013786:	4603      	mov	r3, r0
      }
 8013788:	4618      	mov	r0, r3
 801378a:	3710      	adds	r7, #16
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}

08013790 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013790:	b480      	push	{r7}
 8013792:	b083      	sub	sp, #12
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013798:	4b03      	ldr	r3, [pc, #12]	; (80137a8 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 801379a:	4618      	mov	r0, r3
 801379c:	370c      	adds	r7, #12
 801379e:	46bd      	mov	sp, r7
 80137a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a4:	4770      	bx	lr
 80137a6:	bf00      	nop
 80137a8:	0aaaaaaa 	.word	0x0aaaaaaa

080137ac <_ZN2XF9isRunningEv>:
    // Execute once the default dispatcher
    return XFResourceFactory::getInstance()->getDefaultDispatcher()->executeOnce();
}

bool XF::isRunning()
{
 80137ac:	b480      	push	{r7}
 80137ae:	af00      	add	r7, sp, #0
    return isRunning_;
 80137b0:	4b03      	ldr	r3, [pc, #12]	; (80137c0 <_ZN2XF9isRunningEv+0x14>)
 80137b2:	781b      	ldrb	r3, [r3, #0]
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	46bd      	mov	sp, r7
 80137b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137bc:	4770      	bx	lr
 80137be:	bf00      	nop
 80137c0:	20001c90 	.word	0x20001c90

080137c4 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 80137c4:	b480      	push	{r7}
 80137c6:	b083      	sub	sp, #12
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80137d2:	d205      	bcs.n	80137e0 <_ZSt16__deque_buf_sizej+0x1c>
 80137d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	fbb2 f3f3 	udiv	r3, r2, r3
 80137de:	e000      	b.n	80137e2 <_ZSt16__deque_buf_sizej+0x1e>
 80137e0:	2301      	movs	r3, #1
 80137e2:	4618      	mov	r0, r3
 80137e4:	370c      	adds	r7, #12
 80137e6:	46bd      	mov	sp, r7
 80137e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ec:	4770      	bx	lr
	...

080137f0 <_ZN9interface12XFEventQueueC1Ev>:
    virtual const XFEvent * front() = 0;			///< Returns pointer to next event to pop.
    virtual void pop() = 0;							///< Pops the next event from the queue.
    virtual bool pend() = 0;						///< Wait for the next event to arrive. Returns true if an event is in the queue.

public:
    XFEventQueue() = default;
 80137f0:	b480      	push	{r7}
 80137f2:	b083      	sub	sp, #12
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	4a04      	ldr	r2, [pc, #16]	; (801380c <_ZN9interface12XFEventQueueC1Ev+0x1c>)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	601a      	str	r2, [r3, #0]
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	4618      	mov	r0, r3
 8013802:	370c      	adds	r7, #12
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr
 801380c:	0801c8b0 	.word	0x0801c8b0

08013810 <_ZN9interface12XFEventQueueD1Ev>:
    virtual ~XFEventQueue() = default;
 8013810:	b480      	push	{r7}
 8013812:	b083      	sub	sp, #12
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	4a04      	ldr	r2, [pc, #16]	; (801382c <_ZN9interface12XFEventQueueD1Ev+0x1c>)
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	601a      	str	r2, [r3, #0]
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	4618      	mov	r0, r3
 8013822:	370c      	adds	r7, #12
 8013824:	46bd      	mov	sp, r7
 8013826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382a:	4770      	bx	lr
 801382c:	0801c8b0 	.word	0x0801c8b0

08013830 <_ZN9interface12XFEventQueueD0Ev>:
 8013830:	b580      	push	{r7, lr}
 8013832:	b082      	sub	sp, #8
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f7ff ffe9 	bl	8013810 <_ZN9interface12XFEventQueueD1Ev>
 801383e:	2104      	movs	r1, #4
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f005 ff43 	bl	80196cc <_ZdlPvj>
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	4618      	mov	r0, r3
 801384a:	3708      	adds	r7, #8
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}

08013850 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8013850:	b580      	push	{r7, lr}
 8013852:	b082      	sub	sp, #8
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	4618      	mov	r0, r3
 801385c:	f000 f8d8 	bl	8013a10 <_ZNSt5dequeIPK7XFEventSaIS2_EED1Ev>
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	4618      	mov	r0, r3
 8013864:	3708      	adds	r7, #8
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}
	...

0801386c <_ZN19XFEventQueueDefaultC1Ev>:
#if (USE_XF_EVENT_QUEUE_DEFAULT_IDF_IMPLEMENTATION != 0)

#include <cassert>
#include "eventqueue-default.h"

XFEventQueueDefault::XFEventQueueDefault()
 801386c:	b580      	push	{r7, lr}
 801386e:	b082      	sub	sp, #8
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	4618      	mov	r0, r3
 8013878:	f7ff ffba 	bl	80137f0 <_ZN9interface12XFEventQueueC1Ev>
 801387c:	4a08      	ldr	r2, [pc, #32]	; (80138a0 <_ZN19XFEventQueueDefaultC1Ev+0x34>)
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	601a      	str	r2, [r3, #0]
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	3304      	adds	r3, #4
 8013886:	4618      	mov	r0, r3
 8013888:	f001 f818 	bl	80148bc <_ZN14XFMutexDefaultC1Ev>
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	3308      	adds	r3, #8
 8013890:	4618      	mov	r0, r3
 8013892:	f000 f8a9 	bl	80139e8 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEEC1IS5_vEEv>
{

}
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	4618      	mov	r0, r3
 801389a:	3708      	adds	r7, #8
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}
 80138a0:	0801c88c 	.word	0x0801c88c

080138a4 <_ZN19XFEventQueueDefaultD1Ev>:

XFEventQueueDefault::~XFEventQueueDefault()
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	4a0a      	ldr	r2, [pc, #40]	; (80138d8 <_ZN19XFEventQueueDefaultD1Ev+0x34>)
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	601a      	str	r2, [r3, #0]
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	3308      	adds	r3, #8
 80138b6:	4618      	mov	r0, r3
 80138b8:	f7ff ffca 	bl	8013850 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEED1Ev>
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	3304      	adds	r3, #4
 80138c0:	4618      	mov	r0, r3
 80138c2:	f001 f80d 	bl	80148e0 <_ZN14XFMutexDefaultD1Ev>
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7ff ffa1 	bl	8013810 <_ZN9interface12XFEventQueueD1Ev>
{

}
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	4618      	mov	r0, r3
 80138d2:	3708      	adds	r7, #8
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}
 80138d8:	0801c88c 	.word	0x0801c88c

080138dc <_ZN19XFEventQueueDefaultD0Ev>:
XFEventQueueDefault::~XFEventQueueDefault()
 80138dc:	b580      	push	{r7, lr}
 80138de:	b082      	sub	sp, #8
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
}
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f7ff ffdd 	bl	80138a4 <_ZN19XFEventQueueDefaultD1Ev>
 80138ea:	2130      	movs	r1, #48	; 0x30
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f005 feed 	bl	80196cc <_ZdlPvj>
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	4618      	mov	r0, r3
 80138f6:	3708      	adds	r7, #8
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}

080138fc <_ZNK19XFEventQueueDefault5emptyEv>:

bool XFEventQueueDefault::empty() const
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
    return _queue.empty();
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	3308      	adds	r3, #8
 8013908:	4618      	mov	r0, r3
 801390a:	f000 f8a6 	bl	8013a5a <_ZNKSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5emptyEv>
 801390e:	4603      	mov	r3, r0
}
 8013910:	4618      	mov	r0, r3
 8013912:	3708      	adds	r7, #8
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <_ZN19XFEventQueueDefault4pushEPK7XFEventb>:

bool XFEventQueueDefault::push(const XFEvent * pEvent, bool fromISR)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b084      	sub	sp, #16
 801391c:	af00      	add	r7, sp, #0
 801391e:	60f8      	str	r0, [r7, #12]
 8013920:	60b9      	str	r1, [r7, #8]
 8013922:	4613      	mov	r3, r2
 8013924:	71fb      	strb	r3, [r7, #7]
    _mutex.lock();
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	3304      	adds	r3, #4
 801392a:	4618      	mov	r0, r3
 801392c:	f000 fffa 	bl	8014924 <_ZN14XFMutexDefault4lockEv>
    {
        _queue.push(pEvent);
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	3308      	adds	r3, #8
 8013934:	f107 0208 	add.w	r2, r7, #8
 8013938:	4611      	mov	r1, r2
 801393a:	4618      	mov	r0, r3
 801393c:	f000 f89a 	bl	8013a74 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE4pushERKS2_>
    }
    _mutex.unlock();
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	3304      	adds	r3, #4
 8013944:	4618      	mov	r0, r3
 8013946:	f000 fff7 	bl	8014938 <_ZN14XFMutexDefault6unlockEv>

    return true;
 801394a:	2301      	movs	r3, #1
}
 801394c:	4618      	mov	r0, r3
 801394e:	3710      	adds	r7, #16
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}

08013954 <_ZN19XFEventQueueDefault5frontEv>:

const XFEvent * XFEventQueueDefault::front()
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b084      	sub	sp, #16
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
    const XFEvent * event;
    _mutex.lock();
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	3304      	adds	r3, #4
 8013960:	4618      	mov	r0, r3
 8013962:	f000 ffdf 	bl	8014924 <_ZN14XFMutexDefault4lockEv>
    {
        event =  _queue.front();
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	3308      	adds	r3, #8
 801396a:	4618      	mov	r0, r3
 801396c:	f000 f890 	bl	8013a90 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5frontEv>
 8013970:	4603      	mov	r3, r0
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	60fb      	str	r3, [r7, #12]
    }
    _mutex.unlock();
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	3304      	adds	r3, #4
 801397a:	4618      	mov	r0, r3
 801397c:	f000 ffdc 	bl	8014938 <_ZN14XFMutexDefault6unlockEv>
    return event;
 8013980:	68fb      	ldr	r3, [r7, #12]
}
 8013982:	4618      	mov	r0, r3
 8013984:	3710      	adds	r7, #16
 8013986:	46bd      	mov	sp, r7
 8013988:	bd80      	pop	{r7, pc}

0801398a <_ZN19XFEventQueueDefault3popEv>:

void XFEventQueueDefault::pop()
{
 801398a:	b580      	push	{r7, lr}
 801398c:	b082      	sub	sp, #8
 801398e:	af00      	add	r7, sp, #0
 8013990:	6078      	str	r0, [r7, #4]
    _mutex.lock();
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	3304      	adds	r3, #4
 8013996:	4618      	mov	r0, r3
 8013998:	f000 ffc4 	bl	8014924 <_ZN14XFMutexDefault4lockEv>
    {
        _queue.pop();
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	3308      	adds	r3, #8
 80139a0:	4618      	mov	r0, r3
 80139a2:	f000 f882 	bl	8013aaa <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE3popEv>
    }
    _mutex.unlock();
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	3304      	adds	r3, #4
 80139aa:	4618      	mov	r0, r3
 80139ac:	f000 ffc4 	bl	8014938 <_ZN14XFMutexDefault6unlockEv>
}
 80139b0:	bf00      	nop
 80139b2:	3708      	adds	r7, #8
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <_ZN19XFEventQueueDefault4pendEv>:

bool XFEventQueueDefault::pend()
{
 80139b8:	b480      	push	{r7}
 80139ba:	b083      	sub	sp, #12
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
    // Method cannot be used in an IDF! Waiting within
    // this method would block the whole XF
    return false;
 80139c0:	2300      	movs	r3, #0
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	370c      	adds	r7, #12
 80139c6:	46bd      	mov	sp, r7
 80139c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139cc:	4770      	bx	lr

080139ce <_ZNSt5dequeIPK7XFEventSaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 80139ce:	b580      	push	{r7, lr}
 80139d0:	b082      	sub	sp, #8
 80139d2:	af00      	add	r7, sp, #0
 80139d4:	6078      	str	r0, [r7, #4]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	4618      	mov	r0, r3
 80139da:	f000 f87e 	bl	8013ada <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EEC1Ev>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	4618      	mov	r0, r3
 80139e2:	3708      	adds	r7, #8
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}

080139e8 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEEC1IS5_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
	: c() { }
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	4618      	mov	r0, r3
 80139f4:	2328      	movs	r3, #40	; 0x28
 80139f6:	461a      	mov	r2, r3
 80139f8:	2100      	movs	r1, #0
 80139fa:	f006 f937 	bl	8019c6c <memset>
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7ff ffe4 	bl	80139ce <_ZNSt5dequeIPK7XFEventSaIS2_EEC1Ev>
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	3708      	adds	r7, #8
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}

08013a10 <_ZNSt5dequeIPK7XFEventSaIS2_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b08a      	sub	sp, #40	; 0x28
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8013a18:	f107 0308 	add.w	r3, r7, #8
 8013a1c:	6879      	ldr	r1, [r7, #4]
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f000 f88e 	bl	8013b40 <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>
 8013a24:	f107 0318 	add.w	r3, r7, #24
 8013a28:	6879      	ldr	r1, [r7, #4]
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f000 f897 	bl	8013b5e <_ZNSt5dequeIPK7XFEventSaIS2_EE3endEv>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f000 f8a2 	bl	8013b7c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	f107 0218 	add.w	r2, r7, #24
 8013a3e:	f107 0108 	add.w	r1, r7, #8
 8013a42:	6878      	ldr	r0, [r7, #4]
 8013a44:	f000 f8c1 	bl	8013bca <_ZNSt5dequeIPK7XFEventSaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f000 f856 	bl	8013afc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	4618      	mov	r0, r3
 8013a54:	3728      	adds	r7, #40	; 0x28
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}

08013a5a <_ZNKSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 8013a5a:	b580      	push	{r7, lr}
 8013a5c:	b082      	sub	sp, #8
 8013a5e:	af00      	add	r7, sp, #0
 8013a60:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	4618      	mov	r0, r3
 8013a66:	f000 f8bd 	bl	8013be4 <_ZNKSt5dequeIPK7XFEventSaIS2_EE5emptyEv>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3708      	adds	r7, #8
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}

08013a74 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE4pushERKS2_>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b082      	sub	sp, #8
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6839      	ldr	r1, [r7, #0]
 8013a82:	4618      	mov	r0, r3
 8013a84:	f000 f8c0 	bl	8013c08 <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_>
 8013a88:	bf00      	nop
 8013a8a:	3708      	adds	r7, #8
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}

08013a90 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5frontEv>:
      front()
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
	return c.front();
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f000 f8d5 	bl	8013c4a <_ZNSt5dequeIPK7XFEventSaIS2_EE5frontEv>
 8013aa0:	4603      	mov	r3, r0
      }
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3708      	adds	r7, #8
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}

08013aaa <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8013aaa:	b580      	push	{r7, lr}
 8013aac:	b082      	sub	sp, #8
 8013aae:	af00      	add	r7, sp, #0
 8013ab0:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f000 f8dc 	bl	8013c72 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv>
      }
 8013aba:	bf00      	nop
 8013abc:	3708      	adds	r7, #8
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}

08013ac2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8013ac2:	b580      	push	{r7, lr}
 8013ac4:	b082      	sub	sp, #8
 8013ac6:	af00      	add	r7, sp, #0
 8013ac8:	6078      	str	r0, [r7, #4]
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f000 f904 	bl	8013cd8 <_ZNSaIPK7XFEventED1Ev>
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3708      	adds	r7, #8
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}

08013ada <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EEC1Ev>:
      _Deque_base()
 8013ada:	b580      	push	{r7, lr}
 8013adc:	b082      	sub	sp, #8
 8013ade:	af00      	add	r7, sp, #0
 8013ae0:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f000 f8e7 	bl	8013cb8 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8013aea:	2100      	movs	r1, #0
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f000 f8ff 	bl	8013cf0 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	4618      	mov	r0, r3
 8013af6:	3708      	adds	r7, #8
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bd80      	pop	{r7, pc}

08013afc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b082      	sub	sp, #8
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d010      	beq.n	8013b2e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8013b14:	3304      	adds	r3, #4
 8013b16:	461a      	mov	r2, r3
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f000 f94c 	bl	8013db6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	6819      	ldr	r1, [r3, #0]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	685b      	ldr	r3, [r3, #4]
 8013b26:	461a      	mov	r2, r3
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f000 f95e 	bl	8013dea <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>
    }
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7ff ffc6 	bl	8013ac2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implD1Ev>
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	4618      	mov	r0, r3
 8013b3a:	3708      	adds	r7, #8
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}

08013b40 <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b082      	sub	sp, #8
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	3308      	adds	r3, #8
 8013b4e:	4619      	mov	r1, r3
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f000 f81e 	bl	8013b92 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	3708      	adds	r7, #8
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}

08013b5e <_ZNSt5dequeIPK7XFEventSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8013b5e:	b580      	push	{r7, lr}
 8013b60:	b082      	sub	sp, #8
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	6078      	str	r0, [r7, #4]
 8013b66:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	3318      	adds	r3, #24
 8013b6c:	4619      	mov	r1, r3
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f000 f80f 	bl	8013b92 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	3708      	adds	r7, #8
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}

08013b7c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8013b7c:	b480      	push	{r7}
 8013b7e:	b083      	sub	sp, #12
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	4618      	mov	r0, r3
 8013b88:	370c      	adds	r7, #12
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b90:	4770      	bx	lr

08013b92 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8013b92:	b480      	push	{r7}
 8013b94:	b083      	sub	sp, #12
 8013b96:	af00      	add	r7, sp, #0
 8013b98:	6078      	str	r0, [r7, #4]
 8013b9a:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	605a      	str	r2, [r3, #4]
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	689a      	ldr	r2, [r3, #8]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	609a      	str	r2, [r3, #8]
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	68da      	ldr	r2, [r3, #12]
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	60da      	str	r2, [r3, #12]
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	370c      	adds	r7, #12
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc8:	4770      	bx	lr

08013bca <_ZNSt5dequeIPK7XFEventSaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8013bca:	b480      	push	{r7}
 8013bcc:	b08d      	sub	sp, #52	; 0x34
 8013bce:	af00      	add	r7, sp, #0
 8013bd0:	60f8      	str	r0, [r7, #12]
 8013bd2:	60b9      	str	r1, [r7, #8]
 8013bd4:	607a      	str	r2, [r7, #4]
 8013bd6:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8013bd8:	bf00      	nop
 8013bda:	3734      	adds	r7, #52	; 0x34
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be2:	4770      	bx	lr

08013be4 <_ZNKSt5dequeIPK7XFEventSaIS2_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	f103 0218 	add.w	r2, r3, #24
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	3308      	adds	r3, #8
 8013bf6:	4619      	mov	r1, r3
 8013bf8:	4610      	mov	r0, r2
 8013bfa:	f000 f912 	bl	8013e22 <_ZSteqRKSt15_Deque_iteratorIPK7XFEventRS2_PS2_ES7_>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	4618      	mov	r0, r3
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	6a1b      	ldr	r3, [r3, #32]
 8013c1a:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d00c      	beq.n	8013c3a <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	699b      	ldr	r3, [r3, #24]
 8013c26:	683a      	ldr	r2, [r7, #0]
 8013c28:	4619      	mov	r1, r3
 8013c2a:	f000 f90e 	bl	8013e4a <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	699b      	ldr	r3, [r3, #24]
 8013c32:	1d1a      	adds	r2, r3, #4
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	619a      	str	r2, [r3, #24]
      }
 8013c38:	e003      	b.n	8013c42 <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_+0x3a>
	  _M_push_back_aux(__x);
 8013c3a:	6839      	ldr	r1, [r7, #0]
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f000 f917 	bl	8013e70 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
      }
 8013c42:	bf00      	nop
 8013c44:	3708      	adds	r7, #8
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}

08013c4a <_ZNSt5dequeIPK7XFEventSaIS2_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8013c4a:	b580      	push	{r7, lr}
 8013c4c:	b086      	sub	sp, #24
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	6078      	str	r0, [r7, #4]
	return *begin();
 8013c52:	f107 0308 	add.w	r3, r7, #8
 8013c56:	6879      	ldr	r1, [r7, #4]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7ff ff71 	bl	8013b40 <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>
 8013c5e:	f107 0308 	add.w	r3, r7, #8
 8013c62:	4618      	mov	r0, r3
 8013c64:	f000 f948 	bl	8013ef8 <_ZNKSt15_Deque_iteratorIPK7XFEventRS2_PS2_EdeEv>
 8013c68:	4603      	mov	r3, r0
      }
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3718      	adds	r7, #24
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}

08013c72 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8013c72:	b580      	push	{r7, lr}
 8013c74:	b082      	sub	sp, #8
 8013c76:	af00      	add	r7, sp, #0
 8013c78:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	691b      	ldr	r3, [r3, #16]
 8013c82:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d010      	beq.n	8013caa <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7ff ff76 	bl	8013b7c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 8013c90:	4602      	mov	r2, r0
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	689b      	ldr	r3, [r3, #8]
 8013c96:	4619      	mov	r1, r3
 8013c98:	4610      	mov	r0, r2
 8013c9a:	f000 f939 	bl	8013f10 <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	689b      	ldr	r3, [r3, #8]
 8013ca2:	1d1a      	adds	r2, r3, #4
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	609a      	str	r2, [r3, #8]
      }
 8013ca8:	e002      	b.n	8013cb0 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f000 f93d 	bl	8013f2a <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>
      }
 8013cb0:	bf00      	nop
 8013cb2:	3708      	adds	r7, #8
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}

08013cb8 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b082      	sub	sp, #8
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	f000 f95a 	bl	8013f7a <_ZNSaIPK7XFEventEC1Ev>
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f000 f962 	bl	8013f92 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_Deque_impl_dataC1Ev>
	{ }
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	3708      	adds	r7, #8
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}

08013cd8 <_ZNSaIPK7XFEventED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b082      	sub	sp, #8
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f000 f96f 	bl	8013fc4 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventED1Ev>
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3708      	adds	r7, #8
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8013cf0:	b590      	push	{r4, r7, lr}
 8013cf2:	b089      	sub	sp, #36	; 0x24
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8013cfa:	2004      	movs	r0, #4
 8013cfc:	f7ff fd62 	bl	80137c4 <_ZSt16__deque_buf_sizej>
 8013d00:	4602      	mov	r2, r0
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d08:	3301      	adds	r3, #1
 8013d0a:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8013d0c:	2308      	movs	r3, #8
 8013d0e:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8013d10:	69fb      	ldr	r3, [r7, #28]
 8013d12:	3302      	adds	r3, #2
 8013d14:	613b      	str	r3, [r7, #16]
 8013d16:	f107 0210 	add.w	r2, r7, #16
 8013d1a:	f107 030c 	add.w	r3, r7, #12
 8013d1e:	4611      	mov	r1, r2
 8013d20:	4618      	mov	r0, r3
 8013d22:	f000 f95a 	bl	8013fda <_ZSt3maxIjERKT_S2_S2_>
 8013d26:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8013d28:	681a      	ldr	r2, [r3, #0]
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	4619      	mov	r1, r3
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f000 f964 	bl	8014002 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6859      	ldr	r1, [r3, #4]
 8013d48:	69fb      	ldr	r3, [r7, #28]
 8013d4a:	1acb      	subs	r3, r1, r3
 8013d4c:	085b      	lsrs	r3, r3, #1
 8013d4e:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8013d50:	4413      	add	r3, r2
 8013d52:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8013d54:	69fb      	ldr	r3, [r7, #28]
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	69ba      	ldr	r2, [r7, #24]
 8013d5a:	4413      	add	r3, r2
 8013d5c:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8013d5e:	697a      	ldr	r2, [r7, #20]
 8013d60:	69b9      	ldr	r1, [r7, #24]
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f000 f96a 	bl	801403c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	3308      	adds	r3, #8
 8013d6c:	69b9      	ldr	r1, [r7, #24]
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f000 f97e 	bl	8014070 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f103 0218 	add.w	r2, r3, #24
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	3b04      	subs	r3, #4
 8013d7e:	4619      	mov	r1, r3
 8013d80:	4610      	mov	r0, r2
 8013d82:	f000 f975 	bl	8014070 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	68da      	ldr	r2, [r3, #12]
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8013d92:	2004      	movs	r0, #4
 8013d94:	f7ff fd16 	bl	80137c4 <_ZSt16__deque_buf_sizej>
 8013d98:	4602      	mov	r2, r0
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013da0:	fb01 f202 	mul.w	r2, r1, r2
 8013da4:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8013da6:	009b      	lsls	r3, r3, #2
 8013da8:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	619a      	str	r2, [r3, #24]
    }
 8013dae:	bf00      	nop
 8013db0:	3724      	adds	r7, #36	; 0x24
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bd90      	pop	{r4, r7, pc}

08013db6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 8013db6:	b580      	push	{r7, lr}
 8013db8:	b086      	sub	sp, #24
 8013dba:	af00      	add	r7, sp, #0
 8013dbc:	60f8      	str	r0, [r7, #12]
 8013dbe:	60b9      	str	r1, [r7, #8]
 8013dc0:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	617b      	str	r3, [r7, #20]
 8013dc6:	697a      	ldr	r2, [r7, #20]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d209      	bcs.n	8013de2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x2c>
	_M_deallocate_node(*__n);
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	4619      	mov	r1, r3
 8013dd4:	68f8      	ldr	r0, [r7, #12]
 8013dd6:	f000 f964 	bl	80140a2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	3304      	adds	r3, #4
 8013dde:	617b      	str	r3, [r7, #20]
 8013de0:	e7f1      	b.n	8013dc6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x10>
    }
 8013de2:	bf00      	nop
 8013de4:	3718      	adds	r7, #24
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}

08013dea <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8013dea:	b580      	push	{r7, lr}
 8013dec:	b086      	sub	sp, #24
 8013dee:	af00      	add	r7, sp, #0
 8013df0:	60f8      	str	r0, [r7, #12]
 8013df2:	60b9      	str	r1, [r7, #8]
 8013df4:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8013df6:	f107 0314 	add.w	r3, r7, #20
 8013dfa:	68f9      	ldr	r1, [r7, #12]
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f000 f963 	bl	80140c8 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8013e02:	f107 0314 	add.w	r3, r7, #20
 8013e06:	687a      	ldr	r2, [r7, #4]
 8013e08:	68b9      	ldr	r1, [r7, #8]
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f000 f979 	bl	8014102 <_ZNSt16allocator_traitsISaIPPK7XFEventEE10deallocateERS4_PS3_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8013e10:	f107 0314 	add.w	r3, r7, #20
 8013e14:	4618      	mov	r0, r3
 8013e16:	f000 f968 	bl	80140ea <_ZNSaIPPK7XFEventED1Ev>
      }
 8013e1a:	bf00      	nop
 8013e1c:	3718      	adds	r7, #24
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}

08013e22 <_ZSteqRKSt15_Deque_iteratorIPK7XFEventRS2_PS2_ES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8013e22:	b480      	push	{r7}
 8013e24:	b083      	sub	sp, #12
 8013e26:	af00      	add	r7, sp, #0
 8013e28:	6078      	str	r0, [r7, #4]
 8013e2a:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681a      	ldr	r2, [r3, #0]
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	429a      	cmp	r2, r3
 8013e36:	bf0c      	ite	eq
 8013e38:	2301      	moveq	r3, #1
 8013e3a:	2300      	movne	r3, #0
 8013e3c:	b2db      	uxtb	r3, r3
 8013e3e:	4618      	mov	r0, r3
 8013e40:	370c      	adds	r7, #12
 8013e42:	46bd      	mov	sp, r7
 8013e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e48:	4770      	bx	lr

08013e4a <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8013e4a:	b580      	push	{r7, lr}
 8013e4c:	b084      	sub	sp, #16
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	60f8      	str	r0, [r7, #12]
 8013e52:	60b9      	str	r1, [r7, #8]
 8013e54:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f000 f962 	bl	8014120 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	461a      	mov	r2, r3
 8013e60:	68b9      	ldr	r1, [r7, #8]
 8013e62:	68f8      	ldr	r0, [r7, #12]
 8013e64:	f000 f967 	bl	8014136 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 8013e68:	bf00      	nop
 8013e6a:	3710      	adds	r7, #16
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}

08013e70 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8013e70:	b5b0      	push	{r4, r5, r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
 8013e78:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f000 f971 	bl	8014162 <_ZNKSt5dequeIPK7XFEventSaIS2_EE4sizeEv>
 8013e80:	4604      	mov	r4, r0
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f000 f97f 	bl	8014186 <_ZNKSt5dequeIPK7XFEventSaIS2_EE8max_sizeEv>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	429c      	cmp	r4, r3
 8013e8c:	bf0c      	ite	eq
 8013e8e:	2301      	moveq	r3, #1
 8013e90:	2300      	movne	r3, #0
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d002      	beq.n	8013e9e <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8013e98:	4816      	ldr	r0, [pc, #88]	; (8013ef4 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x84>)
 8013e9a:	f005 fc50 	bl	801973e <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8013e9e:	2101      	movs	r1, #1
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	f000 f981 	bl	80141a8 <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8013ea6:	687a      	ldr	r2, [r7, #4]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eac:	1d1c      	adds	r4, r3, #4
 8013eae:	4610      	mov	r0, r2
 8013eb0:	f000 f995 	bl	80141de <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8013eb8:	687c      	ldr	r4, [r7, #4]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	699d      	ldr	r5, [r3, #24]
 8013ebe:	6838      	ldr	r0, [r7, #0]
 8013ec0:	f000 f92e 	bl	8014120 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	461a      	mov	r2, r3
 8013ec8:	4629      	mov	r1, r5
 8013eca:	4620      	mov	r0, r4
 8013ecc:	f7ff ffbd 	bl	8013e4a <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f103 0218 	add.w	r2, r3, #24
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eda:	3304      	adds	r3, #4
 8013edc:	4619      	mov	r1, r3
 8013ede:	4610      	mov	r0, r2
 8013ee0:	f000 f8c6 	bl	8014070 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	69da      	ldr	r2, [r3, #28]
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8013eec:	bf00      	nop
 8013eee:	3708      	adds	r7, #8
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8013ef4:	0801c1c4 	.word	0x0801c1c4

08013ef8 <_ZNKSt15_Deque_iteratorIPK7XFEventRS2_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8013ef8:	b480      	push	{r7}
 8013efa:	b083      	sub	sp, #12
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	4618      	mov	r0, r3
 8013f06:	370c      	adds	r7, #12
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0e:	4770      	bx	lr

08013f10 <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b082      	sub	sp, #8
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
 8013f18:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8013f1a:	6839      	ldr	r1, [r7, #0]
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f000 f970 	bl	8014202 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE7destroyIS3_EEvPT_>
	}
 8013f22:	bf00      	nop
 8013f24:	3708      	adds	r7, #8
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}

08013f2a <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8013f2a:	b580      	push	{r7, lr}
 8013f2c:	b082      	sub	sp, #8
 8013f2e:	af00      	add	r7, sp, #0
 8013f30:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7ff fe21 	bl	8013b7c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 8013f3a:	4602      	mov	r2, r0
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	689b      	ldr	r3, [r3, #8]
 8013f40:	4619      	mov	r1, r3
 8013f42:	4610      	mov	r0, r2
 8013f44:	f7ff ffe4 	bl	8013f10 <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	68db      	ldr	r3, [r3, #12]
 8013f4e:	4619      	mov	r1, r3
 8013f50:	4610      	mov	r0, r2
 8013f52:	f000 f8a6 	bl	80140a2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f103 0208 	add.w	r2, r3, #8
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	695b      	ldr	r3, [r3, #20]
 8013f60:	3304      	adds	r3, #4
 8013f62:	4619      	mov	r1, r3
 8013f64:	4610      	mov	r0, r2
 8013f66:	f000 f883 	bl	8014070 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	68da      	ldr	r2, [r3, #12]
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	609a      	str	r2, [r3, #8]
    }
 8013f72:	bf00      	nop
 8013f74:	3708      	adds	r7, #8
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}

08013f7a <_ZNSaIPK7XFEventEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8013f7a:	b580      	push	{r7, lr}
 8013f7c:	b082      	sub	sp, #8
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	f000 f948 	bl	8014218 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventEC1Ev>
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	3708      	adds	r7, #8
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}

08013f92 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8013f92:	b580      	push	{r7, lr}
 8013f94:	b082      	sub	sp, #8
 8013f96:	af00      	add	r7, sp, #0
 8013f98:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	601a      	str	r2, [r3, #0]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	605a      	str	r2, [r3, #4]
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	3308      	adds	r3, #8
 8013faa:	4618      	mov	r0, r3
 8013fac:	f000 f93f 	bl	801422e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	3318      	adds	r3, #24
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f000 f93a 	bl	801422e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>
	{ }
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	3708      	adds	r7, #8
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd80      	pop	{r7, pc}

08013fc4 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8013fc4:	b480      	push	{r7}
 8013fc6:	b083      	sub	sp, #12
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	4618      	mov	r0, r3
 8013fd0:	370c      	adds	r7, #12
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd8:	4770      	bx	lr

08013fda <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8013fda:	b480      	push	{r7}
 8013fdc:	b083      	sub	sp, #12
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	6078      	str	r0, [r7, #4]
 8013fe2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	429a      	cmp	r2, r3
 8013fee:	d201      	bcs.n	8013ff4 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	e000      	b.n	8013ff6 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8013ff4:	687b      	ldr	r3, [r7, #4]
    }
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	370c      	adds	r7, #12
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014000:	4770      	bx	lr

08014002 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8014002:	b590      	push	{r4, r7, lr}
 8014004:	b085      	sub	sp, #20
 8014006:	af00      	add	r7, sp, #0
 8014008:	6078      	str	r0, [r7, #4]
 801400a:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 801400c:	f107 030c 	add.w	r3, r7, #12
 8014010:	6879      	ldr	r1, [r7, #4]
 8014012:	4618      	mov	r0, r3
 8014014:	f000 f858 	bl	80140c8 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8014018:	f107 030c 	add.w	r3, r7, #12
 801401c:	6839      	ldr	r1, [r7, #0]
 801401e:	4618      	mov	r0, r3
 8014020:	f000 f91c 	bl	801425c <_ZNSt16allocator_traitsISaIPPK7XFEventEE8allocateERS4_j>
 8014024:	4604      	mov	r4, r0
 8014026:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8014028:	f107 030c 	add.w	r3, r7, #12
 801402c:	4618      	mov	r0, r3
 801402e:	f000 f85c 	bl	80140ea <_ZNSaIPPK7XFEventED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8014032:	4623      	mov	r3, r4
      }
 8014034:	4618      	mov	r0, r3
 8014036:	3714      	adds	r7, #20
 8014038:	46bd      	mov	sp, r7
 801403a:	bd90      	pop	{r4, r7, pc}

0801403c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 801403c:	b580      	push	{r7, lr}
 801403e:	b086      	sub	sp, #24
 8014040:	af00      	add	r7, sp, #0
 8014042:	60f8      	str	r0, [r7, #12]
 8014044:	60b9      	str	r1, [r7, #8]
 8014046:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	617b      	str	r3, [r7, #20]
 801404c:	697a      	ldr	r2, [r7, #20]
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	429a      	cmp	r2, r3
 8014052:	d209      	bcs.n	8014068 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x2c>
	    *__cur = this->_M_allocate_node();
 8014054:	68f8      	ldr	r0, [r7, #12]
 8014056:	f000 f8c2 	bl	80141de <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>
 801405a:	4602      	mov	r2, r0
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	3304      	adds	r3, #4
 8014064:	617b      	str	r3, [r7, #20]
 8014066:	e7f1      	b.n	801404c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x10>
    }
 8014068:	bf00      	nop
 801406a:	3718      	adds	r7, #24
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}

08014070 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8014070:	b590      	push	{r4, r7, lr}
 8014072:	b083      	sub	sp, #12
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	683a      	ldr	r2, [r7, #0]
 801407e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	681a      	ldr	r2, [r3, #0]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	685c      	ldr	r4, [r3, #4]
 801408c:	f000 f8f5 	bl	801427a <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>
 8014090:	4603      	mov	r3, r0
 8014092:	009b      	lsls	r3, r3, #2
 8014094:	18e2      	adds	r2, r4, r3
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	609a      	str	r2, [r3, #8]
      }
 801409a:	bf00      	nop
 801409c:	370c      	adds	r7, #12
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd90      	pop	{r4, r7, pc}

080140a2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80140a2:	b590      	push	{r4, r7, lr}
 80140a4:	b083      	sub	sp, #12
 80140a6:	af00      	add	r7, sp, #0
 80140a8:	6078      	str	r0, [r7, #4]
 80140aa:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80140ac:	687c      	ldr	r4, [r7, #4]
 80140ae:	2004      	movs	r0, #4
 80140b0:	f7ff fb88 	bl	80137c4 <_ZSt16__deque_buf_sizej>
 80140b4:	4603      	mov	r3, r0
 80140b6:	461a      	mov	r2, r3
 80140b8:	6839      	ldr	r1, [r7, #0]
 80140ba:	4620      	mov	r0, r4
 80140bc:	f000 f8e5 	bl	801428a <_ZNSt16allocator_traitsISaIPK7XFEventEE10deallocateERS3_PS2_j>
      }
 80140c0:	bf00      	nop
 80140c2:	370c      	adds	r7, #12
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd90      	pop	{r4, r7, pc}

080140c8 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b082      	sub	sp, #8
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80140d2:	6838      	ldr	r0, [r7, #0]
 80140d4:	f000 f8e8 	bl	80142a8 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 80140d8:	4603      	mov	r3, r0
 80140da:	4619      	mov	r1, r3
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f000 f8ee 	bl	80142be <_ZNSaIPPK7XFEventEC1IS1_EERKSaIT_E>
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	3708      	adds	r7, #8
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}

080140ea <_ZNSaIPPK7XFEventED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80140ea:	b580      	push	{r7, lr}
 80140ec:	b082      	sub	sp, #8
 80140ee:	af00      	add	r7, sp, #0
 80140f0:	6078      	str	r0, [r7, #4]
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f000 f8f0 	bl	80142d8 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventED1Ev>
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	4618      	mov	r0, r3
 80140fc:	3708      	adds	r7, #8
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}

08014102 <_ZNSt16allocator_traitsISaIPPK7XFEventEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8014102:	b580      	push	{r7, lr}
 8014104:	b084      	sub	sp, #16
 8014106:	af00      	add	r7, sp, #0
 8014108:	60f8      	str	r0, [r7, #12]
 801410a:	60b9      	str	r1, [r7, #8]
 801410c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	68b9      	ldr	r1, [r7, #8]
 8014112:	68f8      	ldr	r0, [r7, #12]
 8014114:	f000 f8eb 	bl	80142ee <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE10deallocateEPS4_j>
 8014118:	bf00      	nop
 801411a:	3710      	adds	r7, #16
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}

08014120 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014120:	b480      	push	{r7}
 8014122:	b083      	sub	sp, #12
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	4618      	mov	r0, r3
 801412c:	370c      	adds	r7, #12
 801412e:	46bd      	mov	sp, r7
 8014130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014134:	4770      	bx	lr

08014136 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8014136:	b590      	push	{r4, r7, lr}
 8014138:	b085      	sub	sp, #20
 801413a:	af00      	add	r7, sp, #0
 801413c:	60f8      	str	r0, [r7, #12]
 801413e:	60b9      	str	r1, [r7, #8]
 8014140:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f7ff ffec 	bl	8014120 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 8014148:	4603      	mov	r3, r0
 801414a:	681c      	ldr	r4, [r3, #0]
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	4619      	mov	r1, r3
 8014150:	2004      	movs	r0, #4
 8014152:	f7f9 fb47 	bl	800d7e4 <_ZnwjPv>
 8014156:	4603      	mov	r3, r0
 8014158:	601c      	str	r4, [r3, #0]
 801415a:	bf00      	nop
 801415c:	3714      	adds	r7, #20
 801415e:	46bd      	mov	sp, r7
 8014160:	bd90      	pop	{r4, r7, pc}

08014162 <_ZNKSt5dequeIPK7XFEventSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8014162:	b580      	push	{r7, lr}
 8014164:	b082      	sub	sp, #8
 8014166:	af00      	add	r7, sp, #0
 8014168:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	f103 0218 	add.w	r2, r3, #24
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	3308      	adds	r3, #8
 8014174:	4619      	mov	r1, r3
 8014176:	4610      	mov	r0, r2
 8014178:	f000 f8c9 	bl	801430e <_ZStmiRKSt15_Deque_iteratorIPK7XFEventRS2_PS2_ES7_>
 801417c:	4603      	mov	r3, r0
 801417e:	4618      	mov	r0, r3
 8014180:	3708      	adds	r7, #8
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}

08014186 <_ZNKSt5dequeIPK7XFEventSaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8014186:	b580      	push	{r7, lr}
 8014188:	b082      	sub	sp, #8
 801418a:	af00      	add	r7, sp, #0
 801418c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	4618      	mov	r0, r3
 8014192:	f000 f889 	bl	80142a8 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 8014196:	4603      	mov	r3, r0
 8014198:	4618      	mov	r0, r3
 801419a:	f000 f8dc 	bl	8014356 <_ZNSt5dequeIPK7XFEventSaIS2_EE11_S_max_sizeERKS3_>
 801419e:	4603      	mov	r3, r0
 80141a0:	4618      	mov	r0, r3
 80141a2:	3708      	adds	r7, #8
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bd80      	pop	{r7, pc}

080141a8 <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
 80141b0:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	1c5a      	adds	r2, r3, #1
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80141ba:	6879      	ldr	r1, [r7, #4]
 80141bc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80141be:	6879      	ldr	r1, [r7, #4]
 80141c0:	6809      	ldr	r1, [r1, #0]
 80141c2:	1a41      	subs	r1, r0, r1
 80141c4:	1089      	asrs	r1, r1, #2
 80141c6:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d904      	bls.n	80141d6 <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80141cc:	2200      	movs	r2, #0
 80141ce:	6839      	ldr	r1, [r7, #0]
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f000 f8da 	bl	801438a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>
      }
 80141d6:	bf00      	nop
 80141d8:	3708      	adds	r7, #8
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}

080141de <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80141de:	b590      	push	{r4, r7, lr}
 80141e0:	b083      	sub	sp, #12
 80141e2:	af00      	add	r7, sp, #0
 80141e4:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80141e6:	687c      	ldr	r4, [r7, #4]
 80141e8:	2004      	movs	r0, #4
 80141ea:	f7ff faeb 	bl	80137c4 <_ZSt16__deque_buf_sizej>
 80141ee:	4603      	mov	r3, r0
 80141f0:	4619      	mov	r1, r3
 80141f2:	4620      	mov	r0, r4
 80141f4:	f000 f963 	bl	80144be <_ZNSt16allocator_traitsISaIPK7XFEventEE8allocateERS3_j>
 80141f8:	4603      	mov	r3, r0
      }
 80141fa:	4618      	mov	r0, r3
 80141fc:	370c      	adds	r7, #12
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd90      	pop	{r4, r7, pc}

08014202 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE7destroyIS3_EEvPT_>:
	destroy(_Up* __p)
 8014202:	b480      	push	{r7}
 8014204:	b083      	sub	sp, #12
 8014206:	af00      	add	r7, sp, #0
 8014208:	6078      	str	r0, [r7, #4]
 801420a:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 801420c:	bf00      	nop
 801420e:	370c      	adds	r7, #12
 8014210:	46bd      	mov	sp, r7
 8014212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014216:	4770      	bx	lr

08014218 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8014218:	b480      	push	{r7}
 801421a:	b083      	sub	sp, #12
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	4618      	mov	r0, r3
 8014224:	370c      	adds	r7, #12
 8014226:	46bd      	mov	sp, r7
 8014228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422c:	4770      	bx	lr

0801422e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 801422e:	b480      	push	{r7}
 8014230:	b083      	sub	sp, #12
 8014232:	af00      	add	r7, sp, #0
 8014234:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2200      	movs	r2, #0
 801423a:	601a      	str	r2, [r3, #0]
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2200      	movs	r2, #0
 8014240:	605a      	str	r2, [r3, #4]
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2200      	movs	r2, #0
 8014246:	609a      	str	r2, [r3, #8]
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	2200      	movs	r2, #0
 801424c:	60da      	str	r2, [r3, #12]
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	4618      	mov	r0, r3
 8014252:	370c      	adds	r7, #12
 8014254:	46bd      	mov	sp, r7
 8014256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425a:	4770      	bx	lr

0801425c <_ZNSt16allocator_traitsISaIPPK7XFEventEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 801425c:	b580      	push	{r7, lr}
 801425e:	b082      	sub	sp, #8
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
 8014264:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8014266:	2200      	movs	r2, #0
 8014268:	6839      	ldr	r1, [r7, #0]
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	f000 f936 	bl	80144dc <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv>
 8014270:	4603      	mov	r3, r0
 8014272:	4618      	mov	r0, r3
 8014274:	3708      	adds	r7, #8
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}

0801427a <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 801427a:	b580      	push	{r7, lr}
 801427c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 801427e:	2004      	movs	r0, #4
 8014280:	f7ff faa0 	bl	80137c4 <_ZSt16__deque_buf_sizej>
 8014284:	4603      	mov	r3, r0
 8014286:	4618      	mov	r0, r3
 8014288:	bd80      	pop	{r7, pc}

0801428a <_ZNSt16allocator_traitsISaIPK7XFEventEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801428a:	b580      	push	{r7, lr}
 801428c:	b084      	sub	sp, #16
 801428e:	af00      	add	r7, sp, #0
 8014290:	60f8      	str	r0, [r7, #12]
 8014292:	60b9      	str	r1, [r7, #8]
 8014294:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8014296:	687a      	ldr	r2, [r7, #4]
 8014298:	68b9      	ldr	r1, [r7, #8]
 801429a:	68f8      	ldr	r0, [r7, #12]
 801429c:	f000 f93c 	bl	8014518 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE10deallocateEPS3_j>
 80142a0:	bf00      	nop
 80142a2:	3710      	adds	r7, #16
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}

080142a8 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80142a8:	b480      	push	{r7}
 80142aa:	b083      	sub	sp, #12
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	4618      	mov	r0, r3
 80142b4:	370c      	adds	r7, #12
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr

080142be <_ZNSaIPPK7XFEventEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80142be:	b580      	push	{r7, lr}
 80142c0:	b082      	sub	sp, #8
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
 80142c6:	6039      	str	r1, [r7, #0]
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f000 f935 	bl	8014538 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventEC1Ev>
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	4618      	mov	r0, r3
 80142d2:	3708      	adds	r7, #8
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}

080142d8 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80142d8:	b480      	push	{r7}
 80142da:	b083      	sub	sp, #12
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	4618      	mov	r0, r3
 80142e4:	370c      	adds	r7, #12
 80142e6:	46bd      	mov	sp, r7
 80142e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ec:	4770      	bx	lr

080142ee <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 80142ee:	b580      	push	{r7, lr}
 80142f0:	b084      	sub	sp, #16
 80142f2:	af00      	add	r7, sp, #0
 80142f4:	60f8      	str	r0, [r7, #12]
 80142f6:	60b9      	str	r1, [r7, #8]
 80142f8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	009b      	lsls	r3, r3, #2
 80142fe:	4619      	mov	r1, r3
 8014300:	68b8      	ldr	r0, [r7, #8]
 8014302:	f005 f9e3 	bl	80196cc <_ZdlPvj>
      }
 8014306:	bf00      	nop
 8014308:	3710      	adds	r7, #16
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}

0801430e <_ZStmiRKSt15_Deque_iteratorIPK7XFEventRS2_PS2_ES7_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801430e:	b580      	push	{r7, lr}
 8014310:	b082      	sub	sp, #8
 8014312:	af00      	add	r7, sp, #0
 8014314:	6078      	str	r0, [r7, #4]
 8014316:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8014318:	f7ff ffaf 	bl	801427a <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>
 801431c:	4603      	mov	r3, r0
 801431e:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	68da      	ldr	r2, [r3, #12]
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	68db      	ldr	r3, [r3, #12]
 8014328:	1ad3      	subs	r3, r2, r3
 801432a:	109b      	asrs	r3, r3, #2
 801432c:	3b01      	subs	r3, #1
 801432e:	fb01 f303 	mul.w	r3, r1, r3
 8014332:	687a      	ldr	r2, [r7, #4]
 8014334:	6811      	ldr	r1, [r2, #0]
 8014336:	687a      	ldr	r2, [r7, #4]
 8014338:	6852      	ldr	r2, [r2, #4]
 801433a:	1a8a      	subs	r2, r1, r2
 801433c:	1092      	asrs	r2, r2, #2
 801433e:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8014340:	683a      	ldr	r2, [r7, #0]
 8014342:	6891      	ldr	r1, [r2, #8]
 8014344:	683a      	ldr	r2, [r7, #0]
 8014346:	6812      	ldr	r2, [r2, #0]
 8014348:	1a8a      	subs	r2, r1, r2
 801434a:	1092      	asrs	r2, r2, #2
 801434c:	4413      	add	r3, r2
      }
 801434e:	4618      	mov	r0, r3
 8014350:	3708      	adds	r7, #8
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}

08014356 <_ZNSt5dequeIPK7XFEventSaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8014356:	b580      	push	{r7, lr}
 8014358:	b084      	sub	sp, #16
 801435a:	af00      	add	r7, sp, #0
 801435c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 801435e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014362:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f000 f8f2 	bl	801454e <_ZNSt16allocator_traitsISaIPK7XFEventEE8max_sizeERKS3_>
 801436a:	4603      	mov	r3, r0
 801436c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801436e:	f107 0208 	add.w	r2, r7, #8
 8014372:	f107 030c 	add.w	r3, r7, #12
 8014376:	4611      	mov	r1, r2
 8014378:	4618      	mov	r0, r3
 801437a:	f000 f8f4 	bl	8014566 <_ZSt3minIjERKT_S2_S2_>
 801437e:	4603      	mov	r3, r0
 8014380:	681b      	ldr	r3, [r3, #0]
      }
 8014382:	4618      	mov	r0, r3
 8014384:	3710      	adds	r7, #16
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}

0801438a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 801438a:	b590      	push	{r4, r7, lr}
 801438c:	b08b      	sub	sp, #44	; 0x2c
 801438e:	af00      	add	r7, sp, #0
 8014390:	60f8      	str	r0, [r7, #12]
 8014392:	60b9      	str	r1, [r7, #8]
 8014394:	4613      	mov	r3, r2
 8014396:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	695b      	ldr	r3, [r3, #20]
 80143a0:	1ad3      	subs	r3, r2, r3
 80143a2:	109b      	asrs	r3, r3, #2
 80143a4:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80143a6:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	6a3a      	ldr	r2, [r7, #32]
 80143ac:	4413      	add	r3, r2
 80143ae:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	685a      	ldr	r2, [r3, #4]
 80143b4:	69fb      	ldr	r3, [r7, #28]
 80143b6:	005b      	lsls	r3, r3, #1
 80143b8:	429a      	cmp	r2, r3
 80143ba:	d92d      	bls.n	8014418 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	681a      	ldr	r2, [r3, #0]
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80143c4:	69fb      	ldr	r3, [r7, #28]
 80143c6:	1acb      	subs	r3, r1, r3
 80143c8:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80143ca:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80143cc:	79fb      	ldrb	r3, [r7, #7]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d002      	beq.n	80143d8 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x4e>
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	009b      	lsls	r3, r3, #2
 80143d6:	e000      	b.n	80143da <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x50>
 80143d8:	2300      	movs	r3, #0
 80143da:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80143dc:	4413      	add	r3, r2
 80143de:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	695b      	ldr	r3, [r3, #20]
 80143e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143e6:	429a      	cmp	r2, r3
 80143e8:	d209      	bcs.n	80143fe <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80143f2:	3304      	adds	r3, #4
 80143f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143f6:	4619      	mov	r1, r3
 80143f8:	f000 f8c9 	bl	801458e <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>
 80143fc:	e048      	b.n	8014490 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8014406:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8014408:	6a3b      	ldr	r3, [r7, #32]
 801440a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 801440c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801440e:	4413      	add	r3, r2
 8014410:	461a      	mov	r2, r3
 8014412:	f000 f8d4 	bl	80145be <_ZSt13copy_backwardIPPPK7XFEventS4_ET0_T_S6_S5_>
 8014416:	e03b      	b.n	8014490 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	3304      	adds	r3, #4
 8014420:	f107 0208 	add.w	r2, r7, #8
 8014424:	4611      	mov	r1, r2
 8014426:	4618      	mov	r0, r3
 8014428:	f7ff fdd7 	bl	8013fda <_ZSt3maxIjERKT_S2_S2_>
 801442c:	4603      	mov	r3, r0
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8014432:	3302      	adds	r3, #2
 8014434:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	69b9      	ldr	r1, [r7, #24]
 801443a:	4618      	mov	r0, r3
 801443c:	f7ff fde1 	bl	8014002 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>
 8014440:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8014442:	69ba      	ldr	r2, [r7, #24]
 8014444:	69fb      	ldr	r3, [r7, #28]
 8014446:	1ad3      	subs	r3, r2, r3
 8014448:	085b      	lsrs	r3, r3, #1
 801444a:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 801444c:	79fb      	ldrb	r3, [r7, #7]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d002      	beq.n	8014458 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xce>
 8014452:	68bb      	ldr	r3, [r7, #8]
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	e000      	b.n	801445a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xd0>
 8014458:	2300      	movs	r3, #0
 801445a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 801445c:	697a      	ldr	r2, [r7, #20]
 801445e:	4413      	add	r3, r2
 8014460:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 801446a:	3304      	adds	r3, #4
 801446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801446e:	4619      	mov	r1, r3
 8014470:	f000 f88d 	bl	801458e <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8014474:	68f8      	ldr	r0, [r7, #12]
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	6819      	ldr	r1, [r3, #0]
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	685b      	ldr	r3, [r3, #4]
 801447e:	461a      	mov	r2, r3
 8014480:	f7ff fcb3 	bl	8013dea <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>

	  this->_M_impl._M_map = __new_map;
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	697a      	ldr	r2, [r7, #20]
 8014488:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	69ba      	ldr	r2, [r7, #24]
 801448e:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	3308      	adds	r3, #8
 8014494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014496:	4618      	mov	r0, r3
 8014498:	f7ff fdea 	bl	8014070 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	f103 0018 	add.w	r0, r3, #24
 80144a2:	6a3a      	ldr	r2, [r7, #32]
 80144a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80144a8:	4413      	add	r3, r2
 80144aa:	009b      	lsls	r3, r3, #2
 80144ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144ae:	4413      	add	r3, r2
 80144b0:	4619      	mov	r1, r3
 80144b2:	f7ff fddd 	bl	8014070 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
    }
 80144b6:	bf00      	nop
 80144b8:	372c      	adds	r7, #44	; 0x2c
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd90      	pop	{r4, r7, pc}

080144be <_ZNSt16allocator_traitsISaIPK7XFEventEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80144be:	b580      	push	{r7, lr}
 80144c0:	b082      	sub	sp, #8
 80144c2:	af00      	add	r7, sp, #0
 80144c4:	6078      	str	r0, [r7, #4]
 80144c6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80144c8:	2200      	movs	r2, #0
 80144ca:	6839      	ldr	r1, [r7, #0]
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f000 f88e 	bl	80145ee <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv>
 80144d2:	4603      	mov	r3, r0
 80144d4:	4618      	mov	r0, r3
 80144d6:	3708      	adds	r7, #8
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd80      	pop	{r7, pc}

080144dc <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80144dc:	b580      	push	{r7, lr}
 80144de:	b084      	sub	sp, #16
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	60f8      	str	r0, [r7, #12]
 80144e4:	60b9      	str	r1, [r7, #8]
 80144e6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80144e8:	68f8      	ldr	r0, [r7, #12]
 80144ea:	f000 f89e 	bl	801462a <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE11_M_max_sizeEv>
 80144ee:	4602      	mov	r2, r0
 80144f0:	68bb      	ldr	r3, [r7, #8]
 80144f2:	4293      	cmp	r3, r2
 80144f4:	bf8c      	ite	hi
 80144f6:	2301      	movhi	r3, #1
 80144f8:	2300      	movls	r3, #0
 80144fa:	b2db      	uxtb	r3, r3
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d001      	beq.n	8014504 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8014500:	f005 f917 	bl	8019732 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014504:	68bb      	ldr	r3, [r7, #8]
 8014506:	009b      	lsls	r3, r3, #2
 8014508:	4618      	mov	r0, r3
 801450a:	f005 f8f0 	bl	80196ee <_Znwj>
 801450e:	4603      	mov	r3, r0
      }
 8014510:	4618      	mov	r0, r3
 8014512:	3710      	adds	r7, #16
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	60f8      	str	r0, [r7, #12]
 8014520:	60b9      	str	r1, [r7, #8]
 8014522:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	009b      	lsls	r3, r3, #2
 8014528:	4619      	mov	r1, r3
 801452a:	68b8      	ldr	r0, [r7, #8]
 801452c:	f005 f8ce 	bl	80196cc <_ZdlPvj>
      }
 8014530:	bf00      	nop
 8014532:	3710      	adds	r7, #16
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}

08014538 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8014538:	b480      	push	{r7}
 801453a:	b083      	sub	sp, #12
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	4618      	mov	r0, r3
 8014544:	370c      	adds	r7, #12
 8014546:	46bd      	mov	sp, r7
 8014548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454c:	4770      	bx	lr

0801454e <_ZNSt16allocator_traitsISaIPK7XFEventEE8max_sizeERKS3_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801454e:	b580      	push	{r7, lr}
 8014550:	b082      	sub	sp, #8
 8014552:	af00      	add	r7, sp, #0
 8014554:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f000 f873 	bl	8014642 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>
 801455c:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 801455e:	4618      	mov	r0, r3
 8014560:	3708      	adds	r7, #8
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}

08014566 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8014566:	b480      	push	{r7}
 8014568:	b083      	sub	sp, #12
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
 801456e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	681a      	ldr	r2, [r3, #0]
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	429a      	cmp	r2, r3
 801457a:	d201      	bcs.n	8014580 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	e000      	b.n	8014582 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8014580:	687b      	ldr	r3, [r7, #4]
    }
 8014582:	4618      	mov	r0, r3
 8014584:	370c      	adds	r7, #12
 8014586:	46bd      	mov	sp, r7
 8014588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458c:	4770      	bx	lr

0801458e <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 801458e:	b590      	push	{r4, r7, lr}
 8014590:	b085      	sub	sp, #20
 8014592:	af00      	add	r7, sp, #0
 8014594:	60f8      	str	r0, [r7, #12]
 8014596:	60b9      	str	r1, [r7, #8]
 8014598:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801459a:	68f8      	ldr	r0, [r7, #12]
 801459c:	f000 f85d 	bl	801465a <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 80145a0:	4604      	mov	r4, r0
 80145a2:	68b8      	ldr	r0, [r7, #8]
 80145a4:	f000 f859 	bl	801465a <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 80145a8:	4603      	mov	r3, r0
 80145aa:	687a      	ldr	r2, [r7, #4]
 80145ac:	4619      	mov	r1, r3
 80145ae:	4620      	mov	r0, r4
 80145b0:	f000 f85e 	bl	8014670 <_ZSt13__copy_move_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 80145b4:	4603      	mov	r3, r0
    }
 80145b6:	4618      	mov	r0, r3
 80145b8:	3714      	adds	r7, #20
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd90      	pop	{r4, r7, pc}

080145be <_ZSt13copy_backwardIPPPK7XFEventS4_ET0_T_S6_S5_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80145be:	b590      	push	{r4, r7, lr}
 80145c0:	b085      	sub	sp, #20
 80145c2:	af00      	add	r7, sp, #0
 80145c4:	60f8      	str	r0, [r7, #12]
 80145c6:	60b9      	str	r1, [r7, #8]
 80145c8:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80145ca:	68f8      	ldr	r0, [r7, #12]
 80145cc:	f000 f845 	bl	801465a <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 80145d0:	4604      	mov	r4, r0
 80145d2:	68b8      	ldr	r0, [r7, #8]
 80145d4:	f000 f841 	bl	801465a <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 80145d8:	4603      	mov	r3, r0
 80145da:	687a      	ldr	r2, [r7, #4]
 80145dc:	4619      	mov	r1, r3
 80145de:	4620      	mov	r0, r4
 80145e0:	f000 f869 	bl	80146b6 <_ZSt22__copy_move_backward_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 80145e4:	4603      	mov	r3, r0
    }
 80145e6:	4618      	mov	r0, r3
 80145e8:	3714      	adds	r7, #20
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd90      	pop	{r4, r7, pc}

080145ee <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80145ee:	b580      	push	{r7, lr}
 80145f0:	b084      	sub	sp, #16
 80145f2:	af00      	add	r7, sp, #0
 80145f4:	60f8      	str	r0, [r7, #12]
 80145f6:	60b9      	str	r1, [r7, #8]
 80145f8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80145fa:	68f8      	ldr	r0, [r7, #12]
 80145fc:	f000 f87e 	bl	80146fc <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE11_M_max_sizeEv>
 8014600:	4602      	mov	r2, r0
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	4293      	cmp	r3, r2
 8014606:	bf8c      	ite	hi
 8014608:	2301      	movhi	r3, #1
 801460a:	2300      	movls	r3, #0
 801460c:	b2db      	uxtb	r3, r3
 801460e:	2b00      	cmp	r3, #0
 8014610:	d001      	beq.n	8014616 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8014612:	f005 f88e 	bl	8019732 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	009b      	lsls	r3, r3, #2
 801461a:	4618      	mov	r0, r3
 801461c:	f005 f867 	bl	80196ee <_Znwj>
 8014620:	4603      	mov	r3, r0
      }
 8014622:	4618      	mov	r0, r3
 8014624:	3710      	adds	r7, #16
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}

0801462a <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801462a:	b480      	push	{r7}
 801462c:	b083      	sub	sp, #12
 801462e:	af00      	add	r7, sp, #0
 8014630:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8014632:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8014636:	4618      	mov	r0, r3
 8014638:	370c      	adds	r7, #12
 801463a:	46bd      	mov	sp, r7
 801463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014640:	4770      	bx	lr

08014642 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8014642:	b580      	push	{r7, lr}
 8014644:	b082      	sub	sp, #8
 8014646:	af00      	add	r7, sp, #0
 8014648:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f000 f856 	bl	80146fc <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE11_M_max_sizeEv>
 8014650:	4603      	mov	r3, r0
 8014652:	4618      	mov	r0, r3
 8014654:	3708      	adds	r7, #8
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}

0801465a <_ZSt12__miter_baseIPPPK7XFEventET_S5_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 801465a:	b480      	push	{r7}
 801465c:	b083      	sub	sp, #12
 801465e:	af00      	add	r7, sp, #0
 8014660:	6078      	str	r0, [r7, #4]
    { return __it; }
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	4618      	mov	r0, r3
 8014666:	370c      	adds	r7, #12
 8014668:	46bd      	mov	sp, r7
 801466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466e:	4770      	bx	lr

08014670 <_ZSt13__copy_move_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8014670:	b5b0      	push	{r4, r5, r7, lr}
 8014672:	b084      	sub	sp, #16
 8014674:	af00      	add	r7, sp, #0
 8014676:	60f8      	str	r0, [r7, #12]
 8014678:	60b9      	str	r1, [r7, #8]
 801467a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801467c:	68f8      	ldr	r0, [r7, #12]
 801467e:	f000 f849 	bl	8014714 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 8014682:	4604      	mov	r4, r0
 8014684:	68b8      	ldr	r0, [r7, #8]
 8014686:	f000 f845 	bl	8014714 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 801468a:	4605      	mov	r5, r0
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	4618      	mov	r0, r3
 8014690:	f000 f840 	bl	8014714 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 8014694:	4603      	mov	r3, r0
 8014696:	461a      	mov	r2, r3
 8014698:	4629      	mov	r1, r5
 801469a:	4620      	mov	r0, r4
 801469c:	f000 f845 	bl	801472a <_ZSt14__copy_move_a1ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 80146a0:	4602      	mov	r2, r0
 80146a2:	1d3b      	adds	r3, r7, #4
 80146a4:	4611      	mov	r1, r2
 80146a6:	4618      	mov	r0, r3
 80146a8:	f000 f84f 	bl	801474a <_ZSt12__niter_wrapIPPPK7XFEventET_RKS5_S5_>
 80146ac:	4603      	mov	r3, r0
    }
 80146ae:	4618      	mov	r0, r3
 80146b0:	3710      	adds	r7, #16
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bdb0      	pop	{r4, r5, r7, pc}

080146b6 <_ZSt22__copy_move_backward_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80146b6:	b5b0      	push	{r4, r5, r7, lr}
 80146b8:	b084      	sub	sp, #16
 80146ba:	af00      	add	r7, sp, #0
 80146bc:	60f8      	str	r0, [r7, #12]
 80146be:	60b9      	str	r1, [r7, #8]
 80146c0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80146c2:	68f8      	ldr	r0, [r7, #12]
 80146c4:	f000 f826 	bl	8014714 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 80146c8:	4604      	mov	r4, r0
 80146ca:	68b8      	ldr	r0, [r7, #8]
 80146cc:	f000 f822 	bl	8014714 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 80146d0:	4605      	mov	r5, r0
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	4618      	mov	r0, r3
 80146d6:	f000 f81d 	bl	8014714 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 80146da:	4603      	mov	r3, r0
 80146dc:	461a      	mov	r2, r3
 80146de:	4629      	mov	r1, r5
 80146e0:	4620      	mov	r0, r4
 80146e2:	f000 f83e 	bl	8014762 <_ZSt23__copy_move_backward_a1ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 80146e6:	4602      	mov	r2, r0
 80146e8:	1d3b      	adds	r3, r7, #4
 80146ea:	4611      	mov	r1, r2
 80146ec:	4618      	mov	r0, r3
 80146ee:	f000 f82c 	bl	801474a <_ZSt12__niter_wrapIPPPK7XFEventET_RKS5_S5_>
 80146f2:	4603      	mov	r3, r0
    }
 80146f4:	4618      	mov	r0, r3
 80146f6:	3710      	adds	r7, #16
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bdb0      	pop	{r4, r5, r7, pc}

080146fc <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80146fc:	b480      	push	{r7}
 80146fe:	b083      	sub	sp, #12
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8014704:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8014708:	4618      	mov	r0, r3
 801470a:	370c      	adds	r7, #12
 801470c:	46bd      	mov	sp, r7
 801470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014712:	4770      	bx	lr

08014714 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>:
    __niter_base(_Iterator __it)
 8014714:	b480      	push	{r7}
 8014716:	b083      	sub	sp, #12
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
    { return __it; }
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	4618      	mov	r0, r3
 8014720:	370c      	adds	r7, #12
 8014722:	46bd      	mov	sp, r7
 8014724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014728:	4770      	bx	lr

0801472a <_ZSt14__copy_move_a1ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801472a:	b580      	push	{r7, lr}
 801472c:	b084      	sub	sp, #16
 801472e:	af00      	add	r7, sp, #0
 8014730:	60f8      	str	r0, [r7, #12]
 8014732:	60b9      	str	r1, [r7, #8]
 8014734:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8014736:	687a      	ldr	r2, [r7, #4]
 8014738:	68b9      	ldr	r1, [r7, #8]
 801473a:	68f8      	ldr	r0, [r7, #12]
 801473c:	f000 f821 	bl	8014782 <_ZSt14__copy_move_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8014740:	4603      	mov	r3, r0
 8014742:	4618      	mov	r0, r3
 8014744:	3710      	adds	r7, #16
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}

0801474a <_ZSt12__niter_wrapIPPPK7XFEventET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 801474a:	b480      	push	{r7}
 801474c:	b083      	sub	sp, #12
 801474e:	af00      	add	r7, sp, #0
 8014750:	6078      	str	r0, [r7, #4]
 8014752:	6039      	str	r1, [r7, #0]
    { return __res; }
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	4618      	mov	r0, r3
 8014758:	370c      	adds	r7, #12
 801475a:	46bd      	mov	sp, r7
 801475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014760:	4770      	bx	lr

08014762 <_ZSt23__copy_move_backward_a1ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8014762:	b580      	push	{r7, lr}
 8014764:	b084      	sub	sp, #16
 8014766:	af00      	add	r7, sp, #0
 8014768:	60f8      	str	r0, [r7, #12]
 801476a:	60b9      	str	r1, [r7, #8]
 801476c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 801476e:	687a      	ldr	r2, [r7, #4]
 8014770:	68b9      	ldr	r1, [r7, #8]
 8014772:	68f8      	ldr	r0, [r7, #12]
 8014774:	f000 f815 	bl	80147a2 <_ZSt23__copy_move_backward_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8014778:	4603      	mov	r3, r0
 801477a:	4618      	mov	r0, r3
 801477c:	3710      	adds	r7, #16
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}

08014782 <_ZSt14__copy_move_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8014782:	b580      	push	{r7, lr}
 8014784:	b084      	sub	sp, #16
 8014786:	af00      	add	r7, sp, #0
 8014788:	60f8      	str	r0, [r7, #12]
 801478a:	60b9      	str	r1, [r7, #8]
 801478c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 801478e:	687a      	ldr	r2, [r7, #4]
 8014790:	68b9      	ldr	r1, [r7, #8]
 8014792:	68f8      	ldr	r0, [r7, #12]
 8014794:	f000 f815 	bl	80147c2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_>
 8014798:	4603      	mov	r3, r0
    }
 801479a:	4618      	mov	r0, r3
 801479c:	3710      	adds	r7, #16
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}

080147a2 <_ZSt23__copy_move_backward_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80147a2:	b580      	push	{r7, lr}
 80147a4:	b084      	sub	sp, #16
 80147a6:	af00      	add	r7, sp, #0
 80147a8:	60f8      	str	r0, [r7, #12]
 80147aa:	60b9      	str	r1, [r7, #8]
 80147ac:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80147ae:	687a      	ldr	r2, [r7, #4]
 80147b0:	68b9      	ldr	r1, [r7, #8]
 80147b2:	68f8      	ldr	r0, [r7, #12]
 80147b4:	f000 f822 	bl	80147fc <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_>
 80147b8:	4603      	mov	r3, r0
    }
 80147ba:	4618      	mov	r0, r3
 80147bc:	3710      	adds	r7, #16
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}

080147c2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80147c2:	b580      	push	{r7, lr}
 80147c4:	b086      	sub	sp, #24
 80147c6:	af00      	add	r7, sp, #0
 80147c8:	60f8      	str	r0, [r7, #12]
 80147ca:	60b9      	str	r1, [r7, #8]
 80147cc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80147ce:	68ba      	ldr	r2, [r7, #8]
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	1ad3      	subs	r3, r2, r3
 80147d4:	109b      	asrs	r3, r3, #2
 80147d6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80147d8:	697b      	ldr	r3, [r7, #20]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d006      	beq.n	80147ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	009b      	lsls	r3, r3, #2
 80147e2:	461a      	mov	r2, r3
 80147e4:	68f9      	ldr	r1, [r7, #12]
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f005 fa26 	bl	8019c38 <memmove>
	  return __result + _Num;
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	009b      	lsls	r3, r3, #2
 80147f0:	687a      	ldr	r2, [r7, #4]
 80147f2:	4413      	add	r3, r2
	}
 80147f4:	4618      	mov	r0, r3
 80147f6:	3718      	adds	r7, #24
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}

080147fc <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b086      	sub	sp, #24
 8014800:	af00      	add	r7, sp, #0
 8014802:	60f8      	str	r0, [r7, #12]
 8014804:	60b9      	str	r1, [r7, #8]
 8014806:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8014808:	68ba      	ldr	r2, [r7, #8]
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	1ad3      	subs	r3, r2, r3
 801480e:	109b      	asrs	r3, r3, #2
 8014810:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d00a      	beq.n	801482e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	009b      	lsls	r3, r3, #2
 801481c:	425b      	negs	r3, r3
 801481e:	687a      	ldr	r2, [r7, #4]
 8014820:	18d0      	adds	r0, r2, r3
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	009b      	lsls	r3, r3, #2
 8014826:	461a      	mov	r2, r3
 8014828:	68f9      	ldr	r1, [r7, #12]
 801482a:	f005 fa05 	bl	8019c38 <memmove>
	  return __result - _Num;
 801482e:	697b      	ldr	r3, [r7, #20]
 8014830:	009b      	lsls	r3, r3, #2
 8014832:	425b      	negs	r3, r3
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	4413      	add	r3, r2
	}
 8014838:	4618      	mov	r0, r3
 801483a:	3718      	adds	r7, #24
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <_ZN9interface7XFMutex6createEv>:

/**
 * @brief Implementation of interface::XFMutex::create method.
 */
interface::XFMutex * interface::XFMutex::create()
{
 8014840:	b598      	push	{r3, r4, r7, lr}
 8014842:	af00      	add	r7, sp, #0
    return new XFMutexDefault;
 8014844:	2004      	movs	r0, #4
 8014846:	f004 ff52 	bl	80196ee <_Znwj>
 801484a:	4603      	mov	r3, r0
 801484c:	461c      	mov	r4, r3
 801484e:	4620      	mov	r0, r4
 8014850:	f000 f834 	bl	80148bc <_ZN14XFMutexDefaultC1Ev>
 8014854:	4623      	mov	r3, r4
}
 8014856:	4618      	mov	r0, r3
 8014858:	bd98      	pop	{r3, r4, r7, pc}
	...

0801485c <_ZN9interface7XFMutexC1Ev>:
     *   You cannot instanciate an object of an abstract class!
     */
    static XFMutex * create();

protected:
    XFMutex() = default;
 801485c:	b480      	push	{r7}
 801485e:	b083      	sub	sp, #12
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	4a04      	ldr	r2, [pc, #16]	; (8014878 <_ZN9interface7XFMutexC1Ev+0x1c>)
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	601a      	str	r2, [r3, #0]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	4618      	mov	r0, r3
 801486e:	370c      	adds	r7, #12
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr
 8014878:	0801c8f0 	.word	0x0801c8f0

0801487c <_ZN9interface7XFMutexD1Ev>:
    virtual ~XFMutex() = default;
 801487c:	b480      	push	{r7}
 801487e:	b083      	sub	sp, #12
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	4a04      	ldr	r2, [pc, #16]	; (8014898 <_ZN9interface7XFMutexD1Ev+0x1c>)
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	601a      	str	r2, [r3, #0]
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	4618      	mov	r0, r3
 801488e:	370c      	adds	r7, #12
 8014890:	46bd      	mov	sp, r7
 8014892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014896:	4770      	bx	lr
 8014898:	0801c8f0 	.word	0x0801c8f0

0801489c <_ZN9interface7XFMutexD0Ev>:
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f7ff ffe9 	bl	801487c <_ZN9interface7XFMutexD1Ev>
 80148aa:	2104      	movs	r1, #4
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f004 ff0d 	bl	80196cc <_ZdlPvj>
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	4618      	mov	r0, r3
 80148b6:	3708      	adds	r7, #8
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}

080148bc <_ZN14XFMutexDefaultC1Ev>:

XFMutexDefault::XFMutexDefault()
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	4618      	mov	r0, r3
 80148c8:	f7ff ffc8 	bl	801485c <_ZN9interface7XFMutexC1Ev>
 80148cc:	4a03      	ldr	r2, [pc, #12]	; (80148dc <_ZN14XFMutexDefaultC1Ev+0x20>)
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	601a      	str	r2, [r3, #0]
{
}
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	4618      	mov	r0, r3
 80148d6:	3708      	adds	r7, #8
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	0801c8d4 	.word	0x0801c8d4

080148e0 <_ZN14XFMutexDefaultD1Ev>:

XFMutexDefault::~XFMutexDefault()
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b082      	sub	sp, #8
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	4a05      	ldr	r2, [pc, #20]	; (8014900 <_ZN14XFMutexDefaultD1Ev+0x20>)
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	601a      	str	r2, [r3, #0]
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7ff ffc3 	bl	801487c <_ZN9interface7XFMutexD1Ev>
{
}
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	4618      	mov	r0, r3
 80148fa:	3708      	adds	r7, #8
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	0801c8d4 	.word	0x0801c8d4

08014904 <_ZN14XFMutexDefaultD0Ev>:
XFMutexDefault::~XFMutexDefault()
 8014904:	b580      	push	{r7, lr}
 8014906:	b082      	sub	sp, #8
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
}
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f7ff ffe7 	bl	80148e0 <_ZN14XFMutexDefaultD1Ev>
 8014912:	2104      	movs	r1, #4
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f004 fed9 	bl	80196cc <_ZdlPvj>
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	4618      	mov	r0, r3
 801491e:	3708      	adds	r7, #8
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}

08014924 <_ZN14XFMutexDefault4lockEv>:

void XFMutexDefault::lock()
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b082      	sub	sp, #8
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
	critical_enter();
 801492c:	f7fd f8ac 	bl	8011a88 <critical_enter>
}
 8014930:	bf00      	nop
 8014932:	3708      	adds	r7, #8
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}

08014938 <_ZN14XFMutexDefault6unlockEv>:


void XFMutexDefault::unlock()
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b082      	sub	sp, #8
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
	critical_exit();
 8014940:	f7fd f8c2 	bl	8011ac8 <critical_exit>
}
 8014944:	bf00      	nop
 8014946:	3708      	adds	r7, #8
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <_ZN14XFMutexDefault7tryLockEl>:

bool XFMutexDefault::tryLock(int32_t timeout /* = 0 */)
{
 801494c:	b480      	push	{r7}
 801494e:	b083      	sub	sp, #12
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
	return true;	// Always allow
 8014956:	2301      	movs	r3, #1
}
 8014958:	4618      	mov	r0, r3
 801495a:	370c      	adds	r7, #12
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr

08014964 <XF_startTimeoutManagerTimer>:
 * This means that changes in 'tickInterval' needs to be handled elsewhere
 * using the XF_tickIntervalInMilliseconds() function.
 */

void XF_startTimeoutManagerTimer(uint32_t tickInterval)
{
 8014964:	b480      	push	{r7}
 8014966:	b083      	sub	sp, #12
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
    (void)tickInterval;

    // SysTick gets already started by the STM32CubeMX HAL.
    // So nothing to do here.
}
 801496c:	bf00      	nop
 801496e:	370c      	adds	r7, #12
 8014970:	46bd      	mov	sp, r7
 8014972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014976:	4770      	bx	lr

08014978 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 8014978:	b580      	push	{r7, lr}
 801497a:	af00      	add	r7, sp, #0
    critical_setInIsr(true);                        // Tell critical section we are in an ISR
 801497c:	2001      	movs	r0, #1
 801497e:	f7fd f8cf 	bl	8011b20 <critical_setInIsr>
	if (XF::isRunning())                            // Call tick only if XF is running
 8014982:	f7fe ff13 	bl	80137ac <_ZN2XF9isRunningEv>
 8014986:	4603      	mov	r3, r0
 8014988:	2b00      	cmp	r3, #0
 801498a:	d007      	beq.n	801499c <XF_tick+0x24>
	{
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 801498c:	f7fd ffa4 	bl	80128d8 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8014990:	4603      	mov	r3, r0
 8014992:	681a      	ldr	r2, [r3, #0]
 8014994:	321c      	adds	r2, #28
 8014996:	6812      	ldr	r2, [r2, #0]
 8014998:	4618      	mov	r0, r3
 801499a:	4790      	blx	r2
	}
	critical_setInIsr(false);                       // Tell critical section we are leaving the ISR
 801499c:	2000      	movs	r0, #0
 801499e:	f7fd f8bf 	bl	8011b20 <critical_setInIsr>
}
 80149a2:	bf00      	nop
 80149a4:	bd80      	pop	{r7, pc}

080149a6 <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 80149a6:	b580      	push	{r7, lr}
 80149a8:	af00      	add	r7, sp, #0
    return XFTimeoutManager::getInstance()->getTickInterval();
 80149aa:	f7fd ff95 	bl	80128d8 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80149ae:	4603      	mov	r3, r0
 80149b0:	681a      	ldr	r2, [r3, #0]
 80149b2:	320c      	adds	r2, #12
 80149b4:	6812      	ldr	r2, [r2, #0]
 80149b6:	4618      	mov	r0, r3
 80149b8:	4790      	blx	r2
 80149ba:	4603      	mov	r3, r0
}
 80149bc:	4618      	mov	r0, r3
 80149be:	bd80      	pop	{r7, pc}

080149c0 <XF_isRunning>:

bool XF_isRunning()
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	af00      	add	r7, sp, #0
    return XF::isRunning();
 80149c4:	f7fe fef2 	bl	80137ac <_ZN2XF9isRunningEv>
 80149c8:	4603      	mov	r3, r0
}
 80149ca:	4618      	mov	r0, r3
 80149cc:	bd80      	pop	{r7, pc}

080149ce <_ZN8touchgfx4RectaNERKS0_>:
 80149ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149d2:	f9b1 7000 	ldrsh.w	r7, [r1]
 80149d6:	888c      	ldrh	r4, [r1, #4]
 80149d8:	f9b0 9000 	ldrsh.w	r9, [r0]
 80149dc:	443c      	add	r4, r7
 80149de:	b2a4      	uxth	r4, r4
 80149e0:	fa0f f884 	sxth.w	r8, r4
 80149e4:	45c1      	cmp	r9, r8
 80149e6:	da2f      	bge.n	8014a48 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80149e8:	8882      	ldrh	r2, [r0, #4]
 80149ea:	444a      	add	r2, r9
 80149ec:	b292      	uxth	r2, r2
 80149ee:	fa0f fe82 	sxth.w	lr, r2
 80149f2:	4577      	cmp	r7, lr
 80149f4:	da28      	bge.n	8014a48 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80149f6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80149fa:	88cb      	ldrh	r3, [r1, #6]
 80149fc:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014a00:	442b      	add	r3, r5
 8014a02:	b21b      	sxth	r3, r3
 8014a04:	429e      	cmp	r6, r3
 8014a06:	da1f      	bge.n	8014a48 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014a08:	88c3      	ldrh	r3, [r0, #6]
 8014a0a:	4433      	add	r3, r6
 8014a0c:	b29b      	uxth	r3, r3
 8014a0e:	fa0f fc83 	sxth.w	ip, r3
 8014a12:	4565      	cmp	r5, ip
 8014a14:	da18      	bge.n	8014a48 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014a16:	454f      	cmp	r7, r9
 8014a18:	bfb8      	it	lt
 8014a1a:	464f      	movlt	r7, r9
 8014a1c:	42b5      	cmp	r5, r6
 8014a1e:	bfb8      	it	lt
 8014a20:	4635      	movlt	r5, r6
 8014a22:	45f0      	cmp	r8, lr
 8014a24:	bfd8      	it	le
 8014a26:	4622      	movle	r2, r4
 8014a28:	1bd2      	subs	r2, r2, r7
 8014a2a:	8082      	strh	r2, [r0, #4]
 8014a2c:	884a      	ldrh	r2, [r1, #2]
 8014a2e:	88c9      	ldrh	r1, [r1, #6]
 8014a30:	8007      	strh	r7, [r0, #0]
 8014a32:	440a      	add	r2, r1
 8014a34:	8045      	strh	r5, [r0, #2]
 8014a36:	b292      	uxth	r2, r2
 8014a38:	b211      	sxth	r1, r2
 8014a3a:	458c      	cmp	ip, r1
 8014a3c:	bfa8      	it	ge
 8014a3e:	4613      	movge	r3, r2
 8014a40:	1b5b      	subs	r3, r3, r5
 8014a42:	80c3      	strh	r3, [r0, #6]
 8014a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a48:	2300      	movs	r3, #0
 8014a4a:	8003      	strh	r3, [r0, #0]
 8014a4c:	8043      	strh	r3, [r0, #2]
 8014a4e:	8083      	strh	r3, [r0, #4]
 8014a50:	80c3      	strh	r3, [r0, #6]
 8014a52:	e7f7      	b.n	8014a44 <_ZN8touchgfx4RectaNERKS0_+0x76>

08014a54 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014a54:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	dd06      	ble.n	8014a6a <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8014a5c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8014a60:	2800      	cmp	r0, #0
 8014a62:	bfcc      	ite	gt
 8014a64:	2000      	movgt	r0, #0
 8014a66:	2001      	movle	r0, #1
 8014a68:	4770      	bx	lr
 8014a6a:	2001      	movs	r0, #1
 8014a6c:	4770      	bx	lr

08014a6e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8014a6e:	4770      	bx	lr

08014a70 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8014a70:	4770      	bx	lr

08014a72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014a72:	6803      	ldr	r3, [r0, #0]
 8014a74:	b513      	push	{r0, r1, r4, lr}
 8014a76:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	e9cd 3300 	strd	r3, r3, [sp]
 8014a80:	466b      	mov	r3, sp
 8014a82:	47a0      	blx	r4
 8014a84:	b002      	add	sp, #8
 8014a86:	bd10      	pop	{r4, pc}

08014a88 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014a88:	2301      	movs	r3, #1
 8014a8a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014a8e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014a92:	4770      	bx	lr

08014a94 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014a94:	2301      	movs	r3, #1
 8014a96:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014a9a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014a9e:	4770      	bx	lr

08014aa0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014aa0:	6843      	ldr	r3, [r0, #4]
 8014aa2:	2201      	movs	r2, #1
 8014aa4:	725a      	strb	r2, [r3, #9]
 8014aa6:	6840      	ldr	r0, [r0, #4]
 8014aa8:	6803      	ldr	r3, [r0, #0]
 8014aaa:	691b      	ldr	r3, [r3, #16]
 8014aac:	4718      	bx	r3

08014aae <_ZN8touchgfx3HAL8flushDMAEv>:
 8014aae:	6840      	ldr	r0, [r0, #4]
 8014ab0:	6803      	ldr	r3, [r0, #0]
 8014ab2:	689b      	ldr	r3, [r3, #8]
 8014ab4:	4718      	bx	r3
	...

08014ab8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014ab8:	4b04      	ldr	r3, [pc, #16]	; (8014acc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	b123      	cbz	r3, 8014ac8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014abe:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8014ac2:	f080 0001 	eor.w	r0, r0, #1
 8014ac6:	4770      	bx	lr
 8014ac8:	2001      	movs	r0, #1
 8014aca:	4770      	bx	lr
 8014acc:	20001c9c 	.word	0x20001c9c

08014ad0 <_ZN8touchgfx3HAL8endFrameEv>:
 8014ad0:	b510      	push	{r4, lr}
 8014ad2:	4604      	mov	r4, r0
 8014ad4:	6840      	ldr	r0, [r0, #4]
 8014ad6:	6803      	ldr	r3, [r0, #0]
 8014ad8:	689b      	ldr	r3, [r3, #8]
 8014ada:	4798      	blx	r3
 8014adc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8014ae0:	b113      	cbz	r3, 8014ae8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014ae2:	2301      	movs	r3, #1
 8014ae4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014ae8:	bd10      	pop	{r4, pc}

08014aea <_ZN8touchgfx3HAL9taskEntryEv>:
 8014aea:	b508      	push	{r3, lr}
 8014aec:	6803      	ldr	r3, [r0, #0]
 8014aee:	4604      	mov	r4, r0
 8014af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014af2:	4798      	blx	r3
 8014af4:	6823      	ldr	r3, [r4, #0]
 8014af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014af8:	4620      	mov	r0, r4
 8014afa:	4798      	blx	r3
 8014afc:	f7f9 fd9c 	bl	800e638 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014b00:	6823      	ldr	r3, [r4, #0]
 8014b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b04:	e7f8      	b.n	8014af8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08014b08 <_ZN8touchgfx3HAL4tickEv>:
 8014b08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014b0a:	6803      	ldr	r3, [r0, #0]
 8014b0c:	4604      	mov	r4, r0
 8014b0e:	4d5c      	ldr	r5, [pc, #368]	; (8014c80 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8014b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014b14:	4798      	blx	r3
 8014b16:	2800      	cmp	r0, #0
 8014b18:	f000 8097 	beq.w	8014c4a <_ZN8touchgfx3HAL4tickEv+0x142>
 8014b1c:	2001      	movs	r0, #1
 8014b1e:	2600      	movs	r6, #0
 8014b20:	f7f9 fa5e 	bl	800dfe0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014b24:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8014b28:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8014b2c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014b30:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8014b34:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8014b38:	b133      	cbz	r3, 8014b48 <_ZN8touchgfx3HAL4tickEv+0x40>
 8014b3a:	6823      	ldr	r3, [r4, #0]
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014b42:	4798      	blx	r3
 8014b44:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8014b48:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014b4c:	2601      	movs	r6, #1
 8014b4e:	6862      	ldr	r2, [r4, #4]
 8014b50:	f083 0301 	eor.w	r3, r3, #1
 8014b54:	702e      	strb	r6, [r5, #0]
 8014b56:	7253      	strb	r3, [r2, #9]
 8014b58:	f001 fd1a 	bl	8016590 <_ZN8touchgfx11Application11getInstanceEv>
 8014b5c:	6803      	ldr	r3, [r0, #0]
 8014b5e:	4631      	mov	r1, r6
 8014b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b62:	4798      	blx	r3
 8014b64:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014b68:	b90b      	cbnz	r3, 8014b6e <_ZN8touchgfx3HAL4tickEv+0x66>
 8014b6a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8014b6e:	f001 fd0f 	bl	8016590 <_ZN8touchgfx11Application11getInstanceEv>
 8014b72:	6803      	ldr	r3, [r0, #0]
 8014b74:	695b      	ldr	r3, [r3, #20]
 8014b76:	4798      	blx	r3
 8014b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b7a:	6803      	ldr	r3, [r0, #0]
 8014b7c:	691b      	ldr	r3, [r3, #16]
 8014b7e:	4798      	blx	r3
 8014b80:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014b84:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8014b88:	3b01      	subs	r3, #1
 8014b8a:	b2db      	uxtb	r3, r3
 8014b8c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014b90:	b10a      	cbz	r2, 8014b96 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d1eb      	bne.n	8014b6e <_ZN8touchgfx3HAL4tickEv+0x66>
 8014b96:	4a3b      	ldr	r2, [pc, #236]	; (8014c84 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014b98:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8014b9c:	7813      	ldrb	r3, [r2, #0]
 8014b9e:	3301      	adds	r3, #1
 8014ba0:	b25b      	sxtb	r3, r3
 8014ba2:	4299      	cmp	r1, r3
 8014ba4:	7013      	strb	r3, [r2, #0]
 8014ba6:	dc10      	bgt.n	8014bca <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014ba8:	2300      	movs	r3, #0
 8014baa:	68e0      	ldr	r0, [r4, #12]
 8014bac:	a902      	add	r1, sp, #8
 8014bae:	7013      	strb	r3, [r2, #0]
 8014bb0:	aa03      	add	r2, sp, #12
 8014bb2:	6803      	ldr	r3, [r0, #0]
 8014bb4:	68db      	ldr	r3, [r3, #12]
 8014bb6:	4798      	blx	r3
 8014bb8:	6823      	ldr	r3, [r4, #0]
 8014bba:	2800      	cmp	r0, #0
 8014bbc:	d051      	beq.n	8014c62 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8014bbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014bc2:	4620      	mov	r0, r4
 8014bc4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014bc8:	4798      	blx	r3
 8014bca:	2300      	movs	r3, #0
 8014bcc:	6960      	ldr	r0, [r4, #20]
 8014bce:	f88d 3007 	strb.w	r3, [sp, #7]
 8014bd2:	b158      	cbz	r0, 8014bec <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014bd4:	6803      	ldr	r3, [r0, #0]
 8014bd6:	f10d 0107 	add.w	r1, sp, #7
 8014bda:	68db      	ldr	r3, [r3, #12]
 8014bdc:	4798      	blx	r3
 8014bde:	b128      	cbz	r0, 8014bec <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014be2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014be6:	6803      	ldr	r3, [r0, #0]
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	4798      	blx	r3
 8014bec:	f104 001c 	add.w	r0, r4, #28
 8014bf0:	f004 fcb8 	bl	8019564 <_ZN8touchgfx8Gestures4tickEv>
 8014bf4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8014bf8:	b30b      	cbz	r3, 8014c3e <_ZN8touchgfx3HAL4tickEv+0x136>
 8014bfa:	6920      	ldr	r0, [r4, #16]
 8014bfc:	6803      	ldr	r3, [r0, #0]
 8014bfe:	691b      	ldr	r3, [r3, #16]
 8014c00:	4798      	blx	r3
 8014c02:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014c04:	4606      	mov	r6, r0
 8014c06:	b903      	cbnz	r3, 8014c0a <_ZN8touchgfx3HAL4tickEv+0x102>
 8014c08:	6720      	str	r0, [r4, #112]	; 0x70
 8014c0a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014c0c:	4a1e      	ldr	r2, [pc, #120]	; (8014c88 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8014c0e:	1af3      	subs	r3, r6, r3
 8014c10:	4293      	cmp	r3, r2
 8014c12:	d914      	bls.n	8014c3e <_ZN8touchgfx3HAL4tickEv+0x136>
 8014c14:	6920      	ldr	r0, [r4, #16]
 8014c16:	6803      	ldr	r3, [r0, #0]
 8014c18:	699b      	ldr	r3, [r3, #24]
 8014c1a:	4798      	blx	r3
 8014c1c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014c1e:	2264      	movs	r2, #100	; 0x64
 8014c20:	1af3      	subs	r3, r6, r3
 8014c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c26:	fbb0 f0f3 	udiv	r0, r0, r3
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	dc1e      	bgt.n	8014c6c <_ZN8touchgfx3HAL4tickEv+0x164>
 8014c2e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8014c32:	6920      	ldr	r0, [r4, #16]
 8014c34:	2100      	movs	r1, #0
 8014c36:	6803      	ldr	r3, [r0, #0]
 8014c38:	69db      	ldr	r3, [r3, #28]
 8014c3a:	4798      	blx	r3
 8014c3c:	6726      	str	r6, [r4, #112]	; 0x70
 8014c3e:	f001 fca7 	bl	8016590 <_ZN8touchgfx11Application11getInstanceEv>
 8014c42:	6803      	ldr	r3, [r0, #0]
 8014c44:	2100      	movs	r1, #0
 8014c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c48:	4798      	blx	r3
 8014c4a:	6823      	ldr	r3, [r4, #0]
 8014c4c:	4620      	mov	r0, r4
 8014c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014c52:	4798      	blx	r3
 8014c54:	2001      	movs	r0, #1
 8014c56:	f7f9 f9ce 	bl	800dff6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	702b      	strb	r3, [r5, #0]
 8014c5e:	b004      	add	sp, #16
 8014c60:	bd70      	pop	{r4, r5, r6, pc}
 8014c62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014c66:	4620      	mov	r0, r4
 8014c68:	4798      	blx	r3
 8014c6a:	e7ae      	b.n	8014bca <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014c6c:	2863      	cmp	r0, #99	; 0x63
 8014c6e:	bfcb      	itete	gt
 8014c70:	2300      	movgt	r3, #0
 8014c72:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8014c76:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8014c7a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8014c7e:	e7d8      	b.n	8014c32 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8014c80:	20001ca4 	.word	0x20001ca4
 8014c84:	20001ca5 	.word	0x20001ca5
 8014c88:	05f5e100 	.word	0x05f5e100

08014c8c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014c8c:	f7f9 bca4 	b.w	800e5d8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014c90 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014c90:	6581      	str	r1, [r0, #88]	; 0x58
 8014c92:	301c      	adds	r0, #28
 8014c94:	f004 bc64 	b.w	8019560 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014c98 <_ZN8touchgfx3HAL5touchEll>:
 8014c98:	b530      	push	{r4, r5, lr}
 8014c9a:	b087      	sub	sp, #28
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	a804      	add	r0, sp, #16
 8014ca0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014ca4:	f001 fbca 	bl	801643c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014ca8:	9b04      	ldr	r3, [sp, #16]
 8014caa:	a906      	add	r1, sp, #24
 8014cac:	a803      	add	r0, sp, #12
 8014cae:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014cb2:	9b05      	ldr	r3, [sp, #20]
 8014cb4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014cb8:	f001 fbfe 	bl	80164b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014cbc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8014cc0:	f104 001c 	add.w	r0, r4, #28
 8014cc4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014cc8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014ccc:	b189      	cbz	r1, 8014cf2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8014cce:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8014cd2:	9300      	str	r3, [sp, #0]
 8014cd4:	4613      	mov	r3, r2
 8014cd6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8014cda:	462a      	mov	r2, r5
 8014cdc:	f004 fc50 	bl	8019580 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014ce0:	b128      	cbz	r0, 8014cee <_ZN8touchgfx3HAL5touchEll+0x56>
 8014ce2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014ce6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8014ce8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014cec:	6623      	str	r3, [r4, #96]	; 0x60
 8014cee:	b007      	add	sp, #28
 8014cf0:	bd30      	pop	{r4, r5, pc}
 8014cf2:	f004 fc89 	bl	8019608 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014cf6:	2301      	movs	r3, #1
 8014cf8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014cfc:	e7f1      	b.n	8014ce2 <_ZN8touchgfx3HAL5touchEll+0x4a>

08014cfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8014cfe:	b570      	push	{r4, r5, r6, lr}
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d050      	beq.n	8014da6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8014d04:	ea81 0002 	eor.w	r0, r1, r2
 8014d08:	07c6      	lsls	r6, r0, #31
 8014d0a:	d508      	bpl.n	8014d1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8014d0c:	3a01      	subs	r2, #1
 8014d0e:	18cc      	adds	r4, r1, r3
 8014d10:	42a1      	cmp	r1, r4
 8014d12:	d048      	beq.n	8014da6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8014d14:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014d18:	f801 0b01 	strb.w	r0, [r1], #1
 8014d1c:	e7f8      	b.n	8014d10 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8014d1e:	07d5      	lsls	r5, r2, #31
 8014d20:	bf42      	ittt	mi
 8014d22:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8014d26:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8014d2a:	f801 0b01 	strbmi.w	r0, [r1], #1
 8014d2e:	2b01      	cmp	r3, #1
 8014d30:	d915      	bls.n	8014d5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8014d32:	ea82 0001 	eor.w	r0, r2, r1
 8014d36:	0784      	lsls	r4, r0, #30
 8014d38:	d02d      	beq.n	8014d96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8014d3a:	1e94      	subs	r4, r2, #2
 8014d3c:	4608      	mov	r0, r1
 8014d3e:	18ce      	adds	r6, r1, r3
 8014d40:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8014d44:	f820 5b02 	strh.w	r5, [r0], #2
 8014d48:	1a35      	subs	r5, r6, r0
 8014d4a:	2d01      	cmp	r5, #1
 8014d4c:	d8f8      	bhi.n	8014d40 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8014d4e:	1e98      	subs	r0, r3, #2
 8014d50:	f003 0301 	and.w	r3, r3, #1
 8014d54:	f020 0001 	bic.w	r0, r0, #1
 8014d58:	3002      	adds	r0, #2
 8014d5a:	4401      	add	r1, r0
 8014d5c:	4402      	add	r2, r0
 8014d5e:	1f14      	subs	r4, r2, #4
 8014d60:	4608      	mov	r0, r1
 8014d62:	18ce      	adds	r6, r1, r3
 8014d64:	1a35      	subs	r5, r6, r0
 8014d66:	2d03      	cmp	r5, #3
 8014d68:	d810      	bhi.n	8014d8c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8014d6a:	089c      	lsrs	r4, r3, #2
 8014d6c:	00a0      	lsls	r0, r4, #2
 8014d6e:	4401      	add	r1, r0
 8014d70:	3801      	subs	r0, #1
 8014d72:	4402      	add	r2, r0
 8014d74:	f06f 0003 	mvn.w	r0, #3
 8014d78:	fb00 3404 	mla	r4, r0, r4, r3
 8014d7c:	440c      	add	r4, r1
 8014d7e:	42a1      	cmp	r1, r4
 8014d80:	d011      	beq.n	8014da6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8014d82:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8014d86:	f801 3b01 	strb.w	r3, [r1], #1
 8014d8a:	e7f8      	b.n	8014d7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8014d8c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8014d90:	f840 5b04 	str.w	r5, [r0], #4
 8014d94:	e7e6      	b.n	8014d64 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8014d96:	0790      	lsls	r0, r2, #30
 8014d98:	d0e1      	beq.n	8014d5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8014d9a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014d9e:	3b02      	subs	r3, #2
 8014da0:	f821 0b02 	strh.w	r0, [r1], #2
 8014da4:	e7db      	b.n	8014d5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8014da6:	2001      	movs	r0, #1
 8014da8:	bd70      	pop	{r4, r5, r6, pc}

08014daa <_ZN8touchgfx3HAL7noTouchEv>:
 8014daa:	b510      	push	{r4, lr}
 8014dac:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8014db0:	4604      	mov	r4, r0
 8014db2:	b153      	cbz	r3, 8014dca <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014db4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8014db8:	2101      	movs	r1, #1
 8014dba:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8014dbe:	301c      	adds	r0, #28
 8014dc0:	f004 fc22 	bl	8019608 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014dca:	bd10      	pop	{r4, pc}

08014dcc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014dd0:	4604      	mov	r4, r0
 8014dd2:	6980      	ldr	r0, [r0, #24]
 8014dd4:	b085      	sub	sp, #20
 8014dd6:	460f      	mov	r7, r1
 8014dd8:	4690      	mov	r8, r2
 8014dda:	4699      	mov	r9, r3
 8014ddc:	b930      	cbnz	r0, 8014dec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8014dde:	4b1c      	ldr	r3, [pc, #112]	; (8014e50 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8014de0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8014de4:	4a1b      	ldr	r2, [pc, #108]	; (8014e54 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8014de6:	481c      	ldr	r0, [pc, #112]	; (8014e58 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8014de8:	f004 fea8 	bl	8019b3c <__assert_func>
 8014dec:	ad04      	add	r5, sp, #16
 8014dee:	2600      	movs	r6, #0
 8014df0:	f845 6d04 	str.w	r6, [r5, #-4]!
 8014df4:	6806      	ldr	r6, [r0, #0]
 8014df6:	9501      	str	r5, [sp, #4]
 8014df8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8014dfc:	9500      	str	r5, [sp, #0]
 8014dfe:	6835      	ldr	r5, [r6, #0]
 8014e00:	47a8      	blx	r5
 8014e02:	4d16      	ldr	r5, [pc, #88]	; (8014e5c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8014e04:	4606      	mov	r6, r0
 8014e06:	f8a5 9000 	strh.w	r9, [r5]
 8014e0a:	f7f8 fd03 	bl	800d814 <_ZN8touchgfx3HAL3lcdEv>
 8014e0e:	6803      	ldr	r3, [r0, #0]
 8014e10:	6a1b      	ldr	r3, [r3, #32]
 8014e12:	4798      	blx	r3
 8014e14:	2801      	cmp	r0, #1
 8014e16:	d012      	beq.n	8014e3e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8014e18:	d306      	bcc.n	8014e28 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8014e1a:	280d      	cmp	r0, #13
 8014e1c:	d80b      	bhi.n	8014e36 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8014e1e:	4b10      	ldr	r3, [pc, #64]	; (8014e60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8014e20:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8014e24:	4a0b      	ldr	r2, [pc, #44]	; (8014e54 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8014e26:	e7de      	b.n	8014de6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8014e28:	882b      	ldrh	r3, [r5, #0]
 8014e2a:	fb08 7203 	mla	r2, r8, r3, r7
 8014e2e:	9b03      	ldr	r3, [sp, #12]
 8014e30:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8014e34:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014e36:	4630      	mov	r0, r6
 8014e38:	b005      	add	sp, #20
 8014e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e3e:	882a      	ldrh	r2, [r5, #0]
 8014e40:	9b03      	ldr	r3, [sp, #12]
 8014e42:	fb08 7202 	mla	r2, r8, r2, r7
 8014e46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014e4a:	1a9a      	subs	r2, r3, r2
 8014e4c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8014e4e:	e7f2      	b.n	8014e36 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8014e50:	0801c972 	.word	0x0801c972
 8014e54:	0801cc8a 	.word	0x0801cc8a
 8014e58:	0801c9b7 	.word	0x0801c9b7
 8014e5c:	20001c98 	.word	0x20001c98
 8014e60:	0801c9dd 	.word	0x0801c9dd

08014e64 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8014e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e68:	4698      	mov	r8, r3
 8014e6a:	6803      	ldr	r3, [r0, #0]
 8014e6c:	b087      	sub	sp, #28
 8014e6e:	460e      	mov	r6, r1
 8014e70:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8014e72:	4617      	mov	r7, r2
 8014e74:	4b0d      	ldr	r3, [pc, #52]	; (8014eac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8014e76:	4604      	mov	r4, r0
 8014e78:	f8b3 9000 	ldrh.w	r9, [r3]
 8014e7c:	f7f8 fcca 	bl	800d814 <_ZN8touchgfx3HAL3lcdEv>
 8014e80:	6803      	ldr	r3, [r0, #0]
 8014e82:	6a1b      	ldr	r3, [r3, #32]
 8014e84:	4798      	blx	r3
 8014e86:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8014e8a:	463a      	mov	r2, r7
 8014e8c:	4631      	mov	r1, r6
 8014e8e:	9302      	str	r3, [sp, #8]
 8014e90:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8014e94:	9301      	str	r3, [sp, #4]
 8014e96:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014e9a:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8014e9e:	9300      	str	r3, [sp, #0]
 8014ea0:	4620      	mov	r0, r4
 8014ea2:	4643      	mov	r3, r8
 8014ea4:	47a8      	blx	r5
 8014ea6:	b007      	add	sp, #28
 8014ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014eac:	20001c98 	.word	0x20001c98

08014eb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eb4:	4604      	mov	r4, r0
 8014eb6:	b08b      	sub	sp, #44	; 0x2c
 8014eb8:	4610      	mov	r0, r2
 8014eba:	460d      	mov	r5, r1
 8014ebc:	4691      	mov	r9, r2
 8014ebe:	461e      	mov	r6, r3
 8014ec0:	f002 fc7c 	bl	80177bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014ec4:	2800      	cmp	r0, #0
 8014ec6:	f000 80a0 	beq.w	801500a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8014eca:	6823      	ldr	r3, [r4, #0]
 8014ecc:	4620      	mov	r0, r4
 8014ece:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015040 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 8014ed2:	af0a      	add	r7, sp, #40	; 0x28
 8014ed4:	6a1b      	ldr	r3, [r3, #32]
 8014ed6:	4798      	blx	r3
 8014ed8:	6823      	ldr	r3, [r4, #0]
 8014eda:	4620      	mov	r0, r4
 8014edc:	f8df a164 	ldr.w	sl, [pc, #356]	; 8015044 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 8014ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ee2:	4798      	blx	r3
 8014ee4:	f8bb 3000 	ldrh.w	r3, [fp]
 8014ee8:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 8014eec:	4638      	mov	r0, r7
 8014eee:	9301      	str	r3, [sp, #4]
 8014ef0:	f8ba 3000 	ldrh.w	r3, [sl]
 8014ef4:	9302      	str	r3, [sp, #8]
 8014ef6:	4b4f      	ldr	r3, [pc, #316]	; (8015034 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8014ef8:	881a      	ldrh	r2, [r3, #0]
 8014efa:	4698      	mov	r8, r3
 8014efc:	9203      	str	r2, [sp, #12]
 8014efe:	4a4e      	ldr	r2, [pc, #312]	; (8015038 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8014f00:	8812      	ldrh	r2, [r2, #0]
 8014f02:	9204      	str	r2, [sp, #16]
 8014f04:	4a4d      	ldr	r2, [pc, #308]	; (801503c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 8014f06:	7812      	ldrb	r2, [r2, #0]
 8014f08:	2a00      	cmp	r2, #0
 8014f0a:	f040 8081 	bne.w	8015010 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 8014f0e:	f002 fc61 	bl	80177d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014f12:	f8ab 0000 	strh.w	r0, [fp]
 8014f16:	4638      	mov	r0, r7
 8014f18:	f002 fc96 	bl	8017848 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014f1c:	f8aa 0000 	strh.w	r0, [sl]
 8014f20:	4638      	mov	r0, r7
 8014f22:	f002 fc57 	bl	80177d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014f26:	f8a8 0000 	strh.w	r0, [r8]
 8014f2a:	4638      	mov	r0, r7
 8014f2c:	f002 fc8c 	bl	8017848 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014f30:	4b41      	ldr	r3, [pc, #260]	; (8015038 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8014f32:	8018      	strh	r0, [r3, #0]
 8014f34:	4648      	mov	r0, r9
 8014f36:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8014f3a:	f002 fc3f 	bl	80177bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014f3e:	2200      	movs	r2, #0
 8014f40:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8014f44:	4611      	mov	r1, r2
 8014f46:	4628      	mov	r0, r5
 8014f48:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014f4c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014f50:	f7f8 fc9f 	bl	800d892 <_ZN8touchgfx8Drawable5setXYEss>
 8014f54:	2301      	movs	r3, #1
 8014f56:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8014f5a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8014f5e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	dd5c      	ble.n	8015020 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8014f66:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	dd58      	ble.n	8015020 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8014f6e:	462a      	mov	r2, r5
 8014f70:	ab08      	add	r3, sp, #32
 8014f72:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014f76:	6851      	ldr	r1, [r2, #4]
 8014f78:	c303      	stmia	r3!, {r0, r1}
 8014f7a:	4631      	mov	r1, r6
 8014f7c:	a808      	add	r0, sp, #32
 8014f7e:	f7ff fd26 	bl	80149ce <_ZN8touchgfx4RectaNERKS0_>
 8014f82:	a807      	add	r0, sp, #28
 8014f84:	f002 fdb8 	bl	8017af8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014f88:	4606      	mov	r6, r0
 8014f8a:	f7f8 fc43 	bl	800d814 <_ZN8touchgfx3HAL3lcdEv>
 8014f8e:	6803      	ldr	r3, [r0, #0]
 8014f90:	6a1b      	ldr	r3, [r3, #32]
 8014f92:	4798      	blx	r3
 8014f94:	4286      	cmp	r6, r0
 8014f96:	d04a      	beq.n	801502e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 8014f98:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014f9a:	b150      	cbz	r0, 8014fb2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8014f9c:	a807      	add	r0, sp, #28
 8014f9e:	f002 fdab 	bl	8017af8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014fa2:	4606      	mov	r6, r0
 8014fa4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014fa6:	6803      	ldr	r3, [r0, #0]
 8014fa8:	6a1b      	ldr	r3, [r3, #32]
 8014faa:	4798      	blx	r3
 8014fac:	1a33      	subs	r3, r6, r0
 8014fae:	4258      	negs	r0, r3
 8014fb0:	4158      	adcs	r0, r3
 8014fb2:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8014fb6:	2600      	movs	r6, #0
 8014fb8:	696b      	ldr	r3, [r5, #20]
 8014fba:	a908      	add	r1, sp, #32
 8014fbc:	682a      	ldr	r2, [r5, #0]
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	9305      	str	r3, [sp, #20]
 8014fc2:	616e      	str	r6, [r5, #20]
 8014fc4:	6892      	ldr	r2, [r2, #8]
 8014fc6:	4790      	blx	r2
 8014fc8:	9b05      	ldr	r3, [sp, #20]
 8014fca:	4652      	mov	r2, sl
 8014fcc:	4649      	mov	r1, r9
 8014fce:	616b      	str	r3, [r5, #20]
 8014fd0:	4628      	mov	r0, r5
 8014fd2:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8014fd6:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014fda:	f7f8 fc5a 	bl	800d892 <_ZN8touchgfx8Drawable5setXYEss>
 8014fde:	9a01      	ldr	r2, [sp, #4]
 8014fe0:	4b17      	ldr	r3, [pc, #92]	; (8015040 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 8014fe2:	4620      	mov	r0, r4
 8014fe4:	801a      	strh	r2, [r3, #0]
 8014fe6:	9a02      	ldr	r2, [sp, #8]
 8014fe8:	4b16      	ldr	r3, [pc, #88]	; (8015044 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 8014fea:	801a      	strh	r2, [r3, #0]
 8014fec:	9a03      	ldr	r2, [sp, #12]
 8014fee:	4b11      	ldr	r3, [pc, #68]	; (8015034 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8014ff0:	801a      	strh	r2, [r3, #0]
 8014ff2:	4b11      	ldr	r3, [pc, #68]	; (8015038 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8014ff4:	9a04      	ldr	r2, [sp, #16]
 8014ff6:	801a      	strh	r2, [r3, #0]
 8014ff8:	6823      	ldr	r3, [r4, #0]
 8014ffa:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8014ffe:	6a1b      	ldr	r3, [r3, #32]
 8015000:	4798      	blx	r3
 8015002:	6823      	ldr	r3, [r4, #0]
 8015004:	4620      	mov	r0, r4
 8015006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015008:	4798      	blx	r3
 801500a:	b00b      	add	sp, #44	; 0x2c
 801500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015010:	f002 fc1a 	bl	8017848 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015014:	f8ab 0000 	strh.w	r0, [fp]
 8015018:	4638      	mov	r0, r7
 801501a:	f002 fbdb 	bl	80177d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801501e:	e77d      	b.n	8014f1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8015020:	462a      	mov	r2, r5
 8015022:	ab08      	add	r3, sp, #32
 8015024:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015028:	6851      	ldr	r1, [r2, #4]
 801502a:	c303      	stmia	r3!, {r0, r1}
 801502c:	e7a9      	b.n	8014f82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 801502e:	2000      	movs	r0, #0
 8015030:	e7bf      	b.n	8014fb2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8015032:	bf00      	nop
 8015034:	20001c92 	.word	0x20001c92
 8015038:	20001c94 	.word	0x20001c94
 801503c:	20001c96 	.word	0x20001c96
 8015040:	20001c98 	.word	0x20001c98
 8015044:	20001c9a 	.word	0x20001c9a

08015048 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015048:	4b07      	ldr	r3, [pc, #28]	; (8015068 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801504a:	b510      	push	{r4, lr}
 801504c:	781b      	ldrb	r3, [r3, #0]
 801504e:	4604      	mov	r4, r0
 8015050:	b13b      	cbz	r3, 8015062 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015052:	6803      	ldr	r3, [r0, #0]
 8015054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015056:	4798      	blx	r3
 8015058:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801505a:	4283      	cmp	r3, r0
 801505c:	d101      	bne.n	8015062 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801505e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015060:	bd10      	pop	{r4, pc}
 8015062:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015064:	e7fc      	b.n	8015060 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015066:	bf00      	nop
 8015068:	20001c9c 	.word	0x20001c9c

0801506c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801506c:	b508      	push	{r3, lr}
 801506e:	290d      	cmp	r1, #13
 8015070:	d817      	bhi.n	80150a2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8015072:	e8df f001 	tbb	[pc, r1]
 8015076:	090b      	.short	0x090b
 8015078:	0d0d0d07 	.word	0x0d0d0d07
 801507c:	1414140d 	.word	0x1414140d
 8015080:	0d0d1414 	.word	0x0d0d1414
 8015084:	2020      	movs	r0, #32
 8015086:	bd08      	pop	{r3, pc}
 8015088:	2018      	movs	r0, #24
 801508a:	e7fc      	b.n	8015086 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801508c:	2010      	movs	r0, #16
 801508e:	e7fa      	b.n	8015086 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015090:	4b05      	ldr	r3, [pc, #20]	; (80150a8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8015092:	f44f 7111 	mov.w	r1, #580	; 0x244
 8015096:	4a05      	ldr	r2, [pc, #20]	; (80150ac <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8015098:	4805      	ldr	r0, [pc, #20]	; (80150b0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801509a:	f004 fd4f 	bl	8019b3c <__assert_func>
 801509e:	2008      	movs	r0, #8
 80150a0:	e7f1      	b.n	8015086 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80150a2:	2000      	movs	r0, #0
 80150a4:	e7ef      	b.n	8015086 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80150a6:	bf00      	nop
 80150a8:	0801cab0 	.word	0x0801cab0
 80150ac:	0801ce4c 	.word	0x0801ce4c
 80150b0:	0801c9b7 	.word	0x0801c9b7

080150b4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80150b4:	b570      	push	{r4, r5, r6, lr}
 80150b6:	460d      	mov	r5, r1
 80150b8:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80150bc:	4616      	mov	r6, r2
 80150be:	461c      	mov	r4, r3
 80150c0:	f7ff ffd4 	bl	801506c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80150c4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80150c8:	10c0      	asrs	r0, r0, #3
 80150ca:	fb06 5101 	mla	r1, r6, r1, r5
 80150ce:	fb00 4001 	mla	r0, r0, r1, r4
 80150d2:	bd70      	pop	{r4, r5, r6, pc}

080150d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80150d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150d8:	b08a      	sub	sp, #40	; 0x28
 80150da:	f04f 0c00 	mov.w	ip, #0
 80150de:	4604      	mov	r4, r0
 80150e0:	469a      	mov	sl, r3
 80150e2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80150e6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80150ea:	f1b8 0f02 	cmp.w	r8, #2
 80150ee:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80150f2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80150f6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80150fa:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80150fe:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015102:	f8cd c020 	str.w	ip, [sp, #32]
 8015106:	d030      	beq.n	801516a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8015108:	2bff      	cmp	r3, #255	; 0xff
 801510a:	d12c      	bne.n	8015166 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801510c:	4560      	cmp	r0, ip
 801510e:	bf14      	ite	ne
 8015110:	2004      	movne	r0, #4
 8015112:	2001      	moveq	r0, #1
 8015114:	9204      	str	r2, [sp, #16]
 8015116:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801511a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801511e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015122:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015126:	f8ad 501a 	strh.w	r5, [sp, #26]
 801512a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801512e:	4620      	mov	r0, r4
 8015130:	f7ff ff8a 	bl	8015048 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015134:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8015138:	4603      	mov	r3, r0
 801513a:	4651      	mov	r1, sl
 801513c:	4620      	mov	r0, r4
 801513e:	e9cd 9700 	strd	r9, r7, [sp]
 8015142:	f7ff ffb7 	bl	80150b4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015146:	f8ad 901e 	strh.w	r9, [sp, #30]
 801514a:	9005      	str	r0, [sp, #20]
 801514c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8015150:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8015154:	b106      	cbz	r6, 8015158 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8015156:	b98d      	cbnz	r5, 801517c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8015158:	4b12      	ldr	r3, [pc, #72]	; (80151a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801515a:	f240 11c3 	movw	r1, #451	; 0x1c3
 801515e:	4a12      	ldr	r2, [pc, #72]	; (80151a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015160:	4812      	ldr	r0, [pc, #72]	; (80151ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8015162:	f004 fceb 	bl	8019b3c <__assert_func>
 8015166:	2004      	movs	r0, #4
 8015168:	e7d4      	b.n	8015114 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801516a:	2bff      	cmp	r3, #255	; 0xff
 801516c:	d104      	bne.n	8015178 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801516e:	2800      	cmp	r0, #0
 8015170:	bf14      	ite	ne
 8015172:	2040      	movne	r0, #64	; 0x40
 8015174:	2020      	moveq	r0, #32
 8015176:	e7cd      	b.n	8015114 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015178:	2040      	movs	r0, #64	; 0x40
 801517a:	e7cb      	b.n	8015114 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801517c:	6823      	ldr	r3, [r4, #0]
 801517e:	4620      	mov	r0, r4
 8015180:	9d02      	ldr	r5, [sp, #8]
 8015182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015184:	4798      	blx	r3
 8015186:	4228      	tst	r0, r5
 8015188:	d104      	bne.n	8015194 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 801518a:	4b09      	ldr	r3, [pc, #36]	; (80151b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801518c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8015190:	4a05      	ldr	r2, [pc, #20]	; (80151a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015192:	e7e5      	b.n	8015160 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8015194:	6860      	ldr	r0, [r4, #4]
 8015196:	a902      	add	r1, sp, #8
 8015198:	6803      	ldr	r3, [r0, #0]
 801519a:	685b      	ldr	r3, [r3, #4]
 801519c:	4798      	blx	r3
 801519e:	b00a      	add	sp, #40	; 0x28
 80151a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151a4:	0801ca33 	.word	0x0801ca33
 80151a8:	0801ccee 	.word	0x0801ccee
 80151ac:	0801c9b7 	.word	0x0801c9b7
 80151b0:	0801ca6b 	.word	0x0801ca6b

080151b4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80151b4:	b510      	push	{r4, lr}
 80151b6:	b08a      	sub	sp, #40	; 0x28
 80151b8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80151bc:	9408      	str	r4, [sp, #32]
 80151be:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80151c2:	9407      	str	r4, [sp, #28]
 80151c4:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80151c8:	9406      	str	r4, [sp, #24]
 80151ca:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80151ce:	9405      	str	r4, [sp, #20]
 80151d0:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80151d4:	9404      	str	r4, [sp, #16]
 80151d6:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80151da:	9403      	str	r4, [sp, #12]
 80151dc:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80151e0:	9402      	str	r4, [sp, #8]
 80151e2:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80151e6:	e9cd 3400 	strd	r3, r4, [sp]
 80151ea:	4613      	mov	r3, r2
 80151ec:	2200      	movs	r2, #0
 80151ee:	f7ff ff71 	bl	80150d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80151f2:	b00a      	add	sp, #40	; 0x28
 80151f4:	bd10      	pop	{r4, pc}
	...

080151f8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80151f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151fa:	b08b      	sub	sp, #44	; 0x2c
 80151fc:	4616      	mov	r6, r2
 80151fe:	460d      	mov	r5, r1
 8015200:	461f      	mov	r7, r3
 8015202:	4604      	mov	r4, r0
 8015204:	f7f8 fb06 	bl	800d814 <_ZN8touchgfx3HAL3lcdEv>
 8015208:	6803      	ldr	r3, [r0, #0]
 801520a:	6a1b      	ldr	r3, [r3, #32]
 801520c:	4798      	blx	r3
 801520e:	4b0e      	ldr	r3, [pc, #56]	; (8015248 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8015210:	2200      	movs	r2, #0
 8015212:	4629      	mov	r1, r5
 8015214:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015218:	881b      	ldrh	r3, [r3, #0]
 801521a:	4620      	mov	r0, r4
 801521c:	9306      	str	r3, [sp, #24]
 801521e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015222:	9305      	str	r3, [sp, #20]
 8015224:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015228:	9304      	str	r3, [sp, #16]
 801522a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801522e:	9303      	str	r3, [sp, #12]
 8015230:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015234:	9302      	str	r3, [sp, #8]
 8015236:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801523a:	e9cd 7300 	strd	r7, r3, [sp]
 801523e:	4633      	mov	r3, r6
 8015240:	f7ff ff48 	bl	80150d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015244:	b00b      	add	sp, #44	; 0x2c
 8015246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015248:	20001c98 	.word	0x20001c98

0801524c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801524c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015250:	461f      	mov	r7, r3
 8015252:	4b14      	ldr	r3, [pc, #80]	; (80152a4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8015254:	b08a      	sub	sp, #40	; 0x28
 8015256:	4616      	mov	r6, r2
 8015258:	f8b3 8000 	ldrh.w	r8, [r3]
 801525c:	460d      	mov	r5, r1
 801525e:	4604      	mov	r4, r0
 8015260:	f7f8 fad8 	bl	800d814 <_ZN8touchgfx3HAL3lcdEv>
 8015264:	6803      	ldr	r3, [r0, #0]
 8015266:	6a1b      	ldr	r3, [r3, #32]
 8015268:	4798      	blx	r3
 801526a:	2302      	movs	r3, #2
 801526c:	9008      	str	r0, [sp, #32]
 801526e:	2200      	movs	r2, #0
 8015270:	4629      	mov	r1, r5
 8015272:	4620      	mov	r0, r4
 8015274:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8015278:	2301      	movs	r3, #1
 801527a:	9305      	str	r3, [sp, #20]
 801527c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015280:	9304      	str	r3, [sp, #16]
 8015282:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015286:	9303      	str	r3, [sp, #12]
 8015288:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801528c:	9302      	str	r3, [sp, #8]
 801528e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015292:	e9cd 7300 	strd	r7, r3, [sp]
 8015296:	4633      	mov	r3, r6
 8015298:	f7ff ff1c 	bl	80150d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801529c:	b00a      	add	sp, #40	; 0x28
 801529e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152a2:	bf00      	nop
 80152a4:	20001c98 	.word	0x20001c98

080152a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80152a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152ac:	b08b      	sub	sp, #44	; 0x2c
 80152ae:	469b      	mov	fp, r3
 80152b0:	4604      	mov	r4, r0
 80152b2:	4692      	mov	sl, r2
 80152b4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80152b8:	2600      	movs	r6, #0
 80152ba:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80152be:	4689      	mov	r9, r1
 80152c0:	2fff      	cmp	r7, #255	; 0xff
 80152c2:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80152c6:	9608      	str	r6, [sp, #32]
 80152c8:	bf14      	ite	ne
 80152ca:	2308      	movne	r3, #8
 80152cc:	2302      	moveq	r3, #2
 80152ce:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80152d2:	f7ff feb9 	bl	8015048 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80152d6:	465a      	mov	r2, fp
 80152d8:	4603      	mov	r3, r0
 80152da:	4651      	mov	r1, sl
 80152dc:	4620      	mov	r0, r4
 80152de:	e9cd 8500 	strd	r8, r5, [sp]
 80152e2:	f7ff fee7 	bl	80150b4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80152e6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80152ea:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80152ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 80152f2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80152f6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80152fa:	f8ad 301a 	strh.w	r3, [sp, #26]
 80152fe:	6823      	ldr	r3, [r4, #0]
 8015300:	9d02      	ldr	r5, [sp, #8]
 8015302:	9005      	str	r0, [sp, #20]
 8015304:	4620      	mov	r0, r4
 8015306:	f8ad 601c 	strh.w	r6, [sp, #28]
 801530a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801530e:	f8cd 9020 	str.w	r9, [sp, #32]
 8015312:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8015316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015318:	4798      	blx	r3
 801531a:	4228      	tst	r0, r5
 801531c:	d106      	bne.n	801532c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801531e:	4b07      	ldr	r3, [pc, #28]	; (801533c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8015320:	f240 11fb 	movw	r1, #507	; 0x1fb
 8015324:	4a06      	ldr	r2, [pc, #24]	; (8015340 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8015326:	4807      	ldr	r0, [pc, #28]	; (8015344 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8015328:	f004 fc08 	bl	8019b3c <__assert_func>
 801532c:	6860      	ldr	r0, [r4, #4]
 801532e:	a902      	add	r1, sp, #8
 8015330:	6803      	ldr	r3, [r0, #0]
 8015332:	685b      	ldr	r3, [r3, #4]
 8015334:	4798      	blx	r3
 8015336:	b00b      	add	sp, #44	; 0x2c
 8015338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801533c:	0801ca6b 	.word	0x0801ca6b
 8015340:	0801cdb7 	.word	0x0801cdb7
 8015344:	0801c9b7 	.word	0x0801c9b7

08015348 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015348:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801534c:	461f      	mov	r7, r3
 801534e:	4b0b      	ldr	r3, [pc, #44]	; (801537c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015350:	460d      	mov	r5, r1
 8015352:	4616      	mov	r6, r2
 8015354:	f8b3 8000 	ldrh.w	r8, [r3]
 8015358:	4604      	mov	r4, r0
 801535a:	f7f8 fa5b 	bl	800d814 <_ZN8touchgfx3HAL3lcdEv>
 801535e:	6803      	ldr	r3, [r0, #0]
 8015360:	6a1b      	ldr	r3, [r3, #32]
 8015362:	4798      	blx	r3
 8015364:	463b      	mov	r3, r7
 8015366:	4632      	mov	r2, r6
 8015368:	4629      	mov	r1, r5
 801536a:	e9cd 8000 	strd	r8, r0, [sp]
 801536e:	4620      	mov	r0, r4
 8015370:	f7ff fea0 	bl	80150b4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015374:	b002      	add	sp, #8
 8015376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801537a:	bf00      	nop
 801537c:	20001c98 	.word	0x20001c98

08015380 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8015380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015384:	4698      	mov	r8, r3
 8015386:	b088      	sub	sp, #32
 8015388:	2300      	movs	r3, #0
 801538a:	4617      	mov	r7, r2
 801538c:	4604      	mov	r4, r0
 801538e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8015392:	9306      	str	r3, [sp, #24]
 8015394:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015398:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801539c:	f8ad 6010 	strh.w	r6, [sp, #16]
 80153a0:	f8ad 5012 	strh.w	r5, [sp, #18]
 80153a4:	e9cd 3100 	strd	r3, r1, [sp]
 80153a8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80153ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80153b0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80153b4:	f88d 301c 	strb.w	r3, [sp, #28]
 80153b8:	f7ff fe46 	bl	8015048 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80153bc:	4642      	mov	r2, r8
 80153be:	4603      	mov	r3, r0
 80153c0:	4639      	mov	r1, r7
 80153c2:	4620      	mov	r0, r4
 80153c4:	f7ff ffc0 	bl	8015348 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80153c8:	4b16      	ldr	r3, [pc, #88]	; (8015424 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80153ca:	9003      	str	r0, [sp, #12]
 80153cc:	881b      	ldrh	r3, [r3, #0]
 80153ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80153d2:	f7f8 fa1f 	bl	800d814 <_ZN8touchgfx3HAL3lcdEv>
 80153d6:	6803      	ldr	r3, [r0, #0]
 80153d8:	6a1b      	ldr	r3, [r3, #32]
 80153da:	4798      	blx	r3
 80153dc:	f88d 001e 	strb.w	r0, [sp, #30]
 80153e0:	f88d 001d 	strb.w	r0, [sp, #29]
 80153e4:	b106      	cbz	r6, 80153e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80153e6:	b935      	cbnz	r5, 80153f6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80153e8:	4b0f      	ldr	r3, [pc, #60]	; (8015428 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80153ea:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80153ee:	4a0f      	ldr	r2, [pc, #60]	; (801542c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80153f0:	480f      	ldr	r0, [pc, #60]	; (8015430 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80153f2:	f004 fba3 	bl	8019b3c <__assert_func>
 80153f6:	6823      	ldr	r3, [r4, #0]
 80153f8:	4620      	mov	r0, r4
 80153fa:	9d00      	ldr	r5, [sp, #0]
 80153fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153fe:	4798      	blx	r3
 8015400:	4228      	tst	r0, r5
 8015402:	d104      	bne.n	801540e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8015404:	4b0b      	ldr	r3, [pc, #44]	; (8015434 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8015406:	f240 11e1 	movw	r1, #481	; 0x1e1
 801540a:	4a08      	ldr	r2, [pc, #32]	; (801542c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801540c:	e7f0      	b.n	80153f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801540e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015410:	4669      	mov	r1, sp
 8015412:	6860      	ldr	r0, [r4, #4]
 8015414:	9306      	str	r3, [sp, #24]
 8015416:	6803      	ldr	r3, [r0, #0]
 8015418:	685b      	ldr	r3, [r3, #4]
 801541a:	4798      	blx	r3
 801541c:	b008      	add	sp, #32
 801541e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015422:	bf00      	nop
 8015424:	20001c98 	.word	0x20001c98
 8015428:	0801ca33 	.word	0x0801ca33
 801542c:	0801cba0 	.word	0x0801cba0
 8015430:	0801c9b7 	.word	0x0801c9b7
 8015434:	0801ca6b 	.word	0x0801ca6b

08015438 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015438:	b570      	push	{r4, r5, r6, lr}
 801543a:	b08a      	sub	sp, #40	; 0x28
 801543c:	4604      	mov	r4, r0
 801543e:	466b      	mov	r3, sp
 8015440:	e883 0006 	stmia.w	r3, {r1, r2}
 8015444:	4b1f      	ldr	r3, [pc, #124]	; (80154c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8015446:	781b      	ldrb	r3, [r3, #0]
 8015448:	b933      	cbnz	r3, 8015458 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801544a:	4b1f      	ldr	r3, [pc, #124]	; (80154c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801544c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8015450:	4a1e      	ldr	r2, [pc, #120]	; (80154cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8015452:	481f      	ldr	r0, [pc, #124]	; (80154d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8015454:	f004 fb72 	bl	8019b3c <__assert_func>
 8015458:	2300      	movs	r3, #0
 801545a:	f8bd 5000 	ldrh.w	r5, [sp]
 801545e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8015462:	9308      	str	r3, [sp, #32]
 8015464:	2301      	movs	r3, #1
 8015466:	9302      	str	r3, [sp, #8]
 8015468:	6803      	ldr	r3, [r0, #0]
 801546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801546c:	4798      	blx	r3
 801546e:	4632      	mov	r2, r6
 8015470:	4629      	mov	r1, r5
 8015472:	4603      	mov	r3, r0
 8015474:	4620      	mov	r0, r4
 8015476:	f7ff ff67 	bl	8015348 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801547a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801547c:	9003      	str	r0, [sp, #12]
 801547e:	9305      	str	r3, [sp, #20]
 8015480:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015484:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015488:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801548c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015490:	4b10      	ldr	r3, [pc, #64]	; (80154d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8015492:	881b      	ldrh	r3, [r3, #0]
 8015494:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015498:	f8ad 301e 	strh.w	r3, [sp, #30]
 801549c:	f7f8 f9ba 	bl	800d814 <_ZN8touchgfx3HAL3lcdEv>
 80154a0:	6803      	ldr	r3, [r0, #0]
 80154a2:	6a1b      	ldr	r3, [r3, #32]
 80154a4:	4798      	blx	r3
 80154a6:	23ff      	movs	r3, #255	; 0xff
 80154a8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80154ac:	a902      	add	r1, sp, #8
 80154ae:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80154b2:	6860      	ldr	r0, [r4, #4]
 80154b4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80154b8:	6803      	ldr	r3, [r0, #0]
 80154ba:	685b      	ldr	r3, [r3, #4]
 80154bc:	4798      	blx	r3
 80154be:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80154c0:	b00a      	add	sp, #40	; 0x28
 80154c2:	bd70      	pop	{r4, r5, r6, pc}
 80154c4:	20001c9d 	.word	0x20001c9d
 80154c8:	0801c904 	.word	0x0801c904
 80154cc:	0801cc44 	.word	0x0801cc44
 80154d0:	0801c9b7 	.word	0x0801c9b7
 80154d4:	20001c98 	.word	0x20001c98

080154d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80154d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154da:	b08b      	sub	sp, #44	; 0x2c
 80154dc:	4604      	mov	r4, r0
 80154de:	466d      	mov	r5, sp
 80154e0:	e885 0006 	stmia.w	r5, {r1, r2}
 80154e4:	461d      	mov	r5, r3
 80154e6:	2300      	movs	r3, #0
 80154e8:	f8bd 6000 	ldrh.w	r6, [sp]
 80154ec:	9308      	str	r3, [sp, #32]
 80154ee:	2301      	movs	r3, #1
 80154f0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80154f4:	9302      	str	r3, [sp, #8]
 80154f6:	6803      	ldr	r3, [r0, #0]
 80154f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154fa:	4798      	blx	r3
 80154fc:	463a      	mov	r2, r7
 80154fe:	4631      	mov	r1, r6
 8015500:	4603      	mov	r3, r0
 8015502:	4620      	mov	r0, r4
 8015504:	f7ff ff20 	bl	8015348 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015508:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801550c:	9003      	str	r0, [sp, #12]
 801550e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015512:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015516:	9505      	str	r5, [sp, #20]
 8015518:	f8ad 301a 	strh.w	r3, [sp, #26]
 801551c:	4b0d      	ldr	r3, [pc, #52]	; (8015554 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801551e:	881b      	ldrh	r3, [r3, #0]
 8015520:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015526:	f8ad 301e 	strh.w	r3, [sp, #30]
 801552a:	f7f8 f973 	bl	800d814 <_ZN8touchgfx3HAL3lcdEv>
 801552e:	6803      	ldr	r3, [r0, #0]
 8015530:	6a1b      	ldr	r3, [r3, #32]
 8015532:	4798      	blx	r3
 8015534:	23ff      	movs	r3, #255	; 0xff
 8015536:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801553a:	a902      	add	r1, sp, #8
 801553c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015540:	6860      	ldr	r0, [r4, #4]
 8015542:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015546:	6803      	ldr	r3, [r0, #0]
 8015548:	685b      	ldr	r3, [r3, #4]
 801554a:	4798      	blx	r3
 801554c:	4628      	mov	r0, r5
 801554e:	b00b      	add	sp, #44	; 0x2c
 8015550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015552:	bf00      	nop
 8015554:	20001c98 	.word	0x20001c98

08015558 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015558:	b570      	push	{r4, r5, r6, lr}
 801555a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801555e:	4604      	mov	r4, r0
 8015560:	b19b      	cbz	r3, 801558a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015562:	2002      	movs	r0, #2
 8015564:	f7f8 fd52 	bl	800e00c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015568:	2300      	movs	r3, #0
 801556a:	4620      	mov	r0, r4
 801556c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015570:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8015574:	6823      	ldr	r3, [r4, #0]
 8015576:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801557a:	f7ff fd65 	bl	8015048 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801557e:	4601      	mov	r1, r0
 8015580:	4620      	mov	r0, r4
 8015582:	462b      	mov	r3, r5
 8015584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015588:	4718      	bx	r3
 801558a:	bd70      	pop	{r4, r5, r6, pc}

0801558c <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 801558c:	b538      	push	{r3, r4, r5, lr}
 801558e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8015592:	4604      	mov	r4, r0
 8015594:	460d      	mov	r5, r1
 8015596:	428a      	cmp	r2, r1
 8015598:	d008      	beq.n	80155ac <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 801559a:	2a01      	cmp	r2, #1
 801559c:	6803      	ldr	r3, [r0, #0]
 801559e:	d106      	bne.n	80155ae <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 80155a0:	b929      	cbnz	r1, 80155ae <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 80155a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80155a6:	4798      	blx	r3
 80155a8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80155ac:	bd38      	pop	{r3, r4, r5, pc}
 80155ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80155b2:	4620      	mov	r0, r4
 80155b4:	e7f7      	b.n	80155a6 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

080155b8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80155b8:	4b0d      	ldr	r3, [pc, #52]	; (80155f0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80155ba:	b510      	push	{r4, lr}
 80155bc:	781b      	ldrb	r3, [r3, #0]
 80155be:	4604      	mov	r4, r0
 80155c0:	b95b      	cbnz	r3, 80155da <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80155c2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80155c6:	2b02      	cmp	r3, #2
 80155c8:	d007      	beq.n	80155da <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80155ca:	6840      	ldr	r0, [r0, #4]
 80155cc:	f000 f930 	bl	8015830 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80155d0:	b118      	cbz	r0, 80155da <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80155d2:	6862      	ldr	r2, [r4, #4]
 80155d4:	7a53      	ldrb	r3, [r2, #9]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d0fc      	beq.n	80155d4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80155da:	f7f8 ffe7 	bl	800e5ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80155de:	4620      	mov	r0, r4
 80155e0:	2100      	movs	r1, #0
 80155e2:	f7ff ffd3 	bl	801558c <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 80155e6:	4620      	mov	r0, r4
 80155e8:	f7ff fd2e 	bl	8015048 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80155ec:	bd10      	pop	{r4, pc}
 80155ee:	bf00      	nop
 80155f0:	20001c9c 	.word	0x20001c9c

080155f4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80155f4:	4770      	bx	lr

080155f6 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80155f6:	2000      	movs	r0, #0
 80155f8:	4770      	bx	lr

080155fa <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80155fa:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80155fe:	1a13      	subs	r3, r2, r0
 8015600:	4258      	negs	r0, r3
 8015602:	4158      	adcs	r0, r3
 8015604:	4770      	bx	lr

08015606 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015606:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801560a:	1a9b      	subs	r3, r3, r2
 801560c:	2b00      	cmp	r3, #0
 801560e:	bfdc      	itt	le
 8015610:	6882      	ldrle	r2, [r0, #8]
 8015612:	189b      	addle	r3, r3, r2
 8015614:	2b01      	cmp	r3, #1
 8015616:	bfcc      	ite	gt
 8015618:	2000      	movgt	r0, #0
 801561a:	2001      	movle	r0, #1
 801561c:	4770      	bx	lr

0801561e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801561e:	6902      	ldr	r2, [r0, #16]
 8015620:	6840      	ldr	r0, [r0, #4]
 8015622:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8015626:	4770      	bx	lr

08015628 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015628:	6803      	ldr	r3, [r0, #0]
 801562a:	691b      	ldr	r3, [r3, #16]
 801562c:	4718      	bx	r3

0801562e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801562e:	4770      	bx	lr

08015630 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015630:	4770      	bx	lr
	...

08015634 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015634:	2301      	movs	r3, #1
 8015636:	b570      	push	{r4, r5, r6, lr}
 8015638:	7203      	strb	r3, [r0, #8]
 801563a:	4604      	mov	r4, r0
 801563c:	6840      	ldr	r0, [r0, #4]
 801563e:	6803      	ldr	r3, [r0, #0]
 8015640:	699b      	ldr	r3, [r3, #24]
 8015642:	4798      	blx	r3
 8015644:	6803      	ldr	r3, [r0, #0]
 8015646:	4605      	mov	r5, r0
 8015648:	2b08      	cmp	r3, #8
 801564a:	d01e      	beq.n	801568a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801564c:	d80b      	bhi.n	8015666 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801564e:	2b02      	cmp	r3, #2
 8015650:	d027      	beq.n	80156a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8015652:	2b04      	cmp	r3, #4
 8015654:	d011      	beq.n	801567a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8015656:	2b01      	cmp	r3, #1
 8015658:	d028      	beq.n	80156ac <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801565a:	4b17      	ldr	r3, [pc, #92]	; (80156b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801565c:	218c      	movs	r1, #140	; 0x8c
 801565e:	4a17      	ldr	r2, [pc, #92]	; (80156bc <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8015660:	4817      	ldr	r0, [pc, #92]	; (80156c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8015662:	f004 fa6b 	bl	8019b3c <__assert_func>
 8015666:	2b40      	cmp	r3, #64	; 0x40
 8015668:	d020      	beq.n	80156ac <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801566a:	d801      	bhi.n	8015670 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801566c:	2b20      	cmp	r3, #32
 801566e:	e7f3      	b.n	8015658 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8015670:	2b80      	cmp	r3, #128	; 0x80
 8015672:	d01b      	beq.n	80156ac <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015678:	e7ee      	b.n	8015658 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801567a:	6823      	ldr	r3, [r4, #0]
 801567c:	7f01      	ldrb	r1, [r0, #28]
 801567e:	4620      	mov	r0, r4
 8015680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015682:	4798      	blx	r3
 8015684:	6823      	ldr	r3, [r4, #0]
 8015686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015688:	e006      	b.n	8015698 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801568a:	6823      	ldr	r3, [r4, #0]
 801568c:	7f01      	ldrb	r1, [r0, #28]
 801568e:	4620      	mov	r0, r4
 8015690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015692:	4798      	blx	r3
 8015694:	6823      	ldr	r3, [r4, #0]
 8015696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015698:	4629      	mov	r1, r5
 801569a:	4620      	mov	r0, r4
 801569c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156a0:	4718      	bx	r3
 80156a2:	6823      	ldr	r3, [r4, #0]
 80156a4:	4620      	mov	r0, r4
 80156a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156a8:	4798      	blx	r3
 80156aa:	e7f3      	b.n	8015694 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80156ac:	6823      	ldr	r3, [r4, #0]
 80156ae:	4620      	mov	r0, r4
 80156b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156b2:	4798      	blx	r3
 80156b4:	e7e6      	b.n	8015684 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80156b6:	bf00      	nop
 80156b8:	0801ce95 	.word	0x0801ce95
 80156bc:	0801cfa4 	.word	0x0801cfa4
 80156c0:	0801ceba 	.word	0x0801ceba

080156c4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80156c4:	b570      	push	{r4, r5, r6, lr}
 80156c6:	4604      	mov	r4, r0
 80156c8:	460e      	mov	r6, r1
 80156ca:	6860      	ldr	r0, [r4, #4]
 80156cc:	6803      	ldr	r3, [r0, #0]
 80156ce:	685b      	ldr	r3, [r3, #4]
 80156d0:	4798      	blx	r3
 80156d2:	2800      	cmp	r0, #0
 80156d4:	d1f9      	bne.n	80156ca <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80156d6:	4d0d      	ldr	r5, [pc, #52]	; (801570c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80156d8:	6828      	ldr	r0, [r5, #0]
 80156da:	6803      	ldr	r3, [r0, #0]
 80156dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80156de:	4798      	blx	r3
 80156e0:	f7f8 ff86 	bl	800e5f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80156e4:	6828      	ldr	r0, [r5, #0]
 80156e6:	2101      	movs	r1, #1
 80156e8:	f7ff ff50 	bl	801558c <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 80156ec:	6860      	ldr	r0, [r4, #4]
 80156ee:	4631      	mov	r1, r6
 80156f0:	6803      	ldr	r3, [r0, #0]
 80156f2:	689b      	ldr	r3, [r3, #8]
 80156f4:	4798      	blx	r3
 80156f6:	6823      	ldr	r3, [r4, #0]
 80156f8:	4620      	mov	r0, r4
 80156fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156fc:	4798      	blx	r3
 80156fe:	6828      	ldr	r0, [r5, #0]
 8015700:	6803      	ldr	r3, [r0, #0]
 8015702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015708:	4718      	bx	r3
 801570a:	bf00      	nop
 801570c:	20001ca0 	.word	0x20001ca0

08015710 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015710:	b508      	push	{r3, lr}
 8015712:	f7f8 ff4b 	bl	800e5ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801571a:	f7f8 bf5d 	b.w	800e5d8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801571e <_ZN8touchgfx13DMA_Interface5startEv>:
 801571e:	b510      	push	{r4, lr}
 8015720:	4604      	mov	r4, r0
 8015722:	6840      	ldr	r0, [r0, #4]
 8015724:	6803      	ldr	r3, [r0, #0]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	4798      	blx	r3
 801572a:	b948      	cbnz	r0, 8015740 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801572c:	7a63      	ldrb	r3, [r4, #9]
 801572e:	b13b      	cbz	r3, 8015740 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015730:	7a23      	ldrb	r3, [r4, #8]
 8015732:	b92b      	cbnz	r3, 8015740 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015734:	6823      	ldr	r3, [r4, #0]
 8015736:	4620      	mov	r0, r4
 8015738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801573a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801573e:	4718      	bx	r3
 8015740:	bd10      	pop	{r4, pc}
	...

08015744 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015744:	b510      	push	{r4, lr}
 8015746:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801574a:	1b12      	subs	r2, r2, r4
 801574c:	2a00      	cmp	r2, #0
 801574e:	bfdc      	itt	le
 8015750:	6883      	ldrle	r3, [r0, #8]
 8015752:	18d2      	addle	r2, r2, r3
 8015754:	2a01      	cmp	r2, #1
 8015756:	dd18      	ble.n	801578a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8015758:	6843      	ldr	r3, [r0, #4]
 801575a:	f101 021c 	add.w	r2, r1, #28
 801575e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8015762:	f851 4b04 	ldr.w	r4, [r1], #4
 8015766:	4291      	cmp	r1, r2
 8015768:	f843 4b04 	str.w	r4, [r3], #4
 801576c:	d1f9      	bne.n	8015762 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801576e:	880a      	ldrh	r2, [r1, #0]
 8015770:	801a      	strh	r2, [r3, #0]
 8015772:	788a      	ldrb	r2, [r1, #2]
 8015774:	709a      	strb	r2, [r3, #2]
 8015776:	68c3      	ldr	r3, [r0, #12]
 8015778:	6882      	ldr	r2, [r0, #8]
 801577a:	f3bf 8f5b 	dmb	ish
 801577e:	3301      	adds	r3, #1
 8015780:	429a      	cmp	r2, r3
 8015782:	bfd8      	it	le
 8015784:	1a9b      	suble	r3, r3, r2
 8015786:	60c3      	str	r3, [r0, #12]
 8015788:	bd10      	pop	{r4, pc}
 801578a:	4b03      	ldr	r3, [pc, #12]	; (8015798 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801578c:	2139      	movs	r1, #57	; 0x39
 801578e:	4a03      	ldr	r2, [pc, #12]	; (801579c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8015790:	4803      	ldr	r0, [pc, #12]	; (80157a0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8015792:	f004 f9d3 	bl	8019b3c <__assert_func>
 8015796:	bf00      	nop
 8015798:	0801cee0 	.word	0x0801cee0
 801579c:	0801cfd4 	.word	0x0801cfd4
 80157a0:	0801ceba 	.word	0x0801ceba

080157a4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80157a4:	b510      	push	{r4, lr}
 80157a6:	6803      	ldr	r3, [r0, #0]
 80157a8:	4604      	mov	r4, r0
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	4798      	blx	r3
 80157ae:	b128      	cbz	r0, 80157bc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80157b0:	4b07      	ldr	r3, [pc, #28]	; (80157d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80157b2:	213f      	movs	r1, #63	; 0x3f
 80157b4:	4a07      	ldr	r2, [pc, #28]	; (80157d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80157b6:	4808      	ldr	r0, [pc, #32]	; (80157d8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80157b8:	f004 f9c0 	bl	8019b3c <__assert_func>
 80157bc:	6923      	ldr	r3, [r4, #16]
 80157be:	68a2      	ldr	r2, [r4, #8]
 80157c0:	f3bf 8f5b 	dmb	ish
 80157c4:	3301      	adds	r3, #1
 80157c6:	429a      	cmp	r2, r3
 80157c8:	bfd8      	it	le
 80157ca:	1a9b      	suble	r3, r3, r2
 80157cc:	6123      	str	r3, [r4, #16]
 80157ce:	bd10      	pop	{r4, pc}
 80157d0:	0801cf03 	.word	0x0801cf03
 80157d4:	0801d022 	.word	0x0801d022
 80157d8:	0801ceba 	.word	0x0801ceba

080157dc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80157dc:	b570      	push	{r4, r5, r6, lr}
 80157de:	4604      	mov	r4, r0
 80157e0:	6840      	ldr	r0, [r0, #4]
 80157e2:	6803      	ldr	r3, [r0, #0]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	4798      	blx	r3
 80157e8:	4605      	mov	r5, r0
 80157ea:	b930      	cbnz	r0, 80157fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80157ec:	7a23      	ldrb	r3, [r4, #8]
 80157ee:	b123      	cbz	r3, 80157fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80157f0:	6860      	ldr	r0, [r4, #4]
 80157f2:	6803      	ldr	r3, [r0, #0]
 80157f4:	695b      	ldr	r3, [r3, #20]
 80157f6:	4798      	blx	r3
 80157f8:	7225      	strb	r5, [r4, #8]
 80157fa:	6860      	ldr	r0, [r4, #4]
 80157fc:	6803      	ldr	r3, [r0, #0]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	4798      	blx	r3
 8015802:	b928      	cbnz	r0, 8015810 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015804:	6823      	ldr	r3, [r4, #0]
 8015806:	4620      	mov	r0, r4
 8015808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801580a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801580e:	4718      	bx	r3
 8015810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015814:	f7f8 bef8 	b.w	800e608 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015818 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015818:	b510      	push	{r4, lr}
 801581a:	6082      	str	r2, [r0, #8]
 801581c:	2200      	movs	r2, #0
 801581e:	4c03      	ldr	r4, [pc, #12]	; (801582c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015820:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015824:	e9c0 4100 	strd	r4, r1, [r0]
 8015828:	bd10      	pop	{r4, pc}
 801582a:	bf00      	nop
 801582c:	0801cf88 	.word	0x0801cf88

08015830 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015830:	6840      	ldr	r0, [r0, #4]
 8015832:	6803      	ldr	r3, [r0, #0]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	4718      	bx	r3

08015838 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801583c:	4696      	mov	lr, r2
 801583e:	b097      	sub	sp, #92	; 0x5c
 8015840:	4605      	mov	r5, r0
 8015842:	4614      	mov	r4, r2
 8015844:	460e      	mov	r6, r1
 8015846:	461f      	mov	r7, r3
 8015848:	f10d 0c1c 	add.w	ip, sp, #28
 801584c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8015850:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8015854:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8015858:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801585c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015860:	f8de 3000 	ldr.w	r3, [lr]
 8015864:	f104 0e14 	add.w	lr, r4, #20
 8015868:	f8cc 3000 	str.w	r3, [ip]
 801586c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015870:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015874:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015878:	f8de 3000 	ldr.w	r3, [lr]
 801587c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8015880:	f8cc 3000 	str.w	r3, [ip]
 8015884:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015888:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801588c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015890:	f8de 3000 	ldr.w	r3, [lr]
 8015894:	4631      	mov	r1, r6
 8015896:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015898:	4628      	mov	r0, r5
 801589a:	f8cc 3000 	str.w	r3, [ip]
 801589e:	682b      	ldr	r3, [r5, #0]
 80158a0:	9201      	str	r2, [sp, #4]
 80158a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80158a4:	f8cd 8008 	str.w	r8, [sp, #8]
 80158a8:	9200      	str	r2, [sp, #0]
 80158aa:	aa07      	add	r2, sp, #28
 80158ac:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80158b0:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 80158b4:	463b      	mov	r3, r7
 80158b6:	47d8      	blx	fp
 80158b8:	46a6      	mov	lr, r4
 80158ba:	f10d 0c1c 	add.w	ip, sp, #28
 80158be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158c6:	f8de 3000 	ldr.w	r3, [lr]
 80158ca:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80158ce:	343c      	adds	r4, #60	; 0x3c
 80158d0:	f8cc 3000 	str.w	r3, [ip]
 80158d4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80158d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158e0:	f8de 3000 	ldr.w	r3, [lr]
 80158e4:	f8cc 3000 	str.w	r3, [ip]
 80158e8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80158ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158f2:	6823      	ldr	r3, [r4, #0]
 80158f4:	4631      	mov	r1, r6
 80158f6:	4628      	mov	r0, r5
 80158f8:	f8cc 3000 	str.w	r3, [ip]
 80158fc:	682b      	ldr	r3, [r5, #0]
 80158fe:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015902:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015904:	f8cd 8008 	str.w	r8, [sp, #8]
 8015908:	9201      	str	r2, [sp, #4]
 801590a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801590c:	9200      	str	r2, [sp, #0]
 801590e:	aa07      	add	r2, sp, #28
 8015910:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8015912:	463b      	mov	r3, r7
 8015914:	47a0      	blx	r4
 8015916:	b017      	add	sp, #92	; 0x5c
 8015918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801591c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801591c:	2000      	movs	r0, #0
 801591e:	4770      	bx	lr

08015920 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8015920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015924:	b08d      	sub	sp, #52	; 0x34
 8015926:	4688      	mov	r8, r1
 8015928:	f8d3 c000 	ldr.w	ip, [r3]
 801592c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801592e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8015932:	680f      	ldr	r7, [r1, #0]
 8015934:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8015938:	eba7 070c 	sub.w	r7, r7, ip
 801593c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8015940:	edd3 6a07 	vldr	s13, [r3, #28]
 8015944:	42bc      	cmp	r4, r7
 8015946:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015948:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801594c:	bfa8      	it	ge
 801594e:	463c      	movge	r4, r7
 8015950:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015954:	f9ba 1000 	ldrsh.w	r1, [sl]
 8015958:	ee07 4a90 	vmov	s15, r4
 801595c:	eb09 0e0c 	add.w	lr, r9, ip
 8015960:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8015964:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015968:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801596c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8015970:	4571      	cmp	r1, lr
 8015972:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015976:	ee65 4a24 	vmul.f32	s9, s10, s9
 801597a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801597e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015982:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8015986:	ee32 1a05 	vadd.f32	s2, s4, s10
 801598a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801598e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8015992:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015996:	ee22 2a07 	vmul.f32	s4, s4, s14
 801599a:	f340 808c 	ble.w	8015ab6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801599e:	eba1 060e 	sub.w	r6, r1, lr
 80159a2:	fb96 f5f4 	sdiv	r5, r6, r4
 80159a6:	ee07 5a10 	vmov	s14, r5
 80159aa:	2d00      	cmp	r5, #0
 80159ac:	fb04 6615 	mls	r6, r4, r5, r6
 80159b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80159b4:	eea7 0a04 	vfma.f32	s0, s14, s8
 80159b8:	eee7 0a24 	vfma.f32	s1, s14, s9
 80159bc:	eea7 1a05 	vfma.f32	s2, s14, s10
 80159c0:	dd12      	ble.n	80159e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80159c2:	ee70 6a44 	vsub.f32	s13, s0, s8
 80159c6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80159ca:	ee31 2a45 	vsub.f32	s4, s2, s10
 80159ce:	eef5 6a40 	vcmp.f32	s13, #0.0
 80159d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159d6:	bf14      	ite	ne
 80159d8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80159dc:	eeb0 7a67 	vmoveq.f32	s14, s15
 80159e0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80159e4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80159e8:	fb05 f204 	mul.w	r2, r5, r4
 80159ec:	1abf      	subs	r7, r7, r2
 80159ee:	4494      	add	ip, r2
 80159f0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80159f4:	4411      	add	r1, r2
 80159f6:	eb09 020c 	add.w	r2, r9, ip
 80159fa:	b209      	sxth	r1, r1
 80159fc:	443a      	add	r2, r7
 80159fe:	428a      	cmp	r2, r1
 8015a00:	bfc4      	itt	gt
 8015a02:	eba1 0209 	subgt.w	r2, r1, r9
 8015a06:	eba2 070c 	subgt.w	r7, r2, ip
 8015a0a:	2f00      	cmp	r7, #0
 8015a0c:	dd50      	ble.n	8015ab0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8015a0e:	fb97 f1f4 	sdiv	r1, r7, r4
 8015a12:	fb04 7211 	mls	r2, r4, r1, r7
 8015a16:	b90a      	cbnz	r2, 8015a1c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8015a18:	3901      	subs	r1, #1
 8015a1a:	4622      	mov	r2, r4
 8015a1c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015a20:	6840      	ldr	r0, [r0, #4]
 8015a22:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8015a26:	44b6      	add	lr, r6
 8015a28:	f8d0 a000 	ldr.w	sl, [r0]
 8015a2c:	2900      	cmp	r1, #0
 8015a2e:	bfcc      	ite	gt
 8015a30:	46a1      	movgt	r9, r4
 8015a32:	4691      	movle	r9, r2
 8015a34:	900b      	str	r0, [sp, #44]	; 0x2c
 8015a36:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015a38:	fb04 e505 	mla	r5, r4, r5, lr
 8015a3c:	eef0 6a42 	vmov.f32	s13, s4
 8015a40:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015a44:	9008      	str	r0, [sp, #32]
 8015a46:	eeb0 7a61 	vmov.f32	s14, s3
 8015a4a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015a4c:	695b      	ldr	r3, [r3, #20]
 8015a4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015a52:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8015a56:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015a5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015a5c:	445b      	add	r3, fp
 8015a5e:	9307      	str	r3, [sp, #28]
 8015a60:	ee16 3a90 	vmov	r3, s13
 8015a64:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8015a68:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015a6c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015a70:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015a74:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015a78:	ee17 7a90 	vmov	r7, s15
 8015a7c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015a80:	fb97 f7f4 	sdiv	r7, r7, r4
 8015a84:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015a88:	ee17 ca90 	vmov	ip, s15
 8015a8c:	fb9c fcf4 	sdiv	ip, ip, r4
 8015a90:	fb0c 3306 	mla	r3, ip, r6, r3
 8015a94:	9302      	str	r3, [sp, #8]
 8015a96:	ee17 3a10 	vmov	r3, s14
 8015a9a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015a9e:	fb07 3706 	mla	r7, r7, r6, r3
 8015aa2:	eba9 0306 	sub.w	r3, r9, r6
 8015aa6:	e9cd 4700 	strd	r4, r7, [sp]
 8015aaa:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015aae:	47a0      	blx	r4
 8015ab0:	b00d      	add	sp, #52	; 0x34
 8015ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ab6:	2500      	movs	r5, #0
 8015ab8:	462e      	mov	r6, r5
 8015aba:	e799      	b.n	80159f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015abc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac0:	b0db      	sub	sp, #364	; 0x16c
 8015ac2:	461d      	mov	r5, r3
 8015ac4:	4614      	mov	r4, r2
 8015ac6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8015aca:	910f      	str	r1, [sp, #60]	; 0x3c
 8015acc:	4629      	mov	r1, r5
 8015ace:	930a      	str	r3, [sp, #40]	; 0x28
 8015ad0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8015ad4:	9009      	str	r0, [sp, #36]	; 0x24
 8015ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ad8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8015adc:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8015ae0:	9310      	str	r3, [sp, #64]	; 0x40
 8015ae2:	6803      	ldr	r3, [r0, #0]
 8015ae4:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8015ae6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015aea:	47b8      	blx	r7
 8015aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aee:	6058      	str	r0, [r3, #4]
 8015af0:	2800      	cmp	r0, #0
 8015af2:	f000 83a1 	beq.w	8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015af6:	682b      	ldr	r3, [r5, #0]
 8015af8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015afc:	ed94 7a02 	vldr	s14, [r4, #8]
 8015b00:	9314      	str	r3, [sp, #80]	; 0x50
 8015b02:	686b      	ldr	r3, [r5, #4]
 8015b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b08:	9315      	str	r3, [sp, #84]	; 0x54
 8015b0a:	4bc1      	ldr	r3, [pc, #772]	; (8015e10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015b0c:	7819      	ldrb	r1, [r3, #0]
 8015b0e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015b12:	2900      	cmp	r1, #0
 8015b14:	bf16      	itet	ne
 8015b16:	4619      	movne	r1, r3
 8015b18:	4611      	moveq	r1, r2
 8015b1a:	4613      	movne	r3, r2
 8015b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b20:	9116      	str	r1, [sp, #88]	; 0x58
 8015b22:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8015b26:	f240 8387 	bls.w	8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b2a:	ed94 7a07 	vldr	s14, [r4, #28]
 8015b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b36:	f240 837f 	bls.w	8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b3a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8015b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b46:	f240 8377 	bls.w	8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b4a:	6822      	ldr	r2, [r4, #0]
 8015b4c:	4bb1      	ldr	r3, [pc, #708]	; (8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	f2c0 8372 	blt.w	8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b54:	49b0      	ldr	r1, [pc, #704]	; (8015e18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8015b56:	6963      	ldr	r3, [r4, #20]
 8015b58:	428a      	cmp	r2, r1
 8015b5a:	f300 836d 	bgt.w	8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b5e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015b62:	48ae      	ldr	r0, [pc, #696]	; (8015e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015b64:	33ff      	adds	r3, #255	; 0xff
 8015b66:	4283      	cmp	r3, r0
 8015b68:	f200 8366 	bhi.w	8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015b6e:	4dac      	ldr	r5, [pc, #688]	; (8015e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015b70:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015b74:	33ff      	adds	r3, #255	; 0xff
 8015b76:	42ab      	cmp	r3, r5
 8015b78:	f200 835e 	bhi.w	8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b7c:	6862      	ldr	r2, [r4, #4]
 8015b7e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8015b82:	33ff      	adds	r3, #255	; 0xff
 8015b84:	4283      	cmp	r3, r0
 8015b86:	f200 8357 	bhi.w	8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b8a:	69a1      	ldr	r1, [r4, #24]
 8015b8c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8015b90:	33ff      	adds	r3, #255	; 0xff
 8015b92:	4283      	cmp	r3, r0
 8015b94:	f200 8350 	bhi.w	8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015b9a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8015b9e:	30ff      	adds	r0, #255	; 0xff
 8015ba0:	42a8      	cmp	r0, r5
 8015ba2:	f200 8349 	bhi.w	8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015ba6:	428a      	cmp	r2, r1
 8015ba8:	f280 8110 	bge.w	8015dcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015bac:	429a      	cmp	r2, r3
 8015bae:	f300 8119 	bgt.w	8015de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8015bb2:	4299      	cmp	r1, r3
 8015bb4:	f280 811d 	bge.w	8015df2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8015bb8:	2502      	movs	r5, #2
 8015bba:	2701      	movs	r7, #1
 8015bbc:	46a9      	mov	r9, r5
 8015bbe:	46b8      	mov	r8, r7
 8015bc0:	f04f 0a00 	mov.w	sl, #0
 8015bc4:	4621      	mov	r1, r4
 8015bc6:	a849      	add	r0, sp, #292	; 0x124
 8015bc8:	f001 fc06 	bl	80173d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015bcc:	4622      	mov	r2, r4
 8015bce:	4653      	mov	r3, sl
 8015bd0:	a949      	add	r1, sp, #292	; 0x124
 8015bd2:	f8cd 9000 	str.w	r9, [sp]
 8015bd6:	a819      	add	r0, sp, #100	; 0x64
 8015bd8:	f001 fd2e 	bl	8017638 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015bdc:	4622      	mov	r2, r4
 8015bde:	4653      	mov	r3, sl
 8015be0:	a949      	add	r1, sp, #292	; 0x124
 8015be2:	f8cd 8000 	str.w	r8, [sp]
 8015be6:	a829      	add	r0, sp, #164	; 0xa4
 8015be8:	f001 fd26 	bl	8017638 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015bec:	4643      	mov	r3, r8
 8015bee:	4622      	mov	r2, r4
 8015bf0:	a949      	add	r1, sp, #292	; 0x124
 8015bf2:	f8cd 9000 	str.w	r9, [sp]
 8015bf6:	a839      	add	r0, sp, #228	; 0xe4
 8015bf8:	f001 fd1e 	bl	8017638 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015bfc:	42af      	cmp	r7, r5
 8015bfe:	af12      	add	r7, sp, #72	; 0x48
 8015c00:	bfb7      	itett	lt
 8015c02:	2300      	movlt	r3, #0
 8015c04:	2301      	movge	r3, #1
 8015c06:	ad29      	addlt	r5, sp, #164	; 0xa4
 8015c08:	ac19      	addlt	r4, sp, #100	; 0x64
 8015c0a:	bfb1      	iteee	lt
 8015c0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015c0e:	ad19      	addge	r5, sp, #100	; 0x64
 8015c10:	930e      	strge	r3, [sp, #56]	; 0x38
 8015c12:	ac29      	addge	r4, sp, #164	; 0xa4
 8015c14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015c1a:	e887 0003 	stmia.w	r7, {r0, r1}
 8015c1e:	b928      	cbnz	r0, 8015c2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015c20:	4b80      	ldr	r3, [pc, #512]	; (8015e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015c22:	6818      	ldr	r0, [r3, #0]
 8015c24:	6803      	ldr	r3, [r0, #0]
 8015c26:	6a1b      	ldr	r3, [r3, #32]
 8015c28:	4798      	blx	r3
 8015c2a:	6038      	str	r0, [r7, #0]
 8015c2c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015c2e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015c32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015c36:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015c38:	930c      	str	r3, [sp, #48]	; 0x30
 8015c3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015c3c:	6963      	ldr	r3, [r4, #20]
 8015c3e:	440b      	add	r3, r1
 8015c40:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015c44:	4408      	add	r0, r1
 8015c46:	b200      	sxth	r0, r0
 8015c48:	4283      	cmp	r3, r0
 8015c4a:	900d      	str	r0, [sp, #52]	; 0x34
 8015c4c:	f280 80dd 	bge.w	8015e0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015c50:	428b      	cmp	r3, r1
 8015c52:	da08      	bge.n	8015c66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015c54:	2a00      	cmp	r2, #0
 8015c56:	dd06      	ble.n	8015c66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015c58:	1acb      	subs	r3, r1, r3
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	f2c0 80e4 	blt.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	f300 80e2 	bgt.w	8015e2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8015c66:	6967      	ldr	r7, [r4, #20]
 8015c68:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c6e:	443b      	add	r3, r7
 8015c70:	461f      	mov	r7, r3
 8015c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c74:	1bdf      	subs	r7, r3, r7
 8015c76:	4297      	cmp	r7, r2
 8015c78:	bfa8      	it	ge
 8015c7a:	4617      	movge	r7, r2
 8015c7c:	2f00      	cmp	r7, #0
 8015c7e:	f340 8166 	ble.w	8015f4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8015c82:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015c84:	6829      	ldr	r1, [r5, #0]
 8015c86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015c8a:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015c8e:	4411      	add	r1, r2
 8015c90:	6820      	ldr	r0, [r4, #0]
 8015c92:	4299      	cmp	r1, r3
 8015c94:	dd1a      	ble.n	8015ccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015c96:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015c9a:	4402      	add	r2, r0
 8015c9c:	440b      	add	r3, r1
 8015c9e:	b21b      	sxth	r3, r3
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	dc13      	bgt.n	8015ccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015ca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015ca6:	a912      	add	r1, sp, #72	; 0x48
 8015ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015caa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	9206      	str	r2, [sp, #24]
 8015cb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015cb2:	9500      	str	r5, [sp, #0]
 8015cb4:	9205      	str	r2, [sp, #20]
 8015cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015cb8:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015cbc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015cbe:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015cc2:	aa49      	add	r2, sp, #292	; 0x124
 8015cc4:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8015cc8:	4623      	mov	r3, r4
 8015cca:	47c8      	blx	r9
 8015ccc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8015cd0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8015cd4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8015cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015cdc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8015ce0:	68a1      	ldr	r1, [r4, #8]
 8015ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015ce6:	ed94 6a08 	vldr	s12, [r4, #32]
 8015cea:	edd4 6a07 	vldr	s13, [r4, #28]
 8015cee:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015cf2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015cf6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015cfa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015cfe:	edc4 6a07 	vstr	s13, [r4, #28]
 8015d02:	441a      	add	r2, r3
 8015d04:	6963      	ldr	r3, [r4, #20]
 8015d06:	3301      	adds	r3, #1
 8015d08:	6022      	str	r2, [r4, #0]
 8015d0a:	6163      	str	r3, [r4, #20]
 8015d0c:	69a3      	ldr	r3, [r4, #24]
 8015d0e:	3b01      	subs	r3, #1
 8015d10:	61a3      	str	r3, [r4, #24]
 8015d12:	6923      	ldr	r3, [r4, #16]
 8015d14:	440b      	add	r3, r1
 8015d16:	68e1      	ldr	r1, [r4, #12]
 8015d18:	428b      	cmp	r3, r1
 8015d1a:	6123      	str	r3, [r4, #16]
 8015d1c:	db15      	blt.n	8015d4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015d1e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8015d22:	3201      	adds	r2, #1
 8015d24:	1a5b      	subs	r3, r3, r1
 8015d26:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015d2a:	6022      	str	r2, [r4, #0]
 8015d2c:	6123      	str	r3, [r4, #16]
 8015d2e:	edc4 6a07 	vstr	s13, [r4, #28]
 8015d32:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8015d36:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015d3a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015d3e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d46:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015d4a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8015d4e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015d52:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8015d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015d5a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8015d5e:	68a9      	ldr	r1, [r5, #8]
 8015d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d64:	ed95 6a08 	vldr	s12, [r5, #32]
 8015d68:	edd5 6a07 	vldr	s13, [r5, #28]
 8015d6c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015d70:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015d74:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015d78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015d7c:	edc5 6a07 	vstr	s13, [r5, #28]
 8015d80:	441a      	add	r2, r3
 8015d82:	696b      	ldr	r3, [r5, #20]
 8015d84:	3301      	adds	r3, #1
 8015d86:	602a      	str	r2, [r5, #0]
 8015d88:	616b      	str	r3, [r5, #20]
 8015d8a:	69ab      	ldr	r3, [r5, #24]
 8015d8c:	3b01      	subs	r3, #1
 8015d8e:	61ab      	str	r3, [r5, #24]
 8015d90:	692b      	ldr	r3, [r5, #16]
 8015d92:	440b      	add	r3, r1
 8015d94:	68e9      	ldr	r1, [r5, #12]
 8015d96:	428b      	cmp	r3, r1
 8015d98:	612b      	str	r3, [r5, #16]
 8015d9a:	db15      	blt.n	8015dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015d9c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8015da0:	3201      	adds	r2, #1
 8015da2:	1a5b      	subs	r3, r3, r1
 8015da4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015da8:	602a      	str	r2, [r5, #0]
 8015daa:	612b      	str	r3, [r5, #16]
 8015dac:	edc5 6a07 	vstr	s13, [r5, #28]
 8015db0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015db4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015db8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015dbc:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8015dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015dc4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015dc8:	3f01      	subs	r7, #1
 8015dca:	e757      	b.n	8015c7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015dcc:	4299      	cmp	r1, r3
 8015dce:	dc13      	bgt.n	8015df8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	da14      	bge.n	8015dfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8015dd4:	2502      	movs	r5, #2
 8015dd6:	2703      	movs	r7, #3
 8015dd8:	f04f 0800 	mov.w	r8, #0
 8015ddc:	46a9      	mov	r9, r5
 8015dde:	f04f 0a01 	mov.w	sl, #1
 8015de2:	e6ef      	b.n	8015bc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015de4:	2501      	movs	r5, #1
 8015de6:	2700      	movs	r7, #0
 8015de8:	46a9      	mov	r9, r5
 8015dea:	46b8      	mov	r8, r7
 8015dec:	f04f 0a02 	mov.w	sl, #2
 8015df0:	e6e8      	b.n	8015bc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015df2:	2501      	movs	r5, #1
 8015df4:	2702      	movs	r7, #2
 8015df6:	e6e1      	b.n	8015bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8015df8:	2500      	movs	r5, #0
 8015dfa:	2701      	movs	r7, #1
 8015dfc:	e7f4      	b.n	8015de8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015dfe:	2702      	movs	r7, #2
 8015e00:	2503      	movs	r5, #3
 8015e02:	f04f 0900 	mov.w	r9, #0
 8015e06:	46b8      	mov	r8, r7
 8015e08:	e7e9      	b.n	8015dde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015e0a:	4613      	mov	r3, r2
 8015e0c:	e728      	b.n	8015c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015e0e:	bf00      	nop
 8015e10:	20001c96 	.word	0x20001c96
 8015e14:	fffd8f01 	.word	0xfffd8f01
 8015e18:	00027100 	.word	0x00027100
 8015e1c:	0004e1ff 	.word	0x0004e1ff
 8015e20:	0004e1fe 	.word	0x0004e1fe
 8015e24:	20001ca0 	.word	0x20001ca0
 8015e28:	4613      	mov	r3, r2
 8015e2a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015e2c:	469e      	mov	lr, r3
 8015e2e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8015e30:	469c      	mov	ip, r3
 8015e32:	9111      	str	r1, [sp, #68]	; 0x44
 8015e34:	f04f 0900 	mov.w	r9, #0
 8015e38:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8015e3c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8015e40:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8015e44:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8015e48:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8015e4c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8015e50:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8015e54:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8015e58:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8015e5c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8015e60:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8015e64:	f1bc 0f00 	cmp.w	ip, #0
 8015e68:	d147      	bne.n	8015efa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015e6a:	eb03 0c07 	add.w	ip, r3, r7
 8015e6e:	1ad7      	subs	r7, r2, r3
 8015e70:	f1b9 0f00 	cmp.w	r9, #0
 8015e74:	d009      	beq.n	8015e8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8015e76:	9029      	str	r0, [sp, #164]	; 0xa4
 8015e78:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8015e7c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8015e80:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8015e84:	912d      	str	r1, [sp, #180]	; 0xb4
 8015e86:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8015e8a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015e8c:	f04f 0800 	mov.w	r8, #0
 8015e90:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015e94:	9111      	str	r1, [sp, #68]	; 0x44
 8015e96:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8015e9a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8015e9e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015ea2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8015ea6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8015eaa:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8015eae:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8015eb2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8015eb6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8015eba:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8015ebe:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8015ec2:	f1be 0f00 	cmp.w	lr, #0
 8015ec6:	d031      	beq.n	8015f2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015ec8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015eca:	4450      	add	r0, sl
 8015ecc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015ed0:	4431      	add	r1, r6
 8015ed2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015ed6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015eda:	4549      	cmp	r1, r9
 8015edc:	db08      	blt.n	8015ef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015ede:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015ee2:	3001      	adds	r0, #1
 8015ee4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015ee8:	eba1 0109 	sub.w	r1, r1, r9
 8015eec:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015ef0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015ef4:	f04f 0801 	mov.w	r8, #1
 8015ef8:	e7e3      	b.n	8015ec2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015efa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015efc:	4450      	add	r0, sl
 8015efe:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015f02:	4431      	add	r1, r6
 8015f04:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015f08:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015f0c:	4541      	cmp	r1, r8
 8015f0e:	db08      	blt.n	8015f22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015f10:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015f14:	3001      	adds	r0, #1
 8015f16:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015f1a:	eba1 0108 	sub.w	r1, r1, r8
 8015f1e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015f22:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015f26:	f04f 0901 	mov.w	r9, #1
 8015f2a:	e79b      	b.n	8015e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015f2c:	449c      	add	ip, r3
 8015f2e:	1aff      	subs	r7, r7, r3
 8015f30:	f1b8 0f00 	cmp.w	r8, #0
 8015f34:	d009      	beq.n	8015f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8015f36:	9019      	str	r0, [sp, #100]	; 0x64
 8015f38:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015f3c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015f40:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015f44:	911d      	str	r1, [sp, #116]	; 0x74
 8015f46:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015f4a:	1ad2      	subs	r2, r2, r3
 8015f4c:	e68b      	b.n	8015c66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f50:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	f000 80d1 	beq.w	80160fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015f58:	ad19      	add	r5, sp, #100	; 0x64
 8015f5a:	ac39      	add	r4, sp, #228	; 0xe4
 8015f5c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015f5e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015f62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015f66:	930c      	str	r3, [sp, #48]	; 0x30
 8015f68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015f6a:	6963      	ldr	r3, [r4, #20]
 8015f6c:	440b      	add	r3, r1
 8015f6e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015f72:	4408      	add	r0, r1
 8015f74:	b200      	sxth	r0, r0
 8015f76:	4283      	cmp	r3, r0
 8015f78:	900d      	str	r0, [sp, #52]	; 0x34
 8015f7a:	f280 80c1 	bge.w	8016100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8015f7e:	428b      	cmp	r3, r1
 8015f80:	da08      	bge.n	8015f94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015f82:	2a00      	cmp	r2, #0
 8015f84:	dd06      	ble.n	8015f94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015f86:	1acb      	subs	r3, r1, r3
 8015f88:	429a      	cmp	r2, r3
 8015f8a:	f2c0 80bb 	blt.w	8016104 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	f300 80b9 	bgt.w	8016106 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8015f94:	6967      	ldr	r7, [r4, #20]
 8015f96:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f9c:	443b      	add	r3, r7
 8015f9e:	461f      	mov	r7, r3
 8015fa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fa2:	1bdf      	subs	r7, r3, r7
 8015fa4:	4297      	cmp	r7, r2
 8015fa6:	bfa8      	it	ge
 8015fa8:	4617      	movge	r7, r2
 8015faa:	2f00      	cmp	r7, #0
 8015fac:	f340 813c 	ble.w	8016228 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015fb0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015fb2:	6829      	ldr	r1, [r5, #0]
 8015fb4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015fb8:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015fbc:	4411      	add	r1, r2
 8015fbe:	6820      	ldr	r0, [r4, #0]
 8015fc0:	4299      	cmp	r1, r3
 8015fc2:	dd1a      	ble.n	8015ffa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015fc4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015fc8:	4402      	add	r2, r0
 8015fca:	440b      	add	r3, r1
 8015fcc:	b21b      	sxth	r3, r3
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	dc13      	bgt.n	8015ffa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015fd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015fd4:	a912      	add	r1, sp, #72	; 0x48
 8015fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	9206      	str	r2, [sp, #24]
 8015fde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015fe0:	9500      	str	r5, [sp, #0]
 8015fe2:	9205      	str	r2, [sp, #20]
 8015fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fe6:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015fea:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015fec:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015ff0:	aa49      	add	r2, sp, #292	; 0x124
 8015ff2:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8015ff6:	4623      	mov	r3, r4
 8015ff8:	47c8      	blx	r9
 8015ffa:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8015ffe:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016002:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016006:	ee37 7a27 	vadd.f32	s14, s14, s15
 801600a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801600e:	68a1      	ldr	r1, [r4, #8]
 8016010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016014:	ed94 6a08 	vldr	s12, [r4, #32]
 8016018:	edd4 6a07 	vldr	s13, [r4, #28]
 801601c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016020:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016024:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016028:	e9d4 2300 	ldrd	r2, r3, [r4]
 801602c:	edc4 6a07 	vstr	s13, [r4, #28]
 8016030:	441a      	add	r2, r3
 8016032:	6963      	ldr	r3, [r4, #20]
 8016034:	3301      	adds	r3, #1
 8016036:	6022      	str	r2, [r4, #0]
 8016038:	6163      	str	r3, [r4, #20]
 801603a:	69a3      	ldr	r3, [r4, #24]
 801603c:	3b01      	subs	r3, #1
 801603e:	61a3      	str	r3, [r4, #24]
 8016040:	6923      	ldr	r3, [r4, #16]
 8016042:	440b      	add	r3, r1
 8016044:	68e1      	ldr	r1, [r4, #12]
 8016046:	428b      	cmp	r3, r1
 8016048:	6123      	str	r3, [r4, #16]
 801604a:	db15      	blt.n	8016078 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801604c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016050:	3201      	adds	r2, #1
 8016052:	1a5b      	subs	r3, r3, r1
 8016054:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016058:	6022      	str	r2, [r4, #0]
 801605a:	6123      	str	r3, [r4, #16]
 801605c:	edc4 6a07 	vstr	s13, [r4, #28]
 8016060:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016064:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016068:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801606c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016074:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016078:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801607c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016080:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016084:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016088:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801608c:	68a9      	ldr	r1, [r5, #8]
 801608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016092:	ed95 6a08 	vldr	s12, [r5, #32]
 8016096:	edd5 6a07 	vldr	s13, [r5, #28]
 801609a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801609e:	ee76 6a86 	vadd.f32	s13, s13, s12
 80160a2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80160a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80160aa:	edc5 6a07 	vstr	s13, [r5, #28]
 80160ae:	441a      	add	r2, r3
 80160b0:	696b      	ldr	r3, [r5, #20]
 80160b2:	3301      	adds	r3, #1
 80160b4:	602a      	str	r2, [r5, #0]
 80160b6:	616b      	str	r3, [r5, #20]
 80160b8:	69ab      	ldr	r3, [r5, #24]
 80160ba:	3b01      	subs	r3, #1
 80160bc:	61ab      	str	r3, [r5, #24]
 80160be:	692b      	ldr	r3, [r5, #16]
 80160c0:	440b      	add	r3, r1
 80160c2:	68e9      	ldr	r1, [r5, #12]
 80160c4:	428b      	cmp	r3, r1
 80160c6:	612b      	str	r3, [r5, #16]
 80160c8:	db15      	blt.n	80160f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80160ca:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80160ce:	3201      	adds	r2, #1
 80160d0:	1a5b      	subs	r3, r3, r1
 80160d2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80160d6:	602a      	str	r2, [r5, #0]
 80160d8:	612b      	str	r3, [r5, #16]
 80160da:	edc5 6a07 	vstr	s13, [r5, #28]
 80160de:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80160e2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80160e6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80160ea:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80160ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160f2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80160f6:	3f01      	subs	r7, #1
 80160f8:	e757      	b.n	8015faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80160fa:	ad39      	add	r5, sp, #228	; 0xe4
 80160fc:	ac19      	add	r4, sp, #100	; 0x64
 80160fe:	e72d      	b.n	8015f5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016100:	4613      	mov	r3, r2
 8016102:	e744      	b.n	8015f8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016104:	4613      	mov	r3, r2
 8016106:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016108:	469e      	mov	lr, r3
 801610a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801610e:	461f      	mov	r7, r3
 8016110:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016114:	f04f 0900 	mov.w	r9, #0
 8016118:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801611c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8016120:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8016124:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8016128:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801612c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801612e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8016132:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8016136:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801613a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801613e:	960e      	str	r6, [sp, #56]	; 0x38
 8016140:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8016144:	2f00      	cmp	r7, #0
 8016146:	d146      	bne.n	80161d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016148:	449c      	add	ip, r3
 801614a:	1ad7      	subs	r7, r2, r3
 801614c:	f1b9 0f00 	cmp.w	r9, #0
 8016150:	d009      	beq.n	8016166 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8016152:	9039      	str	r0, [sp, #228]	; 0xe4
 8016154:	913d      	str	r1, [sp, #244]	; 0xf4
 8016156:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801615a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801615e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8016162:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8016166:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016168:	f04f 0800 	mov.w	r8, #0
 801616c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016170:	910e      	str	r1, [sp, #56]	; 0x38
 8016172:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016176:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801617a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801617e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016182:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016186:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801618a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801618e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016192:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016196:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801619a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801619e:	f1be 0f00 	cmp.w	lr, #0
 80161a2:	d030      	beq.n	8016206 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80161a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80161a6:	4450      	add	r0, sl
 80161a8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80161ac:	4431      	add	r1, r6
 80161ae:	ee37 7a04 	vadd.f32	s14, s14, s8
 80161b2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80161b6:	4549      	cmp	r1, r9
 80161b8:	db08      	blt.n	80161cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80161ba:	ee77 7a85 	vadd.f32	s15, s15, s10
 80161be:	3001      	adds	r0, #1
 80161c0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80161c4:	eba1 0109 	sub.w	r1, r1, r9
 80161c8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80161cc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80161d0:	f04f 0801 	mov.w	r8, #1
 80161d4:	e7e3      	b.n	801619e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80161d6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80161d8:	4450      	add	r0, sl
 80161da:	ee37 7a24 	vadd.f32	s14, s14, s9
 80161de:	4431      	add	r1, r6
 80161e0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80161e4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80161e8:	4541      	cmp	r1, r8
 80161ea:	db08      	blt.n	80161fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80161ec:	ee76 6a85 	vadd.f32	s13, s13, s10
 80161f0:	3001      	adds	r0, #1
 80161f2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80161f6:	eba1 0108 	sub.w	r1, r1, r8
 80161fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80161fe:	3f01      	subs	r7, #1
 8016200:	f04f 0901 	mov.w	r9, #1
 8016204:	e79e      	b.n	8016144 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016206:	449c      	add	ip, r3
 8016208:	1aff      	subs	r7, r7, r3
 801620a:	f1b8 0f00 	cmp.w	r8, #0
 801620e:	d009      	beq.n	8016224 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8016210:	9019      	str	r0, [sp, #100]	; 0x64
 8016212:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016216:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801621a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801621e:	911d      	str	r1, [sp, #116]	; 0x74
 8016220:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016224:	1ad2      	subs	r2, r2, r3
 8016226:	e6b5      	b.n	8015f94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	b923      	cbnz	r3, 8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801622e:	4b04      	ldr	r3, [pc, #16]	; (8016240 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8016230:	6818      	ldr	r0, [r3, #0]
 8016232:	6803      	ldr	r3, [r0, #0]
 8016234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016236:	4798      	blx	r3
 8016238:	b05b      	add	sp, #364	; 0x16c
 801623a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801623e:	bf00      	nop
 8016240:	20001ca0 	.word	0x20001ca0

08016244 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016244:	2b02      	cmp	r3, #2
 8016246:	b510      	push	{r4, lr}
 8016248:	f9b0 4000 	ldrsh.w	r4, [r0]
 801624c:	d00b      	beq.n	8016266 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801624e:	2b03      	cmp	r3, #3
 8016250:	d00e      	beq.n	8016270 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8016252:	2b01      	cmp	r3, #1
 8016254:	d001      	beq.n	801625a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8016256:	1860      	adds	r0, r4, r1
 8016258:	bd10      	pop	{r4, pc}
 801625a:	8880      	ldrh	r0, [r0, #4]
 801625c:	4420      	add	r0, r4
 801625e:	b200      	sxth	r0, r0
 8016260:	1a80      	subs	r0, r0, r2
 8016262:	3801      	subs	r0, #1
 8016264:	e7f8      	b.n	8016258 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8016266:	8880      	ldrh	r0, [r0, #4]
 8016268:	4420      	add	r0, r4
 801626a:	b200      	sxth	r0, r0
 801626c:	1a40      	subs	r0, r0, r1
 801626e:	e7f8      	b.n	8016262 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016270:	18a0      	adds	r0, r4, r2
 8016272:	e7f1      	b.n	8016258 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08016274 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016274:	2b02      	cmp	r3, #2
 8016276:	b510      	push	{r4, lr}
 8016278:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801627c:	d006      	beq.n	801628c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801627e:	2b03      	cmp	r3, #3
 8016280:	d00a      	beq.n	8016298 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016282:	2b01      	cmp	r3, #1
 8016284:	bf14      	ite	ne
 8016286:	18a0      	addne	r0, r4, r2
 8016288:	1860      	addeq	r0, r4, r1
 801628a:	bd10      	pop	{r4, pc}
 801628c:	88c0      	ldrh	r0, [r0, #6]
 801628e:	4420      	add	r0, r4
 8016290:	b200      	sxth	r0, r0
 8016292:	1a80      	subs	r0, r0, r2
 8016294:	3801      	subs	r0, #1
 8016296:	e7f8      	b.n	801628a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8016298:	88c0      	ldrh	r0, [r0, #6]
 801629a:	4420      	add	r0, r4
 801629c:	b200      	sxth	r0, r0
 801629e:	1a40      	subs	r0, r0, r1
 80162a0:	e7f8      	b.n	8016294 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080162a4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80162a4:	4b01      	ldr	r3, [pc, #4]	; (80162ac <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80162a6:	2200      	movs	r2, #0
 80162a8:	601a      	str	r2, [r3, #0]
 80162aa:	4770      	bx	lr
 80162ac:	20001ca8 	.word	0x20001ca8

080162b0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80162b0:	4603      	mov	r3, r0
 80162b2:	b1c8      	cbz	r0, 80162e8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80162b4:	0c02      	lsrs	r2, r0, #16
 80162b6:	0412      	lsls	r2, r2, #16
 80162b8:	b9a2      	cbnz	r2, 80162e4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80162ba:	0403      	lsls	r3, r0, #16
 80162bc:	2010      	movs	r0, #16
 80162be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80162c2:	bf04      	itt	eq
 80162c4:	021b      	lsleq	r3, r3, #8
 80162c6:	3008      	addeq	r0, #8
 80162c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80162cc:	bf04      	itt	eq
 80162ce:	011b      	lsleq	r3, r3, #4
 80162d0:	3004      	addeq	r0, #4
 80162d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80162d6:	bf04      	itt	eq
 80162d8:	009b      	lsleq	r3, r3, #2
 80162da:	3002      	addeq	r0, #2
 80162dc:	2b00      	cmp	r3, #0
 80162de:	db04      	blt.n	80162ea <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80162e0:	3001      	adds	r0, #1
 80162e2:	4770      	bx	lr
 80162e4:	2000      	movs	r0, #0
 80162e6:	e7ea      	b.n	80162be <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80162e8:	2020      	movs	r0, #32
 80162ea:	4770      	bx	lr

080162ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80162ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162f0:	b087      	sub	sp, #28
 80162f2:	4681      	mov	r9, r0
 80162f4:	4698      	mov	r8, r3
 80162f6:	4610      	mov	r0, r2
 80162f8:	460d      	mov	r5, r1
 80162fa:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80162fe:	b981      	cbnz	r1, 8016322 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8016300:	b14b      	cbz	r3, 8016316 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8016302:	460b      	mov	r3, r1
 8016304:	464a      	mov	r2, r9
 8016306:	4641      	mov	r1, r8
 8016308:	e9cd 4700 	strd	r4, r7, [sp]
 801630c:	f7ff ffee 	bl	80162ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016310:	b007      	add	sp, #28
 8016312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016316:	f04f 33ff 	mov.w	r3, #4294967295
 801631a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801631e:	603b      	str	r3, [r7, #0]
 8016320:	e7f6      	b.n	8016310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016322:	fa32 fa01 	lsrs.w	sl, r2, r1
 8016326:	d107      	bne.n	8016338 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8016328:	fb09 f602 	mul.w	r6, r9, r2
 801632c:	fbb6 f0f4 	udiv	r0, r6, r4
 8016330:	fb04 6610 	mls	r6, r4, r0, r6
 8016334:	603e      	str	r6, [r7, #0]
 8016336:	e7eb      	b.n	8016310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016338:	2601      	movs	r6, #1
 801633a:	fa09 fb01 	lsl.w	fp, r9, r1
 801633e:	408e      	lsls	r6, r1
 8016340:	fbbb f3f4 	udiv	r3, fp, r4
 8016344:	3e01      	subs	r6, #1
 8016346:	9302      	str	r3, [sp, #8]
 8016348:	fb0a f303 	mul.w	r3, sl, r3
 801634c:	4016      	ands	r6, r2
 801634e:	9303      	str	r3, [sp, #12]
 8016350:	4630      	mov	r0, r6
 8016352:	f7ff ffad 	bl	80162b0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016356:	464a      	mov	r2, r9
 8016358:	460b      	mov	r3, r1
 801635a:	4601      	mov	r1, r0
 801635c:	4630      	mov	r0, r6
 801635e:	e9cd 4700 	strd	r4, r7, [sp]
 8016362:	f7ff ffc3 	bl	80162ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016366:	9b02      	ldr	r3, [sp, #8]
 8016368:	4606      	mov	r6, r0
 801636a:	eb05 0108 	add.w	r1, r5, r8
 801636e:	fb04 bb13 	mls	fp, r4, r3, fp
 8016372:	4658      	mov	r0, fp
 8016374:	f7ff ff9c 	bl	80162b0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016378:	ab05      	add	r3, sp, #20
 801637a:	465a      	mov	r2, fp
 801637c:	e9cd 4300 	strd	r4, r3, [sp]
 8016380:	4603      	mov	r3, r0
 8016382:	4650      	mov	r0, sl
 8016384:	f7ff ffb2 	bl	80162ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016388:	6839      	ldr	r1, [r7, #0]
 801638a:	9a05      	ldr	r2, [sp, #20]
 801638c:	9b03      	ldr	r3, [sp, #12]
 801638e:	4411      	add	r1, r2
 8016390:	fbb1 f2f4 	udiv	r2, r1, r4
 8016394:	18d3      	adds	r3, r2, r3
 8016396:	fb04 1412 	mls	r4, r4, r2, r1
 801639a:	441e      	add	r6, r3
 801639c:	603c      	str	r4, [r7, #0]
 801639e:	4430      	add	r0, r6
 80163a0:	e7b6      	b.n	8016310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080163a2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80163a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163a6:	b085      	sub	sp, #20
 80163a8:	f1b0 0900 	subs.w	r9, r0, #0
 80163ac:	461d      	mov	r5, r3
 80163ae:	4617      	mov	r7, r2
 80163b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80163b2:	bfbb      	ittet	lt
 80163b4:	f1c9 0900 	rsblt	r9, r9, #0
 80163b8:	f04f 36ff 	movlt.w	r6, #4294967295
 80163bc:	2601      	movge	r6, #1
 80163be:	6823      	ldrlt	r3, [r4, #0]
 80163c0:	bfbc      	itt	lt
 80163c2:	425b      	neglt	r3, r3
 80163c4:	6023      	strlt	r3, [r4, #0]
 80163c6:	2a00      	cmp	r2, #0
 80163c8:	da04      	bge.n	80163d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80163ca:	6823      	ldr	r3, [r4, #0]
 80163cc:	4257      	negs	r7, r2
 80163ce:	4276      	negs	r6, r6
 80163d0:	425b      	negs	r3, r3
 80163d2:	6023      	str	r3, [r4, #0]
 80163d4:	2d00      	cmp	r5, #0
 80163d6:	4638      	mov	r0, r7
 80163d8:	bfba      	itte	lt
 80163da:	426d      	neglt	r5, r5
 80163dc:	f04f 38ff 	movlt.w	r8, #4294967295
 80163e0:	f04f 0801 	movge.w	r8, #1
 80163e4:	f7ff ff64 	bl	80162b0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80163e8:	ab03      	add	r3, sp, #12
 80163ea:	463a      	mov	r2, r7
 80163ec:	e9cd 5300 	strd	r5, r3, [sp]
 80163f0:	4603      	mov	r3, r0
 80163f2:	4648      	mov	r0, r9
 80163f4:	f7ff ff7a 	bl	80162ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80163f8:	6823      	ldr	r3, [r4, #0]
 80163fa:	9a03      	ldr	r2, [sp, #12]
 80163fc:	4546      	cmp	r6, r8
 80163fe:	441a      	add	r2, r3
 8016400:	fb92 f3f5 	sdiv	r3, r2, r5
 8016404:	4418      	add	r0, r3
 8016406:	fb05 2313 	mls	r3, r5, r3, r2
 801640a:	bf18      	it	ne
 801640c:	4240      	negne	r0, r0
 801640e:	1c72      	adds	r2, r6, #1
 8016410:	6023      	str	r3, [r4, #0]
 8016412:	d105      	bne.n	8016420 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016414:	2b00      	cmp	r3, #0
 8016416:	f1c3 0200 	rsb	r2, r3, #0
 801641a:	db0b      	blt.n	8016434 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801641c:	6022      	str	r2, [r4, #0]
 801641e:	e006      	b.n	801642e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016420:	2e01      	cmp	r6, #1
 8016422:	d104      	bne.n	801642e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016424:	2b00      	cmp	r3, #0
 8016426:	da02      	bge.n	801642e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016428:	442b      	add	r3, r5
 801642a:	3801      	subs	r0, #1
 801642c:	6023      	str	r3, [r4, #0]
 801642e:	b005      	add	sp, #20
 8016430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016434:	3801      	subs	r0, #1
 8016436:	1b52      	subs	r2, r2, r5
 8016438:	e7f0      	b.n	801641c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801643c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801643c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016440:	4c1c      	ldr	r4, [pc, #112]	; (80164b4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8016442:	4605      	mov	r5, r0
 8016444:	6807      	ldr	r7, [r0, #0]
 8016446:	69a3      	ldr	r3, [r4, #24]
 8016448:	b92b      	cbnz	r3, 8016456 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801644a:	6840      	ldr	r0, [r0, #4]
 801644c:	e9c5 7000 	strd	r7, r0, [r5]
 8016450:	b004      	add	sp, #16
 8016452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016456:	f04f 0802 	mov.w	r8, #2
 801645a:	68a2      	ldr	r2, [r4, #8]
 801645c:	ae04      	add	r6, sp, #16
 801645e:	6820      	ldr	r0, [r4, #0]
 8016460:	fb93 f1f8 	sdiv	r1, r3, r8
 8016464:	440a      	add	r2, r1
 8016466:	69e1      	ldr	r1, [r4, #28]
 8016468:	f846 2d04 	str.w	r2, [r6, #-4]!
 801646c:	463a      	mov	r2, r7
 801646e:	9600      	str	r6, [sp, #0]
 8016470:	f7ff ff97 	bl	80163a2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016474:	69a3      	ldr	r3, [r4, #24]
 8016476:	4607      	mov	r7, r0
 8016478:	686a      	ldr	r2, [r5, #4]
 801647a:	6a21      	ldr	r1, [r4, #32]
 801647c:	9600      	str	r6, [sp, #0]
 801647e:	6860      	ldr	r0, [r4, #4]
 8016480:	f7ff ff8f 	bl	80163a2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016484:	69a3      	ldr	r3, [r4, #24]
 8016486:	6962      	ldr	r2, [r4, #20]
 8016488:	4407      	add	r7, r0
 801648a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801648c:	9600      	str	r6, [sp, #0]
 801648e:	68e0      	ldr	r0, [r4, #12]
 8016490:	fb93 f8f8 	sdiv	r8, r3, r8
 8016494:	4442      	add	r2, r8
 8016496:	9203      	str	r2, [sp, #12]
 8016498:	682a      	ldr	r2, [r5, #0]
 801649a:	f7ff ff82 	bl	80163a2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801649e:	4680      	mov	r8, r0
 80164a0:	9600      	str	r6, [sp, #0]
 80164a2:	69a3      	ldr	r3, [r4, #24]
 80164a4:	686a      	ldr	r2, [r5, #4]
 80164a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80164a8:	6920      	ldr	r0, [r4, #16]
 80164aa:	f7ff ff7a 	bl	80163a2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80164ae:	4440      	add	r0, r8
 80164b0:	e7cc      	b.n	801644c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80164b2:	bf00      	nop
 80164b4:	20001cac 	.word	0x20001cac

080164b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80164b8:	4b07      	ldr	r3, [pc, #28]	; (80164d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80164ba:	b510      	push	{r4, lr}
 80164bc:	781b      	ldrb	r3, [r3, #0]
 80164be:	2b01      	cmp	r3, #1
 80164c0:	d108      	bne.n	80164d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80164c2:	4b06      	ldr	r3, [pc, #24]	; (80164dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80164c4:	880c      	ldrh	r4, [r1, #0]
 80164c6:	881b      	ldrh	r3, [r3, #0]
 80164c8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80164cc:	3b01      	subs	r3, #1
 80164ce:	1b1b      	subs	r3, r3, r4
 80164d0:	8003      	strh	r3, [r0, #0]
 80164d2:	800a      	strh	r2, [r1, #0]
 80164d4:	bd10      	pop	{r4, pc}
 80164d6:	bf00      	nop
 80164d8:	20001c96 	.word	0x20001c96
 80164dc:	20001c9a 	.word	0x20001c9a

080164e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80164e0:	4b07      	ldr	r3, [pc, #28]	; (8016500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80164e2:	b510      	push	{r4, lr}
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	2b01      	cmp	r3, #1
 80164e8:	d108      	bne.n	80164fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80164ea:	f9b1 3000 	ldrsh.w	r3, [r1]
 80164ee:	f9b0 4000 	ldrsh.w	r4, [r0]
 80164f2:	8003      	strh	r3, [r0, #0]
 80164f4:	8893      	ldrh	r3, [r2, #4]
 80164f6:	3b01      	subs	r3, #1
 80164f8:	1b1b      	subs	r3, r3, r4
 80164fa:	800b      	strh	r3, [r1, #0]
 80164fc:	bd10      	pop	{r4, pc}
 80164fe:	bf00      	nop
 8016500:	20001c96 	.word	0x20001c96

08016504 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016504:	4b08      	ldr	r3, [pc, #32]	; (8016528 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016506:	b513      	push	{r0, r1, r4, lr}
 8016508:	f9b3 2000 	ldrsh.w	r2, [r3]
 801650c:	2400      	movs	r4, #0
 801650e:	4b07      	ldr	r3, [pc, #28]	; (801652c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8016510:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016514:	466a      	mov	r2, sp
 8016516:	f9b3 3000 	ldrsh.w	r3, [r3]
 801651a:	9400      	str	r4, [sp, #0]
 801651c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016520:	f7ff ffde 	bl	80164e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016524:	b002      	add	sp, #8
 8016526:	bd10      	pop	{r4, pc}
 8016528:	20001c92 	.word	0x20001c92
 801652c:	20001c94 	.word	0x20001c94

08016530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016530:	4b0a      	ldr	r3, [pc, #40]	; (801655c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016532:	460a      	mov	r2, r1
 8016534:	b510      	push	{r4, lr}
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	2b01      	cmp	r3, #1
 801653a:	d10d      	bne.n	8016558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801653c:	8881      	ldrh	r1, [r0, #4]
 801653e:	8803      	ldrh	r3, [r0, #0]
 8016540:	440b      	add	r3, r1
 8016542:	4601      	mov	r1, r0
 8016544:	3b01      	subs	r3, #1
 8016546:	f821 3b02 	strh.w	r3, [r1], #2
 801654a:	f7ff ffc9 	bl	80164e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801654e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016552:	88c2      	ldrh	r2, [r0, #6]
 8016554:	80c3      	strh	r3, [r0, #6]
 8016556:	8082      	strh	r2, [r0, #4]
 8016558:	bd10      	pop	{r4, pc}
 801655a:	bf00      	nop
 801655c:	20001c96 	.word	0x20001c96

08016560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016560:	4b09      	ldr	r3, [pc, #36]	; (8016588 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016562:	b507      	push	{r0, r1, r2, lr}
 8016564:	2100      	movs	r1, #0
 8016566:	f9b3 2000 	ldrsh.w	r2, [r3]
 801656a:	4b08      	ldr	r3, [pc, #32]	; (801658c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801656c:	9100      	str	r1, [sp, #0]
 801656e:	4669      	mov	r1, sp
 8016570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016574:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016578:	f8ad 3006 	strh.w	r3, [sp, #6]
 801657c:	f7ff ffd8 	bl	8016530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016580:	b003      	add	sp, #12
 8016582:	f85d fb04 	ldr.w	pc, [sp], #4
 8016586:	bf00      	nop
 8016588:	20001c92 	.word	0x20001c92
 801658c:	20001c94 	.word	0x20001c94

08016590 <_ZN8touchgfx11Application11getInstanceEv>:
 8016590:	4b01      	ldr	r3, [pc, #4]	; (8016598 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016592:	6818      	ldr	r0, [r3, #0]
 8016594:	4770      	bx	lr
 8016596:	bf00      	nop
 8016598:	20001ce0 	.word	0x20001ce0

0801659c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801659c:	4b03      	ldr	r3, [pc, #12]	; (80165ac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801659e:	2200      	movs	r2, #0
 80165a0:	801a      	strh	r2, [r3, #0]
 80165a2:	805a      	strh	r2, [r3, #2]
 80165a4:	809a      	strh	r2, [r3, #4]
 80165a6:	80da      	strh	r2, [r3, #6]
 80165a8:	4770      	bx	lr
 80165aa:	bf00      	nop
 80165ac:	20001cd8 	.word	0x20001cd8

080165b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80165b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b4:	b099      	sub	sp, #100	; 0x64
 80165b6:	4607      	mov	r7, r0
 80165b8:	4614      	mov	r4, r2
 80165ba:	461d      	mov	r5, r3
 80165bc:	a802      	add	r0, sp, #8
 80165be:	468a      	mov	sl, r1
 80165c0:	f000 f9aa 	bl	8016918 <_ZN8touchgfx12TextProviderC1Ev>
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	4638      	mov	r0, r7
 80165c8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80165cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80165ce:	4798      	blx	r3
 80165d0:	462a      	mov	r2, r5
 80165d2:	2500      	movs	r5, #0
 80165d4:	4621      	mov	r1, r4
 80165d6:	4603      	mov	r3, r0
 80165d8:	a802      	add	r0, sp, #8
 80165da:	462c      	mov	r4, r5
 80165dc:	46a9      	mov	r9, r5
 80165de:	46a8      	mov	r8, r5
 80165e0:	f000 f9df 	bl	80169a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80165e4:	2300      	movs	r3, #0
 80165e6:	9301      	str	r3, [sp, #4]
 80165e8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80165ec:	429c      	cmp	r4, r3
 80165ee:	d002      	beq.n	80165f6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 80165f0:	455c      	cmp	r4, fp
 80165f2:	bf18      	it	ne
 80165f4:	4625      	movne	r5, r4
 80165f6:	ab01      	add	r3, sp, #4
 80165f8:	463a      	mov	r2, r7
 80165fa:	4651      	mov	r1, sl
 80165fc:	a802      	add	r0, sp, #8
 80165fe:	f000 fccb 	bl	8016f98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016602:	4604      	mov	r4, r0
 8016604:	b108      	cbz	r0, 801660a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8016606:	280a      	cmp	r0, #10
 8016608:	d10a      	bne.n	8016620 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801660a:	45c1      	cmp	r9, r8
 801660c:	bf38      	it	cc
 801660e:	46c1      	movcc	r9, r8
 8016610:	f04f 0800 	mov.w	r8, #0
 8016614:	2c00      	cmp	r4, #0
 8016616:	d1e5      	bne.n	80165e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8016618:	4648      	mov	r0, r9
 801661a:	b019      	add	sp, #100	; 0x64
 801661c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016620:	9a01      	ldr	r2, [sp, #4]
 8016622:	2a00      	cmp	r2, #0
 8016624:	d0de      	beq.n	80165e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8016626:	7b56      	ldrb	r6, [r2, #13]
 8016628:	4629      	mov	r1, r5
 801662a:	683b      	ldr	r3, [r7, #0]
 801662c:	0076      	lsls	r6, r6, #1
 801662e:	8894      	ldrh	r4, [r2, #4]
 8016630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016632:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8016636:	7a96      	ldrb	r6, [r2, #10]
 8016638:	4306      	orrs	r6, r0
 801663a:	4638      	mov	r0, r7
 801663c:	4798      	blx	r3
 801663e:	4430      	add	r0, r6
 8016640:	4480      	add	r8, r0
 8016642:	fa1f f888 	uxth.w	r8, r8
 8016646:	e7e5      	b.n	8016614 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08016648 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016648:	b508      	push	{r3, lr}
 801664a:	6803      	ldr	r3, [r0, #0]
 801664c:	68db      	ldr	r3, [r3, #12]
 801664e:	4798      	blx	r3
 8016650:	b128      	cbz	r0, 801665e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8016652:	7b43      	ldrb	r3, [r0, #13]
 8016654:	7a80      	ldrb	r0, [r0, #10]
 8016656:	005b      	lsls	r3, r3, #1
 8016658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801665c:	4318      	orrs	r0, r3
 801665e:	bd08      	pop	{r3, pc}

08016660 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8016660:	b40e      	push	{r1, r2, r3}
 8016662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016664:	b098      	sub	sp, #96	; 0x60
 8016666:	4605      	mov	r5, r0
 8016668:	ab1d      	add	r3, sp, #116	; 0x74
 801666a:	a802      	add	r0, sp, #8
 801666c:	ae18      	add	r6, sp, #96	; 0x60
 801666e:	f853 4b04 	ldr.w	r4, [r3], #4
 8016672:	9300      	str	r3, [sp, #0]
 8016674:	f000 f950 	bl	8016918 <_ZN8touchgfx12TextProviderC1Ev>
 8016678:	682b      	ldr	r3, [r5, #0]
 801667a:	4628      	mov	r0, r5
 801667c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801667e:	4798      	blx	r3
 8016680:	4621      	mov	r1, r4
 8016682:	2400      	movs	r4, #0
 8016684:	4603      	mov	r3, r0
 8016686:	9a00      	ldr	r2, [sp, #0]
 8016688:	a802      	add	r0, sp, #8
 801668a:	f000 f98a 	bl	80169a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801668e:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8016692:	462a      	mov	r2, r5
 8016694:	4633      	mov	r3, r6
 8016696:	4621      	mov	r1, r4
 8016698:	a802      	add	r0, sp, #8
 801669a:	f000 fc7d 	bl	8016f98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801669e:	b300      	cbz	r0, 80166e2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 80166a0:	280a      	cmp	r0, #10
 80166a2:	d01a      	beq.n	80166da <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 80166a4:	9f01      	ldr	r7, [sp, #4]
 80166a6:	b1c7      	cbz	r7, 80166da <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 80166a8:	7b78      	ldrb	r0, [r7, #13]
 80166aa:	7a3b      	ldrb	r3, [r7, #8]
 80166ac:	00c1      	lsls	r1, r0, #3
 80166ae:	88aa      	ldrh	r2, [r5, #4]
 80166b0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80166b4:	4319      	orrs	r1, r3
 80166b6:	0643      	lsls	r3, r0, #25
 80166b8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80166bc:	bf48      	it	mi
 80166be:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80166c2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80166c6:	bf48      	it	mi
 80166c8:	b219      	sxthmi	r1, r3
 80166ca:	79fb      	ldrb	r3, [r7, #7]
 80166cc:	4303      	orrs	r3, r0
 80166ce:	4413      	add	r3, r2
 80166d0:	1a5b      	subs	r3, r3, r1
 80166d2:	b29b      	uxth	r3, r3
 80166d4:	42a3      	cmp	r3, r4
 80166d6:	bfc8      	it	gt
 80166d8:	b21c      	sxthgt	r4, r3
 80166da:	4633      	mov	r3, r6
 80166dc:	462a      	mov	r2, r5
 80166de:	2100      	movs	r1, #0
 80166e0:	e7da      	b.n	8016698 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 80166e2:	b2a0      	uxth	r0, r4
 80166e4:	b018      	add	sp, #96	; 0x60
 80166e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80166ea:	b003      	add	sp, #12
 80166ec:	4770      	bx	lr

080166ee <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80166ee:	b40e      	push	{r1, r2, r3}
 80166f0:	b530      	push	{r4, r5, lr}
 80166f2:	b098      	sub	sp, #96	; 0x60
 80166f4:	4604      	mov	r4, r0
 80166f6:	ab1b      	add	r3, sp, #108	; 0x6c
 80166f8:	a802      	add	r0, sp, #8
 80166fa:	f853 5b04 	ldr.w	r5, [r3], #4
 80166fe:	9301      	str	r3, [sp, #4]
 8016700:	f000 f90a 	bl	8016918 <_ZN8touchgfx12TextProviderC1Ev>
 8016704:	6823      	ldr	r3, [r4, #0]
 8016706:	4620      	mov	r0, r4
 8016708:	2401      	movs	r4, #1
 801670a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801670c:	4798      	blx	r3
 801670e:	9a01      	ldr	r2, [sp, #4]
 8016710:	4603      	mov	r3, r0
 8016712:	4629      	mov	r1, r5
 8016714:	a802      	add	r0, sp, #8
 8016716:	f000 f944 	bl	80169a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801671a:	a802      	add	r0, sp, #8
 801671c:	f000 fcda 	bl	80170d4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016720:	b2a3      	uxth	r3, r4
 8016722:	b138      	cbz	r0, 8016734 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8016724:	280a      	cmp	r0, #10
 8016726:	a802      	add	r0, sp, #8
 8016728:	bf04      	itt	eq
 801672a:	3301      	addeq	r3, #1
 801672c:	b21c      	sxtheq	r4, r3
 801672e:	f000 fcd1 	bl	80170d4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016732:	e7f5      	b.n	8016720 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8016734:	4618      	mov	r0, r3
 8016736:	b018      	add	sp, #96	; 0x60
 8016738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801673c:	b003      	add	sp, #12
 801673e:	4770      	bx	lr

08016740 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8016740:	b40e      	push	{r1, r2, r3}
 8016742:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016744:	b098      	sub	sp, #96	; 0x60
 8016746:	4604      	mov	r4, r0
 8016748:	26ff      	movs	r6, #255	; 0xff
 801674a:	ab1d      	add	r3, sp, #116	; 0x74
 801674c:	a802      	add	r0, sp, #8
 801674e:	f853 5b04 	ldr.w	r5, [r3], #4
 8016752:	9300      	str	r3, [sp, #0]
 8016754:	f000 f8e0 	bl	8016918 <_ZN8touchgfx12TextProviderC1Ev>
 8016758:	6823      	ldr	r3, [r4, #0]
 801675a:	4620      	mov	r0, r4
 801675c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801675e:	4798      	blx	r3
 8016760:	4629      	mov	r1, r5
 8016762:	4603      	mov	r3, r0
 8016764:	9a00      	ldr	r2, [sp, #0]
 8016766:	a802      	add	r0, sp, #8
 8016768:	ad18      	add	r5, sp, #96	; 0x60
 801676a:	f000 f91a 	bl	80169a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801676e:	2100      	movs	r1, #0
 8016770:	4622      	mov	r2, r4
 8016772:	a802      	add	r0, sp, #8
 8016774:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8016778:	462b      	mov	r3, r5
 801677a:	f000 fc0d 	bl	8016f98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801677e:	b1d8      	cbz	r0, 80167b8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016780:	280a      	cmp	r0, #10
 8016782:	d012      	beq.n	80167aa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8016784:	9801      	ldr	r0, [sp, #4]
 8016786:	b180      	cbz	r0, 80167aa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8016788:	7b47      	ldrb	r7, [r0, #13]
 801678a:	7922      	ldrb	r2, [r4, #4]
 801678c:	00fb      	lsls	r3, r7, #3
 801678e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016792:	7a03      	ldrb	r3, [r0, #8]
 8016794:	430b      	orrs	r3, r1
 8016796:	0679      	lsls	r1, r7, #25
 8016798:	bf44      	itt	mi
 801679a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801679e:	b21b      	sxthmi	r3, r3
 80167a0:	1ad3      	subs	r3, r2, r3
 80167a2:	b2db      	uxtb	r3, r3
 80167a4:	429e      	cmp	r6, r3
 80167a6:	bf28      	it	cs
 80167a8:	461e      	movcs	r6, r3
 80167aa:	462b      	mov	r3, r5
 80167ac:	4622      	mov	r2, r4
 80167ae:	2100      	movs	r1, #0
 80167b0:	a802      	add	r0, sp, #8
 80167b2:	f000 fbf1 	bl	8016f98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80167b6:	e7e2      	b.n	801677e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 80167b8:	4630      	mov	r0, r6
 80167ba:	b018      	add	sp, #96	; 0x60
 80167bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80167c0:	b003      	add	sp, #12
 80167c2:	4770      	bx	lr

080167c4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80167c4:	b530      	push	{r4, r5, lr}
 80167c6:	8083      	strh	r3, [r0, #4]
 80167c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80167cc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80167d0:	7183      	strb	r3, [r0, #6]
 80167d2:	79c3      	ldrb	r3, [r0, #7]
 80167d4:	6101      	str	r1, [r0, #16]
 80167d6:	f365 0306 	bfi	r3, r5, #0, #7
 80167da:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80167de:	8282      	strh	r2, [r0, #20]
 80167e0:	f365 13c7 	bfi	r3, r5, #7, #1
 80167e4:	71c3      	strb	r3, [r0, #7]
 80167e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80167ea:	7203      	strb	r3, [r0, #8]
 80167ec:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80167f0:	7243      	strb	r3, [r0, #9]
 80167f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80167f6:	8143      	strh	r3, [r0, #10]
 80167f8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80167fc:	8183      	strh	r3, [r0, #12]
 80167fe:	4b01      	ldr	r3, [pc, #4]	; (8016804 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8016800:	6003      	str	r3, [r0, #0]
 8016802:	bd30      	pop	{r4, r5, pc}
 8016804:	0801d0b0 	.word	0x0801d0b0

08016808 <_ZNK8touchgfx9ConstFont4findEt>:
 8016808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801680a:	6904      	ldr	r4, [r0, #16]
 801680c:	b3bc      	cbz	r4, 801687e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801680e:	88a3      	ldrh	r3, [r4, #4]
 8016810:	8a82      	ldrh	r2, [r0, #20]
 8016812:	1acb      	subs	r3, r1, r3
 8016814:	f102 32ff 	add.w	r2, r2, #4294967295
 8016818:	d431      	bmi.n	801687e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801681a:	4293      	cmp	r3, r2
 801681c:	dd0c      	ble.n	8016838 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801681e:	230e      	movs	r3, #14
 8016820:	fb03 4302 	mla	r3, r3, r2, r4
 8016824:	889b      	ldrh	r3, [r3, #4]
 8016826:	1a5b      	subs	r3, r3, r1
 8016828:	1ad3      	subs	r3, r2, r3
 801682a:	429a      	cmp	r2, r3
 801682c:	db27      	blt.n	801687e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801682e:	2b00      	cmp	r3, #0
 8016830:	bfbc      	itt	lt
 8016832:	2302      	movlt	r3, #2
 8016834:	fb92 f3f3 	sdivlt	r3, r2, r3
 8016838:	2500      	movs	r5, #0
 801683a:	260e      	movs	r6, #14
 801683c:	4295      	cmp	r5, r2
 801683e:	dc1e      	bgt.n	801687e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016840:	fb06 4003 	mla	r0, r6, r3, r4
 8016844:	8887      	ldrh	r7, [r0, #4]
 8016846:	42b9      	cmp	r1, r7
 8016848:	d01a      	beq.n	8016880 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801684a:	d20d      	bcs.n	8016868 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801684c:	1e5a      	subs	r2, r3, #1
 801684e:	4295      	cmp	r5, r2
 8016850:	dc15      	bgt.n	801687e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016852:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8016856:	1a5b      	subs	r3, r3, r1
 8016858:	1ad3      	subs	r3, r2, r3
 801685a:	429a      	cmp	r2, r3
 801685c:	db0f      	blt.n	801687e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801685e:	429d      	cmp	r5, r3
 8016860:	ddec      	ble.n	801683c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016862:	1953      	adds	r3, r2, r5
 8016864:	105b      	asrs	r3, r3, #1
 8016866:	e7e9      	b.n	801683c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016868:	1c5d      	adds	r5, r3, #1
 801686a:	42aa      	cmp	r2, r5
 801686c:	db07      	blt.n	801687e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801686e:	8a43      	ldrh	r3, [r0, #18]
 8016870:	1acb      	subs	r3, r1, r3
 8016872:	442b      	add	r3, r5
 8016874:	429d      	cmp	r5, r3
 8016876:	dc02      	bgt.n	801687e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016878:	429a      	cmp	r2, r3
 801687a:	dadf      	bge.n	801683c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801687c:	e7f1      	b.n	8016862 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801687e:	2000      	movs	r0, #0
 8016880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016882 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8016882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016884:	4604      	mov	r4, r0
 8016886:	4617      	mov	r7, r2
 8016888:	461e      	mov	r6, r3
 801688a:	b911      	cbnz	r1, 8016892 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801688c:	2500      	movs	r5, #0
 801688e:	4628      	mov	r0, r5
 8016890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016892:	290a      	cmp	r1, #10
 8016894:	d0fa      	beq.n	801688c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016896:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801689a:	4291      	cmp	r1, r2
 801689c:	d0f6      	beq.n	801688c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801689e:	f242 020b 	movw	r2, #8203	; 0x200b
 80168a2:	4291      	cmp	r1, r2
 80168a4:	d0f2      	beq.n	801688c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80168a6:	f7ff ffaf 	bl	8016808 <_ZNK8touchgfx9ConstFont4findEt>
 80168aa:	4605      	mov	r5, r0
 80168ac:	b950      	cbnz	r0, 80168c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80168ae:	6823      	ldr	r3, [r4, #0]
 80168b0:	4620      	mov	r0, r4
 80168b2:	691b      	ldr	r3, [r3, #16]
 80168b4:	4798      	blx	r3
 80168b6:	4601      	mov	r1, r0
 80168b8:	4620      	mov	r0, r4
 80168ba:	f7ff ffa5 	bl	8016808 <_ZNK8touchgfx9ConstFont4findEt>
 80168be:	4605      	mov	r5, r0
 80168c0:	2800      	cmp	r0, #0
 80168c2:	d0e3      	beq.n	801688c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80168c4:	6823      	ldr	r3, [r4, #0]
 80168c6:	4629      	mov	r1, r5
 80168c8:	4620      	mov	r0, r4
 80168ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80168cc:	4798      	blx	r3
 80168ce:	6038      	str	r0, [r7, #0]
 80168d0:	6823      	ldr	r3, [r4, #0]
 80168d2:	4620      	mov	r0, r4
 80168d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168d6:	4798      	blx	r3
 80168d8:	7030      	strb	r0, [r6, #0]
 80168da:	e7d8      	b.n	801688e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080168dc <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80168dc:	2000      	movs	r0, #0
 80168de:	4770      	bx	lr

080168e0 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80168e0:	2001      	movs	r0, #1
 80168e2:	4770      	bx	lr

080168e4 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80168e4:	2002      	movs	r0, #2
 80168e6:	4770      	bx	lr

080168e8 <_ZN8touchgfx12GestureEventD1Ev>:
 80168e8:	4770      	bx	lr

080168ea <_ZN8touchgfx9DragEventD1Ev>:
 80168ea:	4770      	bx	lr

080168ec <_ZN8touchgfx10ClickEventD1Ev>:
 80168ec:	4770      	bx	lr

080168ee <_ZN8touchgfx10ClickEventD0Ev>:
 80168ee:	b510      	push	{r4, lr}
 80168f0:	4604      	mov	r4, r0
 80168f2:	210c      	movs	r1, #12
 80168f4:	f002 feea 	bl	80196cc <_ZdlPvj>
 80168f8:	4620      	mov	r0, r4
 80168fa:	bd10      	pop	{r4, pc}

080168fc <_ZN8touchgfx9DragEventD0Ev>:
 80168fc:	b510      	push	{r4, lr}
 80168fe:	4604      	mov	r4, r0
 8016900:	2110      	movs	r1, #16
 8016902:	f002 fee3 	bl	80196cc <_ZdlPvj>
 8016906:	4620      	mov	r0, r4
 8016908:	bd10      	pop	{r4, pc}

0801690a <_ZN8touchgfx12GestureEventD0Ev>:
 801690a:	b510      	push	{r4, lr}
 801690c:	4604      	mov	r4, r0
 801690e:	210c      	movs	r1, #12
 8016910:	f002 fedc 	bl	80196cc <_ZdlPvj>
 8016914:	4620      	mov	r0, r4
 8016916:	bd10      	pop	{r4, pc}

08016918 <_ZN8touchgfx12TextProviderC1Ev>:
 8016918:	2300      	movs	r3, #0
 801691a:	2201      	movs	r2, #1
 801691c:	b510      	push	{r4, lr}
 801691e:	4604      	mov	r4, r0
 8016920:	60c3      	str	r3, [r0, #12]
 8016922:	7403      	strb	r3, [r0, #16]
 8016924:	82c3      	strh	r3, [r0, #22]
 8016926:	8303      	strh	r3, [r0, #24]
 8016928:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801692a:	8603      	strh	r3, [r0, #48]	; 0x30
 801692c:	86c3      	strh	r3, [r0, #54]	; 0x36
 801692e:	8703      	strh	r3, [r0, #56]	; 0x38
 8016930:	63c3      	str	r3, [r0, #60]	; 0x3c
 8016932:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8016936:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801693a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801693e:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8016942:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8016946:	e9c0 3300 	strd	r3, r3, [r0]
 801694a:	f7f7 f8b1 	bl	800dab0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801694e:	4620      	mov	r0, r4
 8016950:	bd10      	pop	{r4, pc}

08016952 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8016952:	b530      	push	{r4, r5, lr}
 8016954:	2500      	movs	r5, #0
 8016956:	2401      	movs	r4, #1
 8016958:	6843      	ldr	r3, [r0, #4]
 801695a:	b913      	cbnz	r3, 8016962 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801695c:	6803      	ldr	r3, [r0, #0]
 801695e:	b1f3      	cbz	r3, 801699e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8016960:	6043      	str	r3, [r0, #4]
 8016962:	7c03      	ldrb	r3, [r0, #16]
 8016964:	b143      	cbz	r3, 8016978 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8016966:	68c3      	ldr	r3, [r0, #12]
 8016968:	b12b      	cbz	r3, 8016976 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801696a:	881a      	ldrh	r2, [r3, #0]
 801696c:	b11a      	cbz	r2, 8016976 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801696e:	1c9a      	adds	r2, r3, #2
 8016970:	60c2      	str	r2, [r0, #12]
 8016972:	8818      	ldrh	r0, [r3, #0]
 8016974:	bd30      	pop	{r4, r5, pc}
 8016976:	7405      	strb	r5, [r0, #16]
 8016978:	6843      	ldr	r3, [r0, #4]
 801697a:	8819      	ldrh	r1, [r3, #0]
 801697c:	b179      	cbz	r1, 801699e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801697e:	1c9a      	adds	r2, r3, #2
 8016980:	2902      	cmp	r1, #2
 8016982:	6042      	str	r2, [r0, #4]
 8016984:	d1f5      	bne.n	8016972 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8016986:	6883      	ldr	r3, [r0, #8]
 8016988:	1d1a      	adds	r2, r3, #4
 801698a:	6082      	str	r2, [r0, #8]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	60c3      	str	r3, [r0, #12]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d0e1      	beq.n	8016958 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016994:	881b      	ldrh	r3, [r3, #0]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d0de      	beq.n	8016958 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801699a:	7404      	strb	r4, [r0, #16]
 801699c:	e7dc      	b.n	8016958 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801699e:	2000      	movs	r0, #0
 80169a0:	e7e8      	b.n	8016974 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080169a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80169a2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80169a4:	2300      	movs	r3, #0
 80169a6:	6082      	str	r2, [r0, #8]
 80169a8:	6001      	str	r1, [r0, #0]
 80169aa:	6043      	str	r3, [r0, #4]
 80169ac:	60c3      	str	r3, [r0, #12]
 80169ae:	7403      	strb	r3, [r0, #16]
 80169b0:	8603      	strh	r3, [r0, #48]	; 0x30
 80169b2:	8303      	strh	r3, [r0, #24]
 80169b4:	8703      	strh	r3, [r0, #56]	; 0x38
 80169b6:	b410      	push	{r4}
 80169b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169bc:	f7f7 b878 	b.w	800dab0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080169c0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80169c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169c2:	4605      	mov	r5, r0
 80169c4:	4608      	mov	r0, r1
 80169c6:	b1f1      	cbz	r1, 8016a06 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80169c8:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80169cc:	460b      	mov	r3, r1
 80169ce:	f101 0708 	add.w	r7, r1, #8
 80169d2:	4622      	mov	r2, r4
 80169d4:	6818      	ldr	r0, [r3, #0]
 80169d6:	3308      	adds	r3, #8
 80169d8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80169dc:	4626      	mov	r6, r4
 80169de:	42bb      	cmp	r3, r7
 80169e0:	c603      	stmia	r6!, {r0, r1}
 80169e2:	4634      	mov	r4, r6
 80169e4:	d1f6      	bne.n	80169d4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80169e6:	6818      	ldr	r0, [r3, #0]
 80169e8:	6030      	str	r0, [r6, #0]
 80169ea:	4610      	mov	r0, r2
 80169ec:	889b      	ldrh	r3, [r3, #4]
 80169ee:	80b3      	strh	r3, [r6, #4]
 80169f0:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 80169f4:	015b      	lsls	r3, r3, #5
 80169f6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80169fa:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 80169fe:	430b      	orrs	r3, r1
 8016a00:	425b      	negs	r3, r3
 8016a02:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8016a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016a08 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8016a08:	b538      	push	{r3, r4, r5, lr}
 8016a0a:	460c      	mov	r4, r1
 8016a0c:	6811      	ldr	r1, [r2, #0]
 8016a0e:	4610      	mov	r0, r2
 8016a10:	68cd      	ldr	r5, [r1, #12]
 8016a12:	4619      	mov	r1, r3
 8016a14:	47a8      	blx	r5
 8016a16:	2800      	cmp	r0, #0
 8016a18:	bf08      	it	eq
 8016a1a:	4620      	moveq	r0, r4
 8016a1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08016a20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a22:	4604      	mov	r4, r0
 8016a24:	4615      	mov	r5, r2
 8016a26:	4608      	mov	r0, r1
 8016a28:	b93a      	cbnz	r2, 8016a3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8016a2a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8016a2e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8016a32:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8016a36:	4628      	mov	r0, r5
 8016a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a3a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8016a3e:	8893      	ldrh	r3, [r2, #4]
 8016a40:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8016a44:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8016a48:	79ee      	ldrb	r6, [r5, #7]
 8016a4a:	4316      	orrs	r6, r2
 8016a4c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8016a50:	189a      	adds	r2, r3, r2
 8016a52:	b2b7      	uxth	r7, r6
 8016a54:	b291      	uxth	r1, r2
 8016a56:	291d      	cmp	r1, #29
 8016a58:	f200 8084 	bhi.w	8016b64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8016a5c:	2201      	movs	r2, #1
 8016a5e:	10f6      	asrs	r6, r6, #3
 8016a60:	408a      	lsls	r2, r1
 8016a62:	4978      	ldr	r1, [pc, #480]	; (8016c44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8016a64:	420a      	tst	r2, r1
 8016a66:	d12e      	bne.n	8016ac6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8016a68:	f412 7f60 	tst.w	r2, #896	; 0x380
 8016a6c:	d07a      	beq.n	8016b64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8016a6e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8016a72:	462b      	mov	r3, r5
 8016a74:	f105 0e08 	add.w	lr, r5, #8
 8016a78:	4615      	mov	r5, r2
 8016a7a:	6818      	ldr	r0, [r3, #0]
 8016a7c:	3308      	adds	r3, #8
 8016a7e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016a82:	4694      	mov	ip, r2
 8016a84:	4573      	cmp	r3, lr
 8016a86:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016a8a:	4662      	mov	r2, ip
 8016a8c:	d1f5      	bne.n	8016a7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8016a8e:	6818      	ldr	r0, [r3, #0]
 8016a90:	f8cc 0000 	str.w	r0, [ip]
 8016a94:	889b      	ldrh	r3, [r3, #4]
 8016a96:	f8ac 3004 	strh.w	r3, [ip, #4]
 8016a9a:	b2b3      	uxth	r3, r6
 8016a9c:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8016aa0:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 8016aa4:	1aca      	subs	r2, r1, r3
 8016aa6:	1bcf      	subs	r7, r1, r7
 8016aa8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8016aac:	b292      	uxth	r2, r2
 8016aae:	1afb      	subs	r3, r7, r3
 8016ab0:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8016ab4:	10d2      	asrs	r2, r2, #3
 8016ab6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8016aba:	4302      	orrs	r2, r0
 8016abc:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 8016ac0:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8016ac4:	e7b7      	b.n	8016a36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8016ac6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016ac8:	b92b      	cbnz	r3, 8016ad6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8016aca:	4b5f      	ldr	r3, [pc, #380]	; (8016c48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8016acc:	21c0      	movs	r1, #192	; 0xc0
 8016ace:	4a5f      	ldr	r2, [pc, #380]	; (8016c4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8016ad0:	485f      	ldr	r0, [pc, #380]	; (8016c50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8016ad2:	f003 f833 	bl	8019b3c <__assert_func>
 8016ad6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8016ad8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016adc:	8b59      	ldrh	r1, [r3, #26]
 8016ade:	f640 6333 	movw	r3, #3635	; 0xe33
 8016ae2:	4299      	cmp	r1, r3
 8016ae4:	d110      	bne.n	8016b08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8016ae6:	6803      	ldr	r3, [r0, #0]
 8016ae8:	68db      	ldr	r3, [r3, #12]
 8016aea:	4798      	blx	r3
 8016aec:	7b41      	ldrb	r1, [r0, #13]
 8016aee:	00cb      	lsls	r3, r1, #3
 8016af0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016af4:	7a03      	ldrb	r3, [r0, #8]
 8016af6:	0648      	lsls	r0, r1, #25
 8016af8:	ea43 0302 	orr.w	r3, r3, r2
 8016afc:	bf44      	itt	mi
 8016afe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016b02:	b21b      	sxthmi	r3, r3
 8016b04:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8016b08:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8016b0c:	462a      	mov	r2, r5
 8016b0e:	f105 0c08 	add.w	ip, r5, #8
 8016b12:	443b      	add	r3, r7
 8016b14:	4433      	add	r3, r6
 8016b16:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8016b1a:	b29b      	uxth	r3, r3
 8016b1c:	4635      	mov	r5, r6
 8016b1e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8016b22:	6810      	ldr	r0, [r2, #0]
 8016b24:	3208      	adds	r2, #8
 8016b26:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016b2a:	4637      	mov	r7, r6
 8016b2c:	4562      	cmp	r2, ip
 8016b2e:	c703      	stmia	r7!, {r0, r1}
 8016b30:	463e      	mov	r6, r7
 8016b32:	d1f6      	bne.n	8016b22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8016b34:	6810      	ldr	r0, [r2, #0]
 8016b36:	6038      	str	r0, [r7, #0]
 8016b38:	8892      	ldrh	r2, [r2, #4]
 8016b3a:	80ba      	strh	r2, [r7, #4]
 8016b3c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8016b40:	10db      	asrs	r3, r3, #3
 8016b42:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8016b46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016b4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016b4e:	4313      	orrs	r3, r2
 8016b50:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8016b54:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8016b58:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8016b5c:	1a9b      	subs	r3, r3, r2
 8016b5e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8016b62:	e768      	b.n	8016a36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8016b64:	f023 0204 	bic.w	r2, r3, #4
 8016b68:	f640 611b 	movw	r1, #3611	; 0xe1b
 8016b6c:	428a      	cmp	r2, r1
 8016b6e:	d003      	beq.n	8016b78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8016b70:	f640 621d 	movw	r2, #3613	; 0xe1d
 8016b74:	4293      	cmp	r3, r2
 8016b76:	d120      	bne.n	8016bba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8016b78:	3b01      	subs	r3, #1
 8016b7a:	4602      	mov	r2, r0
 8016b7c:	4629      	mov	r1, r5
 8016b7e:	4620      	mov	r0, r4
 8016b80:	b29b      	uxth	r3, r3
 8016b82:	f7ff ff41 	bl	8016a08 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016b86:	7b41      	ldrb	r1, [r0, #13]
 8016b88:	00cb      	lsls	r3, r1, #3
 8016b8a:	0649      	lsls	r1, r1, #25
 8016b8c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016b90:	7a03      	ldrb	r3, [r0, #8]
 8016b92:	ea43 0302 	orr.w	r3, r3, r2
 8016b96:	bf44      	itt	mi
 8016b98:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016b9c:	b21b      	sxthmi	r3, r3
 8016b9e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8016ba2:	7b6b      	ldrb	r3, [r5, #13]
 8016ba4:	7aaa      	ldrb	r2, [r5, #10]
 8016ba6:	005b      	lsls	r3, r3, #1
 8016ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016bac:	4313      	orrs	r3, r2
 8016bae:	115a      	asrs	r2, r3, #5
 8016bb0:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8016bb4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8016bb8:	e035      	b.n	8016c26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8016bba:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8016bbe:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8016bc2:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8016bc6:	7a2a      	ldrb	r2, [r5, #8]
 8016bc8:	ea42 0201 	orr.w	r2, r2, r1
 8016bcc:	f640 6109 	movw	r1, #3593	; 0xe09
 8016bd0:	bf1c      	itt	ne
 8016bd2:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8016bd6:	b212      	sxthne	r2, r2
 8016bd8:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8016bdc:	f023 0210 	bic.w	r2, r3, #16
 8016be0:	428a      	cmp	r2, r1
 8016be2:	d003      	beq.n	8016bec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8016be4:	f640 6213 	movw	r2, #3603	; 0xe13
 8016be8:	4293      	cmp	r3, r2
 8016bea:	d129      	bne.n	8016c40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8016bec:	7b6e      	ldrb	r6, [r5, #13]
 8016bee:	4629      	mov	r1, r5
 8016bf0:	0076      	lsls	r6, r6, #1
 8016bf2:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8016bf6:	7aae      	ldrb	r6, [r5, #10]
 8016bf8:	4316      	orrs	r6, r2
 8016bfa:	f640 6213 	movw	r2, #3603	; 0xe13
 8016bfe:	4293      	cmp	r3, r2
 8016c00:	4602      	mov	r2, r0
 8016c02:	4620      	mov	r0, r4
 8016c04:	bf16      	itet	ne
 8016c06:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016c0a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8016c0e:	b29b      	uxthne	r3, r3
 8016c10:	f7ff fefa 	bl	8016a08 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016c14:	7b43      	ldrb	r3, [r0, #13]
 8016c16:	7a82      	ldrb	r2, [r0, #10]
 8016c18:	005b      	lsls	r3, r3, #1
 8016c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016c1e:	4313      	orrs	r3, r2
 8016c20:	1af6      	subs	r6, r6, r3
 8016c22:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 8016c26:	7b69      	ldrb	r1, [r5, #13]
 8016c28:	00cb      	lsls	r3, r1, #3
 8016c2a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016c2e:	7a2b      	ldrb	r3, [r5, #8]
 8016c30:	4313      	orrs	r3, r2
 8016c32:	064a      	lsls	r2, r1, #25
 8016c34:	bf44      	itt	mi
 8016c36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016c3a:	b21b      	sxthmi	r3, r3
 8016c3c:	1bdb      	subs	r3, r3, r7
 8016c3e:	e73f      	b.n	8016ac0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8016c40:	2300      	movs	r3, #0
 8016c42:	e7b7      	b.n	8016bb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8016c44:	3fc00079 	.word	0x3fc00079
 8016c48:	0801d138 	.word	0x0801d138
 8016c4c:	0801d3aa 	.word	0x0801d3aa
 8016c50:	0801d141 	.word	0x0801d141

08016c54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c58:	4604      	mov	r4, r0
 8016c5a:	b942      	cbnz	r2, 8016c6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016c60:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8016c64:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8016c68:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8016c6c:	e046      	b.n	8016cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8016c6e:	7b51      	ldrb	r1, [r2, #13]
 8016c70:	8893      	ldrh	r3, [r2, #4]
 8016c72:	010f      	lsls	r7, r1, #4
 8016c74:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8016c78:	79d7      	ldrb	r7, [r2, #7]
 8016c7a:	4307      	orrs	r7, r0
 8016c7c:	2f04      	cmp	r7, #4
 8016c7e:	b2bd      	uxth	r5, r7
 8016c80:	bfcc      	ite	gt
 8016c82:	08bf      	lsrgt	r7, r7, #2
 8016c84:	2701      	movle	r7, #1
 8016c86:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8016c8a:	f200 80ab 	bhi.w	8016de4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8016c8e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8016c92:	4283      	cmp	r3, r0
 8016c94:	d216      	bcs.n	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016c96:	f240 605b 	movw	r0, #1627	; 0x65b
 8016c9a:	4283      	cmp	r3, r0
 8016c9c:	d859      	bhi.n	8016d52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8016c9e:	f240 6057 	movw	r0, #1623	; 0x657
 8016ca2:	4283      	cmp	r3, r0
 8016ca4:	d20e      	bcs.n	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016ca6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016caa:	d24a      	bcs.n	8016d42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8016cac:	f240 604e 	movw	r0, #1614	; 0x64e
 8016cb0:	4283      	cmp	r3, r0
 8016cb2:	d207      	bcs.n	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016cb4:	f240 601a 	movw	r0, #1562	; 0x61a
 8016cb8:	4283      	cmp	r3, r0
 8016cba:	d02a      	beq.n	8016d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016cbc:	d821      	bhi.n	8016d02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8016cbe:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8016cc2:	d35b      	bcc.n	8016d7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016cc4:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 8016cc8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016ccc:	f040 80d0 	bne.w	8016e70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8016cd0:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 8016cd4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016cd8:	f040 80ca 	bne.w	8016e70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8016cdc:	00cb      	lsls	r3, r1, #3
 8016cde:	0649      	lsls	r1, r1, #25
 8016ce0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016ce4:	7a13      	ldrb	r3, [r2, #8]
 8016ce6:	ea43 0300 	orr.w	r3, r3, r0
 8016cea:	bf44      	itt	mi
 8016cec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016cf0:	b21b      	sxthmi	r3, r3
 8016cf2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8016cf6:	1b5d      	subs	r5, r3, r5
 8016cf8:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8016cfc:	4610      	mov	r0, r2
 8016cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d02:	f240 604b 	movw	r0, #1611	; 0x64b
 8016d06:	4283      	cmp	r3, r0
 8016d08:	d338      	bcc.n	8016d7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016d0a:	f240 604c 	movw	r0, #1612	; 0x64c
 8016d0e:	4283      	cmp	r3, r0
 8016d10:	d9d8      	bls.n	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016d12:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 8016d16:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8016d1a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016d1e:	f040 80f2 	bne.w	8016f06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8016d22:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016d26:	f040 80ee 	bne.w	8016f06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8016d2a:	00cb      	lsls	r3, r1, #3
 8016d2c:	064e      	lsls	r6, r1, #25
 8016d2e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016d32:	7a13      	ldrb	r3, [r2, #8]
 8016d34:	ea43 0300 	orr.w	r3, r3, r0
 8016d38:	bf44      	itt	mi
 8016d3a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016d3e:	b21b      	sxthmi	r3, r3
 8016d40:	e7d9      	b.n	8016cf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8016d42:	f240 6054 	movw	r0, #1620	; 0x654
 8016d46:	4283      	cmp	r3, r0
 8016d48:	d8e3      	bhi.n	8016d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016d4a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016d4e:	d9e0      	bls.n	8016d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016d50:	e7b8      	b.n	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016d52:	f240 6074 	movw	r0, #1652	; 0x674
 8016d56:	4283      	cmp	r3, r0
 8016d58:	d0b4      	beq.n	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016d5a:	d82d      	bhi.n	8016db8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8016d5c:	f240 605e 	movw	r0, #1630	; 0x65e
 8016d60:	4283      	cmp	r3, r0
 8016d62:	d804      	bhi.n	8016d6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8016d64:	f240 605d 	movw	r0, #1629	; 0x65d
 8016d68:	4283      	cmp	r3, r0
 8016d6a:	d3d2      	bcc.n	8016d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016d6c:	e7aa      	b.n	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016d6e:	f240 605f 	movw	r0, #1631	; 0x65f
 8016d72:	4283      	cmp	r3, r0
 8016d74:	d0cd      	beq.n	8016d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016d76:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8016d7a:	d0a3      	beq.n	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016d7c:	00cb      	lsls	r3, r1, #3
 8016d7e:	0649      	lsls	r1, r1, #25
 8016d80:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016d84:	7a13      	ldrb	r3, [r2, #8]
 8016d86:	ea43 0300 	orr.w	r3, r3, r0
 8016d8a:	bf44      	itt	mi
 8016d8c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016d90:	b21b      	sxthmi	r3, r3
 8016d92:	1b5d      	subs	r5, r3, r5
 8016d94:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8016d98:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8016d9c:	7b53      	ldrb	r3, [r2, #13]
 8016d9e:	015b      	lsls	r3, r3, #5
 8016da0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016da4:	7993      	ldrb	r3, [r2, #6]
 8016da6:	430b      	orrs	r3, r1
 8016da8:	2105      	movs	r1, #5
 8016daa:	005b      	lsls	r3, r3, #1
 8016dac:	fb93 f3f1 	sdiv	r3, r3, r1
 8016db0:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8016db4:	440b      	add	r3, r1
 8016db6:	e757      	b.n	8016c68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8016db8:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8016dbc:	4283      	cmp	r3, r0
 8016dbe:	d809      	bhi.n	8016dd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8016dc0:	f240 60df 	movw	r0, #1759	; 0x6df
 8016dc4:	4283      	cmp	r3, r0
 8016dc6:	f4bf af7d 	bcs.w	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016dca:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8016dce:	2b05      	cmp	r3, #5
 8016dd0:	d8d4      	bhi.n	8016d7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016dd2:	e777      	b.n	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016dd4:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8016dd8:	4283      	cmp	r3, r0
 8016dda:	d09a      	beq.n	8016d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016ddc:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8016de0:	4283      	cmp	r3, r0
 8016de2:	e7ca      	b.n	8016d7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8016de4:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8016de8:	d22b      	bcs.n	8016e42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8016dea:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8016dee:	4283      	cmp	r3, r0
 8016df0:	d28f      	bcs.n	8016d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016df2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016df6:	4283      	cmp	r3, r0
 8016df8:	d816      	bhi.n	8016e28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8016dfa:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8016dfe:	4283      	cmp	r3, r0
 8016e00:	f4bf af60 	bcs.w	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016e04:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8016e08:	4283      	cmp	r3, r0
 8016e0a:	d80a      	bhi.n	8016e22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8016e0c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8016e10:	4283      	cmp	r3, r0
 8016e12:	f4bf af57 	bcs.w	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016e16:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8016e1a:	4283      	cmp	r3, r0
 8016e1c:	f43f af79 	beq.w	8016d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016e20:	e7ac      	b.n	8016d7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016e22:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8016e26:	e7f8      	b.n	8016e1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8016e28:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8016e2c:	4283      	cmp	r3, r0
 8016e2e:	d802      	bhi.n	8016e36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8016e30:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016e34:	e798      	b.n	8016d68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8016e36:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8016e3a:	4283      	cmp	r3, r0
 8016e3c:	f47f af42 	bne.w	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016e40:	e767      	b.n	8016d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016e42:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8016e46:	4283      	cmp	r3, r0
 8016e48:	f43f af63 	beq.w	8016d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016e4c:	d802      	bhi.n	8016e54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8016e4e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8016e52:	e7f2      	b.n	8016e3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8016e54:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8016e58:	4283      	cmp	r3, r0
 8016e5a:	d805      	bhi.n	8016e68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8016e5c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8016e60:	4283      	cmp	r3, r0
 8016e62:	f4ff af2f 	bcc.w	8016cc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016e66:	e754      	b.n	8016d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016e68:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8016e6c:	4283      	cmp	r3, r0
 8016e6e:	e7af      	b.n	8016dd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8016e70:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8016e74:	4617      	mov	r7, r2
 8016e76:	f102 0808 	add.w	r8, r2, #8
 8016e7a:	4666      	mov	r6, ip
 8016e7c:	6838      	ldr	r0, [r7, #0]
 8016e7e:	3708      	adds	r7, #8
 8016e80:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016e84:	46e6      	mov	lr, ip
 8016e86:	4547      	cmp	r7, r8
 8016e88:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016e8c:	46f4      	mov	ip, lr
 8016e8e:	d1f5      	bne.n	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8016e90:	6838      	ldr	r0, [r7, #0]
 8016e92:	f8ce 0000 	str.w	r0, [lr]
 8016e96:	88b9      	ldrh	r1, [r7, #4]
 8016e98:	f8ae 1004 	strh.w	r1, [lr, #4]
 8016e9c:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8016ea0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016ea4:	d009      	beq.n	8016eba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8016ea6:	7b51      	ldrb	r1, [r2, #13]
 8016ea8:	7992      	ldrb	r2, [r2, #6]
 8016eaa:	0149      	lsls	r1, r1, #5
 8016eac:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016eb0:	4311      	orrs	r1, r2
 8016eb2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016eb6:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8016eba:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016ebe:	d00d      	beq.n	8016edc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8016ec0:	442b      	add	r3, r5
 8016ec2:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8016ec6:	b29b      	uxth	r3, r3
 8016ec8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016ecc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8016ed0:	10db      	asrs	r3, r3, #3
 8016ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016ed6:	4313      	orrs	r3, r2
 8016ed8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8016edc:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8016ee0:	00cb      	lsls	r3, r1, #3
 8016ee2:	064f      	lsls	r7, r1, #25
 8016ee4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016ee8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016eec:	ea43 0302 	orr.w	r3, r3, r2
 8016ef0:	bf44      	itt	mi
 8016ef2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016ef6:	b21b      	sxthmi	r3, r3
 8016ef8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8016efc:	1b5d      	subs	r5, r3, r5
 8016efe:	4632      	mov	r2, r6
 8016f00:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8016f04:	e6fa      	b.n	8016cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8016f06:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8016f0a:	4694      	mov	ip, r2
 8016f0c:	f102 0908 	add.w	r9, r2, #8
 8016f10:	4676      	mov	r6, lr
 8016f12:	f8dc 0000 	ldr.w	r0, [ip]
 8016f16:	f10c 0c08 	add.w	ip, ip, #8
 8016f1a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8016f1e:	46f0      	mov	r8, lr
 8016f20:	45cc      	cmp	ip, r9
 8016f22:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8016f26:	46c6      	mov	lr, r8
 8016f28:	d1f3      	bne.n	8016f12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8016f2a:	f8dc 0000 	ldr.w	r0, [ip]
 8016f2e:	f8c8 0000 	str.w	r0, [r8]
 8016f32:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8016f36:	f8a8 1004 	strh.w	r1, [r8, #4]
 8016f3a:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8016f3e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016f42:	d009      	beq.n	8016f58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8016f44:	7b51      	ldrb	r1, [r2, #13]
 8016f46:	7992      	ldrb	r2, [r2, #6]
 8016f48:	0149      	lsls	r1, r1, #5
 8016f4a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016f4e:	4311      	orrs	r1, r2
 8016f50:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016f54:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8016f58:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016f5c:	d00d      	beq.n	8016f7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8016f5e:	1bdb      	subs	r3, r3, r7
 8016f60:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8016f64:	b29b      	uxth	r3, r3
 8016f66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016f6a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8016f6e:	10db      	asrs	r3, r3, #3
 8016f70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016f74:	4313      	orrs	r3, r2
 8016f76:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8016f7a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8016f7e:	00cb      	lsls	r3, r1, #3
 8016f80:	0648      	lsls	r0, r1, #25
 8016f82:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016f86:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016f8a:	ea43 0302 	orr.w	r3, r3, r2
 8016f8e:	bf44      	itt	mi
 8016f90:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016f94:	b21b      	sxthmi	r3, r3
 8016f96:	e7b1      	b.n	8016efc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08016f98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8016f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f9c:	461e      	mov	r6, r3
 8016f9e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8016fa0:	4604      	mov	r4, r0
 8016fa2:	4617      	mov	r7, r2
 8016fa4:	b92b      	cbnz	r3, 8016fb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8016fa6:	4b25      	ldr	r3, [pc, #148]	; (801703c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8016fa8:	21c0      	movs	r1, #192	; 0xc0
 8016faa:	4a25      	ldr	r2, [pc, #148]	; (8017040 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8016fac:	4825      	ldr	r0, [pc, #148]	; (8017044 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8016fae:	f002 fdc5 	bl	8019b3c <__assert_func>
 8016fb2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8016fb4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016fb8:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8016fbc:	f7f6 fcd2 	bl	800d964 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016fc0:	4605      	mov	r5, r0
 8016fc2:	b918      	cbnz	r0, 8016fcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8016fc4:	6030      	str	r0, [r6, #0]
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fcc:	683b      	ldr	r3, [r7, #0]
 8016fce:	4601      	mov	r1, r0
 8016fd0:	4638      	mov	r0, r7
 8016fd2:	68db      	ldr	r3, [r3, #12]
 8016fd4:	4798      	blx	r3
 8016fd6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8016fda:	4602      	mov	r2, r0
 8016fdc:	6030      	str	r0, [r6, #0]
 8016fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016fe2:	d213      	bcs.n	801700c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8016fe4:	4643      	mov	r3, r8
 8016fe6:	4639      	mov	r1, r7
 8016fe8:	4620      	mov	r0, r4
 8016fea:	f7ff fe33 	bl	8016c54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8016fee:	6030      	str	r0, [r6, #0]
 8016ff0:	6833      	ldr	r3, [r6, #0]
 8016ff2:	b143      	cbz	r3, 8017006 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8016ff4:	7b5a      	ldrb	r2, [r3, #13]
 8016ff6:	7a9b      	ldrb	r3, [r3, #10]
 8016ff8:	0052      	lsls	r2, r2, #1
 8016ffa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016ffe:	4313      	orrs	r3, r2
 8017000:	bf0c      	ite	eq
 8017002:	2301      	moveq	r3, #1
 8017004:	2300      	movne	r3, #0
 8017006:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801700a:	e7dc      	b.n	8016fc6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801700c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017010:	b29b      	uxth	r3, r3
 8017012:	2b7f      	cmp	r3, #127	; 0x7f
 8017014:	d804      	bhi.n	8017020 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8017016:	4639      	mov	r1, r7
 8017018:	4620      	mov	r0, r4
 801701a:	f7ff fd01 	bl	8016a20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801701e:	e7e6      	b.n	8016fee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8017020:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8017024:	2b00      	cmp	r3, #0
 8017026:	d0e3      	beq.n	8016ff0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8017028:	f640 1302 	movw	r3, #2306	; 0x902
 801702c:	429d      	cmp	r5, r3
 801702e:	d1df      	bne.n	8016ff0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8017030:	4601      	mov	r1, r0
 8017032:	4620      	mov	r0, r4
 8017034:	f7ff fcc4 	bl	80169c0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017038:	e7d9      	b.n	8016fee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801703a:	bf00      	nop
 801703c:	0801d138 	.word	0x0801d138
 8017040:	0801d3aa 	.word	0x0801d3aa
 8017044:	0801d141 	.word	0x0801d141

08017048 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017048:	b510      	push	{r4, lr}
 801704a:	4604      	mov	r4, r0
 801704c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801704e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017050:	b9d9      	cbnz	r1, 801708a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8017052:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017054:	2b0a      	cmp	r3, #10
 8017056:	d036      	beq.n	80170c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8017058:	4620      	mov	r0, r4
 801705a:	f7ff fc7a 	bl	8016952 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801705e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017060:	2b09      	cmp	r3, #9
 8017062:	d906      	bls.n	8017072 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8017064:	4b18      	ldr	r3, [pc, #96]	; (80170c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8017066:	f44f 7182 	mov.w	r1, #260	; 0x104
 801706a:	4a18      	ldr	r2, [pc, #96]	; (80170cc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801706c:	4818      	ldr	r0, [pc, #96]	; (80170d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801706e:	f002 fd65 	bl	8019b3c <__assert_func>
 8017072:	1c5a      	adds	r2, r3, #1
 8017074:	8622      	strh	r2, [r4, #48]	; 0x30
 8017076:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8017078:	4413      	add	r3, r2
 801707a:	b29b      	uxth	r3, r3
 801707c:	2b09      	cmp	r3, #9
 801707e:	bf88      	it	hi
 8017080:	3b0a      	subhi	r3, #10
 8017082:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017086:	8358      	strh	r0, [r3, #26]
 8017088:	e7e3      	b.n	8017052 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801708a:	2b0a      	cmp	r3, #10
 801708c:	d01b      	beq.n	80170c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801708e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017090:	3901      	subs	r1, #1
 8017092:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8017096:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8017098:	8721      	strh	r1, [r4, #56]	; 0x38
 801709a:	1c51      	adds	r1, r2, #1
 801709c:	b289      	uxth	r1, r1
 801709e:	2901      	cmp	r1, #1
 80170a0:	bf8a      	itet	hi
 80170a2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80170a6:	86e1      	strhls	r1, [r4, #54]	; 0x36
 80170a8:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 80170aa:	2b09      	cmp	r3, #9
 80170ac:	d8da      	bhi.n	8017064 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 80170ae:	1c5a      	adds	r2, r3, #1
 80170b0:	8622      	strh	r2, [r4, #48]	; 0x30
 80170b2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80170b4:	4413      	add	r3, r2
 80170b6:	b29b      	uxth	r3, r3
 80170b8:	2b09      	cmp	r3, #9
 80170ba:	bf88      	it	hi
 80170bc:	3b0a      	subhi	r3, #10
 80170be:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80170c2:	8358      	strh	r0, [r3, #26]
 80170c4:	e7c2      	b.n	801704c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80170c6:	bd10      	pop	{r4, pc}
 80170c8:	0801d16d 	.word	0x0801d16d
 80170cc:	0801d500 	.word	0x0801d500
 80170d0:	0801d141 	.word	0x0801d141

080170d4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80170d4:	b538      	push	{r3, r4, r5, lr}
 80170d6:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80170d8:	4604      	mov	r4, r0
 80170da:	b92a      	cbnz	r2, 80170e8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 80170dc:	4b13      	ldr	r3, [pc, #76]	; (801712c <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80170de:	21d5      	movs	r1, #213	; 0xd5
 80170e0:	4a13      	ldr	r2, [pc, #76]	; (8017130 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80170e2:	4814      	ldr	r0, [pc, #80]	; (8017134 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 80170e4:	f002 fd2a 	bl	8019b3c <__assert_func>
 80170e8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80170ea:	3a01      	subs	r2, #1
 80170ec:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80170f0:	8b4d      	ldrh	r5, [r1, #26]
 80170f2:	8602      	strh	r2, [r0, #48]	; 0x30
 80170f4:	1c5a      	adds	r2, r3, #1
 80170f6:	b292      	uxth	r2, r2
 80170f8:	2a09      	cmp	r2, #9
 80170fa:	bf8a      	itet	hi
 80170fc:	3b09      	subhi	r3, #9
 80170fe:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8017100:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 8017102:	f7ff ffa1 	bl	8017048 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017106:	8b23      	ldrh	r3, [r4, #24]
 8017108:	2b01      	cmp	r3, #1
 801710a:	bf9c      	itt	ls
 801710c:	3301      	addls	r3, #1
 801710e:	8323      	strhls	r3, [r4, #24]
 8017110:	8ae3      	ldrh	r3, [r4, #22]
 8017112:	b90b      	cbnz	r3, 8017118 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8017114:	2302      	movs	r3, #2
 8017116:	82e3      	strh	r3, [r4, #22]
 8017118:	8ae3      	ldrh	r3, [r4, #22]
 801711a:	4628      	mov	r0, r5
 801711c:	3b01      	subs	r3, #1
 801711e:	b29b      	uxth	r3, r3
 8017120:	82e3      	strh	r3, [r4, #22]
 8017122:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017126:	8265      	strh	r5, [r4, #18]
 8017128:	bd38      	pop	{r3, r4, r5, pc}
 801712a:	bf00      	nop
 801712c:	0801d138 	.word	0x0801d138
 8017130:	0801d455 	.word	0x0801d455
 8017134:	0801d141 	.word	0x0801d141

08017138 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017138:	428a      	cmp	r2, r1
 801713a:	b538      	push	{r3, r4, r5, lr}
 801713c:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801713e:	d90c      	bls.n	801715a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8017140:	b92c      	cbnz	r4, 801714e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8017142:	4b1c      	ldr	r3, [pc, #112]	; (80171b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8017144:	21e1      	movs	r1, #225	; 0xe1
 8017146:	4a1c      	ldr	r2, [pc, #112]	; (80171b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8017148:	481c      	ldr	r0, [pc, #112]	; (80171bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801714a:	f002 fcf7 	bl	8019b3c <__assert_func>
 801714e:	3c01      	subs	r4, #1
 8017150:	4b1b      	ldr	r3, [pc, #108]	; (80171c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8017152:	4a1c      	ldr	r2, [pc, #112]	; (80171c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8017154:	21c5      	movs	r1, #197	; 0xc5
 8017156:	8604      	strh	r4, [r0, #48]	; 0x30
 8017158:	e7f6      	b.n	8017148 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801715a:	428c      	cmp	r4, r1
 801715c:	d203      	bcs.n	8017166 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801715e:	4b1a      	ldr	r3, [pc, #104]	; (80171c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8017160:	21cb      	movs	r1, #203	; 0xcb
 8017162:	4a1a      	ldr	r2, [pc, #104]	; (80171cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8017164:	e7f0      	b.n	8017148 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8017166:	1a64      	subs	r4, r4, r1
 8017168:	250a      	movs	r5, #10
 801716a:	8604      	strh	r4, [r0, #48]	; 0x30
 801716c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801716e:	4421      	add	r1, r4
 8017170:	b289      	uxth	r1, r1
 8017172:	2909      	cmp	r1, #9
 8017174:	bf88      	it	hi
 8017176:	390a      	subhi	r1, #10
 8017178:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801717a:	b1ba      	cbz	r2, 80171ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801717c:	3a01      	subs	r2, #1
 801717e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8017180:	b292      	uxth	r2, r2
 8017182:	2909      	cmp	r1, #9
 8017184:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8017188:	d903      	bls.n	8017192 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801718a:	4b11      	ldr	r3, [pc, #68]	; (80171d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801718c:	21e6      	movs	r1, #230	; 0xe6
 801718e:	4a11      	ldr	r2, [pc, #68]	; (80171d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8017190:	e7da      	b.n	8017148 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8017192:	3101      	adds	r1, #1
 8017194:	8601      	strh	r1, [r0, #48]	; 0x30
 8017196:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8017198:	b901      	cbnz	r1, 801719c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801719a:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801719c:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801719e:	3901      	subs	r1, #1
 80171a0:	b289      	uxth	r1, r1
 80171a2:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80171a4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80171a8:	834c      	strh	r4, [r1, #26]
 80171aa:	e7e6      	b.n	801717a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 80171ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80171b0:	f7ff bf4a 	b.w	8017048 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80171b4:	0801d138 	.word	0x0801d138
 80171b8:	0801d22e 	.word	0x0801d22e
 80171bc:	0801d141 	.word	0x0801d141
 80171c0:	0801d179 	.word	0x0801d179
 80171c4:	0801d2d8 	.word	0x0801d2d8
 80171c8:	0801d187 	.word	0x0801d187
 80171cc:	0801d5af 	.word	0x0801d5af
 80171d0:	0801d193 	.word	0x0801d193
 80171d4:	0801d1a6 	.word	0x0801d1a6

080171d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80171d8:	3a01      	subs	r2, #1
 80171da:	b570      	push	{r4, r5, r6, lr}
 80171dc:	b292      	uxth	r2, r2
 80171de:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80171e2:	42b2      	cmp	r2, r6
 80171e4:	d019      	beq.n	801721a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 80171e6:	8b04      	ldrh	r4, [r0, #24]
 80171e8:	f831 5b02 	ldrh.w	r5, [r1], #2
 80171ec:	4294      	cmp	r4, r2
 80171ee:	d805      	bhi.n	80171fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 80171f0:	4b19      	ldr	r3, [pc, #100]	; (8017258 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80171f2:	4a1a      	ldr	r2, [pc, #104]	; (801725c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 80171f4:	21c5      	movs	r1, #197	; 0xc5
 80171f6:	481a      	ldr	r0, [pc, #104]	; (8017260 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 80171f8:	f002 fca0 	bl	8019b3c <__assert_func>
 80171fc:	8ac4      	ldrh	r4, [r0, #22]
 80171fe:	4414      	add	r4, r2
 8017200:	3a01      	subs	r2, #1
 8017202:	b2a4      	uxth	r4, r4
 8017204:	b292      	uxth	r2, r2
 8017206:	2c01      	cmp	r4, #1
 8017208:	bf88      	it	hi
 801720a:	3c02      	subhi	r4, #2
 801720c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017210:	8a64      	ldrh	r4, [r4, #18]
 8017212:	42ac      	cmp	r4, r5
 8017214:	d0e5      	beq.n	80171e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8017216:	2000      	movs	r0, #0
 8017218:	bd70      	pop	{r4, r5, r6, pc}
 801721a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801721e:	2400      	movs	r4, #0
 8017220:	4413      	add	r3, r2
 8017222:	b2a2      	uxth	r2, r4
 8017224:	429a      	cmp	r2, r3
 8017226:	da14      	bge.n	8017252 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8017228:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801722a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801722e:	4296      	cmp	r6, r2
 8017230:	d802      	bhi.n	8017238 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8017232:	4b09      	ldr	r3, [pc, #36]	; (8017258 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8017234:	4a0b      	ldr	r2, [pc, #44]	; (8017264 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8017236:	e7dd      	b.n	80171f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8017238:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801723a:	3401      	adds	r4, #1
 801723c:	4432      	add	r2, r6
 801723e:	b292      	uxth	r2, r2
 8017240:	2a09      	cmp	r2, #9
 8017242:	bf88      	it	hi
 8017244:	3a0a      	subhi	r2, #10
 8017246:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801724a:	8b52      	ldrh	r2, [r2, #26]
 801724c:	42aa      	cmp	r2, r5
 801724e:	d0e8      	beq.n	8017222 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8017250:	e7e1      	b.n	8017216 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8017252:	2001      	movs	r0, #1
 8017254:	e7e0      	b.n	8017218 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8017256:	bf00      	nop
 8017258:	0801d179 	.word	0x0801d179
 801725c:	0801d633 	.word	0x0801d633
 8017260:	0801d141 	.word	0x0801d141
 8017264:	0801d2d8 	.word	0x0801d2d8

08017268 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801726c:	4605      	mov	r5, r0
 801726e:	4616      	mov	r6, r2
 8017270:	1c8c      	adds	r4, r1, #2
 8017272:	8809      	ldrh	r1, [r1, #0]
 8017274:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017278:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801727c:	42b3      	cmp	r3, r6
 801727e:	d124      	bne.n	80172ca <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017280:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017284:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017288:	f001 070f 	and.w	r7, r1, #15
 801728c:	4652      	mov	r2, sl
 801728e:	f8cd 8000 	str.w	r8, [sp]
 8017292:	464b      	mov	r3, r9
 8017294:	4621      	mov	r1, r4
 8017296:	4628      	mov	r0, r5
 8017298:	f7ff ff9e 	bl	80171d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801729c:	4683      	mov	fp, r0
 801729e:	b168      	cbz	r0, 80172bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80172a0:	eb0a 0109 	add.w	r1, sl, r9
 80172a4:	463a      	mov	r2, r7
 80172a6:	4628      	mov	r0, r5
 80172a8:	4441      	add	r1, r8
 80172aa:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80172ae:	4649      	mov	r1, r9
 80172b0:	f7ff ff42 	bl	8017138 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80172b4:	4658      	mov	r0, fp
 80172b6:	b003      	add	sp, #12
 80172b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172bc:	eb07 010a 	add.w	r1, r7, sl
 80172c0:	4449      	add	r1, r9
 80172c2:	4441      	add	r1, r8
 80172c4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80172c8:	e7d2      	b.n	8017270 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80172ca:	f04f 0b00 	mov.w	fp, #0
 80172ce:	e7f1      	b.n	80172b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080172d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80172d0:	b570      	push	{r4, r5, r6, lr}
 80172d2:	8810      	ldrh	r0, [r2, #0]
 80172d4:	4298      	cmp	r0, r3
 80172d6:	d817      	bhi.n	8017308 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80172d8:	1e48      	subs	r0, r1, #1
 80172da:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80172de:	4298      	cmp	r0, r3
 80172e0:	d312      	bcc.n	8017308 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80172e2:	2400      	movs	r4, #0
 80172e4:	428c      	cmp	r4, r1
 80172e6:	d20f      	bcs.n	8017308 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80172e8:	1860      	adds	r0, r4, r1
 80172ea:	1040      	asrs	r0, r0, #1
 80172ec:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80172f0:	0085      	lsls	r5, r0, #2
 80172f2:	42b3      	cmp	r3, r6
 80172f4:	d902      	bls.n	80172fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80172f6:	3001      	adds	r0, #1
 80172f8:	b284      	uxth	r4, r0
 80172fa:	e7f3      	b.n	80172e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80172fc:	d201      	bcs.n	8017302 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80172fe:	b281      	uxth	r1, r0
 8017300:	e7f0      	b.n	80172e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017302:	442a      	add	r2, r5
 8017304:	8850      	ldrh	r0, [r2, #2]
 8017306:	bd70      	pop	{r4, r5, r6, pc}
 8017308:	2000      	movs	r0, #0
 801730a:	e7fc      	b.n	8017306 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801730c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801730c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017310:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8017312:	4604      	mov	r4, r0
 8017314:	260b      	movs	r6, #11
 8017316:	886f      	ldrh	r7, [r5, #2]
 8017318:	087f      	lsrs	r7, r7, #1
 801731a:	3e01      	subs	r6, #1
 801731c:	d01b      	beq.n	8017356 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801731e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017320:	b92b      	cbnz	r3, 801732e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8017322:	4b0e      	ldr	r3, [pc, #56]	; (801735c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8017324:	21c0      	movs	r1, #192	; 0xc0
 8017326:	4a0e      	ldr	r2, [pc, #56]	; (8017360 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8017328:	480e      	ldr	r0, [pc, #56]	; (8017364 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801732a:	f002 fc07 	bl	8019b3c <__assert_func>
 801732e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8017330:	462a      	mov	r2, r5
 8017332:	4639      	mov	r1, r7
 8017334:	4620      	mov	r0, r4
 8017336:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801733a:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801733e:	4643      	mov	r3, r8
 8017340:	f7ff ffc6 	bl	80172d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8017344:	b138      	cbz	r0, 8017356 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8017346:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801734a:	4642      	mov	r2, r8
 801734c:	4620      	mov	r0, r4
 801734e:	f7ff ff8b 	bl	8017268 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8017352:	2800      	cmp	r0, #0
 8017354:	d1e1      	bne.n	801731a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8017356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801735a:	bf00      	nop
 801735c:	0801d138 	.word	0x0801d138
 8017360:	0801d3aa 	.word	0x0801d3aa
 8017364:	0801d141 	.word	0x0801d141

08017368 <_ZN8touchgfx8ceil28_4El>:
 8017368:	f110 030f 	adds.w	r3, r0, #15
 801736c:	d401      	bmi.n	8017372 <_ZN8touchgfx8ceil28_4El+0xa>
 801736e:	1118      	asrs	r0, r3, #4
 8017370:	4770      	bx	lr
 8017372:	2210      	movs	r2, #16
 8017374:	f1c0 0001 	rsb	r0, r0, #1
 8017378:	fb93 f3f2 	sdiv	r3, r3, r2
 801737c:	f010 000f 	ands.w	r0, r0, #15
 8017380:	bf18      	it	ne
 8017382:	2001      	movne	r0, #1
 8017384:	1a18      	subs	r0, r3, r0
 8017386:	4770      	bx	lr

08017388 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8017388:	2900      	cmp	r1, #0
 801738a:	b538      	push	{r3, r4, r5, lr}
 801738c:	dc05      	bgt.n	801739a <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801738e:	4b0f      	ldr	r3, [pc, #60]	; (80173cc <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8017390:	21fa      	movs	r1, #250	; 0xfa
 8017392:	4a0f      	ldr	r2, [pc, #60]	; (80173d0 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8017394:	480f      	ldr	r0, [pc, #60]	; (80173d4 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8017396:	f002 fbd1 	bl	8019b3c <__assert_func>
 801739a:	2800      	cmp	r0, #0
 801739c:	db06      	blt.n	80173ac <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801739e:	fb90 f4f1 	sdiv	r4, r0, r1
 80173a2:	fb01 0114 	mls	r1, r1, r4, r0
 80173a6:	6014      	str	r4, [r2, #0]
 80173a8:	6019      	str	r1, [r3, #0]
 80173aa:	bd38      	pop	{r3, r4, r5, pc}
 80173ac:	4240      	negs	r0, r0
 80173ae:	fb90 f4f1 	sdiv	r4, r0, r1
 80173b2:	4265      	negs	r5, r4
 80173b4:	fb01 0014 	mls	r0, r1, r4, r0
 80173b8:	6015      	str	r5, [r2, #0]
 80173ba:	6018      	str	r0, [r3, #0]
 80173bc:	2800      	cmp	r0, #0
 80173be:	d0f4      	beq.n	80173aa <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 80173c0:	6810      	ldr	r0, [r2, #0]
 80173c2:	3801      	subs	r0, #1
 80173c4:	6010      	str	r0, [r2, #0]
 80173c6:	6818      	ldr	r0, [r3, #0]
 80173c8:	1a09      	subs	r1, r1, r0
 80173ca:	e7ed      	b.n	80173a8 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 80173cc:	0801d704 	.word	0x0801d704
 80173d0:	0801d743 	.word	0x0801d743
 80173d4:	0801d714 	.word	0x0801d714

080173d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80173d8:	b570      	push	{r4, r5, r6, lr}
 80173da:	694a      	ldr	r2, [r1, #20]
 80173dc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80173de:	684b      	ldr	r3, [r1, #4]
 80173e0:	1b54      	subs	r4, r2, r5
 80173e2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80173e4:	f000 8106 	beq.w	80175f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80173e8:	1b9b      	subs	r3, r3, r6
 80173ea:	d003      	beq.n	80173f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80173ec:	4363      	muls	r3, r4
 80173ee:	2210      	movs	r2, #16
 80173f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80173f4:	680c      	ldr	r4, [r1, #0]
 80173f6:	698a      	ldr	r2, [r1, #24]
 80173f8:	1b65      	subs	r5, r4, r5
 80173fa:	f000 80fd 	beq.w	80175f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80173fe:	1b92      	subs	r2, r2, r6
 8017400:	d003      	beq.n	801740a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017402:	436a      	muls	r2, r5
 8017404:	2410      	movs	r4, #16
 8017406:	fb92 f2f4 	sdiv	r2, r2, r4
 801740a:	1a9b      	subs	r3, r3, r2
 801740c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8017634 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017414:	460a      	mov	r2, r1
 8017416:	ee07 3a90 	vmov	s15, r3
 801741a:	f100 040c 	add.w	r4, r0, #12
 801741e:	4603      	mov	r3, r0
 8017420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017424:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017428:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801742c:	eeb1 6a43 	vneg.f32	s12, s6
 8017430:	edd2 7a02 	vldr	s15, [r2, #8]
 8017434:	3214      	adds	r2, #20
 8017436:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801743a:	ece3 6a01 	vstmia	r3!, {s13}
 801743e:	429c      	cmp	r4, r3
 8017440:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017444:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017448:	edc3 7a02 	vstr	s15, [r3, #8]
 801744c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8017450:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017454:	edc3 7a05 	vstr	s15, [r3, #20]
 8017458:	d1ea      	bne.n	8017430 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801745a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801745c:	698b      	ldr	r3, [r1, #24]
 801745e:	edd0 4a02 	vldr	s9, [r0, #8]
 8017462:	1a9b      	subs	r3, r3, r2
 8017464:	edd0 3a00 	vldr	s7, [r0]
 8017468:	edd0 6a01 	vldr	s13, [r0, #4]
 801746c:	ee07 3a90 	vmov	s15, r3
 8017470:	684b      	ldr	r3, [r1, #4]
 8017472:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017476:	ed90 5a05 	vldr	s10, [r0, #20]
 801747a:	1a9b      	subs	r3, r3, r2
 801747c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017480:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8017484:	ed90 2a03 	vldr	s4, [r0, #12]
 8017488:	ee07 3a10 	vmov	s14, r3
 801748c:	edd0 5a04 	vldr	s11, [r0, #16]
 8017490:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017494:	ed90 1a07 	vldr	s2, [r0, #28]
 8017498:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801749c:	edd0 2a06 	vldr	s5, [r0, #24]
 80174a0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80174a4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80174a8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80174ac:	ee32 5a45 	vsub.f32	s10, s4, s10
 80174b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80174b4:	ee67 7a83 	vmul.f32	s15, s15, s6
 80174b8:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80174bc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80174be:	694a      	ldr	r2, [r1, #20]
 80174c0:	1b13      	subs	r3, r2, r4
 80174c2:	ee07 3a10 	vmov	s14, r3
 80174c6:	680b      	ldr	r3, [r1, #0]
 80174c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80174cc:	1b1b      	subs	r3, r3, r4
 80174ce:	ee27 7a04 	vmul.f32	s14, s14, s8
 80174d2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80174d6:	ee07 3a10 	vmov	s14, r3
 80174da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80174de:	ee27 7a04 	vmul.f32	s14, s14, s8
 80174e2:	eee6 4a87 	vfma.f32	s9, s13, s14
 80174e6:	ee64 4a86 	vmul.f32	s9, s9, s12
 80174ea:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80174ee:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80174f0:	698b      	ldr	r3, [r1, #24]
 80174f2:	1a9b      	subs	r3, r3, r2
 80174f4:	ee06 3a90 	vmov	s13, r3
 80174f8:	684b      	ldr	r3, [r1, #4]
 80174fa:	1a9b      	subs	r3, r3, r2
 80174fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017500:	ee07 3a10 	vmov	s14, r3
 8017504:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017508:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801750c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017510:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017514:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017518:	ee66 6a83 	vmul.f32	s13, s13, s6
 801751c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8017520:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017522:	694a      	ldr	r2, [r1, #20]
 8017524:	1b13      	subs	r3, r2, r4
 8017526:	ee07 3a10 	vmov	s14, r3
 801752a:	680b      	ldr	r3, [r1, #0]
 801752c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017530:	1b1b      	subs	r3, r3, r4
 8017532:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017536:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801753a:	ee07 3a10 	vmov	s14, r3
 801753e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017542:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017546:	eea5 5a87 	vfma.f32	s10, s11, s14
 801754a:	edd0 5a08 	vldr	s11, [r0, #32]
 801754e:	ee31 1a65 	vsub.f32	s2, s2, s11
 8017552:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8017556:	ee25 5a06 	vmul.f32	s10, s10, s12
 801755a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801755e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017560:	698b      	ldr	r3, [r1, #24]
 8017562:	1a9b      	subs	r3, r3, r2
 8017564:	ee07 3a10 	vmov	s14, r3
 8017568:	684b      	ldr	r3, [r1, #4]
 801756a:	1a9b      	subs	r3, r3, r2
 801756c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017570:	ee01 3a90 	vmov	s3, r3
 8017574:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017578:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801757c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8017580:	ee61 1a84 	vmul.f32	s3, s3, s8
 8017584:	eea1 7a21 	vfma.f32	s14, s2, s3
 8017588:	ee27 7a03 	vmul.f32	s14, s14, s6
 801758c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8017590:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017592:	694a      	ldr	r2, [r1, #20]
 8017594:	1b13      	subs	r3, r2, r4
 8017596:	ee03 3a10 	vmov	s6, r3
 801759a:	680b      	ldr	r3, [r1, #0]
 801759c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80175a0:	1b1b      	subs	r3, r3, r4
 80175a2:	ee23 3a04 	vmul.f32	s6, s6, s8
 80175a6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80175aa:	ee03 3a10 	vmov	s6, r3
 80175ae:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80175b2:	ee23 4a04 	vmul.f32	s8, s6, s8
 80175b6:	eee1 5a04 	vfma.f32	s11, s2, s8
 80175ba:	ee25 6a86 	vmul.f32	s12, s11, s12
 80175be:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80175c2:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80175c6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80175ca:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80175ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d2:	dd13      	ble.n	80175fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80175d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80175d8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80175dc:	63c3      	str	r3, [r0, #60]	; 0x3c
 80175de:	eee3 7a87 	vfma.f32	s15, s7, s14
 80175e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80175e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175ea:	dd15      	ble.n	8017618 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80175ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80175f0:	6403      	str	r3, [r0, #64]	; 0x40
 80175f2:	bd70      	pop	{r4, r5, r6, pc}
 80175f4:	4623      	mov	r3, r4
 80175f6:	e6fd      	b.n	80173f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80175f8:	462a      	mov	r2, r5
 80175fa:	e706      	b.n	801740a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80175fc:	d502      	bpl.n	8017604 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80175fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017602:	e7e9      	b.n	80175d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017604:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8017608:	eea3 2a85 	vfma.f32	s4, s7, s10
 801760c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8017610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017614:	dade      	bge.n	80175d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8017616:	e7f2      	b.n	80175fe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8017618:	d502      	bpl.n	8017620 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801761a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801761e:	e7e7      	b.n	80175f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8017620:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017624:	eee3 4a86 	vfma.f32	s9, s7, s12
 8017628:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801762c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017630:	dadc      	bge.n	80175ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8017632:	e7f2      	b.n	801761a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8017634:	3d800000 	.word	0x3d800000

08017638 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8017638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801763c:	f04f 0814 	mov.w	r8, #20
 8017640:	4604      	mov	r4, r0
 8017642:	4617      	mov	r7, r2
 8017644:	460d      	mov	r5, r1
 8017646:	fb08 f903 	mul.w	r9, r8, r3
 801764a:	461e      	mov	r6, r3
 801764c:	eb02 0a09 	add.w	sl, r2, r9
 8017650:	f8da 0004 	ldr.w	r0, [sl, #4]
 8017654:	f7ff fe88 	bl	8017368 <_ZN8touchgfx8ceil28_4El>
 8017658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801765a:	6160      	str	r0, [r4, #20]
 801765c:	fb08 f803 	mul.w	r8, r8, r3
 8017660:	9001      	str	r0, [sp, #4]
 8017662:	eb07 0b08 	add.w	fp, r7, r8
 8017666:	f8db 0004 	ldr.w	r0, [fp, #4]
 801766a:	f7ff fe7d 	bl	8017368 <_ZN8touchgfx8ceil28_4El>
 801766e:	9a01      	ldr	r2, [sp, #4]
 8017670:	1a80      	subs	r0, r0, r2
 8017672:	61a0      	str	r0, [r4, #24]
 8017674:	2800      	cmp	r0, #0
 8017676:	f000 8088 	beq.w	801778a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801767a:	f857 3009 	ldr.w	r3, [r7, r9]
 801767e:	f857 c008 	ldr.w	ip, [r7, r8]
 8017682:	f8db 0004 	ldr.w	r0, [fp, #4]
 8017686:	ebac 0c03 	sub.w	ip, ip, r3
 801768a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801768e:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 8017692:	1a40      	subs	r0, r0, r1
 8017694:	fb0b f202 	mul.w	r2, fp, r2
 8017698:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801769c:	fb0c 2211 	mls	r2, ip, r1, r2
 80176a0:	4641      	mov	r1, r8
 80176a2:	fb00 2003 	mla	r0, r0, r3, r2
 80176a6:	f104 0310 	add.w	r3, r4, #16
 80176aa:	4622      	mov	r2, r4
 80176ac:	3801      	subs	r0, #1
 80176ae:	4440      	add	r0, r8
 80176b0:	f7ff fe6a 	bl	8017388 <_ZN8touchgfx11floorDivModEllRlS0_>
 80176b4:	f104 0308 	add.w	r3, r4, #8
 80176b8:	1d22      	adds	r2, r4, #4
 80176ba:	4641      	mov	r1, r8
 80176bc:	4658      	mov	r0, fp
 80176be:	f7ff fe63 	bl	8017388 <_ZN8touchgfx11floorDivModEllRlS0_>
 80176c2:	f8c4 800c 	str.w	r8, [r4, #12]
 80176c6:	6962      	ldr	r2, [r4, #20]
 80176c8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80176cc:	eddf 6a31 	vldr	s13, [pc, #196]	; 8017794 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80176d0:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80176d4:	6822      	ldr	r2, [r4, #0]
 80176d6:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 80176da:	ee07 3a10 	vmov	s14, r3
 80176de:	f857 3009 	ldr.w	r3, [r7, r9]
 80176e2:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80176e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80176ea:	ee07 3a90 	vmov	s15, r3
 80176ee:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 80176f2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80176f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80176fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80176fe:	edd3 6a00 	vldr	s13, [r3]
 8017702:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017706:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801770a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801770e:	edc4 6a07 	vstr	s13, [r4, #28]
 8017712:	edd4 6a01 	vldr	s13, [r4, #4]
 8017716:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801771a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801771e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8017722:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017726:	ed84 6a08 	vstr	s12, [r4, #32]
 801772a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801772c:	6262      	str	r2, [r4, #36]	; 0x24
 801772e:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8017732:	ed93 6a03 	vldr	s12, [r3, #12]
 8017736:	eea5 6a87 	vfma.f32	s12, s11, s14
 801773a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801773e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8017742:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8017746:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801774a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801774e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017752:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8017756:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8017758:	6322      	str	r2, [r4, #48]	; 0x30
 801775a:	ed93 6a06 	vldr	s12, [r3, #24]
 801775e:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 8017762:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017766:	eeb0 7a46 	vmov.f32	s14, s12
 801776a:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801776e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017772:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8017776:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801777a:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801777e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017782:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8017786:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8017788:	63e3      	str	r3, [r4, #60]	; 0x3c
 801778a:	4620      	mov	r0, r4
 801778c:	b003      	add	sp, #12
 801778e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017792:	bf00      	nop
 8017794:	3d800000 	.word	0x3d800000

08017798 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8017798:	4b06      	ldr	r3, [pc, #24]	; (80177b4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801779a:	881a      	ldrh	r2, [r3, #0]
 801779c:	4282      	cmp	r2, r0
 801779e:	d807      	bhi.n	80177b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80177a0:	4b05      	ldr	r3, [pc, #20]	; (80177b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80177a2:	881b      	ldrh	r3, [r3, #0]
 80177a4:	4413      	add	r3, r2
 80177a6:	4298      	cmp	r0, r3
 80177a8:	bfac      	ite	ge
 80177aa:	2000      	movge	r0, #0
 80177ac:	2001      	movlt	r0, #1
 80177ae:	4770      	bx	lr
 80177b0:	2000      	movs	r0, #0
 80177b2:	4770      	bx	lr
 80177b4:	20001cec 	.word	0x20001cec
 80177b8:	20001cee 	.word	0x20001cee

080177bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80177bc:	b508      	push	{r3, lr}
 80177be:	4601      	mov	r1, r0
 80177c0:	f7ff ffea 	bl	8017798 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80177c4:	b118      	cbz	r0, 80177ce <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80177c6:	4b02      	ldr	r3, [pc, #8]	; (80177d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80177ce:	bd08      	pop	{r3, pc}
 80177d0:	20001ce4 	.word	0x20001ce4

080177d4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80177d4:	b508      	push	{r3, lr}
 80177d6:	4b14      	ldr	r3, [pc, #80]	; (8017828 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80177d8:	6819      	ldr	r1, [r3, #0]
 80177da:	b931      	cbnz	r1, 80177ea <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 80177dc:	4b13      	ldr	r3, [pc, #76]	; (801782c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80177de:	f240 3187 	movw	r1, #903	; 0x387
 80177e2:	4a13      	ldr	r2, [pc, #76]	; (8017830 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80177e4:	4813      	ldr	r0, [pc, #76]	; (8017834 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80177e6:	f002 f9a9 	bl	8019b3c <__assert_func>
 80177ea:	4a13      	ldr	r2, [pc, #76]	; (8017838 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80177ec:	8803      	ldrh	r3, [r0, #0]
 80177ee:	8812      	ldrh	r2, [r2, #0]
 80177f0:	4293      	cmp	r3, r2
 80177f2:	d204      	bcs.n	80177fe <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80177f4:	2214      	movs	r2, #20
 80177f6:	fb02 1303 	mla	r3, r2, r3, r1
 80177fa:	8918      	ldrh	r0, [r3, #8]
 80177fc:	bd08      	pop	{r3, pc}
 80177fe:	490f      	ldr	r1, [pc, #60]	; (801783c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8017800:	8809      	ldrh	r1, [r1, #0]
 8017802:	4411      	add	r1, r2
 8017804:	428b      	cmp	r3, r1
 8017806:	da06      	bge.n	8017816 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8017808:	1a9b      	subs	r3, r3, r2
 801780a:	4a0d      	ldr	r2, [pc, #52]	; (8017840 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801780c:	210e      	movs	r1, #14
 801780e:	6812      	ldr	r2, [r2, #0]
 8017810:	fb01 2303 	mla	r3, r1, r3, r2
 8017814:	e7f1      	b.n	80177fa <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8017816:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801781a:	4293      	cmp	r3, r2
 801781c:	bf0a      	itet	eq
 801781e:	4b09      	ldreq	r3, [pc, #36]	; (8017844 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8017820:	2000      	movne	r0, #0
 8017822:	8818      	ldrheq	r0, [r3, #0]
 8017824:	e7ea      	b.n	80177fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8017826:	bf00      	nop
 8017828:	20001cf0 	.word	0x20001cf0
 801782c:	0801d7e1 	.word	0x0801d7e1
 8017830:	0801d884 	.word	0x0801d884
 8017834:	0801d7bc 	.word	0x0801d7bc
 8017838:	20001cec 	.word	0x20001cec
 801783c:	20001cee 	.word	0x20001cee
 8017840:	20001ce8 	.word	0x20001ce8
 8017844:	20001c92 	.word	0x20001c92

08017848 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8017848:	b508      	push	{r3, lr}
 801784a:	4b14      	ldr	r3, [pc, #80]	; (801789c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801784c:	6819      	ldr	r1, [r3, #0]
 801784e:	b931      	cbnz	r1, 801785e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8017850:	4b13      	ldr	r3, [pc, #76]	; (80178a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8017852:	f240 319b 	movw	r1, #923	; 0x39b
 8017856:	4a13      	ldr	r2, [pc, #76]	; (80178a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8017858:	4813      	ldr	r0, [pc, #76]	; (80178a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801785a:	f002 f96f 	bl	8019b3c <__assert_func>
 801785e:	4a13      	ldr	r2, [pc, #76]	; (80178ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8017860:	8803      	ldrh	r3, [r0, #0]
 8017862:	8812      	ldrh	r2, [r2, #0]
 8017864:	4293      	cmp	r3, r2
 8017866:	d204      	bcs.n	8017872 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8017868:	2214      	movs	r2, #20
 801786a:	fb02 1303 	mla	r3, r2, r3, r1
 801786e:	8958      	ldrh	r0, [r3, #10]
 8017870:	bd08      	pop	{r3, pc}
 8017872:	490f      	ldr	r1, [pc, #60]	; (80178b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8017874:	8809      	ldrh	r1, [r1, #0]
 8017876:	4411      	add	r1, r2
 8017878:	428b      	cmp	r3, r1
 801787a:	da06      	bge.n	801788a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801787c:	1a9b      	subs	r3, r3, r2
 801787e:	4a0d      	ldr	r2, [pc, #52]	; (80178b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8017880:	210e      	movs	r1, #14
 8017882:	6812      	ldr	r2, [r2, #0]
 8017884:	fb01 2303 	mla	r3, r1, r3, r2
 8017888:	e7f1      	b.n	801786e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801788a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801788e:	4293      	cmp	r3, r2
 8017890:	bf0a      	itet	eq
 8017892:	4b09      	ldreq	r3, [pc, #36]	; (80178b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8017894:	2000      	movne	r0, #0
 8017896:	8818      	ldrheq	r0, [r3, #0]
 8017898:	e7ea      	b.n	8017870 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801789a:	bf00      	nop
 801789c:	20001cf0 	.word	0x20001cf0
 80178a0:	0801d7e1 	.word	0x0801d7e1
 80178a4:	0801d8b0 	.word	0x0801d8b0
 80178a8:	0801d7bc 	.word	0x0801d7bc
 80178ac:	20001cec 	.word	0x20001cec
 80178b0:	20001cee 	.word	0x20001cee
 80178b4:	20001ce8 	.word	0x20001ce8
 80178b8:	20001c94 	.word	0x20001c94

080178bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80178bc:	4b23      	ldr	r3, [pc, #140]	; (801794c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80178be:	b510      	push	{r4, lr}
 80178c0:	681c      	ldr	r4, [r3, #0]
 80178c2:	b934      	cbnz	r4, 80178d2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80178c4:	4b22      	ldr	r3, [pc, #136]	; (8017950 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80178c6:	f240 31af 	movw	r1, #943	; 0x3af
 80178ca:	4a22      	ldr	r2, [pc, #136]	; (8017954 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80178cc:	4822      	ldr	r0, [pc, #136]	; (8017958 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80178ce:	f002 f935 	bl	8019b3c <__assert_func>
 80178d2:	4a22      	ldr	r2, [pc, #136]	; (801795c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80178d4:	880b      	ldrh	r3, [r1, #0]
 80178d6:	8812      	ldrh	r2, [r2, #0]
 80178d8:	4293      	cmp	r3, r2
 80178da:	d211      	bcs.n	8017900 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 80178dc:	2214      	movs	r2, #20
 80178de:	fb02 4303 	mla	r3, r2, r3, r4
 80178e2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80178e6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80178ea:	8a1a      	ldrh	r2, [r3, #16]
 80178ec:	8a5b      	ldrh	r3, [r3, #18]
 80178ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80178f2:	8004      	strh	r4, [r0, #0]
 80178f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80178f8:	8041      	strh	r1, [r0, #2]
 80178fa:	8082      	strh	r2, [r0, #4]
 80178fc:	80c3      	strh	r3, [r0, #6]
 80178fe:	e00e      	b.n	801791e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8017900:	4917      	ldr	r1, [pc, #92]	; (8017960 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8017902:	8809      	ldrh	r1, [r1, #0]
 8017904:	4411      	add	r1, r2
 8017906:	428b      	cmp	r3, r1
 8017908:	da0a      	bge.n	8017920 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801790a:	1a9b      	subs	r3, r3, r2
 801790c:	4a15      	ldr	r2, [pc, #84]	; (8017964 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801790e:	210e      	movs	r1, #14
 8017910:	6812      	ldr	r2, [r2, #0]
 8017912:	fb01 2303 	mla	r3, r1, r3, r2
 8017916:	681a      	ldr	r2, [r3, #0]
 8017918:	6002      	str	r2, [r0, #0]
 801791a:	685a      	ldr	r2, [r3, #4]
 801791c:	6042      	str	r2, [r0, #4]
 801791e:	bd10      	pop	{r4, pc}
 8017920:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017924:	4293      	cmp	r3, r2
 8017926:	d10b      	bne.n	8017940 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8017928:	4b0f      	ldr	r3, [pc, #60]	; (8017968 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801792a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801792e:	4b0f      	ldr	r3, [pc, #60]	; (801796c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8017930:	8081      	strh	r1, [r0, #4]
 8017932:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017936:	2300      	movs	r3, #0
 8017938:	80c2      	strh	r2, [r0, #6]
 801793a:	8003      	strh	r3, [r0, #0]
 801793c:	8043      	strh	r3, [r0, #2]
 801793e:	e7ee      	b.n	801791e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8017940:	2300      	movs	r3, #0
 8017942:	8003      	strh	r3, [r0, #0]
 8017944:	8043      	strh	r3, [r0, #2]
 8017946:	8083      	strh	r3, [r0, #4]
 8017948:	e7d8      	b.n	80178fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801794a:	bf00      	nop
 801794c:	20001cf0 	.word	0x20001cf0
 8017950:	0801d7e1 	.word	0x0801d7e1
 8017954:	0801d81d 	.word	0x0801d81d
 8017958:	0801d7bc 	.word	0x0801d7bc
 801795c:	20001cec 	.word	0x20001cec
 8017960:	20001cee 	.word	0x20001cee
 8017964:	20001ce8 	.word	0x20001ce8
 8017968:	20001c92 	.word	0x20001c92
 801796c:	20001c94 	.word	0x20001c94

08017970 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8017970:	4b18      	ldr	r3, [pc, #96]	; (80179d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	b34b      	cbz	r3, 80179ca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8017976:	4a18      	ldr	r2, [pc, #96]	; (80179d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8017978:	8800      	ldrh	r0, [r0, #0]
 801797a:	8812      	ldrh	r2, [r2, #0]
 801797c:	4290      	cmp	r0, r2
 801797e:	d211      	bcs.n	80179a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8017980:	2214      	movs	r2, #20
 8017982:	fb02 3300 	mla	r3, r2, r0, r3
 8017986:	8a1a      	ldrh	r2, [r3, #16]
 8017988:	8919      	ldrh	r1, [r3, #8]
 801798a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801798e:	428a      	cmp	r2, r1
 8017990:	db1d      	blt.n	80179ce <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8017992:	8a58      	ldrh	r0, [r3, #18]
 8017994:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017998:	895b      	ldrh	r3, [r3, #10]
 801799a:	4298      	cmp	r0, r3
 801799c:	bfac      	ite	ge
 801799e:	2000      	movge	r0, #0
 80179a0:	2001      	movlt	r0, #1
 80179a2:	4770      	bx	lr
 80179a4:	4b0d      	ldr	r3, [pc, #52]	; (80179dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80179a6:	881b      	ldrh	r3, [r3, #0]
 80179a8:	4413      	add	r3, r2
 80179aa:	4298      	cmp	r0, r3
 80179ac:	da0d      	bge.n	80179ca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80179ae:	4b0c      	ldr	r3, [pc, #48]	; (80179e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80179b0:	1a80      	subs	r0, r0, r2
 80179b2:	220e      	movs	r2, #14
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	fb02 3300 	mla	r3, r2, r0, r3
 80179ba:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80179be:	891a      	ldrh	r2, [r3, #8]
 80179c0:	4291      	cmp	r1, r2
 80179c2:	db04      	blt.n	80179ce <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80179c4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80179c8:	e7e6      	b.n	8017998 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 80179ca:	2000      	movs	r0, #0
 80179cc:	4770      	bx	lr
 80179ce:	2001      	movs	r0, #1
 80179d0:	4770      	bx	lr
 80179d2:	bf00      	nop
 80179d4:	20001cf0 	.word	0x20001cf0
 80179d8:	20001cec 	.word	0x20001cec
 80179dc:	20001cee 	.word	0x20001cee
 80179e0:	20001ce8 	.word	0x20001ce8

080179e4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80179e4:	b508      	push	{r3, lr}
 80179e6:	4b12      	ldr	r3, [pc, #72]	; (8017a30 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80179e8:	6819      	ldr	r1, [r3, #0]
 80179ea:	b931      	cbnz	r1, 80179fa <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80179ec:	4b11      	ldr	r3, [pc, #68]	; (8017a34 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80179ee:	f240 31d3 	movw	r1, #979	; 0x3d3
 80179f2:	4a11      	ldr	r2, [pc, #68]	; (8017a38 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80179f4:	4811      	ldr	r0, [pc, #68]	; (8017a3c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80179f6:	f002 f8a1 	bl	8019b3c <__assert_func>
 80179fa:	8803      	ldrh	r3, [r0, #0]
 80179fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017a00:	4293      	cmp	r3, r2
 8017a02:	d012      	beq.n	8017a2a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8017a04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017a08:	4293      	cmp	r3, r2
 8017a0a:	d103      	bne.n	8017a14 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8017a0c:	4b0c      	ldr	r3, [pc, #48]	; (8017a40 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8017a12:	bd08      	pop	{r3, pc}
 8017a14:	4a0b      	ldr	r2, [pc, #44]	; (8017a44 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8017a16:	6812      	ldr	r2, [r2, #0]
 8017a18:	b11a      	cbz	r2, 8017a22 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8017a1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017a1e:	2800      	cmp	r0, #0
 8017a20:	d1f7      	bne.n	8017a12 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8017a22:	2214      	movs	r2, #20
 8017a24:	4353      	muls	r3, r2
 8017a26:	58c8      	ldr	r0, [r1, r3]
 8017a28:	e7f3      	b.n	8017a12 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8017a2a:	2000      	movs	r0, #0
 8017a2c:	e7f1      	b.n	8017a12 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8017a2e:	bf00      	nop
 8017a30:	20001cf0 	.word	0x20001cf0
 8017a34:	0801d7e1 	.word	0x0801d7e1
 8017a38:	0801d853 	.word	0x0801d853
 8017a3c:	0801d7bc 	.word	0x0801d7bc
 8017a40:	20001ca0 	.word	0x20001ca0
 8017a44:	20001ce4 	.word	0x20001ce4

08017a48 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8017a48:	8802      	ldrh	r2, [r0, #0]
 8017a4a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8017a4e:	429a      	cmp	r2, r3
 8017a50:	d845      	bhi.n	8017ade <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8017a52:	4b24      	ldr	r3, [pc, #144]	; (8017ae4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017a54:	8818      	ldrh	r0, [r3, #0]
 8017a56:	4282      	cmp	r2, r0
 8017a58:	d221      	bcs.n	8017a9e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8017a5a:	4b23      	ldr	r3, [pc, #140]	; (8017ae8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017a5c:	6819      	ldr	r1, [r3, #0]
 8017a5e:	2314      	movs	r3, #20
 8017a60:	fb03 1302 	mla	r3, r3, r2, r1
 8017a64:	6858      	ldr	r0, [r3, #4]
 8017a66:	2800      	cmp	r0, #0
 8017a68:	d03a      	beq.n	8017ae0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8017a6a:	4920      	ldr	r1, [pc, #128]	; (8017aec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017a6c:	6809      	ldr	r1, [r1, #0]
 8017a6e:	2900      	cmp	r1, #0
 8017a70:	d036      	beq.n	8017ae0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8017a72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017a76:	2900      	cmp	r1, #0
 8017a78:	d032      	beq.n	8017ae0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8017a7a:	891a      	ldrh	r2, [r3, #8]
 8017a7c:	8958      	ldrh	r0, [r3, #10]
 8017a7e:	4350      	muls	r0, r2
 8017a80:	7c5a      	ldrb	r2, [r3, #17]
 8017a82:	7cdb      	ldrb	r3, [r3, #19]
 8017a84:	0952      	lsrs	r2, r2, #5
 8017a86:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017a8a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8017a8e:	2b0b      	cmp	r3, #11
 8017a90:	bf18      	it	ne
 8017a92:	0040      	lslne	r0, r0, #1
 8017a94:	3003      	adds	r0, #3
 8017a96:	f020 0003 	bic.w	r0, r0, #3
 8017a9a:	4408      	add	r0, r1
 8017a9c:	4770      	bx	lr
 8017a9e:	4b14      	ldr	r3, [pc, #80]	; (8017af0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8017aa0:	881b      	ldrh	r3, [r3, #0]
 8017aa2:	4403      	add	r3, r0
 8017aa4:	429a      	cmp	r2, r3
 8017aa6:	da1a      	bge.n	8017ade <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8017aa8:	4b12      	ldr	r3, [pc, #72]	; (8017af4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8017aaa:	1a10      	subs	r0, r2, r0
 8017aac:	210e      	movs	r1, #14
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	fb01 3000 	mla	r0, r1, r0, r3
 8017ab4:	7b03      	ldrb	r3, [r0, #12]
 8017ab6:	f003 031f 	and.w	r3, r3, #31
 8017aba:	2b0b      	cmp	r3, #11
 8017abc:	d10b      	bne.n	8017ad6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017abe:	8903      	ldrh	r3, [r0, #8]
 8017ac0:	8940      	ldrh	r0, [r0, #10]
 8017ac2:	4358      	muls	r0, r3
 8017ac4:	4b09      	ldr	r3, [pc, #36]	; (8017aec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017ac6:	3003      	adds	r0, #3
 8017ac8:	6819      	ldr	r1, [r3, #0]
 8017aca:	f020 0303 	bic.w	r3, r0, #3
 8017ace:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8017ad2:	4418      	add	r0, r3
 8017ad4:	4770      	bx	lr
 8017ad6:	2b0d      	cmp	r3, #13
 8017ad8:	d101      	bne.n	8017ade <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8017ada:	300d      	adds	r0, #13
 8017adc:	4770      	bx	lr
 8017ade:	2000      	movs	r0, #0
 8017ae0:	4770      	bx	lr
 8017ae2:	bf00      	nop
 8017ae4:	20001cec 	.word	0x20001cec
 8017ae8:	20001cf0 	.word	0x20001cf0
 8017aec:	20001ce4 	.word	0x20001ce4
 8017af0:	20001cee 	.word	0x20001cee
 8017af4:	20001ce8 	.word	0x20001ce8

08017af8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8017af8:	4b19      	ldr	r3, [pc, #100]	; (8017b60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8017afa:	6819      	ldr	r1, [r3, #0]
 8017afc:	8803      	ldrh	r3, [r0, #0]
 8017afe:	b1e9      	cbz	r1, 8017b3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8017b00:	4a18      	ldr	r2, [pc, #96]	; (8017b64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8017b02:	8812      	ldrh	r2, [r2, #0]
 8017b04:	429a      	cmp	r2, r3
 8017b06:	d90a      	bls.n	8017b1e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8017b08:	2214      	movs	r2, #20
 8017b0a:	fb02 1303 	mla	r3, r2, r3, r1
 8017b0e:	7c58      	ldrb	r0, [r3, #17]
 8017b10:	0942      	lsrs	r2, r0, #5
 8017b12:	7cd8      	ldrb	r0, [r3, #19]
 8017b14:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8017b18:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8017b1c:	4770      	bx	lr
 8017b1e:	4912      	ldr	r1, [pc, #72]	; (8017b68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8017b20:	8809      	ldrh	r1, [r1, #0]
 8017b22:	4411      	add	r1, r2
 8017b24:	428b      	cmp	r3, r1
 8017b26:	da09      	bge.n	8017b3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8017b28:	1a9b      	subs	r3, r3, r2
 8017b2a:	4a10      	ldr	r2, [pc, #64]	; (8017b6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8017b2c:	210e      	movs	r1, #14
 8017b2e:	6812      	ldr	r2, [r2, #0]
 8017b30:	fb01 2303 	mla	r3, r1, r3, r2
 8017b34:	7b18      	ldrb	r0, [r3, #12]
 8017b36:	f000 001f 	and.w	r0, r0, #31
 8017b3a:	4770      	bx	lr
 8017b3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017b40:	4293      	cmp	r3, r2
 8017b42:	d10a      	bne.n	8017b5a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8017b44:	4b0a      	ldr	r3, [pc, #40]	; (8017b70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017b4c:	b10a      	cbz	r2, 8017b52 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8017b4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017b50:	b900      	cbnz	r0, 8017b54 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8017b52:	6898      	ldr	r0, [r3, #8]
 8017b54:	6803      	ldr	r3, [r0, #0]
 8017b56:	6a1b      	ldr	r3, [r3, #32]
 8017b58:	4718      	bx	r3
 8017b5a:	2000      	movs	r0, #0
 8017b5c:	4770      	bx	lr
 8017b5e:	bf00      	nop
 8017b60:	20001cf0 	.word	0x20001cf0
 8017b64:	20001cec 	.word	0x20001cec
 8017b68:	20001cee 	.word	0x20001cee
 8017b6c:	20001ce8 	.word	0x20001ce8
 8017b70:	20001ca0 	.word	0x20001ca0

08017b74 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8017b74:	2010      	movs	r0, #16
 8017b76:	4770      	bx	lr

08017b78 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8017b78:	2000      	movs	r0, #0
 8017b7a:	4770      	bx	lr

08017b7c <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 8017b7c:	00d2      	lsls	r2, r2, #3
 8017b7e:	0209      	lsls	r1, r1, #8
 8017b80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017b84:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8017b88:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8017b8c:	4310      	orrs	r0, r2
 8017b8e:	4770      	bx	lr

08017b90 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8017b90:	0a09      	lsrs	r1, r1, #8
 8017b92:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8017b96:	4770      	bx	lr

08017b98 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8017b98:	08c9      	lsrs	r1, r1, #3
 8017b9a:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8017b9e:	4770      	bx	lr

08017ba0 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8017ba0:	00c9      	lsls	r1, r1, #3
 8017ba2:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8017ba6:	4770      	bx	lr

08017ba8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017ba8:	2bff      	cmp	r3, #255	; 0xff
 8017baa:	d050      	beq.n	8017c4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8017bac:	2a0b      	cmp	r2, #11
 8017bae:	d04a      	beq.n	8017c46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017bb0:	d80e      	bhi.n	8017bd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8017bb2:	2a03      	cmp	r2, #3
 8017bb4:	d03f      	beq.n	8017c36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8017bb6:	d804      	bhi.n	8017bc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017bb8:	2a01      	cmp	r2, #1
 8017bba:	d03e      	beq.n	8017c3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8017bbc:	d93f      	bls.n	8017c3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017bbe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017bc0:	4770      	bx	lr
 8017bc2:	2a09      	cmp	r2, #9
 8017bc4:	d03f      	beq.n	8017c46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017bc6:	d83c      	bhi.n	8017c42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017bc8:	2a08      	cmp	r2, #8
 8017bca:	d03a      	beq.n	8017c42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017bcc:	2000      	movs	r0, #0
 8017bce:	4770      	bx	lr
 8017bd0:	2a2f      	cmp	r2, #47	; 0x2f
 8017bd2:	d024      	beq.n	8017c1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8017bd4:	d80d      	bhi.n	8017bf2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8017bd6:	2a2d      	cmp	r2, #45	; 0x2d
 8017bd8:	d014      	beq.n	8017c04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8017bda:	d826      	bhi.n	8017c2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8017bdc:	2a2c      	cmp	r2, #44	; 0x2c
 8017bde:	d1f5      	bne.n	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017be0:	684b      	ldr	r3, [r1, #4]
 8017be2:	781b      	ldrb	r3, [r3, #0]
 8017be4:	2b01      	cmp	r3, #1
 8017be6:	d018      	beq.n	8017c1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8017be8:	d323      	bcc.n	8017c32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8017bea:	2b02      	cmp	r3, #2
 8017bec:	d1ee      	bne.n	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017bee:	6880      	ldr	r0, [r0, #8]
 8017bf0:	4770      	bx	lr
 8017bf2:	2a31      	cmp	r2, #49	; 0x31
 8017bf4:	d004      	beq.n	8017c00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8017bf6:	d328      	bcc.n	8017c4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017bf8:	2a32      	cmp	r2, #50	; 0x32
 8017bfa:	d026      	beq.n	8017c4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017bfc:	2a33      	cmp	r2, #51	; 0x33
 8017bfe:	d1e5      	bne.n	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017c00:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8017c02:	4770      	bx	lr
 8017c04:	684b      	ldr	r3, [r1, #4]
 8017c06:	781b      	ldrb	r3, [r3, #0]
 8017c08:	2b01      	cmp	r3, #1
 8017c0a:	d004      	beq.n	8017c16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017c0c:	d30b      	bcc.n	8017c26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8017c0e:	2b02      	cmp	r3, #2
 8017c10:	d1dc      	bne.n	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017c12:	6900      	ldr	r0, [r0, #16]
 8017c14:	4770      	bx	lr
 8017c16:	6a00      	ldr	r0, [r0, #32]
 8017c18:	4770      	bx	lr
 8017c1a:	6980      	ldr	r0, [r0, #24]
 8017c1c:	4770      	bx	lr
 8017c1e:	684b      	ldr	r3, [r1, #4]
 8017c20:	781b      	ldrb	r3, [r3, #0]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d1d2      	bne.n	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017c26:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017c28:	4770      	bx	lr
 8017c2a:	684b      	ldr	r3, [r1, #4]
 8017c2c:	781b      	ldrb	r3, [r3, #0]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d1cc      	bne.n	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017c32:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017c34:	4770      	bx	lr
 8017c36:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8017c38:	4770      	bx	lr
 8017c3a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8017c3c:	4770      	bx	lr
 8017c3e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8017c40:	4770      	bx	lr
 8017c42:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8017c44:	4770      	bx	lr
 8017c46:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8017c48:	4770      	bx	lr
 8017c4a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8017c4c:	4770      	bx	lr
 8017c4e:	2a0b      	cmp	r2, #11
 8017c50:	d049      	beq.n	8017ce6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017c52:	d80e      	bhi.n	8017c72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8017c54:	2a03      	cmp	r2, #3
 8017c56:	d040      	beq.n	8017cda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8017c58:	d804      	bhi.n	8017c64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8017c5a:	2a01      	cmp	r2, #1
 8017c5c:	d03f      	beq.n	8017cde <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8017c5e:	d940      	bls.n	8017ce2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8017c60:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8017c62:	4770      	bx	lr
 8017c64:	2a09      	cmp	r2, #9
 8017c66:	d03e      	beq.n	8017ce6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017c68:	d801      	bhi.n	8017c6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8017c6a:	2a08      	cmp	r2, #8
 8017c6c:	d1ae      	bne.n	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017c6e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8017c70:	4770      	bx	lr
 8017c72:	2a2f      	cmp	r2, #47	; 0x2f
 8017c74:	d024      	beq.n	8017cc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8017c76:	d80d      	bhi.n	8017c94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8017c78:	2a2d      	cmp	r2, #45	; 0x2d
 8017c7a:	d014      	beq.n	8017ca6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8017c7c:	d826      	bhi.n	8017ccc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8017c7e:	2a2c      	cmp	r2, #44	; 0x2c
 8017c80:	d1a4      	bne.n	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017c82:	684b      	ldr	r3, [r1, #4]
 8017c84:	781b      	ldrb	r3, [r3, #0]
 8017c86:	2b01      	cmp	r3, #1
 8017c88:	d018      	beq.n	8017cbc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8017c8a:	d324      	bcc.n	8017cd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8017c8c:	2b02      	cmp	r3, #2
 8017c8e:	d19d      	bne.n	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017c90:	68c0      	ldr	r0, [r0, #12]
 8017c92:	4770      	bx	lr
 8017c94:	2a31      	cmp	r2, #49	; 0x31
 8017c96:	d004      	beq.n	8017ca2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8017c98:	d327      	bcc.n	8017cea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8017c9a:	2a32      	cmp	r2, #50	; 0x32
 8017c9c:	d025      	beq.n	8017cea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8017c9e:	2a33      	cmp	r2, #51	; 0x33
 8017ca0:	d194      	bne.n	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017ca2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8017ca4:	4770      	bx	lr
 8017ca6:	684b      	ldr	r3, [r1, #4]
 8017ca8:	781b      	ldrb	r3, [r3, #0]
 8017caa:	2b01      	cmp	r3, #1
 8017cac:	d004      	beq.n	8017cb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8017cae:	d30b      	bcc.n	8017cc8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8017cb0:	2b02      	cmp	r3, #2
 8017cb2:	d18b      	bne.n	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017cb4:	6940      	ldr	r0, [r0, #20]
 8017cb6:	4770      	bx	lr
 8017cb8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017cba:	4770      	bx	lr
 8017cbc:	69c0      	ldr	r0, [r0, #28]
 8017cbe:	4770      	bx	lr
 8017cc0:	684b      	ldr	r3, [r1, #4]
 8017cc2:	781b      	ldrb	r3, [r3, #0]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d181      	bne.n	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017cc8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8017cca:	4770      	bx	lr
 8017ccc:	684b      	ldr	r3, [r1, #4]
 8017cce:	781b      	ldrb	r3, [r3, #0]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	f47f af7b 	bne.w	8017bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017cd6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8017cd8:	4770      	bx	lr
 8017cda:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8017cdc:	4770      	bx	lr
 8017cde:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8017ce0:	4770      	bx	lr
 8017ce2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8017ce4:	4770      	bx	lr
 8017ce6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8017ce8:	4770      	bx	lr
 8017cea:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8017cec:	4770      	bx	lr
	...

08017cf0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8017cf0:	b508      	push	{r3, lr}
 8017cf2:	4b06      	ldr	r3, [pc, #24]	; (8017d0c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8017cf4:	8818      	ldrh	r0, [r3, #0]
 8017cf6:	b928      	cbnz	r0, 8017d04 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8017cf8:	4b05      	ldr	r3, [pc, #20]	; (8017d10 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8017cfa:	2154      	movs	r1, #84	; 0x54
 8017cfc:	4a05      	ldr	r2, [pc, #20]	; (8017d14 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8017cfe:	4806      	ldr	r0, [pc, #24]	; (8017d18 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8017d00:	f001 ff1c 	bl	8019b3c <__assert_func>
 8017d04:	0040      	lsls	r0, r0, #1
 8017d06:	b280      	uxth	r0, r0
 8017d08:	bd08      	pop	{r3, pc}
 8017d0a:	bf00      	nop
 8017d0c:	20001c98 	.word	0x20001c98
 8017d10:	0801dc99 	.word	0x0801dc99
 8017d14:	0801df85 	.word	0x0801df85
 8017d18:	0801dcdb 	.word	0x0801dcdb

08017d1c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8017d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d20:	b08b      	sub	sp, #44	; 0x2c
 8017d22:	460f      	mov	r7, r1
 8017d24:	4616      	mov	r6, r2
 8017d26:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8017d2a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8017d2e:	f1bb 0f00 	cmp.w	fp, #0
 8017d32:	d046      	beq.n	8017dc2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8017d34:	6810      	ldr	r0, [r2, #0]
 8017d36:	ad06      	add	r5, sp, #24
 8017d38:	6851      	ldr	r1, [r2, #4]
 8017d3a:	c503      	stmia	r5!, {r0, r1}
 8017d3c:	6818      	ldr	r0, [r3, #0]
 8017d3e:	ad08      	add	r5, sp, #32
 8017d40:	6859      	ldr	r1, [r3, #4]
 8017d42:	c503      	stmia	r5!, {r0, r1}
 8017d44:	a806      	add	r0, sp, #24
 8017d46:	f7fe fc0b 	bl	8016560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017d4a:	4631      	mov	r1, r6
 8017d4c:	a808      	add	r0, sp, #32
 8017d4e:	f7fe fbef 	bl	8016530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017d52:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017d56:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017d5a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8017d5e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8017d62:	fb16 2103 	smlabb	r1, r6, r3, r2
 8017d66:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8017d6a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8017d6e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017d72:	4f5d      	ldr	r7, [pc, #372]	; (8017ee8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 8017d74:	440a      	add	r2, r1
 8017d76:	6838      	ldr	r0, [r7, #0]
 8017d78:	46b9      	mov	r9, r7
 8017d7a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017d7e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017d82:	4413      	add	r3, r2
 8017d84:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017d88:	6803      	ldr	r3, [r0, #0]
 8017d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d8c:	4798      	blx	r3
 8017d8e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8017d92:	d019      	beq.n	8017dc8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8017d94:	f010 0f04 	tst.w	r0, #4
 8017d98:	d01a      	beq.n	8017dd0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8017d9a:	f8d9 0000 	ldr.w	r0, [r9]
 8017d9e:	b2ad      	uxth	r5, r5
 8017da0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017da4:	6801      	ldr	r1, [r0, #0]
 8017da6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017daa:	9501      	str	r5, [sp, #4]
 8017dac:	e9cd b403 	strd	fp, r4, [sp, #12]
 8017db0:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8017db4:	9402      	str	r4, [sp, #8]
 8017db6:	fa1f f488 	uxth.w	r4, r8
 8017dba:	9400      	str	r4, [sp, #0]
 8017dbc:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8017dbe:	4631      	mov	r1, r6
 8017dc0:	47a0      	blx	r4
 8017dc2:	b00b      	add	sp, #44	; 0x2c
 8017dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dc8:	b914      	cbnz	r4, 8017dd0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8017dca:	f010 0f01 	tst.w	r0, #1
 8017dce:	e7e3      	b.n	8017d98 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8017dd0:	f8d9 0000 	ldr.w	r0, [r9]
 8017dd4:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8017dd8:	6803      	ldr	r3, [r0, #0]
 8017dda:	6a1b      	ldr	r3, [r3, #32]
 8017ddc:	4798      	blx	r3
 8017dde:	4b43      	ldr	r3, [pc, #268]	; (8017eec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 8017de0:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8017de4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8017de8:	881a      	ldrh	r2, [r3, #0]
 8017dea:	469a      	mov	sl, r3
 8017dec:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8017df0:	fb05 f502 	mul.w	r5, r5, r2
 8017df4:	fb02 1404 	mla	r4, r2, r4, r1
 8017df8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017dfc:	d058      	beq.n	8017eb0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 8017dfe:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8017e02:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8017e06:	fa1f f28b 	uxth.w	r2, fp
 8017e0a:	469e      	mov	lr, r3
 8017e0c:	fa1f f989 	uxth.w	r9, r9
 8017e10:	42ac      	cmp	r4, r5
 8017e12:	d263      	bcs.n	8017edc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 8017e14:	eb04 0a07 	add.w	sl, r4, r7
 8017e18:	4554      	cmp	r4, sl
 8017e1a:	d23c      	bcs.n	8017e96 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 8017e1c:	8821      	ldrh	r1, [r4, #0]
 8017e1e:	f836 3b02 	ldrh.w	r3, [r6], #2
 8017e22:	1208      	asrs	r0, r1, #8
 8017e24:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8017e28:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8017e2c:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8017e30:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017e34:	00c9      	lsls	r1, r1, #3
 8017e36:	fb10 f009 	smulbb	r0, r0, r9
 8017e3a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8017e3e:	b2c9      	uxtb	r1, r1
 8017e40:	fb0c 0c02 	mla	ip, ip, r2, r0
 8017e44:	10d8      	asrs	r0, r3, #3
 8017e46:	fb11 f109 	smulbb	r1, r1, r9
 8017e4a:	00db      	lsls	r3, r3, #3
 8017e4c:	fa1f fc8c 	uxth.w	ip, ip
 8017e50:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8017e54:	fb1b fb09 	smulbb	fp, fp, r9
 8017e58:	b2db      	uxtb	r3, r3
 8017e5a:	fb03 1302 	mla	r3, r3, r2, r1
 8017e5e:	f10c 0101 	add.w	r1, ip, #1
 8017e62:	fb00 b002 	mla	r0, r0, r2, fp
 8017e66:	b29b      	uxth	r3, r3
 8017e68:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8017e6c:	1c59      	adds	r1, r3, #1
 8017e6e:	b280      	uxth	r0, r0
 8017e70:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017e74:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8017e78:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8017e7c:	ea4c 0c03 	orr.w	ip, ip, r3
 8017e80:	1c43      	adds	r3, r0, #1
 8017e82:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8017e86:	0940      	lsrs	r0, r0, #5
 8017e88:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8017e8c:	ea4c 0c00 	orr.w	ip, ip, r0
 8017e90:	f824 cb02 	strh.w	ip, [r4], #2
 8017e94:	e7c0      	b.n	8017e18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8017e96:	f8be 3000 	ldrh.w	r3, [lr]
 8017e9a:	eba3 0308 	sub.w	r3, r3, r8
 8017e9e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017ea2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017ea6:	eba3 0308 	sub.w	r3, r3, r8
 8017eaa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8017eae:	e7af      	b.n	8017e10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8017eb0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8017eb4:	f8d9 0000 	ldr.w	r0, [r9]
 8017eb8:	42ac      	cmp	r4, r5
 8017eba:	6803      	ldr	r3, [r0, #0]
 8017ebc:	d20e      	bcs.n	8017edc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 8017ebe:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 8017ec2:	4632      	mov	r2, r6
 8017ec4:	463b      	mov	r3, r7
 8017ec6:	4621      	mov	r1, r4
 8017ec8:	47c0      	blx	r8
 8017eca:	f8ba 3000 	ldrh.w	r3, [sl]
 8017ece:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017ed2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017ed6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8017eda:	e7eb      	b.n	8017eb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 8017edc:	4b02      	ldr	r3, [pc, #8]	; (8017ee8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 8017ede:	6818      	ldr	r0, [r3, #0]
 8017ee0:	6803      	ldr	r3, [r0, #0]
 8017ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ee4:	4798      	blx	r3
 8017ee6:	e76c      	b.n	8017dc2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8017ee8:	20001ca0 	.word	0x20001ca0
 8017eec:	20001c98 	.word	0x20001c98

08017ef0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8017ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ef4:	460d      	mov	r5, r1
 8017ef6:	b087      	sub	sp, #28
 8017ef8:	4614      	mov	r4, r2
 8017efa:	4698      	mov	r8, r3
 8017efc:	b333      	cbz	r3, 8017f4c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8017efe:	4608      	mov	r0, r1
 8017f00:	f7fc fda8 	bl	8014a54 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f04:	bb10      	cbnz	r0, 8017f4c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8017f06:	6828      	ldr	r0, [r5, #0]
 8017f08:	ab04      	add	r3, sp, #16
 8017f0a:	6869      	ldr	r1, [r5, #4]
 8017f0c:	4e72      	ldr	r6, [pc, #456]	; (80180d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 8017f0e:	c303      	stmia	r3!, {r0, r1}
 8017f10:	a804      	add	r0, sp, #16
 8017f12:	f7fe fb25 	bl	8016560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017f16:	6830      	ldr	r0, [r6, #0]
 8017f18:	6803      	ldr	r3, [r0, #0]
 8017f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f1c:	4798      	blx	r3
 8017f1e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017f22:	d016      	beq.n	8017f52 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017f24:	f010 0f08 	tst.w	r0, #8
 8017f28:	d016      	beq.n	8017f58 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8017f2a:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 8017f2e:	6830      	ldr	r0, [r6, #0]
 8017f30:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017f34:	6801      	ldr	r1, [r0, #0]
 8017f36:	9501      	str	r5, [sp, #4]
 8017f38:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8017f3c:	f8cd 8008 	str.w	r8, [sp, #8]
 8017f40:	9500      	str	r5, [sp, #0]
 8017f42:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017f46:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8017f48:	4621      	mov	r1, r4
 8017f4a:	47a8      	blx	r5
 8017f4c:	b007      	add	sp, #28
 8017f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f52:	f010 0f02 	tst.w	r0, #2
 8017f56:	e7e7      	b.n	8017f28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 8017f58:	6830      	ldr	r0, [r6, #0]
 8017f5a:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8017f5e:	6803      	ldr	r3, [r0, #0]
 8017f60:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8017f64:	6a1b      	ldr	r3, [r3, #32]
 8017f66:	4798      	blx	r3
 8017f68:	495c      	ldr	r1, [pc, #368]	; (80180dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 8017f6a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8017f6e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017f72:	880b      	ldrh	r3, [r1, #0]
 8017f74:	468e      	mov	lr, r1
 8017f76:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8017f7a:	fb03 c202 	mla	r2, r3, r2, ip
 8017f7e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8017f82:	fb07 f203 	mul.w	r2, r7, r3
 8017f86:	d053      	beq.n	8018030 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 8017f88:	fa1f f388 	uxth.w	r3, r8
 8017f8c:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 8017f90:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8017f94:	ea4f 2814 	mov.w	r8, r4, lsr #8
 8017f98:	00e4      	lsls	r4, r4, #3
 8017f9a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8017f9e:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8017fa2:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 8017fa6:	b2e4      	uxtb	r4, r4
 8017fa8:	fb09 f903 	mul.w	r9, r9, r3
 8017fac:	fb08 f803 	mul.w	r8, r8, r3
 8017fb0:	006d      	lsls	r5, r5, #1
 8017fb2:	4363      	muls	r3, r4
 8017fb4:	b2bc      	uxth	r4, r7
 8017fb6:	4288      	cmp	r0, r1
 8017fb8:	f080 8088 	bcs.w	80180cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8017fbc:	eb00 0a05 	add.w	sl, r0, r5
 8017fc0:	4550      	cmp	r0, sl
 8017fc2:	d22f      	bcs.n	8018024 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 8017fc4:	8802      	ldrh	r2, [r0, #0]
 8017fc6:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8017fca:	10d7      	asrs	r7, r2, #3
 8017fcc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017fd0:	00d2      	lsls	r2, r2, #3
 8017fd2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017fd6:	fb1c fc04 	smulbb	ip, ip, r4
 8017fda:	b2d2      	uxtb	r2, r2
 8017fdc:	fb17 f704 	smulbb	r7, r7, r4
 8017fe0:	fb12 f204 	smulbb	r2, r2, r4
 8017fe4:	44c4      	add	ip, r8
 8017fe6:	444f      	add	r7, r9
 8017fe8:	fa1f fc8c 	uxth.w	ip, ip
 8017fec:	441a      	add	r2, r3
 8017fee:	b2bf      	uxth	r7, r7
 8017ff0:	b292      	uxth	r2, r2
 8017ff2:	f10c 0b01 	add.w	fp, ip, #1
 8017ff6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8017ffa:	f102 0b01 	add.w	fp, r2, #1
 8017ffe:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8018002:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018006:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801800a:	ea4c 0202 	orr.w	r2, ip, r2
 801800e:	f107 0c01 	add.w	ip, r7, #1
 8018012:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8018016:	097f      	lsrs	r7, r7, #5
 8018018:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801801c:	433a      	orrs	r2, r7
 801801e:	f820 2b02 	strh.w	r2, [r0], #2
 8018022:	e7cd      	b.n	8017fc0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 8018024:	f8be 2000 	ldrh.w	r2, [lr]
 8018028:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 801802c:	4410      	add	r0, r2
 801802e:	e7c2      	b.n	8017fb6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 8018030:	07db      	lsls	r3, r3, #31
 8018032:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018036:	d50e      	bpl.n	8018056 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 8018038:	006d      	lsls	r5, r5, #1
 801803a:	4290      	cmp	r0, r2
 801803c:	d246      	bcs.n	80180cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801803e:	1943      	adds	r3, r0, r5
 8018040:	4298      	cmp	r0, r3
 8018042:	d202      	bcs.n	801804a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 8018044:	f820 4b02 	strh.w	r4, [r0], #2
 8018048:	e7fa      	b.n	8018040 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 801804a:	f8be 3000 	ldrh.w	r3, [lr]
 801804e:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 8018052:	4418      	add	r0, r3
 8018054:	e7f1      	b.n	801803a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 8018056:	0787      	lsls	r7, r0, #30
 8018058:	462b      	mov	r3, r5
 801805a:	d00a      	beq.n	8018072 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 801805c:	4603      	mov	r3, r0
 801805e:	4293      	cmp	r3, r2
 8018060:	d205      	bcs.n	801806e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 8018062:	801c      	strh	r4, [r3, #0]
 8018064:	f8be 1000 	ldrh.w	r1, [lr]
 8018068:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801806c:	e7f7      	b.n	801805e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801806e:	3002      	adds	r0, #2
 8018070:	1e6b      	subs	r3, r5, #1
 8018072:	07dd      	lsls	r5, r3, #31
 8018074:	d50d      	bpl.n	8018092 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 8018076:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801807a:	3901      	subs	r1, #1
 801807c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018080:	4291      	cmp	r1, r2
 8018082:	d205      	bcs.n	8018090 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 8018084:	800c      	strh	r4, [r1, #0]
 8018086:	f8be 5000 	ldrh.w	r5, [lr]
 801808a:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 801808e:	e7f7      	b.n	8018080 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 8018090:	3b01      	subs	r3, #1
 8018092:	b1db      	cbz	r3, 80180cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8018094:	b2a1      	uxth	r1, r4
 8018096:	105b      	asrs	r3, r3, #1
 8018098:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 801809c:	009b      	lsls	r3, r3, #2
 801809e:	4290      	cmp	r0, r2
 80180a0:	d214      	bcs.n	80180cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 80180a2:	0781      	lsls	r1, r0, #30
 80180a4:	d006      	beq.n	80180b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 80180a6:	4b0e      	ldr	r3, [pc, #56]	; (80180e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 80180a8:	f44f 7162 	mov.w	r1, #904	; 0x388
 80180ac:	4a0d      	ldr	r2, [pc, #52]	; (80180e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 80180ae:	480e      	ldr	r0, [pc, #56]	; (80180e8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 80180b0:	f001 fd44 	bl	8019b3c <__assert_func>
 80180b4:	18c5      	adds	r5, r0, r3
 80180b6:	4601      	mov	r1, r0
 80180b8:	42a9      	cmp	r1, r5
 80180ba:	d202      	bcs.n	80180c2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 80180bc:	f841 4b04 	str.w	r4, [r1], #4
 80180c0:	e7fa      	b.n	80180b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 80180c2:	f8be 1000 	ldrh.w	r1, [lr]
 80180c6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80180ca:	e7e8      	b.n	801809e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 80180cc:	6830      	ldr	r0, [r6, #0]
 80180ce:	6803      	ldr	r3, [r0, #0]
 80180d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180d2:	4798      	blx	r3
 80180d4:	e73a      	b.n	8017f4c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80180d6:	bf00      	nop
 80180d8:	20001ca0 	.word	0x20001ca0
 80180dc:	20001c98 	.word	0x20001c98
 80180e0:	0801dc38 	.word	0x0801dc38
 80180e4:	0801e0dd 	.word	0x0801e0dd
 80180e8:	0801dc67 	.word	0x0801dc67

080180ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80180ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f0:	4f97      	ldr	r7, [pc, #604]	; (8018350 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 80180f2:	4616      	mov	r6, r2
 80180f4:	b08f      	sub	sp, #60	; 0x3c
 80180f6:	4604      	mov	r4, r0
 80180f8:	683a      	ldr	r2, [r7, #0]
 80180fa:	4689      	mov	r9, r1
 80180fc:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8018100:	2a02      	cmp	r2, #2
 8018102:	d106      	bne.n	8018112 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8018104:	4b93      	ldr	r3, [pc, #588]	; (8018354 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8018106:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 801810a:	4a93      	ldr	r2, [pc, #588]	; (8018358 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801810c:	4893      	ldr	r0, [pc, #588]	; (801835c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 801810e:	f001 fd15 	bl	8019b3c <__assert_func>
 8018112:	ad0e      	add	r5, sp, #56	; 0x38
 8018114:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8018118:	4628      	mov	r0, r5
 801811a:	f7ff fced 	bl	8017af8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801811e:	6823      	ldr	r3, [r4, #0]
 8018120:	4680      	mov	r8, r0
 8018122:	4620      	mov	r0, r4
 8018124:	6a1b      	ldr	r3, [r3, #32]
 8018126:	4798      	blx	r3
 8018128:	4580      	cmp	r8, r0
 801812a:	d004      	beq.n	8018136 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801812c:	4b8c      	ldr	r3, [pc, #560]	; (8018360 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801812e:	f240 21ca 	movw	r1, #714	; 0x2ca
 8018132:	4a89      	ldr	r2, [pc, #548]	; (8018358 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8018134:	e7ea      	b.n	801810c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8018136:	4628      	mov	r0, r5
 8018138:	f7ff fc54 	bl	80179e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801813c:	4680      	mov	r8, r0
 801813e:	b920      	cbnz	r0, 801814a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8018140:	4b88      	ldr	r3, [pc, #544]	; (8018364 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8018142:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8018146:	4a84      	ldr	r2, [pc, #528]	; (8018358 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8018148:	e7e0      	b.n	801810c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801814a:	6830      	ldr	r0, [r6, #0]
 801814c:	ab06      	add	r3, sp, #24
 801814e:	6871      	ldr	r1, [r6, #4]
 8018150:	f10d 0b20 	add.w	fp, sp, #32
 8018154:	f9b6 a000 	ldrsh.w	sl, [r6]
 8018158:	c303      	stmia	r3!, {r0, r1}
 801815a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801815e:	ab08      	add	r3, sp, #32
 8018160:	f8d9 0000 	ldr.w	r0, [r9]
 8018164:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8018168:	c303      	stmia	r3!, {r0, r1}
 801816a:	4628      	mov	r0, r5
 801816c:	f7ff fb32 	bl	80177d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018170:	4606      	mov	r6, r0
 8018172:	4628      	mov	r0, r5
 8018174:	4d7c      	ldr	r5, [pc, #496]	; (8018368 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8018176:	f7ff fb67 	bl	8017848 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801817a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801817e:	a806      	add	r0, sp, #24
 8018180:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8018184:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8018188:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801818c:	f7fe f9e8 	bl	8016560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018190:	4658      	mov	r0, fp
 8018192:	f7fe f9e5 	bl	8016560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018196:	a80a      	add	r0, sp, #40	; 0x28
 8018198:	f7fe f9e2 	bl	8016560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801819c:	4b73      	ldr	r3, [pc, #460]	; (801836c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801819e:	2100      	movs	r1, #0
 80181a0:	f9b5 2000 	ldrsh.w	r2, [r5]
 80181a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80181a8:	4658      	mov	r0, fp
 80181aa:	910c      	str	r1, [sp, #48]	; 0x30
 80181ac:	a90c      	add	r1, sp, #48	; 0x30
 80181ae:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80181b2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80181b6:	f7fc fc0a 	bl	80149ce <_ZN8touchgfx4RectaNERKS0_>
 80181ba:	4658      	mov	r0, fp
 80181bc:	f7fc fc4a 	bl	8014a54 <_ZNK8touchgfx4Rect7isEmptyEv>
 80181c0:	2800      	cmp	r0, #0
 80181c2:	f040 809a 	bne.w	80182fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80181c6:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80181ca:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80181ce:	4288      	cmp	r0, r1
 80181d0:	db38      	blt.n	8018244 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80181d2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80181d6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80181da:	429a      	cmp	r2, r3
 80181dc:	db32      	blt.n	8018244 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80181de:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80181e2:	4430      	add	r0, r6
 80181e4:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80181e8:	4431      	add	r1, r6
 80181ea:	b200      	sxth	r0, r0
 80181ec:	b209      	sxth	r1, r1
 80181ee:	4288      	cmp	r0, r1
 80181f0:	dc28      	bgt.n	8018244 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80181f2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80181f6:	440a      	add	r2, r1
 80181f8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80181fc:	440b      	add	r3, r1
 80181fe:	b212      	sxth	r2, r2
 8018200:	b21b      	sxth	r3, r3
 8018202:	429a      	cmp	r2, r3
 8018204:	dc1e      	bgt.n	8018244 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8018206:	6823      	ldr	r3, [r4, #0]
 8018208:	4620      	mov	r0, r4
 801820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801820c:	4798      	blx	r3
 801820e:	4682      	mov	sl, r0
 8018210:	6838      	ldr	r0, [r7, #0]
 8018212:	6803      	ldr	r3, [r0, #0]
 8018214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018216:	4798      	blx	r3
 8018218:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801821c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018220:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8018224:	1a5b      	subs	r3, r3, r1
 8018226:	b29b      	uxth	r3, r3
 8018228:	b21c      	sxth	r4, r3
 801822a:	2c00      	cmp	r4, #0
 801822c:	dc0f      	bgt.n	801824e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 801822e:	bf18      	it	ne
 8018230:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8018234:	4644      	mov	r4, r8
 8018236:	bf1e      	ittt	ne
 8018238:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 801823c:	185b      	addne	r3, r3, r1
 801823e:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8018242:	e009      	b.n	8018258 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8018244:	4b4a      	ldr	r3, [pc, #296]	; (8018370 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8018246:	f240 21da 	movw	r1, #730	; 0x2da
 801824a:	4a43      	ldr	r2, [pc, #268]	; (8018358 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801824c:	e75e      	b.n	801810c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801824e:	1ad3      	subs	r3, r2, r3
 8018250:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8018254:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8018258:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 801825c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8018260:	1b9b      	subs	r3, r3, r6
 8018262:	b29b      	uxth	r3, r3
 8018264:	b219      	sxth	r1, r3
 8018266:	2900      	cmp	r1, #0
 8018268:	dd4b      	ble.n	8018302 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 801826a:	4351      	muls	r1, r2
 801826c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8018270:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8018274:	1acb      	subs	r3, r1, r3
 8018276:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801827a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801827e:	2e00      	cmp	r6, #0
 8018280:	dd3b      	ble.n	80182fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8018282:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8018286:	2b00      	cmp	r3, #0
 8018288:	dd37      	ble.n	80182fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801828a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801828e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8018292:	fb0a f90c 	mul.w	r9, sl, ip
 8018296:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 801829a:	4481      	add	r9, r0
 801829c:	8828      	ldrh	r0, [r5, #0]
 801829e:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 80182a2:	1a41      	subs	r1, r0, r1
 80182a4:	42ae      	cmp	r6, r5
 80182a6:	bfa8      	it	ge
 80182a8:	462e      	movge	r6, r5
 80182aa:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80182ae:	428e      	cmp	r6, r1
 80182b0:	bfa8      	it	ge
 80182b2:	460e      	movge	r6, r1
 80182b4:	429d      	cmp	r5, r3
 80182b6:	bfa8      	it	ge
 80182b8:	461d      	movge	r5, r3
 80182ba:	4b2c      	ldr	r3, [pc, #176]	; (801836c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80182bc:	881b      	ldrh	r3, [r3, #0]
 80182be:	eba3 030c 	sub.w	r3, r3, ip
 80182c2:	429d      	cmp	r5, r3
 80182c4:	bfa8      	it	ge
 80182c6:	461d      	movge	r5, r3
 80182c8:	42b0      	cmp	r0, r6
 80182ca:	d12c      	bne.n	8018326 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 80182cc:	4290      	cmp	r0, r2
 80182ce:	d12a      	bne.n	8018326 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 80182d0:	6838      	ldr	r0, [r7, #0]
 80182d2:	9203      	str	r2, [sp, #12]
 80182d4:	6803      	ldr	r3, [r0, #0]
 80182d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182d8:	4798      	blx	r3
 80182da:	07c3      	lsls	r3, r0, #31
 80182dc:	d51a      	bpl.n	8018314 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80182de:	9a03      	ldr	r2, [sp, #12]
 80182e0:	6838      	ldr	r0, [r7, #0]
 80182e2:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 80182e6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80182ea:	6803      	ldr	r3, [r0, #0]
 80182ec:	9200      	str	r2, [sp, #0]
 80182ee:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80182f0:	4623      	mov	r3, r4
 80182f2:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80182f6:	47a8      	blx	r5
 80182f8:	4680      	mov	r8, r0
 80182fa:	4640      	mov	r0, r8
 80182fc:	b00f      	add	sp, #60	; 0x3c
 80182fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018302:	bf1f      	itttt	ne
 8018304:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8018308:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 801830c:	185b      	addne	r3, r3, r1
 801830e:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8018312:	e7b2      	b.n	801827a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8018314:	6838      	ldr	r0, [r7, #0]
 8018316:	464a      	mov	r2, r9
 8018318:	4621      	mov	r1, r4
 801831a:	6803      	ldr	r3, [r0, #0]
 801831c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801831e:	fb05 f30a 	mul.w	r3, r5, sl
 8018322:	47b0      	blx	r6
 8018324:	e7e9      	b.n	80182fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8018326:	4355      	muls	r5, r2
 8018328:	0076      	lsls	r6, r6, #1
 801832a:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801832e:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8018332:	9303      	str	r3, [sp, #12]
 8018334:	9b03      	ldr	r3, [sp, #12]
 8018336:	429c      	cmp	r4, r3
 8018338:	d2df      	bcs.n	80182fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801833a:	6838      	ldr	r0, [r7, #0]
 801833c:	464a      	mov	r2, r9
 801833e:	4621      	mov	r1, r4
 8018340:	44d1      	add	r9, sl
 8018342:	6803      	ldr	r3, [r0, #0]
 8018344:	445c      	add	r4, fp
 8018346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018348:	461d      	mov	r5, r3
 801834a:	4633      	mov	r3, r6
 801834c:	47a8      	blx	r5
 801834e:	e7f1      	b.n	8018334 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8018350:	20001ca0 	.word	0x20001ca0
 8018354:	0801da6f 	.word	0x0801da6f
 8018358:	0801dfc0 	.word	0x0801dfc0
 801835c:	0801dc67 	.word	0x0801dc67
 8018360:	0801db21 	.word	0x0801db21
 8018364:	0801db76 	.word	0x0801db76
 8018368:	20001c98 	.word	0x20001c98
 801836c:	20001c9a 	.word	0x20001c9a
 8018370:	0801dbb4 	.word	0x0801dbb4

08018374 <_ZN8touchgfx8LCD16bppC1Ev>:
 8018374:	2200      	movs	r2, #0
 8018376:	4910      	ldr	r1, [pc, #64]	; (80183b8 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8018378:	6042      	str	r2, [r0, #4]
 801837a:	6001      	str	r1, [r0, #0]
 801837c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8018380:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8018384:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8018388:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801838c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8018390:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8018394:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8018398:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801839c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80183a0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80183a4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80183a8:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80183ac:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 80183b0:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 80183b4:	4770      	bx	lr
 80183b6:	bf00      	nop
 80183b8:	0801dd18 	.word	0x0801dd18

080183bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80183bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183c0:	b08b      	sub	sp, #44	; 0x2c
 80183c2:	460d      	mov	r5, r1
 80183c4:	4604      	mov	r4, r0
 80183c6:	4699      	mov	r9, r3
 80183c8:	6808      	ldr	r0, [r1, #0]
 80183ca:	ab06      	add	r3, sp, #24
 80183cc:	6849      	ldr	r1, [r1, #4]
 80183ce:	c303      	stmia	r3!, {r0, r1}
 80183d0:	6810      	ldr	r0, [r2, #0]
 80183d2:	ab08      	add	r3, sp, #32
 80183d4:	6851      	ldr	r1, [r2, #4]
 80183d6:	c303      	stmia	r3!, {r0, r1}
 80183d8:	a806      	add	r0, sp, #24
 80183da:	f7fe f8c1 	bl	8016560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80183de:	4629      	mov	r1, r5
 80183e0:	a808      	add	r0, sp, #32
 80183e2:	4d63      	ldr	r5, [pc, #396]	; (8018570 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 80183e4:	f7fe f8a4 	bl	8016530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80183e8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80183ec:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80183f0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80183f4:	6828      	ldr	r0, [r5, #0]
 80183f6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80183fa:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80183fe:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8018402:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8018406:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801840a:	440a      	add	r2, r1
 801840c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018410:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018414:	4413      	add	r3, r2
 8018416:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801841a:	6803      	ldr	r3, [r0, #0]
 801841c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801841e:	4798      	blx	r3
 8018420:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018424:	d118      	bne.n	8018458 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8018426:	f010 0f20 	tst.w	r0, #32
 801842a:	6828      	ldr	r0, [r5, #0]
 801842c:	d017      	beq.n	801845e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801842e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 8018432:	b2b6      	uxth	r6, r6
 8018434:	6801      	ldr	r1, [r0, #0]
 8018436:	9502      	str	r5, [sp, #8]
 8018438:	fa1f f588 	uxth.w	r5, r8
 801843c:	f8cd 900c 	str.w	r9, [sp, #12]
 8018440:	9601      	str	r6, [sp, #4]
 8018442:	9500      	str	r5, [sp, #0]
 8018444:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8018448:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801844a:	4621      	mov	r1, r4
 801844c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018450:	47a8      	blx	r5
 8018452:	b00b      	add	sp, #44	; 0x2c
 8018454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018458:	f010 0f40 	tst.w	r0, #64	; 0x40
 801845c:	e7e5      	b.n	801842a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801845e:	6803      	ldr	r3, [r0, #0]
 8018460:	6a1b      	ldr	r3, [r3, #32]
 8018462:	4798      	blx	r3
 8018464:	4a43      	ldr	r2, [pc, #268]	; (8018574 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 8018466:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801846a:	f8b2 e000 	ldrh.w	lr, [r2]
 801846e:	4692      	mov	sl, r2
 8018470:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8018474:	fb0e 1303 	mla	r3, lr, r3, r1
 8018478:	fb0e fe06 	mul.w	lr, lr, r6
 801847c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018480:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8018484:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 8018488:	9305      	str	r3, [sp, #20]
 801848a:	4570      	cmp	r0, lr
 801848c:	d26a      	bcs.n	8018564 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 801848e:	9b05      	ldr	r3, [sp, #20]
 8018490:	4621      	mov	r1, r4
 8018492:	eb00 0b03 	add.w	fp, r0, r3
 8018496:	4558      	cmp	r0, fp
 8018498:	d257      	bcs.n	801854a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 801849a:	f851 4b04 	ldr.w	r4, [r1], #4
 801849e:	0e22      	lsrs	r2, r4, #24
 80184a0:	d012      	beq.n	80184c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 80184a2:	2aff      	cmp	r2, #255	; 0xff
 80184a4:	ea4f 2714 	mov.w	r7, r4, lsr #8
 80184a8:	d110      	bne.n	80184cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80184aa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80184ae:	d10d      	bne.n	80184cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80184b0:	0963      	lsrs	r3, r4, #5
 80184b2:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80184b6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80184ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80184be:	f027 0707 	bic.w	r7, r7, #7
 80184c2:	431f      	orrs	r7, r3
 80184c4:	433c      	orrs	r4, r7
 80184c6:	8004      	strh	r4, [r0, #0]
 80184c8:	3002      	adds	r0, #2
 80184ca:	e7e4      	b.n	8018496 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 80184cc:	fb09 f302 	mul.w	r3, r9, r2
 80184d0:	f8b0 c000 	ldrh.w	ip, [r0]
 80184d4:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80184d8:	b2ff      	uxtb	r7, r7
 80184da:	1c5a      	adds	r2, r3, #1
 80184dc:	ea4f 262c 	mov.w	r6, ip, asr #8
 80184e0:	b2e4      	uxtb	r4, r4
 80184e2:	eb02 2223 	add.w	r2, r2, r3, asr #8
 80184e6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80184ea:	1212      	asrs	r2, r2, #8
 80184ec:	b293      	uxth	r3, r2
 80184ee:	43d2      	mvns	r2, r2
 80184f0:	fb15 f503 	smulbb	r5, r5, r3
 80184f4:	b2d2      	uxtb	r2, r2
 80184f6:	fb17 f703 	smulbb	r7, r7, r3
 80184fa:	fb06 5602 	mla	r6, r6, r2, r5
 80184fe:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8018502:	fb14 f403 	smulbb	r4, r4, r3
 8018506:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801850a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801850e:	b2b6      	uxth	r6, r6
 8018510:	fa5f fc8c 	uxtb.w	ip, ip
 8018514:	fb05 7702 	mla	r7, r5, r2, r7
 8018518:	1c73      	adds	r3, r6, #1
 801851a:	fb0c 4202 	mla	r2, ip, r2, r4
 801851e:	b2bf      	uxth	r7, r7
 8018520:	b292      	uxth	r2, r2
 8018522:	1c7d      	adds	r5, r7, #1
 8018524:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8018528:	f102 0c01 	add.w	ip, r2, #1
 801852c:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8018530:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8018534:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8018538:	097f      	lsrs	r7, r7, #5
 801853a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801853e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8018542:	4316      	orrs	r6, r2
 8018544:	433e      	orrs	r6, r7
 8018546:	8006      	strh	r6, [r0, #0]
 8018548:	e7be      	b.n	80184c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801854a:	f8ba 3000 	ldrh.w	r3, [sl]
 801854e:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8018552:	eba3 0308 	sub.w	r3, r3, r8
 8018556:	eba4 0408 	sub.w	r4, r4, r8
 801855a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801855e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8018562:	e792      	b.n	801848a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8018564:	4b02      	ldr	r3, [pc, #8]	; (8018570 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 8018566:	6818      	ldr	r0, [r3, #0]
 8018568:	6803      	ldr	r3, [r0, #0]
 801856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801856c:	4798      	blx	r3
 801856e:	e770      	b.n	8018452 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8018570:	20001ca0 	.word	0x20001ca0
 8018574:	20001c98 	.word	0x20001c98

08018578 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8018578:	b570      	push	{r4, r5, r6, lr}
 801857a:	9d04      	ldr	r5, [sp, #16]
 801857c:	460c      	mov	r4, r1
 801857e:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8018582:	4619      	mov	r1, r3
 8018584:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018588:	2a0d      	cmp	r2, #13
 801858a:	d820      	bhi.n	80185ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 801858c:	e8df f002 	tbb	[pc, r2]
 8018590:	18121807 	.word	0x18121807
 8018594:	18181818 	.word	0x18181818
 8018598:	18181818 	.word	0x18181818
 801859c:	1818      	.short	0x1818
 801859e:	6802      	ldr	r2, [r0, #0]
 80185a0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80185a4:	68d6      	ldr	r6, [r2, #12]
 80185a6:	462b      	mov	r3, r5
 80185a8:	460a      	mov	r2, r1
 80185aa:	4621      	mov	r1, r4
 80185ac:	46b4      	mov	ip, r6
 80185ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185b2:	4760      	bx	ip
 80185b4:	462a      	mov	r2, r5
 80185b6:	4620      	mov	r0, r4
 80185b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185bc:	f7ff befe 	b.w	80183bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80185c0:	4b03      	ldr	r3, [pc, #12]	; (80185d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 80185c2:	f240 21c1 	movw	r1, #705	; 0x2c1
 80185c6:	4a03      	ldr	r2, [pc, #12]	; (80185d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 80185c8:	4803      	ldr	r0, [pc, #12]	; (80185d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80185ca:	f001 fab7 	bl	8019b3c <__assert_func>
 80185ce:	bd70      	pop	{r4, r5, r6, pc}
 80185d0:	0801dc03 	.word	0x0801dc03
 80185d4:	0801e046 	.word	0x0801e046
 80185d8:	0801dc67 	.word	0x0801dc67

080185dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80185dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e0:	b093      	sub	sp, #76	; 0x4c
 80185e2:	880f      	ldrh	r7, [r1, #0]
 80185e4:	4604      	mov	r4, r0
 80185e6:	4688      	mov	r8, r1
 80185e8:	4616      	mov	r6, r2
 80185ea:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80185ee:	b12f      	cbz	r7, 80185fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 80185f0:	4b6f      	ldr	r3, [pc, #444]	; (80187b0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 80185f2:	21e2      	movs	r1, #226	; 0xe2
 80185f4:	4a6f      	ldr	r2, [pc, #444]	; (80187b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80185f6:	4870      	ldr	r0, [pc, #448]	; (80187b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80185f8:	f001 faa0 	bl	8019b3c <__assert_func>
 80185fc:	6810      	ldr	r0, [r2, #0]
 80185fe:	ad0e      	add	r5, sp, #56	; 0x38
 8018600:	6851      	ldr	r1, [r2, #4]
 8018602:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 80187c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 8018606:	c503      	stmia	r5!, {r0, r1}
 8018608:	6818      	ldr	r0, [r3, #0]
 801860a:	ad10      	add	r5, sp, #64	; 0x40
 801860c:	6859      	ldr	r1, [r3, #4]
 801860e:	c503      	stmia	r5!, {r0, r1}
 8018610:	a80e      	add	r0, sp, #56	; 0x38
 8018612:	f7fd ffa5 	bl	8016560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018616:	4631      	mov	r1, r6
 8018618:	a810      	add	r0, sp, #64	; 0x40
 801861a:	4e68      	ldr	r6, [pc, #416]	; (80187bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801861c:	f7fd ff88 	bl	8016530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018620:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8018624:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8018628:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801862c:	f8db 0000 	ldr.w	r0, [fp]
 8018630:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018634:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8018638:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801863c:	440c      	add	r4, r1
 801863e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8018642:	440a      	add	r2, r1
 8018644:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8018648:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801864c:	4413      	add	r3, r2
 801864e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8018652:	6803      	ldr	r3, [r0, #0]
 8018654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018658:	4798      	blx	r3
 801865a:	2801      	cmp	r0, #1
 801865c:	d11d      	bne.n	801869a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801865e:	220b      	movs	r2, #11
 8018660:	9708      	str	r7, [sp, #32]
 8018662:	b2ad      	uxth	r5, r5
 8018664:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018668:	9207      	str	r2, [sp, #28]
 801866a:	4621      	mov	r1, r4
 801866c:	8832      	ldrh	r2, [r6, #0]
 801866e:	f8cd a010 	str.w	sl, [sp, #16]
 8018672:	9502      	str	r5, [sp, #8]
 8018674:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8018678:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801867c:	9203      	str	r2, [sp, #12]
 801867e:	fa1f f289 	uxth.w	r2, r9
 8018682:	9201      	str	r2, [sp, #4]
 8018684:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018688:	9200      	str	r2, [sp, #0]
 801868a:	4642      	mov	r2, r8
 801868c:	f8db 0000 	ldr.w	r0, [fp]
 8018690:	f7fc fd20 	bl	80150d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8018694:	b013      	add	sp, #76	; 0x4c
 8018696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801869a:	f8db 0000 	ldr.w	r0, [fp]
 801869e:	6803      	ldr	r3, [r0, #0]
 80186a0:	6a1b      	ldr	r3, [r3, #32]
 80186a2:	4798      	blx	r3
 80186a4:	8832      	ldrh	r2, [r6, #0]
 80186a6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80186aa:	f04f 0e04 	mov.w	lr, #4
 80186ae:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80186b2:	4355      	muls	r5, r2
 80186b4:	960d      	str	r6, [sp, #52]	; 0x34
 80186b6:	fb02 1303 	mla	r3, r2, r3, r1
 80186ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80186be:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 80186c2:	930c      	str	r3, [sp, #48]	; 0x30
 80186c4:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80186c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80186ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80186cc:	4298      	cmp	r0, r3
 80186ce:	d269      	bcs.n	80187a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 80186d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186d2:	4621      	mov	r1, r4
 80186d4:	eb00 0b03 	add.w	fp, r0, r3
 80186d8:	4558      	cmp	r0, fp
 80186da:	460b      	mov	r3, r1
 80186dc:	d256      	bcs.n	801878c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80186de:	781b      	ldrb	r3, [r3, #0]
 80186e0:	3101      	adds	r1, #1
 80186e2:	fb1e e303 	smlabb	r3, lr, r3, lr
 80186e6:	f858 2003 	ldr.w	r2, [r8, r3]
 80186ea:	0e14      	lsrs	r4, r2, #24
 80186ec:	d012      	beq.n	8018714 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 80186ee:	2cff      	cmp	r4, #255	; 0xff
 80186f0:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80186f4:	d110      	bne.n	8018718 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80186f6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80186fa:	d10d      	bne.n	8018718 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80186fc:	0953      	lsrs	r3, r2, #5
 80186fe:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8018702:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8018706:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801870a:	f026 0607 	bic.w	r6, r6, #7
 801870e:	431e      	orrs	r6, r3
 8018710:	4332      	orrs	r2, r6
 8018712:	8002      	strh	r2, [r0, #0]
 8018714:	3002      	adds	r0, #2
 8018716:	e7df      	b.n	80186d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 8018718:	fb0a f404 	mul.w	r4, sl, r4
 801871c:	8807      	ldrh	r7, [r0, #0]
 801871e:	b2f6      	uxtb	r6, r6
 8018720:	1c63      	adds	r3, r4, #1
 8018722:	123d      	asrs	r5, r7, #8
 8018724:	eb03 2324 	add.w	r3, r3, r4, asr #8
 8018728:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801872c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8018730:	b2d2      	uxtb	r2, r2
 8018732:	121b      	asrs	r3, r3, #8
 8018734:	fa1f fc83 	uxth.w	ip, r3
 8018738:	43db      	mvns	r3, r3
 801873a:	fb14 f40c 	smulbb	r4, r4, ip
 801873e:	b2db      	uxtb	r3, r3
 8018740:	fb12 f20c 	smulbb	r2, r2, ip
 8018744:	fb05 4503 	mla	r5, r5, r3, r4
 8018748:	10fc      	asrs	r4, r7, #3
 801874a:	fb16 f60c 	smulbb	r6, r6, ip
 801874e:	00ff      	lsls	r7, r7, #3
 8018750:	b2ad      	uxth	r5, r5
 8018752:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8018756:	b2ff      	uxtb	r7, r7
 8018758:	fb04 6603 	mla	r6, r4, r3, r6
 801875c:	fb07 2203 	mla	r2, r7, r3, r2
 8018760:	1c6b      	adds	r3, r5, #1
 8018762:	b2b6      	uxth	r6, r6
 8018764:	b292      	uxth	r2, r2
 8018766:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801876a:	1c54      	adds	r4, r2, #1
 801876c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8018770:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8018774:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8018778:	4325      	orrs	r5, r4
 801877a:	1c74      	adds	r4, r6, #1
 801877c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8018780:	0976      	lsrs	r6, r6, #5
 8018782:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018786:	4335      	orrs	r5, r6
 8018788:	8005      	strh	r5, [r0, #0]
 801878a:	e7c3      	b.n	8018714 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801878c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801878e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8018792:	881b      	ldrh	r3, [r3, #0]
 8018794:	eba4 0409 	sub.w	r4, r4, r9
 8018798:	eba3 0309 	sub.w	r3, r3, r9
 801879c:	440c      	add	r4, r1
 801879e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80187a2:	e792      	b.n	80186ca <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 80187a4:	4b06      	ldr	r3, [pc, #24]	; (80187c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80187a6:	6818      	ldr	r0, [r3, #0]
 80187a8:	6803      	ldr	r3, [r0, #0]
 80187aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187ac:	4798      	blx	r3
 80187ae:	e771      	b.n	8018694 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 80187b0:	0801da1f 	.word	0x0801da1f
 80187b4:	0801defa 	.word	0x0801defa
 80187b8:	0801dc67 	.word	0x0801dc67
 80187bc:	20001c98 	.word	0x20001c98
 80187c0:	20001ca0 	.word	0x20001ca0

080187c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80187c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187c8:	4614      	mov	r4, r2
 80187ca:	880a      	ldrh	r2, [r1, #0]
 80187cc:	b091      	sub	sp, #68	; 0x44
 80187ce:	4607      	mov	r7, r0
 80187d0:	2a02      	cmp	r2, #2
 80187d2:	4689      	mov	r9, r1
 80187d4:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 80187d8:	d006      	beq.n	80187e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 80187da:	4b77      	ldr	r3, [pc, #476]	; (80189b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 80187dc:	f240 113b 	movw	r1, #315	; 0x13b
 80187e0:	4a76      	ldr	r2, [pc, #472]	; (80189bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 80187e2:	4877      	ldr	r0, [pc, #476]	; (80189c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 80187e4:	f001 f9aa 	bl	8019b3c <__assert_func>
 80187e8:	2e00      	cmp	r6, #0
 80187ea:	d04b      	beq.n	8018884 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80187ec:	6820      	ldr	r0, [r4, #0]
 80187ee:	ad0c      	add	r5, sp, #48	; 0x30
 80187f0:	6861      	ldr	r1, [r4, #4]
 80187f2:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80189c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 80187f6:	c503      	stmia	r5!, {r0, r1}
 80187f8:	6818      	ldr	r0, [r3, #0]
 80187fa:	ad0e      	add	r5, sp, #56	; 0x38
 80187fc:	6859      	ldr	r1, [r3, #4]
 80187fe:	c503      	stmia	r5!, {r0, r1}
 8018800:	a80c      	add	r0, sp, #48	; 0x30
 8018802:	f7fd fead 	bl	8016560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018806:	4621      	mov	r1, r4
 8018808:	a80e      	add	r0, sp, #56	; 0x38
 801880a:	f7fd fe91 	bl	8016530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801880e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8018812:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018816:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801881a:	f8da 0000 	ldr.w	r0, [sl]
 801881e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018822:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8018826:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801882a:	187c      	adds	r4, r7, r1
 801882c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8018830:	4f64      	ldr	r7, [pc, #400]	; (80189c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 8018832:	440a      	add	r2, r1
 8018834:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8018838:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801883c:	4413      	add	r3, r2
 801883e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018842:	6803      	ldr	r3, [r0, #0]
 8018844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018848:	4798      	blx	r3
 801884a:	2801      	cmp	r0, #1
 801884c:	d11d      	bne.n	801888a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 801884e:	2200      	movs	r2, #0
 8018850:	210b      	movs	r1, #11
 8018852:	b2ad      	uxth	r5, r5
 8018854:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018858:	e9cd 1207 	strd	r1, r2, [sp, #28]
 801885c:	8839      	ldrh	r1, [r7, #0]
 801885e:	9604      	str	r6, [sp, #16]
 8018860:	9502      	str	r5, [sp, #8]
 8018862:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018866:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801886a:	4621      	mov	r1, r4
 801886c:	9203      	str	r2, [sp, #12]
 801886e:	fa1f f288 	uxth.w	r2, r8
 8018872:	9201      	str	r2, [sp, #4]
 8018874:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018878:	9200      	str	r2, [sp, #0]
 801887a:	464a      	mov	r2, r9
 801887c:	f8da 0000 	ldr.w	r0, [sl]
 8018880:	f7fc fc28 	bl	80150d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8018884:	b011      	add	sp, #68	; 0x44
 8018886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801888a:	f8da 0000 	ldr.w	r0, [sl]
 801888e:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8018892:	6803      	ldr	r3, [r0, #0]
 8018894:	6a1b      	ldr	r3, [r3, #32]
 8018896:	4798      	blx	r3
 8018898:	8839      	ldrh	r1, [r7, #0]
 801889a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801889e:	2eff      	cmp	r6, #255	; 0xff
 80188a0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80188a4:	fb05 f501 	mul.w	r5, r5, r1
 80188a8:	fb01 2303 	mla	r3, r1, r3, r2
 80188ac:	f109 0204 	add.w	r2, r9, #4
 80188b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80188b4:	d05f      	beq.n	8018976 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 80188b6:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 80188ba:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80188be:	b2b6      	uxth	r6, r6
 80188c0:	970b      	str	r7, [sp, #44]	; 0x2c
 80188c2:	fa1f f989 	uxth.w	r9, r9
 80188c6:	42a8      	cmp	r0, r5
 80188c8:	d26f      	bcs.n	80189aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 80188ca:	eb00 010b 	add.w	r1, r0, fp
 80188ce:	4288      	cmp	r0, r1
 80188d0:	4623      	mov	r3, r4
 80188d2:	d244      	bcs.n	801895e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 80188d4:	8807      	ldrh	r7, [r0, #0]
 80188d6:	3401      	adds	r4, #1
 80188d8:	781b      	ldrb	r3, [r3, #0]
 80188da:	ea4f 2c27 	mov.w	ip, r7, asr #8
 80188de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80188e2:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 80188e6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80188ea:	00ff      	lsls	r7, r7, #3
 80188ec:	ea4f 2e23 	mov.w	lr, r3, asr #8
 80188f0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80188f4:	fb1c fc09 	smulbb	ip, ip, r9
 80188f8:	b2ff      	uxtb	r7, r7
 80188fa:	fb1a fa09 	smulbb	sl, sl, r9
 80188fe:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8018902:	fb17 f709 	smulbb	r7, r7, r9
 8018906:	fb0e ce06 	mla	lr, lr, r6, ip
 801890a:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 801890e:	00db      	lsls	r3, r3, #3
 8018910:	fa1f fe8e 	uxth.w	lr, lr
 8018914:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8018918:	b2db      	uxtb	r3, r3
 801891a:	fb0c ac06 	mla	ip, ip, r6, sl
 801891e:	f10e 0a01 	add.w	sl, lr, #1
 8018922:	fb03 7306 	mla	r3, r3, r6, r7
 8018926:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801892a:	b29b      	uxth	r3, r3
 801892c:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 8018930:	fa1f fc8c 	uxth.w	ip, ip
 8018934:	f103 0e01 	add.w	lr, r3, #1
 8018938:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801893c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8018940:	ea4a 0e03 	orr.w	lr, sl, r3
 8018944:	f10c 0a01 	add.w	sl, ip, #1
 8018948:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801894c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8018950:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8018954:	ea4e 0e0c 	orr.w	lr, lr, ip
 8018958:	f820 eb02 	strh.w	lr, [r0], #2
 801895c:	e7b7      	b.n	80188ce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 801895e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018960:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8018964:	881b      	ldrh	r3, [r3, #0]
 8018966:	eba1 0108 	sub.w	r1, r1, r8
 801896a:	eba3 0308 	sub.w	r3, r3, r8
 801896e:	440c      	add	r4, r1
 8018970:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018974:	e7a7      	b.n	80188c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 8018976:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801897a:	42a8      	cmp	r0, r5
 801897c:	d215      	bcs.n	80189aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 801897e:	eb00 010b 	add.w	r1, r0, fp
 8018982:	4288      	cmp	r0, r1
 8018984:	d206      	bcs.n	8018994 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 8018986:	f814 3b01 	ldrb.w	r3, [r4], #1
 801898a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801898e:	f820 3b02 	strh.w	r3, [r0], #2
 8018992:	e7f6      	b.n	8018982 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 8018994:	883b      	ldrh	r3, [r7, #0]
 8018996:	eba3 0308 	sub.w	r3, r3, r8
 801899a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801899e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80189a2:	eba3 0308 	sub.w	r3, r3, r8
 80189a6:	441c      	add	r4, r3
 80189a8:	e7e7      	b.n	801897a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 80189aa:	4b07      	ldr	r3, [pc, #28]	; (80189c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 80189ac:	6818      	ldr	r0, [r3, #0]
 80189ae:	6803      	ldr	r3, [r0, #0]
 80189b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189b2:	4798      	blx	r3
 80189b4:	e766      	b.n	8018884 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80189b6:	bf00      	nop
 80189b8:	0801d8dd 	.word	0x0801d8dd
 80189bc:	0801dd64 	.word	0x0801dd64
 80189c0:	0801dc67 	.word	0x0801dc67
 80189c4:	20001c98 	.word	0x20001c98
 80189c8:	20001ca0 	.word	0x20001ca0

080189cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80189cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189d0:	4614      	mov	r4, r2
 80189d2:	880a      	ldrh	r2, [r1, #0]
 80189d4:	b091      	sub	sp, #68	; 0x44
 80189d6:	4606      	mov	r6, r0
 80189d8:	2a01      	cmp	r2, #1
 80189da:	4688      	mov	r8, r1
 80189dc:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80189e0:	d006      	beq.n	80189f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 80189e2:	4b7c      	ldr	r3, [pc, #496]	; (8018bd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 80189e4:	f240 1197 	movw	r1, #407	; 0x197
 80189e8:	4a7b      	ldr	r2, [pc, #492]	; (8018bd8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 80189ea:	487c      	ldr	r0, [pc, #496]	; (8018bdc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 80189ec:	f001 f8a6 	bl	8019b3c <__assert_func>
 80189f0:	2f00      	cmp	r7, #0
 80189f2:	d04b      	beq.n	8018a8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 80189f4:	6820      	ldr	r0, [r4, #0]
 80189f6:	ad0c      	add	r5, sp, #48	; 0x30
 80189f8:	6861      	ldr	r1, [r4, #4]
 80189fa:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8018be8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80189fe:	c503      	stmia	r5!, {r0, r1}
 8018a00:	6818      	ldr	r0, [r3, #0]
 8018a02:	ad0e      	add	r5, sp, #56	; 0x38
 8018a04:	6859      	ldr	r1, [r3, #4]
 8018a06:	c503      	stmia	r5!, {r0, r1}
 8018a08:	a80c      	add	r0, sp, #48	; 0x30
 8018a0a:	f7fd fda9 	bl	8016560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018a0e:	4621      	mov	r1, r4
 8018a10:	a80e      	add	r0, sp, #56	; 0x38
 8018a12:	f7fd fd8d 	bl	8016530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018a16:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8018a1a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018a1e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8018a22:	f8da 0000 	ldr.w	r0, [sl]
 8018a26:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018a2a:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8018a2e:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 8018a32:	1874      	adds	r4, r6, r1
 8018a34:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8018a38:	4e69      	ldr	r6, [pc, #420]	; (8018be0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 8018a3a:	440a      	add	r2, r1
 8018a3c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8018a40:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8018a44:	4413      	add	r3, r2
 8018a46:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018a4a:	6803      	ldr	r3, [r0, #0]
 8018a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018a50:	4798      	blx	r3
 8018a52:	2801      	cmp	r0, #1
 8018a54:	d11d      	bne.n	8018a92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8018a56:	220b      	movs	r2, #11
 8018a58:	2100      	movs	r1, #0
 8018a5a:	b2ad      	uxth	r5, r5
 8018a5c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018a60:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8018a64:	8832      	ldrh	r2, [r6, #0]
 8018a66:	4621      	mov	r1, r4
 8018a68:	9704      	str	r7, [sp, #16]
 8018a6a:	9501      	str	r5, [sp, #4]
 8018a6c:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8018a70:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8018a74:	9203      	str	r2, [sp, #12]
 8018a76:	fa1f f289 	uxth.w	r2, r9
 8018a7a:	9202      	str	r2, [sp, #8]
 8018a7c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018a80:	9200      	str	r2, [sp, #0]
 8018a82:	4642      	mov	r2, r8
 8018a84:	f8da 0000 	ldr.w	r0, [sl]
 8018a88:	f7fc fb24 	bl	80150d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8018a8c:	b011      	add	sp, #68	; 0x44
 8018a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a92:	f8da 0000 	ldr.w	r0, [sl]
 8018a96:	6803      	ldr	r3, [r0, #0]
 8018a98:	6a1b      	ldr	r3, [r3, #32]
 8018a9a:	4798      	blx	r3
 8018a9c:	8832      	ldrh	r2, [r6, #0]
 8018a9e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018aa2:	2fff      	cmp	r7, #255	; 0xff
 8018aa4:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8018aa8:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8018aac:	fb09 f902 	mul.w	r9, r9, r2
 8018ab0:	fb02 1303 	mla	r3, r2, r3, r1
 8018ab4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018ab8:	d056      	beq.n	8018b68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 8018aba:	ea6f 0c07 	mvn.w	ip, r7
 8018abe:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 8018ac2:	b2bb      	uxth	r3, r7
 8018ac4:	960b      	str	r6, [sp, #44]	; 0x2c
 8018ac6:	fa5f fc8c 	uxtb.w	ip, ip
 8018aca:	4548      	cmp	r0, r9
 8018acc:	d27b      	bcs.n	8018bc6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8018ace:	eb00 0a0e 	add.w	sl, r0, lr
 8018ad2:	4550      	cmp	r0, sl
 8018ad4:	4622      	mov	r2, r4
 8018ad6:	d23d      	bcs.n	8018b54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 8018ad8:	7811      	ldrb	r1, [r2, #0]
 8018ada:	2604      	movs	r6, #4
 8018adc:	2203      	movs	r2, #3
 8018ade:	3401      	adds	r4, #1
 8018ae0:	fb12 6101 	smlabb	r1, r2, r1, r6
 8018ae4:	8802      	ldrh	r2, [r0, #0]
 8018ae6:	eb08 0b01 	add.w	fp, r8, r1
 8018aea:	1217      	asrs	r7, r2, #8
 8018aec:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018af0:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8018af4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018af8:	f89b b001 	ldrb.w	fp, [fp, #1]
 8018afc:	fb16 f603 	smulbb	r6, r6, r3
 8018b00:	fb1b fb03 	smulbb	fp, fp, r3
 8018b04:	fb07 670c 	mla	r7, r7, ip, r6
 8018b08:	10d6      	asrs	r6, r2, #3
 8018b0a:	00d2      	lsls	r2, r2, #3
 8018b0c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018b10:	b2bf      	uxth	r7, r7
 8018b12:	b2d2      	uxtb	r2, r2
 8018b14:	fb06 b60c 	mla	r6, r6, ip, fp
 8018b18:	fb12 f20c 	smulbb	r2, r2, ip
 8018b1c:	b2b6      	uxth	r6, r6
 8018b1e:	fb01 2103 	mla	r1, r1, r3, r2
 8018b22:	1c7a      	adds	r2, r7, #1
 8018b24:	f106 0b01 	add.w	fp, r6, #1
 8018b28:	b289      	uxth	r1, r1
 8018b2a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8018b2e:	1c4a      	adds	r2, r1, #1
 8018b30:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8018b34:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018b38:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8018b3c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8018b40:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8018b44:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8018b48:	4317      	orrs	r7, r2
 8018b4a:	ea47 070b 	orr.w	r7, r7, fp
 8018b4e:	f820 7b02 	strh.w	r7, [r0], #2
 8018b52:	e7be      	b.n	8018ad2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8018b54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018b56:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8018b5a:	8812      	ldrh	r2, [r2, #0]
 8018b5c:	1b49      	subs	r1, r1, r5
 8018b5e:	1b52      	subs	r2, r2, r5
 8018b60:	440c      	add	r4, r1
 8018b62:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8018b66:	e7b0      	b.n	8018aca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 8018b68:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 8018b6c:	2203      	movs	r2, #3
 8018b6e:	2704      	movs	r7, #4
 8018b70:	491c      	ldr	r1, [pc, #112]	; (8018be4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8018b72:	4548      	cmp	r0, r9
 8018b74:	d227      	bcs.n	8018bc6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8018b76:	eb00 0c0e 	add.w	ip, r0, lr
 8018b7a:	4560      	cmp	r0, ip
 8018b7c:	4623      	mov	r3, r4
 8018b7e:	d219      	bcs.n	8018bb4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8018b80:	f893 a000 	ldrb.w	sl, [r3]
 8018b84:	3401      	adds	r4, #1
 8018b86:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 8018b8a:	eb08 0b0a 	add.w	fp, r8, sl
 8018b8e:	f818 a00a 	ldrb.w	sl, [r8, sl]
 8018b92:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8018b96:	f89b b001 	ldrb.w	fp, [fp, #1]
 8018b9a:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8018b9e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8018ba2:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8018ba6:	ea43 030b 	orr.w	r3, r3, fp
 8018baa:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 8018bae:	f820 3b02 	strh.w	r3, [r0], #2
 8018bb2:	e7e2      	b.n	8018b7a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8018bb4:	8833      	ldrh	r3, [r6, #0]
 8018bb6:	1b5b      	subs	r3, r3, r5
 8018bb8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018bbc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8018bc0:	1b5b      	subs	r3, r3, r5
 8018bc2:	441c      	add	r4, r3
 8018bc4:	e7d5      	b.n	8018b72 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8018bc6:	4b08      	ldr	r3, [pc, #32]	; (8018be8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8018bc8:	6818      	ldr	r0, [r3, #0]
 8018bca:	6803      	ldr	r3, [r0, #0]
 8018bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bce:	4798      	blx	r3
 8018bd0:	e75c      	b.n	8018a8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8018bd2:	bf00      	nop
 8018bd4:	0801d92b 	.word	0x0801d92b
 8018bd8:	0801dded 	.word	0x0801dded
 8018bdc:	0801dc67 	.word	0x0801dc67
 8018be0:	20001c98 	.word	0x20001c98
 8018be4:	fffff800 	.word	0xfffff800
 8018be8:	20001ca0 	.word	0x20001ca0

08018bec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8018bec:	b430      	push	{r4, r5}
 8018bee:	780d      	ldrb	r5, [r1, #0]
 8018bf0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8018bf4:	2d01      	cmp	r5, #1
 8018bf6:	d00a      	beq.n	8018c0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8018bf8:	d305      	bcc.n	8018c06 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8018bfa:	2d02      	cmp	r5, #2
 8018bfc:	d10b      	bne.n	8018c16 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8018bfe:	9402      	str	r4, [sp, #8]
 8018c00:	bc30      	pop	{r4, r5}
 8018c02:	f7ff bddf 	b.w	80187c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8018c06:	9402      	str	r4, [sp, #8]
 8018c08:	bc30      	pop	{r4, r5}
 8018c0a:	f7ff bce7 	b.w	80185dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8018c0e:	9402      	str	r4, [sp, #8]
 8018c10:	bc30      	pop	{r4, r5}
 8018c12:	f7ff bedb 	b.w	80189cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8018c16:	bc30      	pop	{r4, r5}
 8018c18:	4770      	bx	lr
	...

08018c1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8018c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c20:	b087      	sub	sp, #28
 8018c22:	4604      	mov	r4, r0
 8018c24:	460e      	mov	r6, r1
 8018c26:	6810      	ldr	r0, [r2, #0]
 8018c28:	6851      	ldr	r1, [r2, #4]
 8018c2a:	ad02      	add	r5, sp, #8
 8018c2c:	4617      	mov	r7, r2
 8018c2e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8018c32:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8018e64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8018c36:	c503      	stmia	r5!, {r0, r1}
 8018c38:	6818      	ldr	r0, [r3, #0]
 8018c3a:	ad04      	add	r5, sp, #16
 8018c3c:	6859      	ldr	r1, [r3, #4]
 8018c3e:	c503      	stmia	r5!, {r0, r1}
 8018c40:	a802      	add	r0, sp, #8
 8018c42:	f7fd fc8d 	bl	8016560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018c46:	4639      	mov	r1, r7
 8018c48:	a804      	add	r0, sp, #16
 8018c4a:	f7fd fc71 	bl	8016530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018c4e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018c52:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018c56:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018c5a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8018c5e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018c62:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8018c66:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8018c6a:	440e      	add	r6, r1
 8018c6c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018c70:	440a      	add	r2, r1
 8018c72:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018c76:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018c7a:	4413      	add	r3, r2
 8018c7c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018c80:	4b77      	ldr	r3, [pc, #476]	; (8018e60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8018c82:	6818      	ldr	r0, [r3, #0]
 8018c84:	6803      	ldr	r3, [r0, #0]
 8018c86:	6a1b      	ldr	r3, [r3, #32]
 8018c88:	4798      	blx	r3
 8018c8a:	f8b9 b000 	ldrh.w	fp, [r9]
 8018c8e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018c92:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018c96:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018c9a:	fb05 f50b 	mul.w	r5, r5, fp
 8018c9e:	fb0b 2303 	mla	r3, fp, r3, r2
 8018ca2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018ca6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8018caa:	9300      	str	r3, [sp, #0]
 8018cac:	d068      	beq.n	8018d80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 8018cae:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8018cb2:	4558      	cmp	r0, fp
 8018cb4:	f080 80cc 	bcs.w	8018e50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8018cb8:	9b00      	ldr	r3, [sp, #0]
 8018cba:	4631      	mov	r1, r6
 8018cbc:	18c3      	adds	r3, r0, r3
 8018cbe:	9301      	str	r3, [sp, #4]
 8018cc0:	9b01      	ldr	r3, [sp, #4]
 8018cc2:	4298      	cmp	r0, r3
 8018cc4:	d24e      	bcs.n	8018d64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 8018cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018cca:	2a00      	cmp	r2, #0
 8018ccc:	d047      	beq.n	8018d5e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8018cce:	fb0a f202 	mul.w	r2, sl, r2
 8018cd2:	1c53      	adds	r3, r2, #1
 8018cd4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018cd8:	121b      	asrs	r3, r3, #8
 8018cda:	d040      	beq.n	8018d5e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8018cdc:	8802      	ldrh	r2, [r0, #0]
 8018cde:	b29e      	uxth	r6, r3
 8018ce0:	f8b4 c000 	ldrh.w	ip, [r4]
 8018ce4:	43db      	mvns	r3, r3
 8018ce6:	1215      	asrs	r5, r2, #8
 8018ce8:	b2db      	uxtb	r3, r3
 8018cea:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018cee:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8018cf2:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8018cf6:	fb15 f503 	smulbb	r5, r5, r3
 8018cfa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018cfe:	00d2      	lsls	r2, r2, #3
 8018d00:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8018d04:	fb07 5706 	mla	r7, r7, r6, r5
 8018d08:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8018d0c:	b2d2      	uxtb	r2, r2
 8018d0e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018d12:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8018d16:	fb1e fe03 	smulbb	lr, lr, r3
 8018d1a:	b2bf      	uxth	r7, r7
 8018d1c:	fb12 f203 	smulbb	r2, r2, r3
 8018d20:	fa5f fc8c 	uxtb.w	ip, ip
 8018d24:	fb05 e506 	mla	r5, r5, r6, lr
 8018d28:	1c7b      	adds	r3, r7, #1
 8018d2a:	fb0c 2c06 	mla	ip, ip, r6, r2
 8018d2e:	b2ad      	uxth	r5, r5
 8018d30:	fa1f fc8c 	uxth.w	ip, ip
 8018d34:	f105 0e01 	add.w	lr, r5, #1
 8018d38:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8018d3c:	f10c 0601 	add.w	r6, ip, #1
 8018d40:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8018d44:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018d48:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8018d4c:	096d      	lsrs	r5, r5, #5
 8018d4e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8018d52:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018d56:	ea47 070c 	orr.w	r7, r7, ip
 8018d5a:	432f      	orrs	r7, r5
 8018d5c:	8007      	strh	r7, [r0, #0]
 8018d5e:	3002      	adds	r0, #2
 8018d60:	3402      	adds	r4, #2
 8018d62:	e7ad      	b.n	8018cc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8018d64:	f8b9 3000 	ldrh.w	r3, [r9]
 8018d68:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8018d6c:	eba3 0308 	sub.w	r3, r3, r8
 8018d70:	eba6 0608 	sub.w	r6, r6, r8
 8018d74:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018d78:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8018d7c:	440e      	add	r6, r1
 8018d7e:	e798      	b.n	8018cb2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8018d80:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018d84:	42a8      	cmp	r0, r5
 8018d86:	d263      	bcs.n	8018e50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8018d88:	9b00      	ldr	r3, [sp, #0]
 8018d8a:	4631      	mov	r1, r6
 8018d8c:	eb00 0b03 	add.w	fp, r0, r3
 8018d90:	4558      	cmp	r0, fp
 8018d92:	d24f      	bcs.n	8018e34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8018d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d98:	b12b      	cbz	r3, 8018da6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 8018d9a:	2bff      	cmp	r3, #255	; 0xff
 8018d9c:	f8b4 e000 	ldrh.w	lr, [r4]
 8018da0:	d104      	bne.n	8018dac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 8018da2:	f8a0 e000 	strh.w	lr, [r0]
 8018da6:	3002      	adds	r0, #2
 8018da8:	3402      	adds	r4, #2
 8018daa:	e7f1      	b.n	8018d90 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 8018dac:	8802      	ldrh	r2, [r0, #0]
 8018dae:	b29f      	uxth	r7, r3
 8018db0:	43db      	mvns	r3, r3
 8018db2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018db6:	1216      	asrs	r6, r2, #8
 8018db8:	b2db      	uxtb	r3, r3
 8018dba:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018dbe:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018dc2:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8018dc6:	00d2      	lsls	r2, r2, #3
 8018dc8:	fb16 f603 	smulbb	r6, r6, r3
 8018dcc:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018dd0:	b2d2      	uxtb	r2, r2
 8018dd2:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018dd6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018dda:	fb1a fa03 	smulbb	sl, sl, r3
 8018dde:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018de2:	fb12 f303 	smulbb	r3, r2, r3
 8018de6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018dea:	fa5f fe8e 	uxtb.w	lr, lr
 8018dee:	fb06 a607 	mla	r6, r6, r7, sl
 8018df2:	fa1f fc8c 	uxth.w	ip, ip
 8018df6:	fb0e 3e07 	mla	lr, lr, r7, r3
 8018dfa:	b2b6      	uxth	r6, r6
 8018dfc:	f10c 0201 	add.w	r2, ip, #1
 8018e00:	fa1f fe8e 	uxth.w	lr, lr
 8018e04:	f106 0a01 	add.w	sl, r6, #1
 8018e08:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8018e0c:	f10e 0301 	add.w	r3, lr, #1
 8018e10:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8018e14:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018e18:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8018e1c:	0976      	lsrs	r6, r6, #5
 8018e1e:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8018e22:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018e26:	ea4c 0c0e 	orr.w	ip, ip, lr
 8018e2a:	ea4c 0c06 	orr.w	ip, ip, r6
 8018e2e:	f8a0 c000 	strh.w	ip, [r0]
 8018e32:	e7b8      	b.n	8018da6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 8018e34:	f8b9 3000 	ldrh.w	r3, [r9]
 8018e38:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8018e3c:	eba3 0308 	sub.w	r3, r3, r8
 8018e40:	eba6 0608 	sub.w	r6, r6, r8
 8018e44:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018e48:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8018e4c:	440e      	add	r6, r1
 8018e4e:	e799      	b.n	8018d84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 8018e50:	4b03      	ldr	r3, [pc, #12]	; (8018e60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8018e52:	6818      	ldr	r0, [r3, #0]
 8018e54:	6803      	ldr	r3, [r0, #0]
 8018e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e58:	4798      	blx	r3
 8018e5a:	b007      	add	sp, #28
 8018e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e60:	20001ca0 	.word	0x20001ca0
 8018e64:	20001c98 	.word	0x20001c98

08018e68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8018e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e6c:	b089      	sub	sp, #36	; 0x24
 8018e6e:	4682      	mov	sl, r0
 8018e70:	460d      	mov	r5, r1
 8018e72:	4691      	mov	r9, r2
 8018e74:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8018e78:	4698      	mov	r8, r3
 8018e7a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018e7c:	b3ae      	cbz	r6, 8018eea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8018e7e:	4608      	mov	r0, r1
 8018e80:	f7fe fca8 	bl	80177d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018e84:	4607      	mov	r7, r0
 8018e86:	4628      	mov	r0, r5
 8018e88:	f7fe fcde 	bl	8017848 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018e8c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8018e90:	4628      	mov	r0, r5
 8018e92:	f8ad 9008 	strh.w	r9, [sp, #8]
 8018e96:	f8ad 800a 	strh.w	r8, [sp, #10]
 8018e9a:	f8ad 700c 	strh.w	r7, [sp, #12]
 8018e9e:	f7fe fe2b 	bl	8017af8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018ea2:	b178      	cbz	r0, 8018ec4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018ea4:	4628      	mov	r0, r5
 8018ea6:	f7fe fe27 	bl	8017af8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018eaa:	2802      	cmp	r0, #2
 8018eac:	d00a      	beq.n	8018ec4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018eae:	4628      	mov	r0, r5
 8018eb0:	f7fe fe22 	bl	8017af8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018eb4:	280b      	cmp	r0, #11
 8018eb6:	d005      	beq.n	8018ec4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018eb8:	4b69      	ldr	r3, [pc, #420]	; (8019060 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 8018eba:	214b      	movs	r1, #75	; 0x4b
 8018ebc:	4a69      	ldr	r2, [pc, #420]	; (8019064 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 8018ebe:	486a      	ldr	r0, [pc, #424]	; (8019068 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8018ec0:	f000 fe3c 	bl	8019b3c <__assert_func>
 8018ec4:	4628      	mov	r0, r5
 8018ec6:	f7fe fd8d 	bl	80179e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018eca:	4607      	mov	r7, r0
 8018ecc:	4628      	mov	r0, r5
 8018ece:	f7fe fdbb 	bl	8017a48 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8018ed2:	4681      	mov	r9, r0
 8018ed4:	4628      	mov	r0, r5
 8018ed6:	f7fe fe0f 	bl	8017af8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018eda:	2802      	cmp	r0, #2
 8018edc:	d108      	bne.n	8018ef0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8018ede:	4633      	mov	r3, r6
 8018ee0:	4622      	mov	r2, r4
 8018ee2:	a902      	add	r1, sp, #8
 8018ee4:	4638      	mov	r0, r7
 8018ee6:	f7ff fa69 	bl	80183bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8018eea:	b009      	add	sp, #36	; 0x24
 8018eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ef0:	4628      	mov	r0, r5
 8018ef2:	f7fe fe01 	bl	8017af8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018ef6:	280b      	cmp	r0, #11
 8018ef8:	d107      	bne.n	8018f0a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8018efa:	9600      	str	r6, [sp, #0]
 8018efc:	4623      	mov	r3, r4
 8018efe:	aa02      	add	r2, sp, #8
 8018f00:	4649      	mov	r1, r9
 8018f02:	4638      	mov	r0, r7
 8018f04:	f7ff fe72 	bl	8018bec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8018f08:	e7ef      	b.n	8018eea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8018f0a:	4628      	mov	r0, r5
 8018f0c:	f7fe fd30 	bl	8017970 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8018f10:	b950      	cbnz	r0, 8018f28 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8018f12:	f8da 3000 	ldr.w	r3, [sl]
 8018f16:	aa02      	add	r2, sp, #8
 8018f18:	4639      	mov	r1, r7
 8018f1a:	e9cd 6000 	strd	r6, r0, [sp]
 8018f1e:	4650      	mov	r0, sl
 8018f20:	68dd      	ldr	r5, [r3, #12]
 8018f22:	4623      	mov	r3, r4
 8018f24:	47a8      	blx	r5
 8018f26:	e7e0      	b.n	8018eea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8018f28:	f10d 0818 	add.w	r8, sp, #24
 8018f2c:	4629      	mov	r1, r5
 8018f2e:	ad04      	add	r5, sp, #16
 8018f30:	4640      	mov	r0, r8
 8018f32:	f7fe fcc3 	bl	80178bc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018f36:	e898 0003 	ldmia.w	r8, {r0, r1}
 8018f3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8018f3e:	4628      	mov	r0, r5
 8018f40:	4621      	mov	r1, r4
 8018f42:	f7fb fd44 	bl	80149ce <_ZN8touchgfx4RectaNERKS0_>
 8018f46:	4628      	mov	r0, r5
 8018f48:	f7fb fd84 	bl	8014a54 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018f4c:	b138      	cbz	r0, 8018f5e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 8018f4e:	4623      	mov	r3, r4
 8018f50:	9600      	str	r6, [sp, #0]
 8018f52:	aa02      	add	r2, sp, #8
 8018f54:	4649      	mov	r1, r9
 8018f56:	4638      	mov	r0, r7
 8018f58:	f7ff fe60 	bl	8018c1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8018f5c:	e7c5      	b.n	8018eea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8018f5e:	f8da 3000 	ldr.w	r3, [sl]
 8018f62:	aa02      	add	r2, sp, #8
 8018f64:	4639      	mov	r1, r7
 8018f66:	e9cd 6000 	strd	r6, r0, [sp]
 8018f6a:	4650      	mov	r0, sl
 8018f6c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8018f70:	462b      	mov	r3, r5
 8018f72:	47d8      	blx	fp
 8018f74:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018f78:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018f7c:	4293      	cmp	r3, r2
 8018f7e:	dd13      	ble.n	8018fa8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 8018f80:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018f84:	1a9b      	subs	r3, r3, r2
 8018f86:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018f8a:	f8ad 0018 	strh.w	r0, [sp, #24]
 8018f8e:	4638      	mov	r0, r7
 8018f90:	f8ad 201a 	strh.w	r2, [sp, #26]
 8018f94:	aa02      	add	r2, sp, #8
 8018f96:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018f9a:	4649      	mov	r1, r9
 8018f9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018fa0:	4643      	mov	r3, r8
 8018fa2:	9600      	str	r6, [sp, #0]
 8018fa4:	f7ff fe3a 	bl	8018c1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8018fa8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8018fac:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018fb0:	4293      	cmp	r3, r2
 8018fb2:	dd13      	ble.n	8018fdc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8018fb4:	1a9b      	subs	r3, r3, r2
 8018fb6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8018fba:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8018fbe:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018fc2:	aa02      	add	r2, sp, #8
 8018fc4:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018fc8:	4638      	mov	r0, r7
 8018fca:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018fce:	4643      	mov	r3, r8
 8018fd0:	f8ad 101e 	strh.w	r1, [sp, #30]
 8018fd4:	4649      	mov	r1, r9
 8018fd6:	9600      	str	r6, [sp, #0]
 8018fd8:	f7ff fe20 	bl	8018c1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8018fdc:	88a2      	ldrh	r2, [r4, #4]
 8018fde:	8823      	ldrh	r3, [r4, #0]
 8018fe0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8018fe4:	4413      	add	r3, r2
 8018fe6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018fea:	440a      	add	r2, r1
 8018fec:	b29b      	uxth	r3, r3
 8018fee:	b292      	uxth	r2, r2
 8018ff0:	b218      	sxth	r0, r3
 8018ff2:	b211      	sxth	r1, r2
 8018ff4:	4288      	cmp	r0, r1
 8018ff6:	dd13      	ble.n	8019020 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 8018ff8:	1a9b      	subs	r3, r3, r2
 8018ffa:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8018ffe:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 8019002:	aa02      	add	r2, sp, #8
 8019004:	f8ad 1018 	strh.w	r1, [sp, #24]
 8019008:	4649      	mov	r1, r9
 801900a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801900e:	4643      	mov	r3, r8
 8019010:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019014:	4638      	mov	r0, r7
 8019016:	9600      	str	r6, [sp, #0]
 8019018:	f8ad 501a 	strh.w	r5, [sp, #26]
 801901c:	f7ff fdfe 	bl	8018c1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8019020:	88e2      	ldrh	r2, [r4, #6]
 8019022:	8863      	ldrh	r3, [r4, #2]
 8019024:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8019028:	4413      	add	r3, r2
 801902a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801902e:	440a      	add	r2, r1
 8019030:	b29b      	uxth	r3, r3
 8019032:	b292      	uxth	r2, r2
 8019034:	b218      	sxth	r0, r3
 8019036:	b211      	sxth	r1, r2
 8019038:	4288      	cmp	r0, r1
 801903a:	f77f af56 	ble.w	8018eea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801903e:	f9b4 5000 	ldrsh.w	r5, [r4]
 8019042:	1a9b      	subs	r3, r3, r2
 8019044:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019048:	f8ad 301e 	strh.w	r3, [sp, #30]
 801904c:	4643      	mov	r3, r8
 801904e:	f8ad 5018 	strh.w	r5, [sp, #24]
 8019052:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019056:	f8ad 001c 	strh.w	r0, [sp, #28]
 801905a:	9600      	str	r6, [sp, #0]
 801905c:	e779      	b.n	8018f52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 801905e:	bf00      	nop
 8019060:	0801d979 	.word	0x0801d979
 8019064:	0801de76 	.word	0x0801de76
 8019068:	0801dc67 	.word	0x0801dc67

0801906c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801906c:	b508      	push	{r3, lr}
 801906e:	b180      	cbz	r0, 8019092 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8019070:	2902      	cmp	r1, #2
 8019072:	d014      	beq.n	801909e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8019074:	2903      	cmp	r1, #3
 8019076:	d01d      	beq.n	80190b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8019078:	2901      	cmp	r1, #1
 801907a:	d101      	bne.n	8019080 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801907c:	2001      	movs	r0, #1
 801907e:	bd08      	pop	{r3, pc}
 8019080:	4b0e      	ldr	r3, [pc, #56]	; (80190bc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8019082:	8818      	ldrh	r0, [r3, #0]
 8019084:	b990      	cbnz	r0, 80190ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8019086:	4b0e      	ldr	r3, [pc, #56]	; (80190c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8019088:	2154      	movs	r1, #84	; 0x54
 801908a:	4a0e      	ldr	r2, [pc, #56]	; (80190c4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801908c:	480e      	ldr	r0, [pc, #56]	; (80190c8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801908e:	f000 fd55 	bl	8019b3c <__assert_func>
 8019092:	2902      	cmp	r1, #2
 8019094:	d00e      	beq.n	80190b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8019096:	2903      	cmp	r1, #3
 8019098:	d0f2      	beq.n	8019080 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801909a:	2901      	cmp	r1, #1
 801909c:	d1ee      	bne.n	801907c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801909e:	4b07      	ldr	r3, [pc, #28]	; (80190bc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80190a0:	8818      	ldrh	r0, [r3, #0]
 80190a2:	2800      	cmp	r0, #0
 80190a4:	d0ef      	beq.n	8019086 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80190a6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80190aa:	e7e8      	b.n	801907e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80190ac:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80190b0:	4240      	negs	r0, r0
 80190b2:	e7e4      	b.n	801907e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80190b4:	f04f 30ff 	mov.w	r0, #4294967295
 80190b8:	e7e1      	b.n	801907e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80190ba:	bf00      	nop
 80190bc:	20001c98 	.word	0x20001c98
 80190c0:	0801dc99 	.word	0x0801dc99
 80190c4:	0801df85 	.word	0x0801df85
 80190c8:	0801dcdb 	.word	0x0801dcdb

080190cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80190cc:	b508      	push	{r3, lr}
 80190ce:	b180      	cbz	r0, 80190f2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 80190d0:	2902      	cmp	r1, #2
 80190d2:	d014      	beq.n	80190fe <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 80190d4:	2903      	cmp	r1, #3
 80190d6:	d018      	beq.n	801910a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80190d8:	2901      	cmp	r1, #1
 80190da:	d001      	beq.n	80190e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80190dc:	2001      	movs	r0, #1
 80190de:	e013      	b.n	8019108 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80190e0:	4b0e      	ldr	r3, [pc, #56]	; (801911c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80190e2:	8818      	ldrh	r0, [r3, #0]
 80190e4:	b970      	cbnz	r0, 8019104 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 80190e6:	4b0e      	ldr	r3, [pc, #56]	; (8019120 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 80190e8:	2154      	movs	r1, #84	; 0x54
 80190ea:	4a0e      	ldr	r2, [pc, #56]	; (8019124 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 80190ec:	480e      	ldr	r0, [pc, #56]	; (8019128 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 80190ee:	f000 fd25 	bl	8019b3c <__assert_func>
 80190f2:	2902      	cmp	r1, #2
 80190f4:	d009      	beq.n	801910a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80190f6:	2903      	cmp	r1, #3
 80190f8:	d0f0      	beq.n	80190dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 80190fa:	2901      	cmp	r1, #1
 80190fc:	d1f0      	bne.n	80190e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80190fe:	f04f 30ff 	mov.w	r0, #4294967295
 8019102:	e001      	b.n	8019108 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8019104:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8019108:	bd08      	pop	{r3, pc}
 801910a:	4b04      	ldr	r3, [pc, #16]	; (801911c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801910c:	8818      	ldrh	r0, [r3, #0]
 801910e:	2800      	cmp	r0, #0
 8019110:	d0e9      	beq.n	80190e6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8019112:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8019116:	4240      	negs	r0, r0
 8019118:	e7f6      	b.n	8019108 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801911a:	bf00      	nop
 801911c:	20001c98 	.word	0x20001c98
 8019120:	0801dc99 	.word	0x0801dc99
 8019124:	0801df85 	.word	0x0801df85
 8019128:	0801dcdb 	.word	0x0801dcdb

0801912c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019130:	b099      	sub	sp, #100	; 0x64
 8019132:	910b      	str	r1, [sp, #44]	; 0x2c
 8019134:	a914      	add	r1, sp, #80	; 0x50
 8019136:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801913a:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801913e:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8019142:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8019146:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801914a:	e881 000c 	stmia.w	r1, {r2, r3}
 801914e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8019152:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 8019156:	9308      	str	r3, [sp, #32]
 8019158:	910c      	str	r1, [sp, #48]	; 0x30
 801915a:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 801915e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8019162:	910d      	str	r1, [sp, #52]	; 0x34
 8019164:	f893 b00d 	ldrb.w	fp, [r3, #13]
 8019168:	7998      	ldrb	r0, [r3, #6]
 801916a:	ea4f 114b 	mov.w	r1, fp, lsl #5
 801916e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019172:	4301      	orrs	r1, r0
 8019174:	9109      	str	r1, [sp, #36]	; 0x24
 8019176:	f000 81e4 	beq.w	8019542 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 801917a:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 801917e:	79d9      	ldrb	r1, [r3, #7]
 8019180:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 8019184:	ea51 0b0b 	orrs.w	fp, r1, fp
 8019188:	f000 81db 	beq.w	8019542 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 801918c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8019190:	b29b      	uxth	r3, r3
 8019192:	2e00      	cmp	r6, #0
 8019194:	f000 80fd 	beq.w	8019392 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8019198:	1af6      	subs	r6, r6, r3
 801919a:	b2b6      	uxth	r6, r6
 801919c:	0433      	lsls	r3, r6, #16
 801919e:	d502      	bpl.n	80191a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80191a0:	1bad      	subs	r5, r5, r6
 80191a2:	2600      	movs	r6, #0
 80191a4:	b22d      	sxth	r5, r5
 80191a6:	f9b2 1000 	ldrsh.w	r1, [r2]
 80191aa:	a814      	add	r0, sp, #80	; 0x50
 80191ac:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80191b0:	428d      	cmp	r5, r1
 80191b2:	b28b      	uxth	r3, r1
 80191b4:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80191b8:	bfbf      	itttt	lt
 80191ba:	18f6      	addlt	r6, r6, r3
 80191bc:	1b75      	sublt	r5, r6, r5
 80191be:	b2ae      	uxthlt	r6, r5
 80191c0:	460d      	movlt	r5, r1
 80191c2:	8891      	ldrh	r1, [r2, #4]
 80191c4:	440b      	add	r3, r1
 80191c6:	4629      	mov	r1, r5
 80191c8:	b21b      	sxth	r3, r3
 80191ca:	9311      	str	r3, [sp, #68]	; 0x44
 80191cc:	8853      	ldrh	r3, [r2, #2]
 80191ce:	88d2      	ldrh	r2, [r2, #6]
 80191d0:	4413      	add	r3, r2
 80191d2:	9a08      	ldr	r2, [sp, #32]
 80191d4:	b21b      	sxth	r3, r3
 80191d6:	9310      	str	r3, [sp, #64]	; 0x40
 80191d8:	4bb1      	ldr	r3, [pc, #708]	; (80194a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 80191da:	f893 9000 	ldrb.w	r9, [r3]
 80191de:	f109 3cff 	add.w	ip, r9, #4294967295
 80191e2:	f1dc 0300 	rsbs	r3, ip, #0
 80191e6:	eb43 030c 	adc.w	r3, r3, ip
 80191ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80191ec:	4653      	mov	r3, sl
 80191ee:	f7fd f829 	bl	8016244 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80191f2:	4629      	mov	r1, r5
 80191f4:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80191f8:	4653      	mov	r3, sl
 80191fa:	9a08      	ldr	r2, [sp, #32]
 80191fc:	a814      	add	r0, sp, #80	; 0x50
 80191fe:	f7fd f839 	bl	8016274 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8019202:	a918      	add	r1, sp, #96	; 0x60
 8019204:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8019208:	a817      	add	r0, sp, #92	; 0x5c
 801920a:	f7fd f97b 	bl	8016504 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801920e:	f1ba 0f00 	cmp.w	sl, #0
 8019212:	f040 80c1 	bne.w	8019398 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
 8019216:	f1b9 0f01 	cmp.w	r9, #1
 801921a:	f040 80c5 	bne.w	80193a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 801921e:	2301      	movs	r3, #1
 8019220:	f1b8 0f01 	cmp.w	r8, #1
 8019224:	fa03 f308 	lsl.w	r3, r3, r8
 8019228:	f103 33ff 	add.w	r3, r3, #4294967295
 801922c:	b2db      	uxtb	r3, r3
 801922e:	930a      	str	r3, [sp, #40]	; 0x28
 8019230:	f000 80e5 	beq.w	80193fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 8019234:	f1b8 0f02 	cmp.w	r8, #2
 8019238:	f000 80e4 	beq.w	8019404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801923c:	f1b8 0f04 	cmp.w	r8, #4
 8019240:	bf15      	itete	ne
 8019242:	46c1      	movne	r9, r8
 8019244:	f04f 0904 	moveq.w	r9, #4
 8019248:	2301      	movne	r3, #1
 801924a:	2311      	moveq	r3, #17
 801924c:	9307      	str	r3, [sp, #28]
 801924e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019250:	b153      	cbz	r3, 8019268 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 8019252:	2408      	movs	r4, #8
 8019254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019256:	fb94 f3f9 	sdiv	r3, r4, r9
 801925a:	1e5c      	subs	r4, r3, #1
 801925c:	4414      	add	r4, r2
 801925e:	fb94 f4f3 	sdiv	r4, r4, r3
 8019262:	fb14 f403 	smulbb	r4, r4, r3
 8019266:	b2a4      	uxth	r4, r4
 8019268:	b906      	cbnz	r6, 801926c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 801926a:	b16f      	cbz	r7, 8019288 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 801926c:	fb07 6304 	mla	r3, r7, r4, r6
 8019270:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8019272:	4639      	mov	r1, r7
 8019274:	fb08 f303 	mul.w	r3, r8, r3
 8019278:	f003 0707 	and.w	r7, r3, #7
 801927c:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 8019280:	9328      	str	r3, [sp, #160]	; 0xa0
 8019282:	ebab 0301 	sub.w	r3, fp, r1
 8019286:	930e      	str	r3, [sp, #56]	; 0x38
 8019288:	4651      	mov	r1, sl
 801928a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801928c:	f7ff feee 	bl	801906c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8019290:	4651      	mov	r1, sl
 8019292:	4683      	mov	fp, r0
 8019294:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019296:	f7ff ff19 	bl	80190cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801929a:	9a08      	ldr	r2, [sp, #32]
 801929c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801929e:	4682      	mov	sl, r0
 80192a0:	1a9b      	subs	r3, r3, r2
 80192a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80192a4:	429a      	cmp	r2, r3
 80192a6:	bfa8      	it	ge
 80192a8:	461a      	movge	r2, r3
 80192aa:	2a00      	cmp	r2, #0
 80192ac:	9208      	str	r2, [sp, #32]
 80192ae:	f340 8148 	ble.w	8019542 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 80192b2:	1bad      	subs	r5, r5, r6
 80192b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80192b6:	1b5d      	subs	r5, r3, r5
 80192b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192ba:	429d      	cmp	r5, r3
 80192bc:	bfd4      	ite	le
 80192be:	ebc6 0605 	rsble	r6, r6, r5
 80192c2:	ebc6 0603 	rsbgt	r6, r6, r3
 80192c6:	2e00      	cmp	r6, #0
 80192c8:	f340 813b 	ble.w	8019542 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 80192cc:	1ba4      	subs	r4, r4, r6
 80192ce:	fb09 f304 	mul.w	r3, r9, r4
 80192d2:	930e      	str	r3, [sp, #56]	; 0x38
 80192d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	f040 809d 	bne.w	8019416 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 80192dc:	4b71      	ldr	r3, [pc, #452]	; (80194a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 80192de:	6818      	ldr	r0, [r3, #0]
 80192e0:	6803      	ldr	r3, [r0, #0]
 80192e2:	6a1b      	ldr	r3, [r3, #32]
 80192e4:	4798      	blx	r3
 80192e6:	4970      	ldr	r1, [pc, #448]	; (80194a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 80192e8:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80192ec:	880c      	ldrh	r4, [r1, #0]
 80192ee:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 80192f2:	fb04 1303 	mla	r3, r4, r3, r1
 80192f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80192fa:	9309      	str	r3, [sp, #36]	; 0x24
 80192fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80192fe:	7819      	ldrb	r1, [r3, #0]
 8019300:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019302:	4139      	asrs	r1, r7
 8019304:	0a1b      	lsrs	r3, r3, #8
 8019306:	b2c9      	uxtb	r1, r1
 8019308:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801930c:	930f      	str	r3, [sp, #60]	; 0x3c
 801930e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019310:	08db      	lsrs	r3, r3, #3
 8019312:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8019316:	9310      	str	r3, [sp, #64]	; 0x40
 8019318:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801931a:	00db      	lsls	r3, r3, #3
 801931c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8019320:	9311      	str	r3, [sp, #68]	; 0x44
 8019322:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8019326:	fb0b ab16 	mls	fp, fp, r6, sl
 801932a:	fb03 fa06 	mul.w	sl, r3, r6
 801932e:	930c      	str	r3, [sp, #48]	; 0x30
 8019330:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 8019334:	9312      	str	r3, [sp, #72]	; 0x48
 8019336:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019338:	b29b      	uxth	r3, r3
 801933a:	9313      	str	r3, [sp, #76]	; 0x4c
 801933c:	9b08      	ldr	r3, [sp, #32]
 801933e:	3b01      	subs	r3, #1
 8019340:	9308      	str	r3, [sp, #32]
 8019342:	3301      	adds	r3, #1
 8019344:	f000 80c4 	beq.w	80194d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8019348:	46b2      	mov	sl, r6
 801934a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801934e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8019352:	f0c0 80ab 	bcc.w	80194ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8019356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019358:	400b      	ands	r3, r1
 801935a:	d00a      	beq.n	8019372 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 801935c:	9807      	ldr	r0, [sp, #28]
 801935e:	fb13 f300 	smulbb	r3, r3, r0
 8019362:	2bfe      	cmp	r3, #254	; 0xfe
 8019364:	dd59      	ble.n	801941a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8019366:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019368:	28ff      	cmp	r0, #255	; 0xff
 801936a:	d156      	bne.n	801941a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 801936c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801936e:	f8ae 4000 	strh.w	r4, [lr]
 8019372:	4447      	add	r7, r8
 8019374:	b2bf      	uxth	r7, r7
 8019376:	2f07      	cmp	r7, #7
 8019378:	bf89      	itett	hi
 801937a:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801937c:	fa41 f109 	asrls.w	r1, r1, r9
 8019380:	2700      	movhi	r7, #0
 8019382:	7859      	ldrbhi	r1, [r3, #1]
 8019384:	bf8a      	itet	hi
 8019386:	3301      	addhi	r3, #1
 8019388:	b2c9      	uxtbls	r1, r1
 801938a:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801938c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801938e:	449e      	add	lr, r3
 8019390:	e7dd      	b.n	801934e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8019392:	441d      	add	r5, r3
 8019394:	b22d      	sxth	r5, r5
 8019396:	e706      	b.n	80191a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8019398:	f1ba 0f01 	cmp.w	sl, #1
 801939c:	f47f af3f 	bne.w	801921e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80193a0:	f1b9 0f01 	cmp.w	r9, #1
 80193a4:	f47f af3b 	bne.w	801921e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80193a8:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80194a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80193ac:	f8d9 0000 	ldr.w	r0, [r9]
 80193b0:	6803      	ldr	r3, [r0, #0]
 80193b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193b4:	4798      	blx	r3
 80193b6:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 80193ba:	464a      	mov	r2, r9
 80193bc:	d006      	beq.n	80193cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 80193be:	f1b8 0f04 	cmp.w	r8, #4
 80193c2:	d11a      	bne.n	80193fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80193c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193c6:	3300      	adds	r3, #0
 80193c8:	bf18      	it	ne
 80193ca:	2301      	movne	r3, #1
 80193cc:	05c0      	lsls	r0, r0, #23
 80193ce:	f140 8088 	bpl.w	80194e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 80193d2:	f1b8 0f08 	cmp.w	r8, #8
 80193d6:	f040 8084 	bne.w	80194e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 80193da:	2b00      	cmp	r3, #0
 80193dc:	bf14      	ite	ne
 80193de:	2180      	movne	r1, #128	; 0x80
 80193e0:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80193e4:	2e00      	cmp	r6, #0
 80193e6:	f040 80af 	bne.w	8019548 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
 80193ea:	2f00      	cmp	r7, #0
 80193ec:	f000 8083 	beq.w	80194f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 80193f0:	23ff      	movs	r3, #255	; 0xff
 80193f2:	46c1      	mov	r9, r8
 80193f4:	930a      	str	r3, [sp, #40]	; 0x28
 80193f6:	2301      	movs	r3, #1
 80193f8:	e728      	b.n	801924c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 80193fa:	2300      	movs	r3, #0
 80193fc:	e7e6      	b.n	80193cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 80193fe:	46c1      	mov	r9, r8
 8019400:	23ff      	movs	r3, #255	; 0xff
 8019402:	e723      	b.n	801924c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8019404:	46c1      	mov	r9, r8
 8019406:	2355      	movs	r3, #85	; 0x55
 8019408:	e720      	b.n	801924c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 801940a:	23ff      	movs	r3, #255	; 0xff
 801940c:	46c1      	mov	r9, r8
 801940e:	930a      	str	r3, [sp, #40]	; 0x28
 8019410:	2301      	movs	r3, #1
 8019412:	9307      	str	r3, [sp, #28]
 8019414:	e71d      	b.n	8019252 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8019416:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019418:	e765      	b.n	80192e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
 801941a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801941c:	f8be 5000 	ldrh.w	r5, [lr]
 8019420:	fb10 f303 	smulbb	r3, r0, r3
 8019424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019426:	122c      	asrs	r4, r5, #8
 8019428:	b29b      	uxth	r3, r3
 801942a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801942e:	1c58      	adds	r0, r3, #1
 8019430:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8019434:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019436:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801943a:	fa1f fc83 	uxth.w	ip, r3
 801943e:	43db      	mvns	r3, r3
 8019440:	fb10 f00c 	smulbb	r0, r0, ip
 8019444:	b2db      	uxtb	r3, r3
 8019446:	fb1c fb02 	smulbb	fp, ip, r2
 801944a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801944c:	fb04 0403 	mla	r4, r4, r3, r0
 8019450:	10e8      	asrs	r0, r5, #3
 8019452:	fb1c fc02 	smulbb	ip, ip, r2
 8019456:	00ed      	lsls	r5, r5, #3
 8019458:	b2a4      	uxth	r4, r4
 801945a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801945e:	b2ed      	uxtb	r5, r5
 8019460:	fb00 b003 	mla	r0, r0, r3, fp
 8019464:	fb05 cc03 	mla	ip, r5, r3, ip
 8019468:	1c63      	adds	r3, r4, #1
 801946a:	b280      	uxth	r0, r0
 801946c:	fa1f fc8c 	uxth.w	ip, ip
 8019470:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8019474:	f10c 0b01 	add.w	fp, ip, #1
 8019478:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801947c:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8019480:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8019484:	ea44 040b 	orr.w	r4, r4, fp
 8019488:	f100 0b01 	add.w	fp, r0, #1
 801948c:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8019490:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019494:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019498:	ea44 040b 	orr.w	r4, r4, fp
 801949c:	e767      	b.n	801936e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 801949e:	bf00      	nop
 80194a0:	20001c96 	.word	0x20001c96
 80194a4:	20001ca0 	.word	0x20001ca0
 80194a8:	20001c98 	.word	0x20001c98
 80194ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194ae:	b153      	cbz	r3, 80194c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80194b0:	441f      	add	r7, r3
 80194b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80194b4:	b2bf      	uxth	r7, r7
 80194b6:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 80194ba:	f007 0707 	and.w	r7, r7, #7
 80194be:	7819      	ldrb	r1, [r3, #0]
 80194c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80194c2:	4139      	asrs	r1, r7
 80194c4:	b2c9      	uxtb	r1, r1
 80194c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80194c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80194ca:	441a      	add	r2, r3
 80194cc:	9209      	str	r2, [sp, #36]	; 0x24
 80194ce:	e735      	b.n	801933c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
 80194d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d135      	bne.n	8019542 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 80194d6:	4b21      	ldr	r3, [pc, #132]	; (801955c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
 80194d8:	6818      	ldr	r0, [r3, #0]
 80194da:	6803      	ldr	r3, [r0, #0]
 80194dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194de:	4798      	blx	r3
 80194e0:	e02f      	b.n	8019542 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	f43f ae9b 	beq.w	801921e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80194e8:	2e00      	cmp	r6, #0
 80194ea:	f47f ae98 	bne.w	801921e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80194ee:	2f00      	cmp	r7, #0
 80194f0:	f47f ae95 	bne.w	801921e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80194f4:	2180      	movs	r1, #128	; 0x80
 80194f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194f8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80194fa:	18eb      	adds	r3, r5, r3
 80194fc:	4283      	cmp	r3, r0
 80194fe:	f73f ae8e 	bgt.w	801921e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8019502:	9b08      	ldr	r3, [sp, #32]
 8019504:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019506:	445b      	add	r3, fp
 8019508:	4283      	cmp	r3, r0
 801950a:	f73f ae88 	bgt.w	801921e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801950e:	f1b8 0f08 	cmp.w	r8, #8
 8019512:	6810      	ldr	r0, [r2, #0]
 8019514:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8019518:	bf18      	it	ne
 801951a:	3401      	addne	r4, #1
 801951c:	6805      	ldr	r5, [r0, #0]
 801951e:	9105      	str	r1, [sp, #20]
 8019520:	bf18      	it	ne
 8019522:	f024 0401 	bicne.w	r4, r4, #1
 8019526:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019528:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801952c:	bf18      	it	ne
 801952e:	b2a4      	uxthne	r4, r4
 8019530:	9104      	str	r1, [sp, #16]
 8019532:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8019534:	e9cd 4b00 	strd	r4, fp, [sp]
 8019538:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801953c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801953e:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8019540:	47a0      	blx	r4
 8019542:	b019      	add	sp, #100	; 0x64
 8019544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801954a:	2b00      	cmp	r3, #0
 801954c:	f47f af5d 	bne.w	801940a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8019550:	23ff      	movs	r3, #255	; 0xff
 8019552:	46c1      	mov	r9, r8
 8019554:	930a      	str	r3, [sp, #40]	; 0x28
 8019556:	2301      	movs	r3, #1
 8019558:	9307      	str	r3, [sp, #28]
 801955a:	e687      	b.n	801926c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 801955c:	20001ca0 	.word	0x20001ca0

08019560 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8019560:	6101      	str	r1, [r0, #16]
 8019562:	4770      	bx	lr

08019564 <_ZN8touchgfx8Gestures4tickEv>:
 8019564:	7b83      	ldrb	r3, [r0, #14]
 8019566:	b14b      	cbz	r3, 801957c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8019568:	8903      	ldrh	r3, [r0, #8]
 801956a:	3301      	adds	r3, #1
 801956c:	b29b      	uxth	r3, r3
 801956e:	2b07      	cmp	r3, #7
 8019570:	8103      	strh	r3, [r0, #8]
 8019572:	bf81      	itttt	hi
 8019574:	2300      	movhi	r3, #0
 8019576:	8143      	strhhi	r3, [r0, #10]
 8019578:	8183      	strhhi	r3, [r0, #12]
 801957a:	7383      	strbhi	r3, [r0, #14]
 801957c:	4770      	bx	lr
	...

08019580 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8019580:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019584:	4604      	mov	r4, r0
 8019586:	4698      	mov	r8, r3
 8019588:	8880      	ldrh	r0, [r0, #4]
 801958a:	4617      	mov	r7, r2
 801958c:	4b1d      	ldr	r3, [pc, #116]	; (8019604 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801958e:	460e      	mov	r6, r1
 8019590:	f8ad 0006 	strh.w	r0, [sp, #6]
 8019594:	eba8 0000 	sub.w	r0, r8, r0
 8019598:	9300      	str	r3, [sp, #0]
 801959a:	2300      	movs	r3, #0
 801959c:	b280      	uxth	r0, r0
 801959e:	8aa2      	ldrh	r2, [r4, #20]
 80195a0:	f88d 3004 	strb.w	r3, [sp, #4]
 80195a4:	b203      	sxth	r3, r0
 80195a6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80195aa:	88e1      	ldrh	r1, [r4, #6]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	f8ad 800a 	strh.w	r8, [sp, #10]
 80195b2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80195b6:	bfb8      	it	lt
 80195b8:	4240      	neglt	r0, r0
 80195ba:	f8ad 500c 	strh.w	r5, [sp, #12]
 80195be:	bfb8      	it	lt
 80195c0:	b203      	sxthlt	r3, r0
 80195c2:	4293      	cmp	r3, r2
 80195c4:	dc08      	bgt.n	80195d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80195c6:	1a69      	subs	r1, r5, r1
 80195c8:	b289      	uxth	r1, r1
 80195ca:	b20b      	sxth	r3, r1
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	bfbc      	itt	lt
 80195d0:	4249      	neglt	r1, r1
 80195d2:	b20b      	sxthlt	r3, r1
 80195d4:	429a      	cmp	r2, r3
 80195d6:	da13      	bge.n	8019600 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80195d8:	6920      	ldr	r0, [r4, #16]
 80195da:	4669      	mov	r1, sp
 80195dc:	eba8 0606 	sub.w	r6, r8, r6
 80195e0:	1bef      	subs	r7, r5, r7
 80195e2:	6803      	ldr	r3, [r0, #0]
 80195e4:	685b      	ldr	r3, [r3, #4]
 80195e6:	4798      	blx	r3
 80195e8:	2300      	movs	r3, #0
 80195ea:	2001      	movs	r0, #1
 80195ec:	8166      	strh	r6, [r4, #10]
 80195ee:	8123      	strh	r3, [r4, #8]
 80195f0:	81a7      	strh	r7, [r4, #12]
 80195f2:	f8a4 8004 	strh.w	r8, [r4, #4]
 80195f6:	80e5      	strh	r5, [r4, #6]
 80195f8:	73a0      	strb	r0, [r4, #14]
 80195fa:	b004      	add	sp, #16
 80195fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019600:	2000      	movs	r0, #0
 8019602:	e7fa      	b.n	80195fa <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8019604:	0801d118 	.word	0x0801d118

08019608 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8019608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801960a:	461e      	mov	r6, r3
 801960c:	1e4b      	subs	r3, r1, #1
 801960e:	b085      	sub	sp, #20
 8019610:	4604      	mov	r4, r0
 8019612:	2b01      	cmp	r3, #1
 8019614:	460d      	mov	r5, r1
 8019616:	4617      	mov	r7, r2
 8019618:	d84b      	bhi.n	80196b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801961a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801961e:	1cd3      	adds	r3, r2, #3
 8019620:	b29b      	uxth	r3, r3
 8019622:	2b06      	cmp	r3, #6
 8019624:	d916      	bls.n	8019654 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8019626:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80196c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801962a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801962e:	f8cd c004 	str.w	ip, [sp, #4]
 8019632:	f04f 0c00 	mov.w	ip, #0
 8019636:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801963a:	6900      	ldr	r0, [r0, #16]
 801963c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8019640:	a901      	add	r1, sp, #4
 8019642:	f88d c008 	strb.w	ip, [sp, #8]
 8019646:	f8ad 200a 	strh.w	r2, [sp, #10]
 801964a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801964e:	6803      	ldr	r3, [r0, #0]
 8019650:	689b      	ldr	r3, [r3, #8]
 8019652:	4798      	blx	r3
 8019654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019658:	1cd3      	adds	r3, r2, #3
 801965a:	b29b      	uxth	r3, r3
 801965c:	2b06      	cmp	r3, #6
 801965e:	d916      	bls.n	801968e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8019660:	f8df c064 	ldr.w	ip, [pc, #100]	; 80196c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8019664:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019668:	f8cd c004 	str.w	ip, [sp, #4]
 801966c:	f04f 0c01 	mov.w	ip, #1
 8019670:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019674:	6920      	ldr	r0, [r4, #16]
 8019676:	f8ad 100c 	strh.w	r1, [sp, #12]
 801967a:	a901      	add	r1, sp, #4
 801967c:	f88d c008 	strb.w	ip, [sp, #8]
 8019680:	f8ad 200a 	strh.w	r2, [sp, #10]
 8019684:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019688:	6803      	ldr	r3, [r0, #0]
 801968a:	689b      	ldr	r3, [r3, #8]
 801968c:	4798      	blx	r3
 801968e:	4b0d      	ldr	r3, [pc, #52]	; (80196c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8019690:	a901      	add	r1, sp, #4
 8019692:	6920      	ldr	r0, [r4, #16]
 8019694:	9301      	str	r3, [sp, #4]
 8019696:	2300      	movs	r3, #0
 8019698:	f88d 5008 	strb.w	r5, [sp, #8]
 801969c:	f8ad 700a 	strh.w	r7, [sp, #10]
 80196a0:	f8ad 600c 	strh.w	r6, [sp, #12]
 80196a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80196a8:	6803      	ldr	r3, [r0, #0]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	4798      	blx	r3
 80196ae:	b005      	add	sp, #20
 80196b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196b2:	2900      	cmp	r1, #0
 80196b4:	d1eb      	bne.n	801968e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80196b6:	80a2      	strh	r2, [r4, #4]
 80196b8:	80c6      	strh	r6, [r0, #6]
 80196ba:	60a1      	str	r1, [r4, #8]
 80196bc:	81a1      	strh	r1, [r4, #12]
 80196be:	73a1      	strb	r1, [r4, #14]
 80196c0:	e7e5      	b.n	801968e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80196c2:	bf00      	nop
 80196c4:	0801d104 	.word	0x0801d104
 80196c8:	0801d12c 	.word	0x0801d12c

080196cc <_ZdlPvj>:
 80196cc:	f000 ba11 	b.w	8019af2 <_ZdlPv>

080196d0 <__cxa_guard_acquire>:
 80196d0:	6803      	ldr	r3, [r0, #0]
 80196d2:	07db      	lsls	r3, r3, #31
 80196d4:	d406      	bmi.n	80196e4 <__cxa_guard_acquire+0x14>
 80196d6:	7843      	ldrb	r3, [r0, #1]
 80196d8:	b103      	cbz	r3, 80196dc <__cxa_guard_acquire+0xc>
 80196da:	deff      	udf	#255	; 0xff
 80196dc:	2301      	movs	r3, #1
 80196de:	7043      	strb	r3, [r0, #1]
 80196e0:	4618      	mov	r0, r3
 80196e2:	4770      	bx	lr
 80196e4:	2000      	movs	r0, #0
 80196e6:	4770      	bx	lr

080196e8 <__cxa_guard_release>:
 80196e8:	2301      	movs	r3, #1
 80196ea:	6003      	str	r3, [r0, #0]
 80196ec:	4770      	bx	lr

080196ee <_Znwj>:
 80196ee:	2801      	cmp	r0, #1
 80196f0:	bf38      	it	cc
 80196f2:	2001      	movcc	r0, #1
 80196f4:	b510      	push	{r4, lr}
 80196f6:	4604      	mov	r4, r0
 80196f8:	4620      	mov	r0, r4
 80196fa:	f000 fa7f 	bl	8019bfc <malloc>
 80196fe:	b930      	cbnz	r0, 801970e <_Znwj+0x20>
 8019700:	f000 fa0c 	bl	8019b1c <_ZSt15get_new_handlerv>
 8019704:	b908      	cbnz	r0, 801970a <_Znwj+0x1c>
 8019706:	f000 fa11 	bl	8019b2c <abort>
 801970a:	4780      	blx	r0
 801970c:	e7f4      	b.n	80196f8 <_Znwj+0xa>
 801970e:	bd10      	pop	{r4, pc}

08019710 <__cxa_pure_virtual>:
 8019710:	b508      	push	{r3, lr}
 8019712:	f000 f9fd 	bl	8019b10 <_ZSt9terminatev>

08019716 <_ZNSaIcEC1Ev>:
 8019716:	4770      	bx	lr

08019718 <_ZNSaIcED1Ev>:
 8019718:	4770      	bx	lr

0801971a <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 801971a:	684b      	ldr	r3, [r1, #4]
 801971c:	6043      	str	r3, [r0, #4]
 801971e:	684b      	ldr	r3, [r1, #4]
 8019720:	6001      	str	r1, [r0, #0]
 8019722:	6018      	str	r0, [r3, #0]
 8019724:	6048      	str	r0, [r1, #4]
 8019726:	4770      	bx	lr

08019728 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8019728:	e9d0 3200 	ldrd	r3, r2, [r0]
 801972c:	6013      	str	r3, [r2, #0]
 801972e:	605a      	str	r2, [r3, #4]
 8019730:	4770      	bx	lr

08019732 <_ZSt17__throw_bad_allocv>:
 8019732:	b508      	push	{r3, lr}
 8019734:	f000 f9fa 	bl	8019b2c <abort>

08019738 <_ZSt19__throw_logic_errorPKc>:
 8019738:	b508      	push	{r3, lr}
 801973a:	f000 f9f7 	bl	8019b2c <abort>

0801973e <_ZSt20__throw_length_errorPKc>:
 801973e:	b508      	push	{r3, lr}
 8019740:	f000 f9f4 	bl	8019b2c <abort>

08019744 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8019744:	b10a      	cbz	r2, 801974a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8019746:	f000 ba69 	b.w	8019c1c <memcpy>
 801974a:	4770      	bx	lr

0801974c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801974c:	b508      	push	{r3, lr}
 801974e:	680b      	ldr	r3, [r1, #0]
 8019750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019754:	d302      	bcc.n	801975c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8019756:	480d      	ldr	r0, [pc, #52]	; (801978c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8019758:	f7ff fff1 	bl	801973e <_ZSt20__throw_length_errorPKc>
 801975c:	4293      	cmp	r3, r2
 801975e:	d90b      	bls.n	8019778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8019760:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8019764:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8019768:	d206      	bcs.n	8019778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801976a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801976e:	bf2a      	itet	cs
 8019770:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8019774:	6008      	strcc	r0, [r1, #0]
 8019776:	600b      	strcs	r3, [r1, #0]
 8019778:	6808      	ldr	r0, [r1, #0]
 801977a:	3001      	adds	r0, #1
 801977c:	d501      	bpl.n	8019782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801977e:	f7ff ffd8 	bl	8019732 <_ZSt17__throw_bad_allocv>
 8019782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019786:	f7ff bfb2 	b.w	80196ee <_Znwj>
 801978a:	bf00      	nop
 801978c:	0801e13c 	.word	0x0801e13c

08019790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8019790:	f850 3b08 	ldr.w	r3, [r0], #8
 8019794:	4283      	cmp	r3, r0
 8019796:	d002      	beq.n	801979e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8019798:	4618      	mov	r0, r3
 801979a:	f000 b9aa 	b.w	8019af2 <_ZdlPv>
 801979e:	4770      	bx	lr

080197a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80197a0:	6840      	ldr	r0, [r0, #4]
 80197a2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80197a6:	3901      	subs	r1, #1
 80197a8:	1a09      	subs	r1, r1, r0
 80197aa:	4291      	cmp	r1, r2
 80197ac:	b508      	push	{r3, lr}
 80197ae:	d202      	bcs.n	80197b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80197b0:	4618      	mov	r0, r3
 80197b2:	f7ff ffc4 	bl	801973e <_ZSt20__throw_length_errorPKc>
 80197b6:	bd08      	pop	{r3, pc}

080197b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80197b8:	6803      	ldr	r3, [r0, #0]
 80197ba:	428b      	cmp	r3, r1
 80197bc:	d806      	bhi.n	80197cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80197be:	6840      	ldr	r0, [r0, #4]
 80197c0:	4418      	add	r0, r3
 80197c2:	4281      	cmp	r1, r0
 80197c4:	bf94      	ite	ls
 80197c6:	2000      	movls	r0, #0
 80197c8:	2001      	movhi	r0, #1
 80197ca:	4770      	bx	lr
 80197cc:	2001      	movs	r0, #1
 80197ce:	4770      	bx	lr

080197d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80197d0:	2a01      	cmp	r2, #1
 80197d2:	b410      	push	{r4}
 80197d4:	d104      	bne.n	80197e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80197d6:	780a      	ldrb	r2, [r1, #0]
 80197d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197dc:	7002      	strb	r2, [r0, #0]
 80197de:	4770      	bx	lr
 80197e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197e4:	f7ff bfae 	b.w	8019744 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080197e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80197e8:	2a01      	cmp	r2, #1
 80197ea:	b430      	push	{r4, r5}
 80197ec:	d103      	bne.n	80197f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80197ee:	780b      	ldrb	r3, [r1, #0]
 80197f0:	7003      	strb	r3, [r0, #0]
 80197f2:	bc30      	pop	{r4, r5}
 80197f4:	4770      	bx	lr
 80197f6:	2a00      	cmp	r2, #0
 80197f8:	d0fb      	beq.n	80197f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80197fa:	bc30      	pop	{r4, r5}
 80197fc:	f000 ba1c 	b.w	8019c38 <memmove>

08019800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8019800:	b508      	push	{r3, lr}
 8019802:	1a52      	subs	r2, r2, r1
 8019804:	f7ff ffe4 	bl	80197d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8019808:	bd08      	pop	{r3, pc}

0801980a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801980a:	b508      	push	{r3, lr}
 801980c:	1a52      	subs	r2, r2, r1
 801980e:	f7ff ffdf 	bl	80197d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8019812:	bd08      	pop	{r3, pc}

08019814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8019814:	4288      	cmp	r0, r1
 8019816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019818:	4604      	mov	r4, r0
 801981a:	460e      	mov	r6, r1
 801981c:	d01e      	beq.n	801985c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 801981e:	4603      	mov	r3, r0
 8019820:	684d      	ldr	r5, [r1, #4]
 8019822:	f853 2b08 	ldr.w	r2, [r3], #8
 8019826:	429a      	cmp	r2, r3
 8019828:	bf14      	ite	ne
 801982a:	6882      	ldrne	r2, [r0, #8]
 801982c:	220f      	moveq	r2, #15
 801982e:	42aa      	cmp	r2, r5
 8019830:	d20a      	bcs.n	8019848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8019832:	a901      	add	r1, sp, #4
 8019834:	9501      	str	r5, [sp, #4]
 8019836:	f7ff ff89 	bl	801974c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801983a:	4607      	mov	r7, r0
 801983c:	4620      	mov	r0, r4
 801983e:	f7ff ffa7 	bl	8019790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8019842:	9b01      	ldr	r3, [sp, #4]
 8019844:	6027      	str	r7, [r4, #0]
 8019846:	60a3      	str	r3, [r4, #8]
 8019848:	b125      	cbz	r5, 8019854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 801984a:	6831      	ldr	r1, [r6, #0]
 801984c:	6820      	ldr	r0, [r4, #0]
 801984e:	462a      	mov	r2, r5
 8019850:	f7ff ffbe 	bl	80197d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8019854:	6823      	ldr	r3, [r4, #0]
 8019856:	6065      	str	r5, [r4, #4]
 8019858:	2200      	movs	r2, #0
 801985a:	555a      	strb	r2, [r3, r5]
 801985c:	b003      	add	sp, #12
 801985e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019860 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8019860:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019864:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019866:	461f      	mov	r7, r3
 8019868:	6843      	ldr	r3, [r0, #4]
 801986a:	eb01 0802 	add.w	r8, r1, r2
 801986e:	1ab2      	subs	r2, r6, r2
 8019870:	441a      	add	r2, r3
 8019872:	eba3 0908 	sub.w	r9, r3, r8
 8019876:	4603      	mov	r3, r0
 8019878:	9201      	str	r2, [sp, #4]
 801987a:	f853 2b08 	ldr.w	r2, [r3], #8
 801987e:	429a      	cmp	r2, r3
 8019880:	bf18      	it	ne
 8019882:	6882      	ldrne	r2, [r0, #8]
 8019884:	460d      	mov	r5, r1
 8019886:	bf08      	it	eq
 8019888:	220f      	moveq	r2, #15
 801988a:	a901      	add	r1, sp, #4
 801988c:	4604      	mov	r4, r0
 801988e:	f7ff ff5d 	bl	801974c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8019892:	4682      	mov	sl, r0
 8019894:	b11d      	cbz	r5, 801989e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8019896:	6821      	ldr	r1, [r4, #0]
 8019898:	462a      	mov	r2, r5
 801989a:	f7ff ff99 	bl	80197d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801989e:	b137      	cbz	r7, 80198ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80198a0:	b12e      	cbz	r6, 80198ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80198a2:	4632      	mov	r2, r6
 80198a4:	4639      	mov	r1, r7
 80198a6:	eb0a 0005 	add.w	r0, sl, r5
 80198aa:	f7ff ff91 	bl	80197d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80198ae:	f1b9 0f00 	cmp.w	r9, #0
 80198b2:	d007      	beq.n	80198c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80198b4:	6821      	ldr	r1, [r4, #0]
 80198b6:	4435      	add	r5, r6
 80198b8:	464a      	mov	r2, r9
 80198ba:	4441      	add	r1, r8
 80198bc:	eb0a 0005 	add.w	r0, sl, r5
 80198c0:	f7ff ff86 	bl	80197d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80198c4:	4620      	mov	r0, r4
 80198c6:	f7ff ff63 	bl	8019790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80198ca:	9b01      	ldr	r3, [sp, #4]
 80198cc:	f8c4 a000 	str.w	sl, [r4]
 80198d0:	60a3      	str	r3, [r4, #8]
 80198d2:	b002      	add	sp, #8
 80198d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080198d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80198d8:	b510      	push	{r4, lr}
 80198da:	4604      	mov	r4, r0
 80198dc:	f7ff ff58 	bl	8019790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80198e0:	4620      	mov	r0, r4
 80198e2:	bd10      	pop	{r4, pc}

080198e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80198e4:	b510      	push	{r4, lr}
 80198e6:	4604      	mov	r4, r0
 80198e8:	f7ff ff94 	bl	8019814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80198ec:	4620      	mov	r0, r4
 80198ee:	bd10      	pop	{r4, pc}

080198f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80198f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80198f6:	4614      	mov	r4, r2
 80198f8:	4680      	mov	r8, r0
 80198fa:	462a      	mov	r2, r5
 80198fc:	4689      	mov	r9, r1
 80198fe:	461f      	mov	r7, r3
 8019900:	4621      	mov	r1, r4
 8019902:	4b39      	ldr	r3, [pc, #228]	; (80199e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8019904:	f7ff ff4c 	bl	80197a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8019908:	4642      	mov	r2, r8
 801990a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801990e:	f852 6b08 	ldr.w	r6, [r2], #8
 8019912:	4296      	cmp	r6, r2
 8019914:	bf18      	it	ne
 8019916:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 801991a:	eba5 0b04 	sub.w	fp, r5, r4
 801991e:	eb03 0a0b 	add.w	sl, r3, fp
 8019922:	bf08      	it	eq
 8019924:	220f      	moveq	r2, #15
 8019926:	4552      	cmp	r2, sl
 8019928:	d351      	bcc.n	80199ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 801992a:	444e      	add	r6, r9
 801992c:	4639      	mov	r1, r7
 801992e:	44a1      	add	r9, r4
 8019930:	4640      	mov	r0, r8
 8019932:	eba3 0909 	sub.w	r9, r3, r9
 8019936:	f7ff ff3f 	bl	80197b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 801993a:	b180      	cbz	r0, 801995e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 801993c:	f1b9 0f00 	cmp.w	r9, #0
 8019940:	d006      	beq.n	8019950 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8019942:	42ac      	cmp	r4, r5
 8019944:	d004      	beq.n	8019950 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8019946:	464a      	mov	r2, r9
 8019948:	1931      	adds	r1, r6, r4
 801994a:	1970      	adds	r0, r6, r5
 801994c:	f7ff ff4c 	bl	80197e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8019950:	b315      	cbz	r5, 8019998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8019952:	462a      	mov	r2, r5
 8019954:	4639      	mov	r1, r7
 8019956:	4630      	mov	r0, r6
 8019958:	f7ff ff3a 	bl	80197d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801995c:	e01c      	b.n	8019998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801995e:	b135      	cbz	r5, 801996e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8019960:	42ac      	cmp	r4, r5
 8019962:	d33c      	bcc.n	80199de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8019964:	462a      	mov	r2, r5
 8019966:	4639      	mov	r1, r7
 8019968:	4630      	mov	r0, r6
 801996a:	f7ff ff3d 	bl	80197e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801996e:	f1b9 0f00 	cmp.w	r9, #0
 8019972:	d011      	beq.n	8019998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8019974:	42ac      	cmp	r4, r5
 8019976:	d00f      	beq.n	8019998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8019978:	464a      	mov	r2, r9
 801997a:	1931      	adds	r1, r6, r4
 801997c:	1970      	adds	r0, r6, r5
 801997e:	f7ff ff33 	bl	80197e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8019982:	42ac      	cmp	r4, r5
 8019984:	d208      	bcs.n	8019998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8019986:	4434      	add	r4, r6
 8019988:	197b      	adds	r3, r7, r5
 801998a:	429c      	cmp	r4, r3
 801998c:	d30f      	bcc.n	80199ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 801998e:	462a      	mov	r2, r5
 8019990:	4639      	mov	r1, r7
 8019992:	4630      	mov	r0, r6
 8019994:	f7ff ff28 	bl	80197e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8019998:	f8d8 3000 	ldr.w	r3, [r8]
 801999c:	f8c8 a004 	str.w	sl, [r8, #4]
 80199a0:	2200      	movs	r2, #0
 80199a2:	4640      	mov	r0, r8
 80199a4:	f803 200a 	strb.w	r2, [r3, sl]
 80199a8:	b003      	add	sp, #12
 80199aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ae:	42bc      	cmp	r4, r7
 80199b0:	d803      	bhi.n	80199ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 80199b2:	462a      	mov	r2, r5
 80199b4:	eb07 010b 	add.w	r1, r7, fp
 80199b8:	e7cd      	b.n	8019956 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 80199ba:	1be4      	subs	r4, r4, r7
 80199bc:	4622      	mov	r2, r4
 80199be:	4639      	mov	r1, r7
 80199c0:	4630      	mov	r0, r6
 80199c2:	f7ff ff11 	bl	80197e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80199c6:	1b2a      	subs	r2, r5, r4
 80199c8:	1971      	adds	r1, r6, r5
 80199ca:	1930      	adds	r0, r6, r4
 80199cc:	e7c4      	b.n	8019958 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80199ce:	9500      	str	r5, [sp, #0]
 80199d0:	463b      	mov	r3, r7
 80199d2:	4622      	mov	r2, r4
 80199d4:	4649      	mov	r1, r9
 80199d6:	4640      	mov	r0, r8
 80199d8:	f7ff ff42 	bl	8019860 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80199dc:	e7dc      	b.n	8019998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80199de:	f1b9 0f00 	cmp.w	r9, #0
 80199e2:	d0d0      	beq.n	8019986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 80199e4:	e7c8      	b.n	8019978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 80199e6:	bf00      	nop
 80199e8:	0801e154 	.word	0x0801e154

080199ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80199ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80199ee:	4604      	mov	r4, r0
 80199f0:	4608      	mov	r0, r1
 80199f2:	9103      	str	r1, [sp, #12]
 80199f4:	f7e6 fc5c 	bl	80002b0 <strlen>
 80199f8:	9b03      	ldr	r3, [sp, #12]
 80199fa:	9000      	str	r0, [sp, #0]
 80199fc:	6862      	ldr	r2, [r4, #4]
 80199fe:	2100      	movs	r1, #0
 8019a00:	4620      	mov	r0, r4
 8019a02:	f7ff ff75 	bl	80198f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8019a06:	b004      	add	sp, #16
 8019a08:	bd10      	pop	{r4, pc}

08019a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8019a0a:	b508      	push	{r3, lr}
 8019a0c:	f7ff ffee 	bl	80199ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8019a10:	bd08      	pop	{r3, pc}

08019a12 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8019a12:	6800      	ldr	r0, [r0, #0]
 8019a14:	4770      	bx	lr
	...

08019a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8019a18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019a1a:	4604      	mov	r4, r0
 8019a1c:	4616      	mov	r6, r2
 8019a1e:	460d      	mov	r5, r1
 8019a20:	b919      	cbnz	r1, 8019a2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8019a22:	b112      	cbz	r2, 8019a2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8019a24:	480d      	ldr	r0, [pc, #52]	; (8019a5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8019a26:	f7ff fe87 	bl	8019738 <_ZSt19__throw_logic_errorPKc>
 8019a2a:	1b73      	subs	r3, r6, r5
 8019a2c:	2b0f      	cmp	r3, #15
 8019a2e:	9301      	str	r3, [sp, #4]
 8019a30:	d907      	bls.n	8019a42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8019a32:	2200      	movs	r2, #0
 8019a34:	a901      	add	r1, sp, #4
 8019a36:	4620      	mov	r0, r4
 8019a38:	f7ff fe88 	bl	801974c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8019a3c:	9b01      	ldr	r3, [sp, #4]
 8019a3e:	6020      	str	r0, [r4, #0]
 8019a40:	60a3      	str	r3, [r4, #8]
 8019a42:	4632      	mov	r2, r6
 8019a44:	4629      	mov	r1, r5
 8019a46:	6820      	ldr	r0, [r4, #0]
 8019a48:	f7ff feda 	bl	8019800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8019a4c:	9b01      	ldr	r3, [sp, #4]
 8019a4e:	6822      	ldr	r2, [r4, #0]
 8019a50:	6063      	str	r3, [r4, #4]
 8019a52:	2100      	movs	r1, #0
 8019a54:	54d1      	strb	r1, [r2, r3]
 8019a56:	b002      	add	sp, #8
 8019a58:	bd70      	pop	{r4, r5, r6, pc}
 8019a5a:	bf00      	nop
 8019a5c:	0801e16d 	.word	0x0801e16d

08019a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8019a60:	b538      	push	{r3, r4, r5, lr}
 8019a62:	f100 0308 	add.w	r3, r0, #8
 8019a66:	6003      	str	r3, [r0, #0]
 8019a68:	e9d1 5200 	ldrd	r5, r2, [r1]
 8019a6c:	4604      	mov	r4, r0
 8019a6e:	f04f 0300 	mov.w	r3, #0
 8019a72:	442a      	add	r2, r5
 8019a74:	4629      	mov	r1, r5
 8019a76:	f7ff ffcf 	bl	8019a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8019a7a:	4620      	mov	r0, r4
 8019a7c:	bd38      	pop	{r3, r4, r5, pc}
	...

08019a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8019a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019a82:	4604      	mov	r4, r0
 8019a84:	4616      	mov	r6, r2
 8019a86:	460d      	mov	r5, r1
 8019a88:	b919      	cbnz	r1, 8019a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8019a8a:	b112      	cbz	r2, 8019a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8019a8c:	480d      	ldr	r0, [pc, #52]	; (8019ac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8019a8e:	f7ff fe53 	bl	8019738 <_ZSt19__throw_logic_errorPKc>
 8019a92:	1b73      	subs	r3, r6, r5
 8019a94:	2b0f      	cmp	r3, #15
 8019a96:	9301      	str	r3, [sp, #4]
 8019a98:	d907      	bls.n	8019aaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8019a9a:	2200      	movs	r2, #0
 8019a9c:	a901      	add	r1, sp, #4
 8019a9e:	4620      	mov	r0, r4
 8019aa0:	f7ff fe54 	bl	801974c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8019aa4:	9b01      	ldr	r3, [sp, #4]
 8019aa6:	6020      	str	r0, [r4, #0]
 8019aa8:	60a3      	str	r3, [r4, #8]
 8019aaa:	4632      	mov	r2, r6
 8019aac:	4629      	mov	r1, r5
 8019aae:	6820      	ldr	r0, [r4, #0]
 8019ab0:	f7ff feab 	bl	801980a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8019ab4:	9b01      	ldr	r3, [sp, #4]
 8019ab6:	6822      	ldr	r2, [r4, #0]
 8019ab8:	6063      	str	r3, [r4, #4]
 8019aba:	2100      	movs	r1, #0
 8019abc:	54d1      	strb	r1, [r2, r3]
 8019abe:	b002      	add	sp, #8
 8019ac0:	bd70      	pop	{r4, r5, r6, pc}
 8019ac2:	bf00      	nop
 8019ac4:	0801e16d 	.word	0x0801e16d

08019ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8019ac8:	b538      	push	{r3, r4, r5, lr}
 8019aca:	f100 0308 	add.w	r3, r0, #8
 8019ace:	4604      	mov	r4, r0
 8019ad0:	6003      	str	r3, [r0, #0]
 8019ad2:	460d      	mov	r5, r1
 8019ad4:	b159      	cbz	r1, 8019aee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8019ad6:	4608      	mov	r0, r1
 8019ad8:	f7e6 fbea 	bl	80002b0 <strlen>
 8019adc:	182a      	adds	r2, r5, r0
 8019ade:	4620      	mov	r0, r4
 8019ae0:	f04f 0300 	mov.w	r3, #0
 8019ae4:	4629      	mov	r1, r5
 8019ae6:	f7ff ffcb 	bl	8019a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8019aea:	4620      	mov	r0, r4
 8019aec:	bd38      	pop	{r3, r4, r5, pc}
 8019aee:	2201      	movs	r2, #1
 8019af0:	e7f5      	b.n	8019ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08019af2 <_ZdlPv>:
 8019af2:	f000 b88b 	b.w	8019c0c <free>

08019af6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8019af6:	b508      	push	{r3, lr}
 8019af8:	4780      	blx	r0
 8019afa:	f000 f817 	bl	8019b2c <abort>
	...

08019b00 <_ZSt13get_terminatev>:
 8019b00:	4b02      	ldr	r3, [pc, #8]	; (8019b0c <_ZSt13get_terminatev+0xc>)
 8019b02:	6818      	ldr	r0, [r3, #0]
 8019b04:	f3bf 8f5b 	dmb	ish
 8019b08:	4770      	bx	lr
 8019b0a:	bf00      	nop
 8019b0c:	20000060 	.word	0x20000060

08019b10 <_ZSt9terminatev>:
 8019b10:	b508      	push	{r3, lr}
 8019b12:	f7ff fff5 	bl	8019b00 <_ZSt13get_terminatev>
 8019b16:	f7ff ffee 	bl	8019af6 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08019b1c <_ZSt15get_new_handlerv>:
 8019b1c:	4b02      	ldr	r3, [pc, #8]	; (8019b28 <_ZSt15get_new_handlerv+0xc>)
 8019b1e:	6818      	ldr	r0, [r3, #0]
 8019b20:	f3bf 8f5b 	dmb	ish
 8019b24:	4770      	bx	lr
 8019b26:	bf00      	nop
 8019b28:	20001cf4 	.word	0x20001cf4

08019b2c <abort>:
 8019b2c:	b508      	push	{r3, lr}
 8019b2e:	2006      	movs	r0, #6
 8019b30:	f000 fcaa 	bl	801a488 <raise>
 8019b34:	2001      	movs	r0, #1
 8019b36:	f7e8 fb49 	bl	80021cc <_exit>
	...

08019b3c <__assert_func>:
 8019b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019b3e:	4614      	mov	r4, r2
 8019b40:	461a      	mov	r2, r3
 8019b42:	4b09      	ldr	r3, [pc, #36]	; (8019b68 <__assert_func+0x2c>)
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	4605      	mov	r5, r0
 8019b48:	68d8      	ldr	r0, [r3, #12]
 8019b4a:	b14c      	cbz	r4, 8019b60 <__assert_func+0x24>
 8019b4c:	4b07      	ldr	r3, [pc, #28]	; (8019b6c <__assert_func+0x30>)
 8019b4e:	9100      	str	r1, [sp, #0]
 8019b50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019b54:	4906      	ldr	r1, [pc, #24]	; (8019b70 <__assert_func+0x34>)
 8019b56:	462b      	mov	r3, r5
 8019b58:	f000 f81a 	bl	8019b90 <fiprintf>
 8019b5c:	f7ff ffe6 	bl	8019b2c <abort>
 8019b60:	4b04      	ldr	r3, [pc, #16]	; (8019b74 <__assert_func+0x38>)
 8019b62:	461c      	mov	r4, r3
 8019b64:	e7f3      	b.n	8019b4e <__assert_func+0x12>
 8019b66:	bf00      	nop
 8019b68:	20000064 	.word	0x20000064
 8019b6c:	0801e197 	.word	0x0801e197
 8019b70:	0801e1a4 	.word	0x0801e1a4
 8019b74:	0801e1d2 	.word	0x0801e1d2

08019b78 <atexit>:
 8019b78:	2300      	movs	r3, #0
 8019b7a:	4601      	mov	r1, r0
 8019b7c:	461a      	mov	r2, r3
 8019b7e:	4618      	mov	r0, r3
 8019b80:	f000 bd7e 	b.w	801a680 <__register_exitproc>

08019b84 <__errno>:
 8019b84:	4b01      	ldr	r3, [pc, #4]	; (8019b8c <__errno+0x8>)
 8019b86:	6818      	ldr	r0, [r3, #0]
 8019b88:	4770      	bx	lr
 8019b8a:	bf00      	nop
 8019b8c:	20000064 	.word	0x20000064

08019b90 <fiprintf>:
 8019b90:	b40e      	push	{r1, r2, r3}
 8019b92:	b503      	push	{r0, r1, lr}
 8019b94:	4601      	mov	r1, r0
 8019b96:	ab03      	add	r3, sp, #12
 8019b98:	4805      	ldr	r0, [pc, #20]	; (8019bb0 <fiprintf+0x20>)
 8019b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b9e:	6800      	ldr	r0, [r0, #0]
 8019ba0:	9301      	str	r3, [sp, #4]
 8019ba2:	f000 f975 	bl	8019e90 <_vfiprintf_r>
 8019ba6:	b002      	add	sp, #8
 8019ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8019bac:	b003      	add	sp, #12
 8019bae:	4770      	bx	lr
 8019bb0:	20000064 	.word	0x20000064

08019bb4 <__libc_init_array>:
 8019bb4:	b570      	push	{r4, r5, r6, lr}
 8019bb6:	4d0d      	ldr	r5, [pc, #52]	; (8019bec <__libc_init_array+0x38>)
 8019bb8:	4c0d      	ldr	r4, [pc, #52]	; (8019bf0 <__libc_init_array+0x3c>)
 8019bba:	1b64      	subs	r4, r4, r5
 8019bbc:	10a4      	asrs	r4, r4, #2
 8019bbe:	2600      	movs	r6, #0
 8019bc0:	42a6      	cmp	r6, r4
 8019bc2:	d109      	bne.n	8019bd8 <__libc_init_array+0x24>
 8019bc4:	4d0b      	ldr	r5, [pc, #44]	; (8019bf4 <__libc_init_array+0x40>)
 8019bc6:	4c0c      	ldr	r4, [pc, #48]	; (8019bf8 <__libc_init_array+0x44>)
 8019bc8:	f001 fa26 	bl	801b018 <_init>
 8019bcc:	1b64      	subs	r4, r4, r5
 8019bce:	10a4      	asrs	r4, r4, #2
 8019bd0:	2600      	movs	r6, #0
 8019bd2:	42a6      	cmp	r6, r4
 8019bd4:	d105      	bne.n	8019be2 <__libc_init_array+0x2e>
 8019bd6:	bd70      	pop	{r4, r5, r6, pc}
 8019bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8019bdc:	4798      	blx	r3
 8019bde:	3601      	adds	r6, #1
 8019be0:	e7ee      	b.n	8019bc0 <__libc_init_array+0xc>
 8019be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8019be6:	4798      	blx	r3
 8019be8:	3601      	adds	r6, #1
 8019bea:	e7f2      	b.n	8019bd2 <__libc_init_array+0x1e>
 8019bec:	0801ef5c 	.word	0x0801ef5c
 8019bf0:	0801ef5c 	.word	0x0801ef5c
 8019bf4:	0801ef5c 	.word	0x0801ef5c
 8019bf8:	0801ef80 	.word	0x0801ef80

08019bfc <malloc>:
 8019bfc:	4b02      	ldr	r3, [pc, #8]	; (8019c08 <malloc+0xc>)
 8019bfe:	4601      	mov	r1, r0
 8019c00:	6818      	ldr	r0, [r3, #0]
 8019c02:	f000 b8a7 	b.w	8019d54 <_malloc_r>
 8019c06:	bf00      	nop
 8019c08:	20000064 	.word	0x20000064

08019c0c <free>:
 8019c0c:	4b02      	ldr	r3, [pc, #8]	; (8019c18 <free+0xc>)
 8019c0e:	4601      	mov	r1, r0
 8019c10:	6818      	ldr	r0, [r3, #0]
 8019c12:	f000 b833 	b.w	8019c7c <_free_r>
 8019c16:	bf00      	nop
 8019c18:	20000064 	.word	0x20000064

08019c1c <memcpy>:
 8019c1c:	440a      	add	r2, r1
 8019c1e:	4291      	cmp	r1, r2
 8019c20:	f100 33ff 	add.w	r3, r0, #4294967295
 8019c24:	d100      	bne.n	8019c28 <memcpy+0xc>
 8019c26:	4770      	bx	lr
 8019c28:	b510      	push	{r4, lr}
 8019c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019c32:	4291      	cmp	r1, r2
 8019c34:	d1f9      	bne.n	8019c2a <memcpy+0xe>
 8019c36:	bd10      	pop	{r4, pc}

08019c38 <memmove>:
 8019c38:	4288      	cmp	r0, r1
 8019c3a:	b510      	push	{r4, lr}
 8019c3c:	eb01 0402 	add.w	r4, r1, r2
 8019c40:	d902      	bls.n	8019c48 <memmove+0x10>
 8019c42:	4284      	cmp	r4, r0
 8019c44:	4623      	mov	r3, r4
 8019c46:	d807      	bhi.n	8019c58 <memmove+0x20>
 8019c48:	1e43      	subs	r3, r0, #1
 8019c4a:	42a1      	cmp	r1, r4
 8019c4c:	d008      	beq.n	8019c60 <memmove+0x28>
 8019c4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019c52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019c56:	e7f8      	b.n	8019c4a <memmove+0x12>
 8019c58:	4402      	add	r2, r0
 8019c5a:	4601      	mov	r1, r0
 8019c5c:	428a      	cmp	r2, r1
 8019c5e:	d100      	bne.n	8019c62 <memmove+0x2a>
 8019c60:	bd10      	pop	{r4, pc}
 8019c62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019c66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019c6a:	e7f7      	b.n	8019c5c <memmove+0x24>

08019c6c <memset>:
 8019c6c:	4402      	add	r2, r0
 8019c6e:	4603      	mov	r3, r0
 8019c70:	4293      	cmp	r3, r2
 8019c72:	d100      	bne.n	8019c76 <memset+0xa>
 8019c74:	4770      	bx	lr
 8019c76:	f803 1b01 	strb.w	r1, [r3], #1
 8019c7a:	e7f9      	b.n	8019c70 <memset+0x4>

08019c7c <_free_r>:
 8019c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c7e:	2900      	cmp	r1, #0
 8019c80:	d044      	beq.n	8019d0c <_free_r+0x90>
 8019c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c86:	9001      	str	r0, [sp, #4]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8019c8e:	bfb8      	it	lt
 8019c90:	18e4      	addlt	r4, r4, r3
 8019c92:	f000 ff77 	bl	801ab84 <__malloc_lock>
 8019c96:	4a1e      	ldr	r2, [pc, #120]	; (8019d10 <_free_r+0x94>)
 8019c98:	9801      	ldr	r0, [sp, #4]
 8019c9a:	6813      	ldr	r3, [r2, #0]
 8019c9c:	b933      	cbnz	r3, 8019cac <_free_r+0x30>
 8019c9e:	6063      	str	r3, [r4, #4]
 8019ca0:	6014      	str	r4, [r2, #0]
 8019ca2:	b003      	add	sp, #12
 8019ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ca8:	f000 bf72 	b.w	801ab90 <__malloc_unlock>
 8019cac:	42a3      	cmp	r3, r4
 8019cae:	d908      	bls.n	8019cc2 <_free_r+0x46>
 8019cb0:	6825      	ldr	r5, [r4, #0]
 8019cb2:	1961      	adds	r1, r4, r5
 8019cb4:	428b      	cmp	r3, r1
 8019cb6:	bf01      	itttt	eq
 8019cb8:	6819      	ldreq	r1, [r3, #0]
 8019cba:	685b      	ldreq	r3, [r3, #4]
 8019cbc:	1949      	addeq	r1, r1, r5
 8019cbe:	6021      	streq	r1, [r4, #0]
 8019cc0:	e7ed      	b.n	8019c9e <_free_r+0x22>
 8019cc2:	461a      	mov	r2, r3
 8019cc4:	685b      	ldr	r3, [r3, #4]
 8019cc6:	b10b      	cbz	r3, 8019ccc <_free_r+0x50>
 8019cc8:	42a3      	cmp	r3, r4
 8019cca:	d9fa      	bls.n	8019cc2 <_free_r+0x46>
 8019ccc:	6811      	ldr	r1, [r2, #0]
 8019cce:	1855      	adds	r5, r2, r1
 8019cd0:	42a5      	cmp	r5, r4
 8019cd2:	d10b      	bne.n	8019cec <_free_r+0x70>
 8019cd4:	6824      	ldr	r4, [r4, #0]
 8019cd6:	4421      	add	r1, r4
 8019cd8:	1854      	adds	r4, r2, r1
 8019cda:	42a3      	cmp	r3, r4
 8019cdc:	6011      	str	r1, [r2, #0]
 8019cde:	d1e0      	bne.n	8019ca2 <_free_r+0x26>
 8019ce0:	681c      	ldr	r4, [r3, #0]
 8019ce2:	685b      	ldr	r3, [r3, #4]
 8019ce4:	6053      	str	r3, [r2, #4]
 8019ce6:	4421      	add	r1, r4
 8019ce8:	6011      	str	r1, [r2, #0]
 8019cea:	e7da      	b.n	8019ca2 <_free_r+0x26>
 8019cec:	d902      	bls.n	8019cf4 <_free_r+0x78>
 8019cee:	230c      	movs	r3, #12
 8019cf0:	6003      	str	r3, [r0, #0]
 8019cf2:	e7d6      	b.n	8019ca2 <_free_r+0x26>
 8019cf4:	6825      	ldr	r5, [r4, #0]
 8019cf6:	1961      	adds	r1, r4, r5
 8019cf8:	428b      	cmp	r3, r1
 8019cfa:	bf04      	itt	eq
 8019cfc:	6819      	ldreq	r1, [r3, #0]
 8019cfe:	685b      	ldreq	r3, [r3, #4]
 8019d00:	6063      	str	r3, [r4, #4]
 8019d02:	bf04      	itt	eq
 8019d04:	1949      	addeq	r1, r1, r5
 8019d06:	6021      	streq	r1, [r4, #0]
 8019d08:	6054      	str	r4, [r2, #4]
 8019d0a:	e7ca      	b.n	8019ca2 <_free_r+0x26>
 8019d0c:	b003      	add	sp, #12
 8019d0e:	bd30      	pop	{r4, r5, pc}
 8019d10:	20001cf8 	.word	0x20001cf8

08019d14 <sbrk_aligned>:
 8019d14:	b570      	push	{r4, r5, r6, lr}
 8019d16:	4e0e      	ldr	r6, [pc, #56]	; (8019d50 <sbrk_aligned+0x3c>)
 8019d18:	460c      	mov	r4, r1
 8019d1a:	6831      	ldr	r1, [r6, #0]
 8019d1c:	4605      	mov	r5, r0
 8019d1e:	b911      	cbnz	r1, 8019d26 <sbrk_aligned+0x12>
 8019d20:	f000 fb7a 	bl	801a418 <_sbrk_r>
 8019d24:	6030      	str	r0, [r6, #0]
 8019d26:	4621      	mov	r1, r4
 8019d28:	4628      	mov	r0, r5
 8019d2a:	f000 fb75 	bl	801a418 <_sbrk_r>
 8019d2e:	1c43      	adds	r3, r0, #1
 8019d30:	d00a      	beq.n	8019d48 <sbrk_aligned+0x34>
 8019d32:	1cc4      	adds	r4, r0, #3
 8019d34:	f024 0403 	bic.w	r4, r4, #3
 8019d38:	42a0      	cmp	r0, r4
 8019d3a:	d007      	beq.n	8019d4c <sbrk_aligned+0x38>
 8019d3c:	1a21      	subs	r1, r4, r0
 8019d3e:	4628      	mov	r0, r5
 8019d40:	f000 fb6a 	bl	801a418 <_sbrk_r>
 8019d44:	3001      	adds	r0, #1
 8019d46:	d101      	bne.n	8019d4c <sbrk_aligned+0x38>
 8019d48:	f04f 34ff 	mov.w	r4, #4294967295
 8019d4c:	4620      	mov	r0, r4
 8019d4e:	bd70      	pop	{r4, r5, r6, pc}
 8019d50:	20001cfc 	.word	0x20001cfc

08019d54 <_malloc_r>:
 8019d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d58:	1ccd      	adds	r5, r1, #3
 8019d5a:	f025 0503 	bic.w	r5, r5, #3
 8019d5e:	3508      	adds	r5, #8
 8019d60:	2d0c      	cmp	r5, #12
 8019d62:	bf38      	it	cc
 8019d64:	250c      	movcc	r5, #12
 8019d66:	2d00      	cmp	r5, #0
 8019d68:	4607      	mov	r7, r0
 8019d6a:	db01      	blt.n	8019d70 <_malloc_r+0x1c>
 8019d6c:	42a9      	cmp	r1, r5
 8019d6e:	d905      	bls.n	8019d7c <_malloc_r+0x28>
 8019d70:	230c      	movs	r3, #12
 8019d72:	603b      	str	r3, [r7, #0]
 8019d74:	2600      	movs	r6, #0
 8019d76:	4630      	mov	r0, r6
 8019d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d7c:	4e2e      	ldr	r6, [pc, #184]	; (8019e38 <_malloc_r+0xe4>)
 8019d7e:	f000 ff01 	bl	801ab84 <__malloc_lock>
 8019d82:	6833      	ldr	r3, [r6, #0]
 8019d84:	461c      	mov	r4, r3
 8019d86:	bb34      	cbnz	r4, 8019dd6 <_malloc_r+0x82>
 8019d88:	4629      	mov	r1, r5
 8019d8a:	4638      	mov	r0, r7
 8019d8c:	f7ff ffc2 	bl	8019d14 <sbrk_aligned>
 8019d90:	1c43      	adds	r3, r0, #1
 8019d92:	4604      	mov	r4, r0
 8019d94:	d14d      	bne.n	8019e32 <_malloc_r+0xde>
 8019d96:	6834      	ldr	r4, [r6, #0]
 8019d98:	4626      	mov	r6, r4
 8019d9a:	2e00      	cmp	r6, #0
 8019d9c:	d140      	bne.n	8019e20 <_malloc_r+0xcc>
 8019d9e:	6823      	ldr	r3, [r4, #0]
 8019da0:	4631      	mov	r1, r6
 8019da2:	4638      	mov	r0, r7
 8019da4:	eb04 0803 	add.w	r8, r4, r3
 8019da8:	f000 fb36 	bl	801a418 <_sbrk_r>
 8019dac:	4580      	cmp	r8, r0
 8019dae:	d13a      	bne.n	8019e26 <_malloc_r+0xd2>
 8019db0:	6821      	ldr	r1, [r4, #0]
 8019db2:	3503      	adds	r5, #3
 8019db4:	1a6d      	subs	r5, r5, r1
 8019db6:	f025 0503 	bic.w	r5, r5, #3
 8019dba:	3508      	adds	r5, #8
 8019dbc:	2d0c      	cmp	r5, #12
 8019dbe:	bf38      	it	cc
 8019dc0:	250c      	movcc	r5, #12
 8019dc2:	4629      	mov	r1, r5
 8019dc4:	4638      	mov	r0, r7
 8019dc6:	f7ff ffa5 	bl	8019d14 <sbrk_aligned>
 8019dca:	3001      	adds	r0, #1
 8019dcc:	d02b      	beq.n	8019e26 <_malloc_r+0xd2>
 8019dce:	6823      	ldr	r3, [r4, #0]
 8019dd0:	442b      	add	r3, r5
 8019dd2:	6023      	str	r3, [r4, #0]
 8019dd4:	e00e      	b.n	8019df4 <_malloc_r+0xa0>
 8019dd6:	6822      	ldr	r2, [r4, #0]
 8019dd8:	1b52      	subs	r2, r2, r5
 8019dda:	d41e      	bmi.n	8019e1a <_malloc_r+0xc6>
 8019ddc:	2a0b      	cmp	r2, #11
 8019dde:	d916      	bls.n	8019e0e <_malloc_r+0xba>
 8019de0:	1961      	adds	r1, r4, r5
 8019de2:	42a3      	cmp	r3, r4
 8019de4:	6025      	str	r5, [r4, #0]
 8019de6:	bf18      	it	ne
 8019de8:	6059      	strne	r1, [r3, #4]
 8019dea:	6863      	ldr	r3, [r4, #4]
 8019dec:	bf08      	it	eq
 8019dee:	6031      	streq	r1, [r6, #0]
 8019df0:	5162      	str	r2, [r4, r5]
 8019df2:	604b      	str	r3, [r1, #4]
 8019df4:	4638      	mov	r0, r7
 8019df6:	f104 060b 	add.w	r6, r4, #11
 8019dfa:	f000 fec9 	bl	801ab90 <__malloc_unlock>
 8019dfe:	f026 0607 	bic.w	r6, r6, #7
 8019e02:	1d23      	adds	r3, r4, #4
 8019e04:	1af2      	subs	r2, r6, r3
 8019e06:	d0b6      	beq.n	8019d76 <_malloc_r+0x22>
 8019e08:	1b9b      	subs	r3, r3, r6
 8019e0a:	50a3      	str	r3, [r4, r2]
 8019e0c:	e7b3      	b.n	8019d76 <_malloc_r+0x22>
 8019e0e:	6862      	ldr	r2, [r4, #4]
 8019e10:	42a3      	cmp	r3, r4
 8019e12:	bf0c      	ite	eq
 8019e14:	6032      	streq	r2, [r6, #0]
 8019e16:	605a      	strne	r2, [r3, #4]
 8019e18:	e7ec      	b.n	8019df4 <_malloc_r+0xa0>
 8019e1a:	4623      	mov	r3, r4
 8019e1c:	6864      	ldr	r4, [r4, #4]
 8019e1e:	e7b2      	b.n	8019d86 <_malloc_r+0x32>
 8019e20:	4634      	mov	r4, r6
 8019e22:	6876      	ldr	r6, [r6, #4]
 8019e24:	e7b9      	b.n	8019d9a <_malloc_r+0x46>
 8019e26:	230c      	movs	r3, #12
 8019e28:	603b      	str	r3, [r7, #0]
 8019e2a:	4638      	mov	r0, r7
 8019e2c:	f000 feb0 	bl	801ab90 <__malloc_unlock>
 8019e30:	e7a1      	b.n	8019d76 <_malloc_r+0x22>
 8019e32:	6025      	str	r5, [r4, #0]
 8019e34:	e7de      	b.n	8019df4 <_malloc_r+0xa0>
 8019e36:	bf00      	nop
 8019e38:	20001cf8 	.word	0x20001cf8

08019e3c <__sfputc_r>:
 8019e3c:	6893      	ldr	r3, [r2, #8]
 8019e3e:	3b01      	subs	r3, #1
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	b410      	push	{r4}
 8019e44:	6093      	str	r3, [r2, #8]
 8019e46:	da08      	bge.n	8019e5a <__sfputc_r+0x1e>
 8019e48:	6994      	ldr	r4, [r2, #24]
 8019e4a:	42a3      	cmp	r3, r4
 8019e4c:	db01      	blt.n	8019e52 <__sfputc_r+0x16>
 8019e4e:	290a      	cmp	r1, #10
 8019e50:	d103      	bne.n	8019e5a <__sfputc_r+0x1e>
 8019e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e56:	f000 bb53 	b.w	801a500 <__swbuf_r>
 8019e5a:	6813      	ldr	r3, [r2, #0]
 8019e5c:	1c58      	adds	r0, r3, #1
 8019e5e:	6010      	str	r0, [r2, #0]
 8019e60:	7019      	strb	r1, [r3, #0]
 8019e62:	4608      	mov	r0, r1
 8019e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e68:	4770      	bx	lr

08019e6a <__sfputs_r>:
 8019e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e6c:	4606      	mov	r6, r0
 8019e6e:	460f      	mov	r7, r1
 8019e70:	4614      	mov	r4, r2
 8019e72:	18d5      	adds	r5, r2, r3
 8019e74:	42ac      	cmp	r4, r5
 8019e76:	d101      	bne.n	8019e7c <__sfputs_r+0x12>
 8019e78:	2000      	movs	r0, #0
 8019e7a:	e007      	b.n	8019e8c <__sfputs_r+0x22>
 8019e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e80:	463a      	mov	r2, r7
 8019e82:	4630      	mov	r0, r6
 8019e84:	f7ff ffda 	bl	8019e3c <__sfputc_r>
 8019e88:	1c43      	adds	r3, r0, #1
 8019e8a:	d1f3      	bne.n	8019e74 <__sfputs_r+0xa>
 8019e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019e90 <_vfiprintf_r>:
 8019e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e94:	460d      	mov	r5, r1
 8019e96:	b09d      	sub	sp, #116	; 0x74
 8019e98:	4614      	mov	r4, r2
 8019e9a:	4698      	mov	r8, r3
 8019e9c:	4606      	mov	r6, r0
 8019e9e:	b118      	cbz	r0, 8019ea8 <_vfiprintf_r+0x18>
 8019ea0:	6983      	ldr	r3, [r0, #24]
 8019ea2:	b90b      	cbnz	r3, 8019ea8 <_vfiprintf_r+0x18>
 8019ea4:	f000 fd68 	bl	801a978 <__sinit>
 8019ea8:	4b89      	ldr	r3, [pc, #548]	; (801a0d0 <_vfiprintf_r+0x240>)
 8019eaa:	429d      	cmp	r5, r3
 8019eac:	d11b      	bne.n	8019ee6 <_vfiprintf_r+0x56>
 8019eae:	6875      	ldr	r5, [r6, #4]
 8019eb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019eb2:	07d9      	lsls	r1, r3, #31
 8019eb4:	d405      	bmi.n	8019ec2 <_vfiprintf_r+0x32>
 8019eb6:	89ab      	ldrh	r3, [r5, #12]
 8019eb8:	059a      	lsls	r2, r3, #22
 8019eba:	d402      	bmi.n	8019ec2 <_vfiprintf_r+0x32>
 8019ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ebe:	f000 fdf9 	bl	801aab4 <__retarget_lock_acquire_recursive>
 8019ec2:	89ab      	ldrh	r3, [r5, #12]
 8019ec4:	071b      	lsls	r3, r3, #28
 8019ec6:	d501      	bpl.n	8019ecc <_vfiprintf_r+0x3c>
 8019ec8:	692b      	ldr	r3, [r5, #16]
 8019eca:	b9eb      	cbnz	r3, 8019f08 <_vfiprintf_r+0x78>
 8019ecc:	4629      	mov	r1, r5
 8019ece:	4630      	mov	r0, r6
 8019ed0:	f000 fb68 	bl	801a5a4 <__swsetup_r>
 8019ed4:	b1c0      	cbz	r0, 8019f08 <_vfiprintf_r+0x78>
 8019ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ed8:	07dc      	lsls	r4, r3, #31
 8019eda:	d50e      	bpl.n	8019efa <_vfiprintf_r+0x6a>
 8019edc:	f04f 30ff 	mov.w	r0, #4294967295
 8019ee0:	b01d      	add	sp, #116	; 0x74
 8019ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ee6:	4b7b      	ldr	r3, [pc, #492]	; (801a0d4 <_vfiprintf_r+0x244>)
 8019ee8:	429d      	cmp	r5, r3
 8019eea:	d101      	bne.n	8019ef0 <_vfiprintf_r+0x60>
 8019eec:	68b5      	ldr	r5, [r6, #8]
 8019eee:	e7df      	b.n	8019eb0 <_vfiprintf_r+0x20>
 8019ef0:	4b79      	ldr	r3, [pc, #484]	; (801a0d8 <_vfiprintf_r+0x248>)
 8019ef2:	429d      	cmp	r5, r3
 8019ef4:	bf08      	it	eq
 8019ef6:	68f5      	ldreq	r5, [r6, #12]
 8019ef8:	e7da      	b.n	8019eb0 <_vfiprintf_r+0x20>
 8019efa:	89ab      	ldrh	r3, [r5, #12]
 8019efc:	0598      	lsls	r0, r3, #22
 8019efe:	d4ed      	bmi.n	8019edc <_vfiprintf_r+0x4c>
 8019f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f02:	f000 fdd9 	bl	801aab8 <__retarget_lock_release_recursive>
 8019f06:	e7e9      	b.n	8019edc <_vfiprintf_r+0x4c>
 8019f08:	2300      	movs	r3, #0
 8019f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8019f0c:	2320      	movs	r3, #32
 8019f0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019f12:	f8cd 800c 	str.w	r8, [sp, #12]
 8019f16:	2330      	movs	r3, #48	; 0x30
 8019f18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a0dc <_vfiprintf_r+0x24c>
 8019f1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019f20:	f04f 0901 	mov.w	r9, #1
 8019f24:	4623      	mov	r3, r4
 8019f26:	469a      	mov	sl, r3
 8019f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f2c:	b10a      	cbz	r2, 8019f32 <_vfiprintf_r+0xa2>
 8019f2e:	2a25      	cmp	r2, #37	; 0x25
 8019f30:	d1f9      	bne.n	8019f26 <_vfiprintf_r+0x96>
 8019f32:	ebba 0b04 	subs.w	fp, sl, r4
 8019f36:	d00b      	beq.n	8019f50 <_vfiprintf_r+0xc0>
 8019f38:	465b      	mov	r3, fp
 8019f3a:	4622      	mov	r2, r4
 8019f3c:	4629      	mov	r1, r5
 8019f3e:	4630      	mov	r0, r6
 8019f40:	f7ff ff93 	bl	8019e6a <__sfputs_r>
 8019f44:	3001      	adds	r0, #1
 8019f46:	f000 80aa 	beq.w	801a09e <_vfiprintf_r+0x20e>
 8019f4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f4c:	445a      	add	r2, fp
 8019f4e:	9209      	str	r2, [sp, #36]	; 0x24
 8019f50:	f89a 3000 	ldrb.w	r3, [sl]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	f000 80a2 	beq.w	801a09e <_vfiprintf_r+0x20e>
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8019f60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f64:	f10a 0a01 	add.w	sl, sl, #1
 8019f68:	9304      	str	r3, [sp, #16]
 8019f6a:	9307      	str	r3, [sp, #28]
 8019f6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019f70:	931a      	str	r3, [sp, #104]	; 0x68
 8019f72:	4654      	mov	r4, sl
 8019f74:	2205      	movs	r2, #5
 8019f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f7a:	4858      	ldr	r0, [pc, #352]	; (801a0dc <_vfiprintf_r+0x24c>)
 8019f7c:	f7e6 f948 	bl	8000210 <memchr>
 8019f80:	9a04      	ldr	r2, [sp, #16]
 8019f82:	b9d8      	cbnz	r0, 8019fbc <_vfiprintf_r+0x12c>
 8019f84:	06d1      	lsls	r1, r2, #27
 8019f86:	bf44      	itt	mi
 8019f88:	2320      	movmi	r3, #32
 8019f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f8e:	0713      	lsls	r3, r2, #28
 8019f90:	bf44      	itt	mi
 8019f92:	232b      	movmi	r3, #43	; 0x2b
 8019f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f98:	f89a 3000 	ldrb.w	r3, [sl]
 8019f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8019f9e:	d015      	beq.n	8019fcc <_vfiprintf_r+0x13c>
 8019fa0:	9a07      	ldr	r2, [sp, #28]
 8019fa2:	4654      	mov	r4, sl
 8019fa4:	2000      	movs	r0, #0
 8019fa6:	f04f 0c0a 	mov.w	ip, #10
 8019faa:	4621      	mov	r1, r4
 8019fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019fb0:	3b30      	subs	r3, #48	; 0x30
 8019fb2:	2b09      	cmp	r3, #9
 8019fb4:	d94e      	bls.n	801a054 <_vfiprintf_r+0x1c4>
 8019fb6:	b1b0      	cbz	r0, 8019fe6 <_vfiprintf_r+0x156>
 8019fb8:	9207      	str	r2, [sp, #28]
 8019fba:	e014      	b.n	8019fe6 <_vfiprintf_r+0x156>
 8019fbc:	eba0 0308 	sub.w	r3, r0, r8
 8019fc0:	fa09 f303 	lsl.w	r3, r9, r3
 8019fc4:	4313      	orrs	r3, r2
 8019fc6:	9304      	str	r3, [sp, #16]
 8019fc8:	46a2      	mov	sl, r4
 8019fca:	e7d2      	b.n	8019f72 <_vfiprintf_r+0xe2>
 8019fcc:	9b03      	ldr	r3, [sp, #12]
 8019fce:	1d19      	adds	r1, r3, #4
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	9103      	str	r1, [sp, #12]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	bfbb      	ittet	lt
 8019fd8:	425b      	neglt	r3, r3
 8019fda:	f042 0202 	orrlt.w	r2, r2, #2
 8019fde:	9307      	strge	r3, [sp, #28]
 8019fe0:	9307      	strlt	r3, [sp, #28]
 8019fe2:	bfb8      	it	lt
 8019fe4:	9204      	strlt	r2, [sp, #16]
 8019fe6:	7823      	ldrb	r3, [r4, #0]
 8019fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8019fea:	d10c      	bne.n	801a006 <_vfiprintf_r+0x176>
 8019fec:	7863      	ldrb	r3, [r4, #1]
 8019fee:	2b2a      	cmp	r3, #42	; 0x2a
 8019ff0:	d135      	bne.n	801a05e <_vfiprintf_r+0x1ce>
 8019ff2:	9b03      	ldr	r3, [sp, #12]
 8019ff4:	1d1a      	adds	r2, r3, #4
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	9203      	str	r2, [sp, #12]
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	bfb8      	it	lt
 8019ffe:	f04f 33ff 	movlt.w	r3, #4294967295
 801a002:	3402      	adds	r4, #2
 801a004:	9305      	str	r3, [sp, #20]
 801a006:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a0ec <_vfiprintf_r+0x25c>
 801a00a:	7821      	ldrb	r1, [r4, #0]
 801a00c:	2203      	movs	r2, #3
 801a00e:	4650      	mov	r0, sl
 801a010:	f7e6 f8fe 	bl	8000210 <memchr>
 801a014:	b140      	cbz	r0, 801a028 <_vfiprintf_r+0x198>
 801a016:	2340      	movs	r3, #64	; 0x40
 801a018:	eba0 000a 	sub.w	r0, r0, sl
 801a01c:	fa03 f000 	lsl.w	r0, r3, r0
 801a020:	9b04      	ldr	r3, [sp, #16]
 801a022:	4303      	orrs	r3, r0
 801a024:	3401      	adds	r4, #1
 801a026:	9304      	str	r3, [sp, #16]
 801a028:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a02c:	482c      	ldr	r0, [pc, #176]	; (801a0e0 <_vfiprintf_r+0x250>)
 801a02e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a032:	2206      	movs	r2, #6
 801a034:	f7e6 f8ec 	bl	8000210 <memchr>
 801a038:	2800      	cmp	r0, #0
 801a03a:	d03f      	beq.n	801a0bc <_vfiprintf_r+0x22c>
 801a03c:	4b29      	ldr	r3, [pc, #164]	; (801a0e4 <_vfiprintf_r+0x254>)
 801a03e:	bb1b      	cbnz	r3, 801a088 <_vfiprintf_r+0x1f8>
 801a040:	9b03      	ldr	r3, [sp, #12]
 801a042:	3307      	adds	r3, #7
 801a044:	f023 0307 	bic.w	r3, r3, #7
 801a048:	3308      	adds	r3, #8
 801a04a:	9303      	str	r3, [sp, #12]
 801a04c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a04e:	443b      	add	r3, r7
 801a050:	9309      	str	r3, [sp, #36]	; 0x24
 801a052:	e767      	b.n	8019f24 <_vfiprintf_r+0x94>
 801a054:	fb0c 3202 	mla	r2, ip, r2, r3
 801a058:	460c      	mov	r4, r1
 801a05a:	2001      	movs	r0, #1
 801a05c:	e7a5      	b.n	8019faa <_vfiprintf_r+0x11a>
 801a05e:	2300      	movs	r3, #0
 801a060:	3401      	adds	r4, #1
 801a062:	9305      	str	r3, [sp, #20]
 801a064:	4619      	mov	r1, r3
 801a066:	f04f 0c0a 	mov.w	ip, #10
 801a06a:	4620      	mov	r0, r4
 801a06c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a070:	3a30      	subs	r2, #48	; 0x30
 801a072:	2a09      	cmp	r2, #9
 801a074:	d903      	bls.n	801a07e <_vfiprintf_r+0x1ee>
 801a076:	2b00      	cmp	r3, #0
 801a078:	d0c5      	beq.n	801a006 <_vfiprintf_r+0x176>
 801a07a:	9105      	str	r1, [sp, #20]
 801a07c:	e7c3      	b.n	801a006 <_vfiprintf_r+0x176>
 801a07e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a082:	4604      	mov	r4, r0
 801a084:	2301      	movs	r3, #1
 801a086:	e7f0      	b.n	801a06a <_vfiprintf_r+0x1da>
 801a088:	ab03      	add	r3, sp, #12
 801a08a:	9300      	str	r3, [sp, #0]
 801a08c:	462a      	mov	r2, r5
 801a08e:	4b16      	ldr	r3, [pc, #88]	; (801a0e8 <_vfiprintf_r+0x258>)
 801a090:	a904      	add	r1, sp, #16
 801a092:	4630      	mov	r0, r6
 801a094:	f3af 8000 	nop.w
 801a098:	4607      	mov	r7, r0
 801a09a:	1c78      	adds	r0, r7, #1
 801a09c:	d1d6      	bne.n	801a04c <_vfiprintf_r+0x1bc>
 801a09e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a0a0:	07d9      	lsls	r1, r3, #31
 801a0a2:	d405      	bmi.n	801a0b0 <_vfiprintf_r+0x220>
 801a0a4:	89ab      	ldrh	r3, [r5, #12]
 801a0a6:	059a      	lsls	r2, r3, #22
 801a0a8:	d402      	bmi.n	801a0b0 <_vfiprintf_r+0x220>
 801a0aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a0ac:	f000 fd04 	bl	801aab8 <__retarget_lock_release_recursive>
 801a0b0:	89ab      	ldrh	r3, [r5, #12]
 801a0b2:	065b      	lsls	r3, r3, #25
 801a0b4:	f53f af12 	bmi.w	8019edc <_vfiprintf_r+0x4c>
 801a0b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a0ba:	e711      	b.n	8019ee0 <_vfiprintf_r+0x50>
 801a0bc:	ab03      	add	r3, sp, #12
 801a0be:	9300      	str	r3, [sp, #0]
 801a0c0:	462a      	mov	r2, r5
 801a0c2:	4b09      	ldr	r3, [pc, #36]	; (801a0e8 <_vfiprintf_r+0x258>)
 801a0c4:	a904      	add	r1, sp, #16
 801a0c6:	4630      	mov	r0, r6
 801a0c8:	f000 f880 	bl	801a1cc <_printf_i>
 801a0cc:	e7e4      	b.n	801a098 <_vfiprintf_r+0x208>
 801a0ce:	bf00      	nop
 801a0d0:	0801e230 	.word	0x0801e230
 801a0d4:	0801e250 	.word	0x0801e250
 801a0d8:	0801e210 	.word	0x0801e210
 801a0dc:	0801e1d8 	.word	0x0801e1d8
 801a0e0:	0801e1e2 	.word	0x0801e1e2
 801a0e4:	00000000 	.word	0x00000000
 801a0e8:	08019e6b 	.word	0x08019e6b
 801a0ec:	0801e1de 	.word	0x0801e1de

0801a0f0 <_printf_common>:
 801a0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0f4:	4616      	mov	r6, r2
 801a0f6:	4699      	mov	r9, r3
 801a0f8:	688a      	ldr	r2, [r1, #8]
 801a0fa:	690b      	ldr	r3, [r1, #16]
 801a0fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a100:	4293      	cmp	r3, r2
 801a102:	bfb8      	it	lt
 801a104:	4613      	movlt	r3, r2
 801a106:	6033      	str	r3, [r6, #0]
 801a108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a10c:	4607      	mov	r7, r0
 801a10e:	460c      	mov	r4, r1
 801a110:	b10a      	cbz	r2, 801a116 <_printf_common+0x26>
 801a112:	3301      	adds	r3, #1
 801a114:	6033      	str	r3, [r6, #0]
 801a116:	6823      	ldr	r3, [r4, #0]
 801a118:	0699      	lsls	r1, r3, #26
 801a11a:	bf42      	ittt	mi
 801a11c:	6833      	ldrmi	r3, [r6, #0]
 801a11e:	3302      	addmi	r3, #2
 801a120:	6033      	strmi	r3, [r6, #0]
 801a122:	6825      	ldr	r5, [r4, #0]
 801a124:	f015 0506 	ands.w	r5, r5, #6
 801a128:	d106      	bne.n	801a138 <_printf_common+0x48>
 801a12a:	f104 0a19 	add.w	sl, r4, #25
 801a12e:	68e3      	ldr	r3, [r4, #12]
 801a130:	6832      	ldr	r2, [r6, #0]
 801a132:	1a9b      	subs	r3, r3, r2
 801a134:	42ab      	cmp	r3, r5
 801a136:	dc26      	bgt.n	801a186 <_printf_common+0x96>
 801a138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a13c:	1e13      	subs	r3, r2, #0
 801a13e:	6822      	ldr	r2, [r4, #0]
 801a140:	bf18      	it	ne
 801a142:	2301      	movne	r3, #1
 801a144:	0692      	lsls	r2, r2, #26
 801a146:	d42b      	bmi.n	801a1a0 <_printf_common+0xb0>
 801a148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a14c:	4649      	mov	r1, r9
 801a14e:	4638      	mov	r0, r7
 801a150:	47c0      	blx	r8
 801a152:	3001      	adds	r0, #1
 801a154:	d01e      	beq.n	801a194 <_printf_common+0xa4>
 801a156:	6823      	ldr	r3, [r4, #0]
 801a158:	68e5      	ldr	r5, [r4, #12]
 801a15a:	6832      	ldr	r2, [r6, #0]
 801a15c:	f003 0306 	and.w	r3, r3, #6
 801a160:	2b04      	cmp	r3, #4
 801a162:	bf08      	it	eq
 801a164:	1aad      	subeq	r5, r5, r2
 801a166:	68a3      	ldr	r3, [r4, #8]
 801a168:	6922      	ldr	r2, [r4, #16]
 801a16a:	bf0c      	ite	eq
 801a16c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a170:	2500      	movne	r5, #0
 801a172:	4293      	cmp	r3, r2
 801a174:	bfc4      	itt	gt
 801a176:	1a9b      	subgt	r3, r3, r2
 801a178:	18ed      	addgt	r5, r5, r3
 801a17a:	2600      	movs	r6, #0
 801a17c:	341a      	adds	r4, #26
 801a17e:	42b5      	cmp	r5, r6
 801a180:	d11a      	bne.n	801a1b8 <_printf_common+0xc8>
 801a182:	2000      	movs	r0, #0
 801a184:	e008      	b.n	801a198 <_printf_common+0xa8>
 801a186:	2301      	movs	r3, #1
 801a188:	4652      	mov	r2, sl
 801a18a:	4649      	mov	r1, r9
 801a18c:	4638      	mov	r0, r7
 801a18e:	47c0      	blx	r8
 801a190:	3001      	adds	r0, #1
 801a192:	d103      	bne.n	801a19c <_printf_common+0xac>
 801a194:	f04f 30ff 	mov.w	r0, #4294967295
 801a198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a19c:	3501      	adds	r5, #1
 801a19e:	e7c6      	b.n	801a12e <_printf_common+0x3e>
 801a1a0:	18e1      	adds	r1, r4, r3
 801a1a2:	1c5a      	adds	r2, r3, #1
 801a1a4:	2030      	movs	r0, #48	; 0x30
 801a1a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a1aa:	4422      	add	r2, r4
 801a1ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a1b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a1b4:	3302      	adds	r3, #2
 801a1b6:	e7c7      	b.n	801a148 <_printf_common+0x58>
 801a1b8:	2301      	movs	r3, #1
 801a1ba:	4622      	mov	r2, r4
 801a1bc:	4649      	mov	r1, r9
 801a1be:	4638      	mov	r0, r7
 801a1c0:	47c0      	blx	r8
 801a1c2:	3001      	adds	r0, #1
 801a1c4:	d0e6      	beq.n	801a194 <_printf_common+0xa4>
 801a1c6:	3601      	adds	r6, #1
 801a1c8:	e7d9      	b.n	801a17e <_printf_common+0x8e>
	...

0801a1cc <_printf_i>:
 801a1cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a1d0:	7e0f      	ldrb	r7, [r1, #24]
 801a1d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a1d4:	2f78      	cmp	r7, #120	; 0x78
 801a1d6:	4691      	mov	r9, r2
 801a1d8:	4680      	mov	r8, r0
 801a1da:	460c      	mov	r4, r1
 801a1dc:	469a      	mov	sl, r3
 801a1de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a1e2:	d807      	bhi.n	801a1f4 <_printf_i+0x28>
 801a1e4:	2f62      	cmp	r7, #98	; 0x62
 801a1e6:	d80a      	bhi.n	801a1fe <_printf_i+0x32>
 801a1e8:	2f00      	cmp	r7, #0
 801a1ea:	f000 80d8 	beq.w	801a39e <_printf_i+0x1d2>
 801a1ee:	2f58      	cmp	r7, #88	; 0x58
 801a1f0:	f000 80a3 	beq.w	801a33a <_printf_i+0x16e>
 801a1f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a1f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a1fc:	e03a      	b.n	801a274 <_printf_i+0xa8>
 801a1fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a202:	2b15      	cmp	r3, #21
 801a204:	d8f6      	bhi.n	801a1f4 <_printf_i+0x28>
 801a206:	a101      	add	r1, pc, #4	; (adr r1, 801a20c <_printf_i+0x40>)
 801a208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a20c:	0801a265 	.word	0x0801a265
 801a210:	0801a279 	.word	0x0801a279
 801a214:	0801a1f5 	.word	0x0801a1f5
 801a218:	0801a1f5 	.word	0x0801a1f5
 801a21c:	0801a1f5 	.word	0x0801a1f5
 801a220:	0801a1f5 	.word	0x0801a1f5
 801a224:	0801a279 	.word	0x0801a279
 801a228:	0801a1f5 	.word	0x0801a1f5
 801a22c:	0801a1f5 	.word	0x0801a1f5
 801a230:	0801a1f5 	.word	0x0801a1f5
 801a234:	0801a1f5 	.word	0x0801a1f5
 801a238:	0801a385 	.word	0x0801a385
 801a23c:	0801a2a9 	.word	0x0801a2a9
 801a240:	0801a367 	.word	0x0801a367
 801a244:	0801a1f5 	.word	0x0801a1f5
 801a248:	0801a1f5 	.word	0x0801a1f5
 801a24c:	0801a3a7 	.word	0x0801a3a7
 801a250:	0801a1f5 	.word	0x0801a1f5
 801a254:	0801a2a9 	.word	0x0801a2a9
 801a258:	0801a1f5 	.word	0x0801a1f5
 801a25c:	0801a1f5 	.word	0x0801a1f5
 801a260:	0801a36f 	.word	0x0801a36f
 801a264:	682b      	ldr	r3, [r5, #0]
 801a266:	1d1a      	adds	r2, r3, #4
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	602a      	str	r2, [r5, #0]
 801a26c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a274:	2301      	movs	r3, #1
 801a276:	e0a3      	b.n	801a3c0 <_printf_i+0x1f4>
 801a278:	6820      	ldr	r0, [r4, #0]
 801a27a:	6829      	ldr	r1, [r5, #0]
 801a27c:	0606      	lsls	r6, r0, #24
 801a27e:	f101 0304 	add.w	r3, r1, #4
 801a282:	d50a      	bpl.n	801a29a <_printf_i+0xce>
 801a284:	680e      	ldr	r6, [r1, #0]
 801a286:	602b      	str	r3, [r5, #0]
 801a288:	2e00      	cmp	r6, #0
 801a28a:	da03      	bge.n	801a294 <_printf_i+0xc8>
 801a28c:	232d      	movs	r3, #45	; 0x2d
 801a28e:	4276      	negs	r6, r6
 801a290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a294:	485e      	ldr	r0, [pc, #376]	; (801a410 <_printf_i+0x244>)
 801a296:	230a      	movs	r3, #10
 801a298:	e019      	b.n	801a2ce <_printf_i+0x102>
 801a29a:	680e      	ldr	r6, [r1, #0]
 801a29c:	602b      	str	r3, [r5, #0]
 801a29e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a2a2:	bf18      	it	ne
 801a2a4:	b236      	sxthne	r6, r6
 801a2a6:	e7ef      	b.n	801a288 <_printf_i+0xbc>
 801a2a8:	682b      	ldr	r3, [r5, #0]
 801a2aa:	6820      	ldr	r0, [r4, #0]
 801a2ac:	1d19      	adds	r1, r3, #4
 801a2ae:	6029      	str	r1, [r5, #0]
 801a2b0:	0601      	lsls	r1, r0, #24
 801a2b2:	d501      	bpl.n	801a2b8 <_printf_i+0xec>
 801a2b4:	681e      	ldr	r6, [r3, #0]
 801a2b6:	e002      	b.n	801a2be <_printf_i+0xf2>
 801a2b8:	0646      	lsls	r6, r0, #25
 801a2ba:	d5fb      	bpl.n	801a2b4 <_printf_i+0xe8>
 801a2bc:	881e      	ldrh	r6, [r3, #0]
 801a2be:	4854      	ldr	r0, [pc, #336]	; (801a410 <_printf_i+0x244>)
 801a2c0:	2f6f      	cmp	r7, #111	; 0x6f
 801a2c2:	bf0c      	ite	eq
 801a2c4:	2308      	moveq	r3, #8
 801a2c6:	230a      	movne	r3, #10
 801a2c8:	2100      	movs	r1, #0
 801a2ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a2ce:	6865      	ldr	r5, [r4, #4]
 801a2d0:	60a5      	str	r5, [r4, #8]
 801a2d2:	2d00      	cmp	r5, #0
 801a2d4:	bfa2      	ittt	ge
 801a2d6:	6821      	ldrge	r1, [r4, #0]
 801a2d8:	f021 0104 	bicge.w	r1, r1, #4
 801a2dc:	6021      	strge	r1, [r4, #0]
 801a2de:	b90e      	cbnz	r6, 801a2e4 <_printf_i+0x118>
 801a2e0:	2d00      	cmp	r5, #0
 801a2e2:	d04d      	beq.n	801a380 <_printf_i+0x1b4>
 801a2e4:	4615      	mov	r5, r2
 801a2e6:	fbb6 f1f3 	udiv	r1, r6, r3
 801a2ea:	fb03 6711 	mls	r7, r3, r1, r6
 801a2ee:	5dc7      	ldrb	r7, [r0, r7]
 801a2f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a2f4:	4637      	mov	r7, r6
 801a2f6:	42bb      	cmp	r3, r7
 801a2f8:	460e      	mov	r6, r1
 801a2fa:	d9f4      	bls.n	801a2e6 <_printf_i+0x11a>
 801a2fc:	2b08      	cmp	r3, #8
 801a2fe:	d10b      	bne.n	801a318 <_printf_i+0x14c>
 801a300:	6823      	ldr	r3, [r4, #0]
 801a302:	07de      	lsls	r6, r3, #31
 801a304:	d508      	bpl.n	801a318 <_printf_i+0x14c>
 801a306:	6923      	ldr	r3, [r4, #16]
 801a308:	6861      	ldr	r1, [r4, #4]
 801a30a:	4299      	cmp	r1, r3
 801a30c:	bfde      	ittt	le
 801a30e:	2330      	movle	r3, #48	; 0x30
 801a310:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a314:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a318:	1b52      	subs	r2, r2, r5
 801a31a:	6122      	str	r2, [r4, #16]
 801a31c:	f8cd a000 	str.w	sl, [sp]
 801a320:	464b      	mov	r3, r9
 801a322:	aa03      	add	r2, sp, #12
 801a324:	4621      	mov	r1, r4
 801a326:	4640      	mov	r0, r8
 801a328:	f7ff fee2 	bl	801a0f0 <_printf_common>
 801a32c:	3001      	adds	r0, #1
 801a32e:	d14c      	bne.n	801a3ca <_printf_i+0x1fe>
 801a330:	f04f 30ff 	mov.w	r0, #4294967295
 801a334:	b004      	add	sp, #16
 801a336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a33a:	4835      	ldr	r0, [pc, #212]	; (801a410 <_printf_i+0x244>)
 801a33c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a340:	6829      	ldr	r1, [r5, #0]
 801a342:	6823      	ldr	r3, [r4, #0]
 801a344:	f851 6b04 	ldr.w	r6, [r1], #4
 801a348:	6029      	str	r1, [r5, #0]
 801a34a:	061d      	lsls	r5, r3, #24
 801a34c:	d514      	bpl.n	801a378 <_printf_i+0x1ac>
 801a34e:	07df      	lsls	r7, r3, #31
 801a350:	bf44      	itt	mi
 801a352:	f043 0320 	orrmi.w	r3, r3, #32
 801a356:	6023      	strmi	r3, [r4, #0]
 801a358:	b91e      	cbnz	r6, 801a362 <_printf_i+0x196>
 801a35a:	6823      	ldr	r3, [r4, #0]
 801a35c:	f023 0320 	bic.w	r3, r3, #32
 801a360:	6023      	str	r3, [r4, #0]
 801a362:	2310      	movs	r3, #16
 801a364:	e7b0      	b.n	801a2c8 <_printf_i+0xfc>
 801a366:	6823      	ldr	r3, [r4, #0]
 801a368:	f043 0320 	orr.w	r3, r3, #32
 801a36c:	6023      	str	r3, [r4, #0]
 801a36e:	2378      	movs	r3, #120	; 0x78
 801a370:	4828      	ldr	r0, [pc, #160]	; (801a414 <_printf_i+0x248>)
 801a372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a376:	e7e3      	b.n	801a340 <_printf_i+0x174>
 801a378:	0659      	lsls	r1, r3, #25
 801a37a:	bf48      	it	mi
 801a37c:	b2b6      	uxthmi	r6, r6
 801a37e:	e7e6      	b.n	801a34e <_printf_i+0x182>
 801a380:	4615      	mov	r5, r2
 801a382:	e7bb      	b.n	801a2fc <_printf_i+0x130>
 801a384:	682b      	ldr	r3, [r5, #0]
 801a386:	6826      	ldr	r6, [r4, #0]
 801a388:	6961      	ldr	r1, [r4, #20]
 801a38a:	1d18      	adds	r0, r3, #4
 801a38c:	6028      	str	r0, [r5, #0]
 801a38e:	0635      	lsls	r5, r6, #24
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	d501      	bpl.n	801a398 <_printf_i+0x1cc>
 801a394:	6019      	str	r1, [r3, #0]
 801a396:	e002      	b.n	801a39e <_printf_i+0x1d2>
 801a398:	0670      	lsls	r0, r6, #25
 801a39a:	d5fb      	bpl.n	801a394 <_printf_i+0x1c8>
 801a39c:	8019      	strh	r1, [r3, #0]
 801a39e:	2300      	movs	r3, #0
 801a3a0:	6123      	str	r3, [r4, #16]
 801a3a2:	4615      	mov	r5, r2
 801a3a4:	e7ba      	b.n	801a31c <_printf_i+0x150>
 801a3a6:	682b      	ldr	r3, [r5, #0]
 801a3a8:	1d1a      	adds	r2, r3, #4
 801a3aa:	602a      	str	r2, [r5, #0]
 801a3ac:	681d      	ldr	r5, [r3, #0]
 801a3ae:	6862      	ldr	r2, [r4, #4]
 801a3b0:	2100      	movs	r1, #0
 801a3b2:	4628      	mov	r0, r5
 801a3b4:	f7e5 ff2c 	bl	8000210 <memchr>
 801a3b8:	b108      	cbz	r0, 801a3be <_printf_i+0x1f2>
 801a3ba:	1b40      	subs	r0, r0, r5
 801a3bc:	6060      	str	r0, [r4, #4]
 801a3be:	6863      	ldr	r3, [r4, #4]
 801a3c0:	6123      	str	r3, [r4, #16]
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a3c8:	e7a8      	b.n	801a31c <_printf_i+0x150>
 801a3ca:	6923      	ldr	r3, [r4, #16]
 801a3cc:	462a      	mov	r2, r5
 801a3ce:	4649      	mov	r1, r9
 801a3d0:	4640      	mov	r0, r8
 801a3d2:	47d0      	blx	sl
 801a3d4:	3001      	adds	r0, #1
 801a3d6:	d0ab      	beq.n	801a330 <_printf_i+0x164>
 801a3d8:	6823      	ldr	r3, [r4, #0]
 801a3da:	079b      	lsls	r3, r3, #30
 801a3dc:	d413      	bmi.n	801a406 <_printf_i+0x23a>
 801a3de:	68e0      	ldr	r0, [r4, #12]
 801a3e0:	9b03      	ldr	r3, [sp, #12]
 801a3e2:	4298      	cmp	r0, r3
 801a3e4:	bfb8      	it	lt
 801a3e6:	4618      	movlt	r0, r3
 801a3e8:	e7a4      	b.n	801a334 <_printf_i+0x168>
 801a3ea:	2301      	movs	r3, #1
 801a3ec:	4632      	mov	r2, r6
 801a3ee:	4649      	mov	r1, r9
 801a3f0:	4640      	mov	r0, r8
 801a3f2:	47d0      	blx	sl
 801a3f4:	3001      	adds	r0, #1
 801a3f6:	d09b      	beq.n	801a330 <_printf_i+0x164>
 801a3f8:	3501      	adds	r5, #1
 801a3fa:	68e3      	ldr	r3, [r4, #12]
 801a3fc:	9903      	ldr	r1, [sp, #12]
 801a3fe:	1a5b      	subs	r3, r3, r1
 801a400:	42ab      	cmp	r3, r5
 801a402:	dcf2      	bgt.n	801a3ea <_printf_i+0x21e>
 801a404:	e7eb      	b.n	801a3de <_printf_i+0x212>
 801a406:	2500      	movs	r5, #0
 801a408:	f104 0619 	add.w	r6, r4, #25
 801a40c:	e7f5      	b.n	801a3fa <_printf_i+0x22e>
 801a40e:	bf00      	nop
 801a410:	0801e1e9 	.word	0x0801e1e9
 801a414:	0801e1fa 	.word	0x0801e1fa

0801a418 <_sbrk_r>:
 801a418:	b538      	push	{r3, r4, r5, lr}
 801a41a:	4d06      	ldr	r5, [pc, #24]	; (801a434 <_sbrk_r+0x1c>)
 801a41c:	2300      	movs	r3, #0
 801a41e:	4604      	mov	r4, r0
 801a420:	4608      	mov	r0, r1
 801a422:	602b      	str	r3, [r5, #0]
 801a424:	f7e7 ff4a 	bl	80022bc <_sbrk>
 801a428:	1c43      	adds	r3, r0, #1
 801a42a:	d102      	bne.n	801a432 <_sbrk_r+0x1a>
 801a42c:	682b      	ldr	r3, [r5, #0]
 801a42e:	b103      	cbz	r3, 801a432 <_sbrk_r+0x1a>
 801a430:	6023      	str	r3, [r4, #0]
 801a432:	bd38      	pop	{r3, r4, r5, pc}
 801a434:	20001e9c 	.word	0x20001e9c

0801a438 <_raise_r>:
 801a438:	291f      	cmp	r1, #31
 801a43a:	b538      	push	{r3, r4, r5, lr}
 801a43c:	4604      	mov	r4, r0
 801a43e:	460d      	mov	r5, r1
 801a440:	d904      	bls.n	801a44c <_raise_r+0x14>
 801a442:	2316      	movs	r3, #22
 801a444:	6003      	str	r3, [r0, #0]
 801a446:	f04f 30ff 	mov.w	r0, #4294967295
 801a44a:	bd38      	pop	{r3, r4, r5, pc}
 801a44c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a44e:	b112      	cbz	r2, 801a456 <_raise_r+0x1e>
 801a450:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a454:	b94b      	cbnz	r3, 801a46a <_raise_r+0x32>
 801a456:	4620      	mov	r0, r4
 801a458:	f000 f830 	bl	801a4bc <_getpid_r>
 801a45c:	462a      	mov	r2, r5
 801a45e:	4601      	mov	r1, r0
 801a460:	4620      	mov	r0, r4
 801a462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a466:	f000 b817 	b.w	801a498 <_kill_r>
 801a46a:	2b01      	cmp	r3, #1
 801a46c:	d00a      	beq.n	801a484 <_raise_r+0x4c>
 801a46e:	1c59      	adds	r1, r3, #1
 801a470:	d103      	bne.n	801a47a <_raise_r+0x42>
 801a472:	2316      	movs	r3, #22
 801a474:	6003      	str	r3, [r0, #0]
 801a476:	2001      	movs	r0, #1
 801a478:	e7e7      	b.n	801a44a <_raise_r+0x12>
 801a47a:	2400      	movs	r4, #0
 801a47c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a480:	4628      	mov	r0, r5
 801a482:	4798      	blx	r3
 801a484:	2000      	movs	r0, #0
 801a486:	e7e0      	b.n	801a44a <_raise_r+0x12>

0801a488 <raise>:
 801a488:	4b02      	ldr	r3, [pc, #8]	; (801a494 <raise+0xc>)
 801a48a:	4601      	mov	r1, r0
 801a48c:	6818      	ldr	r0, [r3, #0]
 801a48e:	f7ff bfd3 	b.w	801a438 <_raise_r>
 801a492:	bf00      	nop
 801a494:	20000064 	.word	0x20000064

0801a498 <_kill_r>:
 801a498:	b538      	push	{r3, r4, r5, lr}
 801a49a:	4d07      	ldr	r5, [pc, #28]	; (801a4b8 <_kill_r+0x20>)
 801a49c:	2300      	movs	r3, #0
 801a49e:	4604      	mov	r4, r0
 801a4a0:	4608      	mov	r0, r1
 801a4a2:	4611      	mov	r1, r2
 801a4a4:	602b      	str	r3, [r5, #0]
 801a4a6:	f7e7 fe81 	bl	80021ac <_kill>
 801a4aa:	1c43      	adds	r3, r0, #1
 801a4ac:	d102      	bne.n	801a4b4 <_kill_r+0x1c>
 801a4ae:	682b      	ldr	r3, [r5, #0]
 801a4b0:	b103      	cbz	r3, 801a4b4 <_kill_r+0x1c>
 801a4b2:	6023      	str	r3, [r4, #0]
 801a4b4:	bd38      	pop	{r3, r4, r5, pc}
 801a4b6:	bf00      	nop
 801a4b8:	20001e9c 	.word	0x20001e9c

0801a4bc <_getpid_r>:
 801a4bc:	f7e7 be6e 	b.w	800219c <_getpid>

0801a4c0 <_vsiprintf_r>:
 801a4c0:	b500      	push	{lr}
 801a4c2:	b09b      	sub	sp, #108	; 0x6c
 801a4c4:	9100      	str	r1, [sp, #0]
 801a4c6:	9104      	str	r1, [sp, #16]
 801a4c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a4cc:	9105      	str	r1, [sp, #20]
 801a4ce:	9102      	str	r1, [sp, #8]
 801a4d0:	4905      	ldr	r1, [pc, #20]	; (801a4e8 <_vsiprintf_r+0x28>)
 801a4d2:	9103      	str	r1, [sp, #12]
 801a4d4:	4669      	mov	r1, sp
 801a4d6:	f000 fbeb 	bl	801acb0 <_svfiprintf_r>
 801a4da:	9b00      	ldr	r3, [sp, #0]
 801a4dc:	2200      	movs	r2, #0
 801a4de:	701a      	strb	r2, [r3, #0]
 801a4e0:	b01b      	add	sp, #108	; 0x6c
 801a4e2:	f85d fb04 	ldr.w	pc, [sp], #4
 801a4e6:	bf00      	nop
 801a4e8:	ffff0208 	.word	0xffff0208

0801a4ec <vsiprintf>:
 801a4ec:	4613      	mov	r3, r2
 801a4ee:	460a      	mov	r2, r1
 801a4f0:	4601      	mov	r1, r0
 801a4f2:	4802      	ldr	r0, [pc, #8]	; (801a4fc <vsiprintf+0x10>)
 801a4f4:	6800      	ldr	r0, [r0, #0]
 801a4f6:	f7ff bfe3 	b.w	801a4c0 <_vsiprintf_r>
 801a4fa:	bf00      	nop
 801a4fc:	20000064 	.word	0x20000064

0801a500 <__swbuf_r>:
 801a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a502:	460e      	mov	r6, r1
 801a504:	4614      	mov	r4, r2
 801a506:	4605      	mov	r5, r0
 801a508:	b118      	cbz	r0, 801a512 <__swbuf_r+0x12>
 801a50a:	6983      	ldr	r3, [r0, #24]
 801a50c:	b90b      	cbnz	r3, 801a512 <__swbuf_r+0x12>
 801a50e:	f000 fa33 	bl	801a978 <__sinit>
 801a512:	4b21      	ldr	r3, [pc, #132]	; (801a598 <__swbuf_r+0x98>)
 801a514:	429c      	cmp	r4, r3
 801a516:	d12b      	bne.n	801a570 <__swbuf_r+0x70>
 801a518:	686c      	ldr	r4, [r5, #4]
 801a51a:	69a3      	ldr	r3, [r4, #24]
 801a51c:	60a3      	str	r3, [r4, #8]
 801a51e:	89a3      	ldrh	r3, [r4, #12]
 801a520:	071a      	lsls	r2, r3, #28
 801a522:	d52f      	bpl.n	801a584 <__swbuf_r+0x84>
 801a524:	6923      	ldr	r3, [r4, #16]
 801a526:	b36b      	cbz	r3, 801a584 <__swbuf_r+0x84>
 801a528:	6923      	ldr	r3, [r4, #16]
 801a52a:	6820      	ldr	r0, [r4, #0]
 801a52c:	1ac0      	subs	r0, r0, r3
 801a52e:	6963      	ldr	r3, [r4, #20]
 801a530:	b2f6      	uxtb	r6, r6
 801a532:	4283      	cmp	r3, r0
 801a534:	4637      	mov	r7, r6
 801a536:	dc04      	bgt.n	801a542 <__swbuf_r+0x42>
 801a538:	4621      	mov	r1, r4
 801a53a:	4628      	mov	r0, r5
 801a53c:	f000 f988 	bl	801a850 <_fflush_r>
 801a540:	bb30      	cbnz	r0, 801a590 <__swbuf_r+0x90>
 801a542:	68a3      	ldr	r3, [r4, #8]
 801a544:	3b01      	subs	r3, #1
 801a546:	60a3      	str	r3, [r4, #8]
 801a548:	6823      	ldr	r3, [r4, #0]
 801a54a:	1c5a      	adds	r2, r3, #1
 801a54c:	6022      	str	r2, [r4, #0]
 801a54e:	701e      	strb	r6, [r3, #0]
 801a550:	6963      	ldr	r3, [r4, #20]
 801a552:	3001      	adds	r0, #1
 801a554:	4283      	cmp	r3, r0
 801a556:	d004      	beq.n	801a562 <__swbuf_r+0x62>
 801a558:	89a3      	ldrh	r3, [r4, #12]
 801a55a:	07db      	lsls	r3, r3, #31
 801a55c:	d506      	bpl.n	801a56c <__swbuf_r+0x6c>
 801a55e:	2e0a      	cmp	r6, #10
 801a560:	d104      	bne.n	801a56c <__swbuf_r+0x6c>
 801a562:	4621      	mov	r1, r4
 801a564:	4628      	mov	r0, r5
 801a566:	f000 f973 	bl	801a850 <_fflush_r>
 801a56a:	b988      	cbnz	r0, 801a590 <__swbuf_r+0x90>
 801a56c:	4638      	mov	r0, r7
 801a56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a570:	4b0a      	ldr	r3, [pc, #40]	; (801a59c <__swbuf_r+0x9c>)
 801a572:	429c      	cmp	r4, r3
 801a574:	d101      	bne.n	801a57a <__swbuf_r+0x7a>
 801a576:	68ac      	ldr	r4, [r5, #8]
 801a578:	e7cf      	b.n	801a51a <__swbuf_r+0x1a>
 801a57a:	4b09      	ldr	r3, [pc, #36]	; (801a5a0 <__swbuf_r+0xa0>)
 801a57c:	429c      	cmp	r4, r3
 801a57e:	bf08      	it	eq
 801a580:	68ec      	ldreq	r4, [r5, #12]
 801a582:	e7ca      	b.n	801a51a <__swbuf_r+0x1a>
 801a584:	4621      	mov	r1, r4
 801a586:	4628      	mov	r0, r5
 801a588:	f000 f80c 	bl	801a5a4 <__swsetup_r>
 801a58c:	2800      	cmp	r0, #0
 801a58e:	d0cb      	beq.n	801a528 <__swbuf_r+0x28>
 801a590:	f04f 37ff 	mov.w	r7, #4294967295
 801a594:	e7ea      	b.n	801a56c <__swbuf_r+0x6c>
 801a596:	bf00      	nop
 801a598:	0801e230 	.word	0x0801e230
 801a59c:	0801e250 	.word	0x0801e250
 801a5a0:	0801e210 	.word	0x0801e210

0801a5a4 <__swsetup_r>:
 801a5a4:	4b32      	ldr	r3, [pc, #200]	; (801a670 <__swsetup_r+0xcc>)
 801a5a6:	b570      	push	{r4, r5, r6, lr}
 801a5a8:	681d      	ldr	r5, [r3, #0]
 801a5aa:	4606      	mov	r6, r0
 801a5ac:	460c      	mov	r4, r1
 801a5ae:	b125      	cbz	r5, 801a5ba <__swsetup_r+0x16>
 801a5b0:	69ab      	ldr	r3, [r5, #24]
 801a5b2:	b913      	cbnz	r3, 801a5ba <__swsetup_r+0x16>
 801a5b4:	4628      	mov	r0, r5
 801a5b6:	f000 f9df 	bl	801a978 <__sinit>
 801a5ba:	4b2e      	ldr	r3, [pc, #184]	; (801a674 <__swsetup_r+0xd0>)
 801a5bc:	429c      	cmp	r4, r3
 801a5be:	d10f      	bne.n	801a5e0 <__swsetup_r+0x3c>
 801a5c0:	686c      	ldr	r4, [r5, #4]
 801a5c2:	89a3      	ldrh	r3, [r4, #12]
 801a5c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a5c8:	0719      	lsls	r1, r3, #28
 801a5ca:	d42c      	bmi.n	801a626 <__swsetup_r+0x82>
 801a5cc:	06dd      	lsls	r5, r3, #27
 801a5ce:	d411      	bmi.n	801a5f4 <__swsetup_r+0x50>
 801a5d0:	2309      	movs	r3, #9
 801a5d2:	6033      	str	r3, [r6, #0]
 801a5d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a5d8:	81a3      	strh	r3, [r4, #12]
 801a5da:	f04f 30ff 	mov.w	r0, #4294967295
 801a5de:	e03e      	b.n	801a65e <__swsetup_r+0xba>
 801a5e0:	4b25      	ldr	r3, [pc, #148]	; (801a678 <__swsetup_r+0xd4>)
 801a5e2:	429c      	cmp	r4, r3
 801a5e4:	d101      	bne.n	801a5ea <__swsetup_r+0x46>
 801a5e6:	68ac      	ldr	r4, [r5, #8]
 801a5e8:	e7eb      	b.n	801a5c2 <__swsetup_r+0x1e>
 801a5ea:	4b24      	ldr	r3, [pc, #144]	; (801a67c <__swsetup_r+0xd8>)
 801a5ec:	429c      	cmp	r4, r3
 801a5ee:	bf08      	it	eq
 801a5f0:	68ec      	ldreq	r4, [r5, #12]
 801a5f2:	e7e6      	b.n	801a5c2 <__swsetup_r+0x1e>
 801a5f4:	0758      	lsls	r0, r3, #29
 801a5f6:	d512      	bpl.n	801a61e <__swsetup_r+0x7a>
 801a5f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a5fa:	b141      	cbz	r1, 801a60e <__swsetup_r+0x6a>
 801a5fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a600:	4299      	cmp	r1, r3
 801a602:	d002      	beq.n	801a60a <__swsetup_r+0x66>
 801a604:	4630      	mov	r0, r6
 801a606:	f7ff fb39 	bl	8019c7c <_free_r>
 801a60a:	2300      	movs	r3, #0
 801a60c:	6363      	str	r3, [r4, #52]	; 0x34
 801a60e:	89a3      	ldrh	r3, [r4, #12]
 801a610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a614:	81a3      	strh	r3, [r4, #12]
 801a616:	2300      	movs	r3, #0
 801a618:	6063      	str	r3, [r4, #4]
 801a61a:	6923      	ldr	r3, [r4, #16]
 801a61c:	6023      	str	r3, [r4, #0]
 801a61e:	89a3      	ldrh	r3, [r4, #12]
 801a620:	f043 0308 	orr.w	r3, r3, #8
 801a624:	81a3      	strh	r3, [r4, #12]
 801a626:	6923      	ldr	r3, [r4, #16]
 801a628:	b94b      	cbnz	r3, 801a63e <__swsetup_r+0x9a>
 801a62a:	89a3      	ldrh	r3, [r4, #12]
 801a62c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a634:	d003      	beq.n	801a63e <__swsetup_r+0x9a>
 801a636:	4621      	mov	r1, r4
 801a638:	4630      	mov	r0, r6
 801a63a:	f000 fa63 	bl	801ab04 <__smakebuf_r>
 801a63e:	89a0      	ldrh	r0, [r4, #12]
 801a640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a644:	f010 0301 	ands.w	r3, r0, #1
 801a648:	d00a      	beq.n	801a660 <__swsetup_r+0xbc>
 801a64a:	2300      	movs	r3, #0
 801a64c:	60a3      	str	r3, [r4, #8]
 801a64e:	6963      	ldr	r3, [r4, #20]
 801a650:	425b      	negs	r3, r3
 801a652:	61a3      	str	r3, [r4, #24]
 801a654:	6923      	ldr	r3, [r4, #16]
 801a656:	b943      	cbnz	r3, 801a66a <__swsetup_r+0xc6>
 801a658:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a65c:	d1ba      	bne.n	801a5d4 <__swsetup_r+0x30>
 801a65e:	bd70      	pop	{r4, r5, r6, pc}
 801a660:	0781      	lsls	r1, r0, #30
 801a662:	bf58      	it	pl
 801a664:	6963      	ldrpl	r3, [r4, #20]
 801a666:	60a3      	str	r3, [r4, #8]
 801a668:	e7f4      	b.n	801a654 <__swsetup_r+0xb0>
 801a66a:	2000      	movs	r0, #0
 801a66c:	e7f7      	b.n	801a65e <__swsetup_r+0xba>
 801a66e:	bf00      	nop
 801a670:	20000064 	.word	0x20000064
 801a674:	0801e230 	.word	0x0801e230
 801a678:	0801e250 	.word	0x0801e250
 801a67c:	0801e210 	.word	0x0801e210

0801a680 <__register_exitproc>:
 801a680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a684:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801a740 <__register_exitproc+0xc0>
 801a688:	4606      	mov	r6, r0
 801a68a:	f8d8 0000 	ldr.w	r0, [r8]
 801a68e:	461f      	mov	r7, r3
 801a690:	460d      	mov	r5, r1
 801a692:	4691      	mov	r9, r2
 801a694:	f000 fa0e 	bl	801aab4 <__retarget_lock_acquire_recursive>
 801a698:	4b25      	ldr	r3, [pc, #148]	; (801a730 <__register_exitproc+0xb0>)
 801a69a:	681c      	ldr	r4, [r3, #0]
 801a69c:	b934      	cbnz	r4, 801a6ac <__register_exitproc+0x2c>
 801a69e:	4c25      	ldr	r4, [pc, #148]	; (801a734 <__register_exitproc+0xb4>)
 801a6a0:	601c      	str	r4, [r3, #0]
 801a6a2:	4b25      	ldr	r3, [pc, #148]	; (801a738 <__register_exitproc+0xb8>)
 801a6a4:	b113      	cbz	r3, 801a6ac <__register_exitproc+0x2c>
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801a6ac:	6863      	ldr	r3, [r4, #4]
 801a6ae:	2b1f      	cmp	r3, #31
 801a6b0:	dd07      	ble.n	801a6c2 <__register_exitproc+0x42>
 801a6b2:	f8d8 0000 	ldr.w	r0, [r8]
 801a6b6:	f000 f9ff 	bl	801aab8 <__retarget_lock_release_recursive>
 801a6ba:	f04f 30ff 	mov.w	r0, #4294967295
 801a6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6c2:	b34e      	cbz	r6, 801a718 <__register_exitproc+0x98>
 801a6c4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801a6c8:	b988      	cbnz	r0, 801a6ee <__register_exitproc+0x6e>
 801a6ca:	4b1c      	ldr	r3, [pc, #112]	; (801a73c <__register_exitproc+0xbc>)
 801a6cc:	b923      	cbnz	r3, 801a6d8 <__register_exitproc+0x58>
 801a6ce:	f8d8 0000 	ldr.w	r0, [r8]
 801a6d2:	f000 f9f0 	bl	801aab6 <__retarget_lock_release>
 801a6d6:	e7f0      	b.n	801a6ba <__register_exitproc+0x3a>
 801a6d8:	f44f 7084 	mov.w	r0, #264	; 0x108
 801a6dc:	f7ff fa8e 	bl	8019bfc <malloc>
 801a6e0:	2800      	cmp	r0, #0
 801a6e2:	d0f4      	beq.n	801a6ce <__register_exitproc+0x4e>
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801a6ea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801a6ee:	6863      	ldr	r3, [r4, #4]
 801a6f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801a6f4:	2201      	movs	r2, #1
 801a6f6:	409a      	lsls	r2, r3
 801a6f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801a6fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801a700:	4313      	orrs	r3, r2
 801a702:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801a706:	2e02      	cmp	r6, #2
 801a708:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801a70c:	bf02      	ittt	eq
 801a70e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801a712:	4313      	orreq	r3, r2
 801a714:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801a718:	6863      	ldr	r3, [r4, #4]
 801a71a:	f8d8 0000 	ldr.w	r0, [r8]
 801a71e:	1c5a      	adds	r2, r3, #1
 801a720:	3302      	adds	r3, #2
 801a722:	6062      	str	r2, [r4, #4]
 801a724:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801a728:	f000 f9c6 	bl	801aab8 <__retarget_lock_release_recursive>
 801a72c:	2000      	movs	r0, #0
 801a72e:	e7c6      	b.n	801a6be <__register_exitproc+0x3e>
 801a730:	20001e94 	.word	0x20001e94
 801a734:	20001e08 	.word	0x20001e08
 801a738:	0801e20c 	.word	0x0801e20c
 801a73c:	08019bfd 	.word	0x08019bfd
 801a740:	200000c8 	.word	0x200000c8

0801a744 <__sflush_r>:
 801a744:	898a      	ldrh	r2, [r1, #12]
 801a746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a74a:	4605      	mov	r5, r0
 801a74c:	0710      	lsls	r0, r2, #28
 801a74e:	460c      	mov	r4, r1
 801a750:	d458      	bmi.n	801a804 <__sflush_r+0xc0>
 801a752:	684b      	ldr	r3, [r1, #4]
 801a754:	2b00      	cmp	r3, #0
 801a756:	dc05      	bgt.n	801a764 <__sflush_r+0x20>
 801a758:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	dc02      	bgt.n	801a764 <__sflush_r+0x20>
 801a75e:	2000      	movs	r0, #0
 801a760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a766:	2e00      	cmp	r6, #0
 801a768:	d0f9      	beq.n	801a75e <__sflush_r+0x1a>
 801a76a:	2300      	movs	r3, #0
 801a76c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a770:	682f      	ldr	r7, [r5, #0]
 801a772:	602b      	str	r3, [r5, #0]
 801a774:	d032      	beq.n	801a7dc <__sflush_r+0x98>
 801a776:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a778:	89a3      	ldrh	r3, [r4, #12]
 801a77a:	075a      	lsls	r2, r3, #29
 801a77c:	d505      	bpl.n	801a78a <__sflush_r+0x46>
 801a77e:	6863      	ldr	r3, [r4, #4]
 801a780:	1ac0      	subs	r0, r0, r3
 801a782:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a784:	b10b      	cbz	r3, 801a78a <__sflush_r+0x46>
 801a786:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a788:	1ac0      	subs	r0, r0, r3
 801a78a:	2300      	movs	r3, #0
 801a78c:	4602      	mov	r2, r0
 801a78e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a790:	6a21      	ldr	r1, [r4, #32]
 801a792:	4628      	mov	r0, r5
 801a794:	47b0      	blx	r6
 801a796:	1c43      	adds	r3, r0, #1
 801a798:	89a3      	ldrh	r3, [r4, #12]
 801a79a:	d106      	bne.n	801a7aa <__sflush_r+0x66>
 801a79c:	6829      	ldr	r1, [r5, #0]
 801a79e:	291d      	cmp	r1, #29
 801a7a0:	d82c      	bhi.n	801a7fc <__sflush_r+0xb8>
 801a7a2:	4a2a      	ldr	r2, [pc, #168]	; (801a84c <__sflush_r+0x108>)
 801a7a4:	40ca      	lsrs	r2, r1
 801a7a6:	07d6      	lsls	r6, r2, #31
 801a7a8:	d528      	bpl.n	801a7fc <__sflush_r+0xb8>
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	6062      	str	r2, [r4, #4]
 801a7ae:	04d9      	lsls	r1, r3, #19
 801a7b0:	6922      	ldr	r2, [r4, #16]
 801a7b2:	6022      	str	r2, [r4, #0]
 801a7b4:	d504      	bpl.n	801a7c0 <__sflush_r+0x7c>
 801a7b6:	1c42      	adds	r2, r0, #1
 801a7b8:	d101      	bne.n	801a7be <__sflush_r+0x7a>
 801a7ba:	682b      	ldr	r3, [r5, #0]
 801a7bc:	b903      	cbnz	r3, 801a7c0 <__sflush_r+0x7c>
 801a7be:	6560      	str	r0, [r4, #84]	; 0x54
 801a7c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a7c2:	602f      	str	r7, [r5, #0]
 801a7c4:	2900      	cmp	r1, #0
 801a7c6:	d0ca      	beq.n	801a75e <__sflush_r+0x1a>
 801a7c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a7cc:	4299      	cmp	r1, r3
 801a7ce:	d002      	beq.n	801a7d6 <__sflush_r+0x92>
 801a7d0:	4628      	mov	r0, r5
 801a7d2:	f7ff fa53 	bl	8019c7c <_free_r>
 801a7d6:	2000      	movs	r0, #0
 801a7d8:	6360      	str	r0, [r4, #52]	; 0x34
 801a7da:	e7c1      	b.n	801a760 <__sflush_r+0x1c>
 801a7dc:	6a21      	ldr	r1, [r4, #32]
 801a7de:	2301      	movs	r3, #1
 801a7e0:	4628      	mov	r0, r5
 801a7e2:	47b0      	blx	r6
 801a7e4:	1c41      	adds	r1, r0, #1
 801a7e6:	d1c7      	bne.n	801a778 <__sflush_r+0x34>
 801a7e8:	682b      	ldr	r3, [r5, #0]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d0c4      	beq.n	801a778 <__sflush_r+0x34>
 801a7ee:	2b1d      	cmp	r3, #29
 801a7f0:	d001      	beq.n	801a7f6 <__sflush_r+0xb2>
 801a7f2:	2b16      	cmp	r3, #22
 801a7f4:	d101      	bne.n	801a7fa <__sflush_r+0xb6>
 801a7f6:	602f      	str	r7, [r5, #0]
 801a7f8:	e7b1      	b.n	801a75e <__sflush_r+0x1a>
 801a7fa:	89a3      	ldrh	r3, [r4, #12]
 801a7fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a800:	81a3      	strh	r3, [r4, #12]
 801a802:	e7ad      	b.n	801a760 <__sflush_r+0x1c>
 801a804:	690f      	ldr	r7, [r1, #16]
 801a806:	2f00      	cmp	r7, #0
 801a808:	d0a9      	beq.n	801a75e <__sflush_r+0x1a>
 801a80a:	0793      	lsls	r3, r2, #30
 801a80c:	680e      	ldr	r6, [r1, #0]
 801a80e:	bf08      	it	eq
 801a810:	694b      	ldreq	r3, [r1, #20]
 801a812:	600f      	str	r7, [r1, #0]
 801a814:	bf18      	it	ne
 801a816:	2300      	movne	r3, #0
 801a818:	eba6 0807 	sub.w	r8, r6, r7
 801a81c:	608b      	str	r3, [r1, #8]
 801a81e:	f1b8 0f00 	cmp.w	r8, #0
 801a822:	dd9c      	ble.n	801a75e <__sflush_r+0x1a>
 801a824:	6a21      	ldr	r1, [r4, #32]
 801a826:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a828:	4643      	mov	r3, r8
 801a82a:	463a      	mov	r2, r7
 801a82c:	4628      	mov	r0, r5
 801a82e:	47b0      	blx	r6
 801a830:	2800      	cmp	r0, #0
 801a832:	dc06      	bgt.n	801a842 <__sflush_r+0xfe>
 801a834:	89a3      	ldrh	r3, [r4, #12]
 801a836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a83a:	81a3      	strh	r3, [r4, #12]
 801a83c:	f04f 30ff 	mov.w	r0, #4294967295
 801a840:	e78e      	b.n	801a760 <__sflush_r+0x1c>
 801a842:	4407      	add	r7, r0
 801a844:	eba8 0800 	sub.w	r8, r8, r0
 801a848:	e7e9      	b.n	801a81e <__sflush_r+0xda>
 801a84a:	bf00      	nop
 801a84c:	20400001 	.word	0x20400001

0801a850 <_fflush_r>:
 801a850:	b538      	push	{r3, r4, r5, lr}
 801a852:	690b      	ldr	r3, [r1, #16]
 801a854:	4605      	mov	r5, r0
 801a856:	460c      	mov	r4, r1
 801a858:	b913      	cbnz	r3, 801a860 <_fflush_r+0x10>
 801a85a:	2500      	movs	r5, #0
 801a85c:	4628      	mov	r0, r5
 801a85e:	bd38      	pop	{r3, r4, r5, pc}
 801a860:	b118      	cbz	r0, 801a86a <_fflush_r+0x1a>
 801a862:	6983      	ldr	r3, [r0, #24]
 801a864:	b90b      	cbnz	r3, 801a86a <_fflush_r+0x1a>
 801a866:	f000 f887 	bl	801a978 <__sinit>
 801a86a:	4b14      	ldr	r3, [pc, #80]	; (801a8bc <_fflush_r+0x6c>)
 801a86c:	429c      	cmp	r4, r3
 801a86e:	d11b      	bne.n	801a8a8 <_fflush_r+0x58>
 801a870:	686c      	ldr	r4, [r5, #4]
 801a872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a876:	2b00      	cmp	r3, #0
 801a878:	d0ef      	beq.n	801a85a <_fflush_r+0xa>
 801a87a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a87c:	07d0      	lsls	r0, r2, #31
 801a87e:	d404      	bmi.n	801a88a <_fflush_r+0x3a>
 801a880:	0599      	lsls	r1, r3, #22
 801a882:	d402      	bmi.n	801a88a <_fflush_r+0x3a>
 801a884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a886:	f000 f915 	bl	801aab4 <__retarget_lock_acquire_recursive>
 801a88a:	4628      	mov	r0, r5
 801a88c:	4621      	mov	r1, r4
 801a88e:	f7ff ff59 	bl	801a744 <__sflush_r>
 801a892:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a894:	07da      	lsls	r2, r3, #31
 801a896:	4605      	mov	r5, r0
 801a898:	d4e0      	bmi.n	801a85c <_fflush_r+0xc>
 801a89a:	89a3      	ldrh	r3, [r4, #12]
 801a89c:	059b      	lsls	r3, r3, #22
 801a89e:	d4dd      	bmi.n	801a85c <_fflush_r+0xc>
 801a8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a8a2:	f000 f909 	bl	801aab8 <__retarget_lock_release_recursive>
 801a8a6:	e7d9      	b.n	801a85c <_fflush_r+0xc>
 801a8a8:	4b05      	ldr	r3, [pc, #20]	; (801a8c0 <_fflush_r+0x70>)
 801a8aa:	429c      	cmp	r4, r3
 801a8ac:	d101      	bne.n	801a8b2 <_fflush_r+0x62>
 801a8ae:	68ac      	ldr	r4, [r5, #8]
 801a8b0:	e7df      	b.n	801a872 <_fflush_r+0x22>
 801a8b2:	4b04      	ldr	r3, [pc, #16]	; (801a8c4 <_fflush_r+0x74>)
 801a8b4:	429c      	cmp	r4, r3
 801a8b6:	bf08      	it	eq
 801a8b8:	68ec      	ldreq	r4, [r5, #12]
 801a8ba:	e7da      	b.n	801a872 <_fflush_r+0x22>
 801a8bc:	0801e230 	.word	0x0801e230
 801a8c0:	0801e250 	.word	0x0801e250
 801a8c4:	0801e210 	.word	0x0801e210

0801a8c8 <std>:
 801a8c8:	2300      	movs	r3, #0
 801a8ca:	b510      	push	{r4, lr}
 801a8cc:	4604      	mov	r4, r0
 801a8ce:	e9c0 3300 	strd	r3, r3, [r0]
 801a8d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a8d6:	6083      	str	r3, [r0, #8]
 801a8d8:	8181      	strh	r1, [r0, #12]
 801a8da:	6643      	str	r3, [r0, #100]	; 0x64
 801a8dc:	81c2      	strh	r2, [r0, #14]
 801a8de:	6183      	str	r3, [r0, #24]
 801a8e0:	4619      	mov	r1, r3
 801a8e2:	2208      	movs	r2, #8
 801a8e4:	305c      	adds	r0, #92	; 0x5c
 801a8e6:	f7ff f9c1 	bl	8019c6c <memset>
 801a8ea:	4b05      	ldr	r3, [pc, #20]	; (801a900 <std+0x38>)
 801a8ec:	6263      	str	r3, [r4, #36]	; 0x24
 801a8ee:	4b05      	ldr	r3, [pc, #20]	; (801a904 <std+0x3c>)
 801a8f0:	62a3      	str	r3, [r4, #40]	; 0x28
 801a8f2:	4b05      	ldr	r3, [pc, #20]	; (801a908 <std+0x40>)
 801a8f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a8f6:	4b05      	ldr	r3, [pc, #20]	; (801a90c <std+0x44>)
 801a8f8:	6224      	str	r4, [r4, #32]
 801a8fa:	6323      	str	r3, [r4, #48]	; 0x30
 801a8fc:	bd10      	pop	{r4, pc}
 801a8fe:	bf00      	nop
 801a900:	0801aeb1 	.word	0x0801aeb1
 801a904:	0801aed3 	.word	0x0801aed3
 801a908:	0801af0b 	.word	0x0801af0b
 801a90c:	0801af2f 	.word	0x0801af2f

0801a910 <_cleanup_r>:
 801a910:	4901      	ldr	r1, [pc, #4]	; (801a918 <_cleanup_r+0x8>)
 801a912:	f000 b8af 	b.w	801aa74 <_fwalk_reent>
 801a916:	bf00      	nop
 801a918:	0801a851 	.word	0x0801a851

0801a91c <__sfmoreglue>:
 801a91c:	b570      	push	{r4, r5, r6, lr}
 801a91e:	2268      	movs	r2, #104	; 0x68
 801a920:	1e4d      	subs	r5, r1, #1
 801a922:	4355      	muls	r5, r2
 801a924:	460e      	mov	r6, r1
 801a926:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a92a:	f7ff fa13 	bl	8019d54 <_malloc_r>
 801a92e:	4604      	mov	r4, r0
 801a930:	b140      	cbz	r0, 801a944 <__sfmoreglue+0x28>
 801a932:	2100      	movs	r1, #0
 801a934:	e9c0 1600 	strd	r1, r6, [r0]
 801a938:	300c      	adds	r0, #12
 801a93a:	60a0      	str	r0, [r4, #8]
 801a93c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a940:	f7ff f994 	bl	8019c6c <memset>
 801a944:	4620      	mov	r0, r4
 801a946:	bd70      	pop	{r4, r5, r6, pc}

0801a948 <__sfp_lock_acquire>:
 801a948:	4801      	ldr	r0, [pc, #4]	; (801a950 <__sfp_lock_acquire+0x8>)
 801a94a:	f000 b8b3 	b.w	801aab4 <__retarget_lock_acquire_recursive>
 801a94e:	bf00      	nop
 801a950:	20001e9a 	.word	0x20001e9a

0801a954 <__sfp_lock_release>:
 801a954:	4801      	ldr	r0, [pc, #4]	; (801a95c <__sfp_lock_release+0x8>)
 801a956:	f000 b8af 	b.w	801aab8 <__retarget_lock_release_recursive>
 801a95a:	bf00      	nop
 801a95c:	20001e9a 	.word	0x20001e9a

0801a960 <__sinit_lock_acquire>:
 801a960:	4801      	ldr	r0, [pc, #4]	; (801a968 <__sinit_lock_acquire+0x8>)
 801a962:	f000 b8a7 	b.w	801aab4 <__retarget_lock_acquire_recursive>
 801a966:	bf00      	nop
 801a968:	20001e9b 	.word	0x20001e9b

0801a96c <__sinit_lock_release>:
 801a96c:	4801      	ldr	r0, [pc, #4]	; (801a974 <__sinit_lock_release+0x8>)
 801a96e:	f000 b8a3 	b.w	801aab8 <__retarget_lock_release_recursive>
 801a972:	bf00      	nop
 801a974:	20001e9b 	.word	0x20001e9b

0801a978 <__sinit>:
 801a978:	b510      	push	{r4, lr}
 801a97a:	4604      	mov	r4, r0
 801a97c:	f7ff fff0 	bl	801a960 <__sinit_lock_acquire>
 801a980:	69a3      	ldr	r3, [r4, #24]
 801a982:	b11b      	cbz	r3, 801a98c <__sinit+0x14>
 801a984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a988:	f7ff bff0 	b.w	801a96c <__sinit_lock_release>
 801a98c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a990:	6523      	str	r3, [r4, #80]	; 0x50
 801a992:	4b13      	ldr	r3, [pc, #76]	; (801a9e0 <__sinit+0x68>)
 801a994:	4a13      	ldr	r2, [pc, #76]	; (801a9e4 <__sinit+0x6c>)
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	62a2      	str	r2, [r4, #40]	; 0x28
 801a99a:	42a3      	cmp	r3, r4
 801a99c:	bf04      	itt	eq
 801a99e:	2301      	moveq	r3, #1
 801a9a0:	61a3      	streq	r3, [r4, #24]
 801a9a2:	4620      	mov	r0, r4
 801a9a4:	f000 f820 	bl	801a9e8 <__sfp>
 801a9a8:	6060      	str	r0, [r4, #4]
 801a9aa:	4620      	mov	r0, r4
 801a9ac:	f000 f81c 	bl	801a9e8 <__sfp>
 801a9b0:	60a0      	str	r0, [r4, #8]
 801a9b2:	4620      	mov	r0, r4
 801a9b4:	f000 f818 	bl	801a9e8 <__sfp>
 801a9b8:	2200      	movs	r2, #0
 801a9ba:	60e0      	str	r0, [r4, #12]
 801a9bc:	2104      	movs	r1, #4
 801a9be:	6860      	ldr	r0, [r4, #4]
 801a9c0:	f7ff ff82 	bl	801a8c8 <std>
 801a9c4:	68a0      	ldr	r0, [r4, #8]
 801a9c6:	2201      	movs	r2, #1
 801a9c8:	2109      	movs	r1, #9
 801a9ca:	f7ff ff7d 	bl	801a8c8 <std>
 801a9ce:	68e0      	ldr	r0, [r4, #12]
 801a9d0:	2202      	movs	r2, #2
 801a9d2:	2112      	movs	r1, #18
 801a9d4:	f7ff ff78 	bl	801a8c8 <std>
 801a9d8:	2301      	movs	r3, #1
 801a9da:	61a3      	str	r3, [r4, #24]
 801a9dc:	e7d2      	b.n	801a984 <__sinit+0xc>
 801a9de:	bf00      	nop
 801a9e0:	0801e1d4 	.word	0x0801e1d4
 801a9e4:	0801a911 	.word	0x0801a911

0801a9e8 <__sfp>:
 801a9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9ea:	4607      	mov	r7, r0
 801a9ec:	f7ff ffac 	bl	801a948 <__sfp_lock_acquire>
 801a9f0:	4b1e      	ldr	r3, [pc, #120]	; (801aa6c <__sfp+0x84>)
 801a9f2:	681e      	ldr	r6, [r3, #0]
 801a9f4:	69b3      	ldr	r3, [r6, #24]
 801a9f6:	b913      	cbnz	r3, 801a9fe <__sfp+0x16>
 801a9f8:	4630      	mov	r0, r6
 801a9fa:	f7ff ffbd 	bl	801a978 <__sinit>
 801a9fe:	3648      	adds	r6, #72	; 0x48
 801aa00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801aa04:	3b01      	subs	r3, #1
 801aa06:	d503      	bpl.n	801aa10 <__sfp+0x28>
 801aa08:	6833      	ldr	r3, [r6, #0]
 801aa0a:	b30b      	cbz	r3, 801aa50 <__sfp+0x68>
 801aa0c:	6836      	ldr	r6, [r6, #0]
 801aa0e:	e7f7      	b.n	801aa00 <__sfp+0x18>
 801aa10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801aa14:	b9d5      	cbnz	r5, 801aa4c <__sfp+0x64>
 801aa16:	4b16      	ldr	r3, [pc, #88]	; (801aa70 <__sfp+0x88>)
 801aa18:	60e3      	str	r3, [r4, #12]
 801aa1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801aa1e:	6665      	str	r5, [r4, #100]	; 0x64
 801aa20:	f000 f847 	bl	801aab2 <__retarget_lock_init_recursive>
 801aa24:	f7ff ff96 	bl	801a954 <__sfp_lock_release>
 801aa28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801aa2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801aa30:	6025      	str	r5, [r4, #0]
 801aa32:	61a5      	str	r5, [r4, #24]
 801aa34:	2208      	movs	r2, #8
 801aa36:	4629      	mov	r1, r5
 801aa38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aa3c:	f7ff f916 	bl	8019c6c <memset>
 801aa40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801aa44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801aa48:	4620      	mov	r0, r4
 801aa4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa4c:	3468      	adds	r4, #104	; 0x68
 801aa4e:	e7d9      	b.n	801aa04 <__sfp+0x1c>
 801aa50:	2104      	movs	r1, #4
 801aa52:	4638      	mov	r0, r7
 801aa54:	f7ff ff62 	bl	801a91c <__sfmoreglue>
 801aa58:	4604      	mov	r4, r0
 801aa5a:	6030      	str	r0, [r6, #0]
 801aa5c:	2800      	cmp	r0, #0
 801aa5e:	d1d5      	bne.n	801aa0c <__sfp+0x24>
 801aa60:	f7ff ff78 	bl	801a954 <__sfp_lock_release>
 801aa64:	230c      	movs	r3, #12
 801aa66:	603b      	str	r3, [r7, #0]
 801aa68:	e7ee      	b.n	801aa48 <__sfp+0x60>
 801aa6a:	bf00      	nop
 801aa6c:	0801e1d4 	.word	0x0801e1d4
 801aa70:	ffff0001 	.word	0xffff0001

0801aa74 <_fwalk_reent>:
 801aa74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa78:	4606      	mov	r6, r0
 801aa7a:	4688      	mov	r8, r1
 801aa7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801aa80:	2700      	movs	r7, #0
 801aa82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801aa86:	f1b9 0901 	subs.w	r9, r9, #1
 801aa8a:	d505      	bpl.n	801aa98 <_fwalk_reent+0x24>
 801aa8c:	6824      	ldr	r4, [r4, #0]
 801aa8e:	2c00      	cmp	r4, #0
 801aa90:	d1f7      	bne.n	801aa82 <_fwalk_reent+0xe>
 801aa92:	4638      	mov	r0, r7
 801aa94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa98:	89ab      	ldrh	r3, [r5, #12]
 801aa9a:	2b01      	cmp	r3, #1
 801aa9c:	d907      	bls.n	801aaae <_fwalk_reent+0x3a>
 801aa9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aaa2:	3301      	adds	r3, #1
 801aaa4:	d003      	beq.n	801aaae <_fwalk_reent+0x3a>
 801aaa6:	4629      	mov	r1, r5
 801aaa8:	4630      	mov	r0, r6
 801aaaa:	47c0      	blx	r8
 801aaac:	4307      	orrs	r7, r0
 801aaae:	3568      	adds	r5, #104	; 0x68
 801aab0:	e7e9      	b.n	801aa86 <_fwalk_reent+0x12>

0801aab2 <__retarget_lock_init_recursive>:
 801aab2:	4770      	bx	lr

0801aab4 <__retarget_lock_acquire_recursive>:
 801aab4:	4770      	bx	lr

0801aab6 <__retarget_lock_release>:
 801aab6:	4770      	bx	lr

0801aab8 <__retarget_lock_release_recursive>:
 801aab8:	4770      	bx	lr

0801aaba <__swhatbuf_r>:
 801aaba:	b570      	push	{r4, r5, r6, lr}
 801aabc:	460e      	mov	r6, r1
 801aabe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aac2:	2900      	cmp	r1, #0
 801aac4:	b096      	sub	sp, #88	; 0x58
 801aac6:	4614      	mov	r4, r2
 801aac8:	461d      	mov	r5, r3
 801aaca:	da08      	bge.n	801aade <__swhatbuf_r+0x24>
 801aacc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801aad0:	2200      	movs	r2, #0
 801aad2:	602a      	str	r2, [r5, #0]
 801aad4:	061a      	lsls	r2, r3, #24
 801aad6:	d410      	bmi.n	801aafa <__swhatbuf_r+0x40>
 801aad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aadc:	e00e      	b.n	801aafc <__swhatbuf_r+0x42>
 801aade:	466a      	mov	r2, sp
 801aae0:	f000 fa4c 	bl	801af7c <_fstat_r>
 801aae4:	2800      	cmp	r0, #0
 801aae6:	dbf1      	blt.n	801aacc <__swhatbuf_r+0x12>
 801aae8:	9a01      	ldr	r2, [sp, #4]
 801aaea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801aaee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801aaf2:	425a      	negs	r2, r3
 801aaf4:	415a      	adcs	r2, r3
 801aaf6:	602a      	str	r2, [r5, #0]
 801aaf8:	e7ee      	b.n	801aad8 <__swhatbuf_r+0x1e>
 801aafa:	2340      	movs	r3, #64	; 0x40
 801aafc:	2000      	movs	r0, #0
 801aafe:	6023      	str	r3, [r4, #0]
 801ab00:	b016      	add	sp, #88	; 0x58
 801ab02:	bd70      	pop	{r4, r5, r6, pc}

0801ab04 <__smakebuf_r>:
 801ab04:	898b      	ldrh	r3, [r1, #12]
 801ab06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ab08:	079d      	lsls	r5, r3, #30
 801ab0a:	4606      	mov	r6, r0
 801ab0c:	460c      	mov	r4, r1
 801ab0e:	d507      	bpl.n	801ab20 <__smakebuf_r+0x1c>
 801ab10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ab14:	6023      	str	r3, [r4, #0]
 801ab16:	6123      	str	r3, [r4, #16]
 801ab18:	2301      	movs	r3, #1
 801ab1a:	6163      	str	r3, [r4, #20]
 801ab1c:	b002      	add	sp, #8
 801ab1e:	bd70      	pop	{r4, r5, r6, pc}
 801ab20:	ab01      	add	r3, sp, #4
 801ab22:	466a      	mov	r2, sp
 801ab24:	f7ff ffc9 	bl	801aaba <__swhatbuf_r>
 801ab28:	9900      	ldr	r1, [sp, #0]
 801ab2a:	4605      	mov	r5, r0
 801ab2c:	4630      	mov	r0, r6
 801ab2e:	f7ff f911 	bl	8019d54 <_malloc_r>
 801ab32:	b948      	cbnz	r0, 801ab48 <__smakebuf_r+0x44>
 801ab34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab38:	059a      	lsls	r2, r3, #22
 801ab3a:	d4ef      	bmi.n	801ab1c <__smakebuf_r+0x18>
 801ab3c:	f023 0303 	bic.w	r3, r3, #3
 801ab40:	f043 0302 	orr.w	r3, r3, #2
 801ab44:	81a3      	strh	r3, [r4, #12]
 801ab46:	e7e3      	b.n	801ab10 <__smakebuf_r+0xc>
 801ab48:	4b0d      	ldr	r3, [pc, #52]	; (801ab80 <__smakebuf_r+0x7c>)
 801ab4a:	62b3      	str	r3, [r6, #40]	; 0x28
 801ab4c:	89a3      	ldrh	r3, [r4, #12]
 801ab4e:	6020      	str	r0, [r4, #0]
 801ab50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab54:	81a3      	strh	r3, [r4, #12]
 801ab56:	9b00      	ldr	r3, [sp, #0]
 801ab58:	6163      	str	r3, [r4, #20]
 801ab5a:	9b01      	ldr	r3, [sp, #4]
 801ab5c:	6120      	str	r0, [r4, #16]
 801ab5e:	b15b      	cbz	r3, 801ab78 <__smakebuf_r+0x74>
 801ab60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ab64:	4630      	mov	r0, r6
 801ab66:	f000 fa1b 	bl	801afa0 <_isatty_r>
 801ab6a:	b128      	cbz	r0, 801ab78 <__smakebuf_r+0x74>
 801ab6c:	89a3      	ldrh	r3, [r4, #12]
 801ab6e:	f023 0303 	bic.w	r3, r3, #3
 801ab72:	f043 0301 	orr.w	r3, r3, #1
 801ab76:	81a3      	strh	r3, [r4, #12]
 801ab78:	89a0      	ldrh	r0, [r4, #12]
 801ab7a:	4305      	orrs	r5, r0
 801ab7c:	81a5      	strh	r5, [r4, #12]
 801ab7e:	e7cd      	b.n	801ab1c <__smakebuf_r+0x18>
 801ab80:	0801a911 	.word	0x0801a911

0801ab84 <__malloc_lock>:
 801ab84:	4801      	ldr	r0, [pc, #4]	; (801ab8c <__malloc_lock+0x8>)
 801ab86:	f7ff bf95 	b.w	801aab4 <__retarget_lock_acquire_recursive>
 801ab8a:	bf00      	nop
 801ab8c:	20001e99 	.word	0x20001e99

0801ab90 <__malloc_unlock>:
 801ab90:	4801      	ldr	r0, [pc, #4]	; (801ab98 <__malloc_unlock+0x8>)
 801ab92:	f7ff bf91 	b.w	801aab8 <__retarget_lock_release_recursive>
 801ab96:	bf00      	nop
 801ab98:	20001e99 	.word	0x20001e99

0801ab9c <_realloc_r>:
 801ab9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aba0:	4680      	mov	r8, r0
 801aba2:	4614      	mov	r4, r2
 801aba4:	460e      	mov	r6, r1
 801aba6:	b921      	cbnz	r1, 801abb2 <_realloc_r+0x16>
 801aba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801abac:	4611      	mov	r1, r2
 801abae:	f7ff b8d1 	b.w	8019d54 <_malloc_r>
 801abb2:	b92a      	cbnz	r2, 801abc0 <_realloc_r+0x24>
 801abb4:	f7ff f862 	bl	8019c7c <_free_r>
 801abb8:	4625      	mov	r5, r4
 801abba:	4628      	mov	r0, r5
 801abbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abc0:	f000 fa10 	bl	801afe4 <_malloc_usable_size_r>
 801abc4:	4284      	cmp	r4, r0
 801abc6:	4607      	mov	r7, r0
 801abc8:	d802      	bhi.n	801abd0 <_realloc_r+0x34>
 801abca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801abce:	d812      	bhi.n	801abf6 <_realloc_r+0x5a>
 801abd0:	4621      	mov	r1, r4
 801abd2:	4640      	mov	r0, r8
 801abd4:	f7ff f8be 	bl	8019d54 <_malloc_r>
 801abd8:	4605      	mov	r5, r0
 801abda:	2800      	cmp	r0, #0
 801abdc:	d0ed      	beq.n	801abba <_realloc_r+0x1e>
 801abde:	42bc      	cmp	r4, r7
 801abe0:	4622      	mov	r2, r4
 801abe2:	4631      	mov	r1, r6
 801abe4:	bf28      	it	cs
 801abe6:	463a      	movcs	r2, r7
 801abe8:	f7ff f818 	bl	8019c1c <memcpy>
 801abec:	4631      	mov	r1, r6
 801abee:	4640      	mov	r0, r8
 801abf0:	f7ff f844 	bl	8019c7c <_free_r>
 801abf4:	e7e1      	b.n	801abba <_realloc_r+0x1e>
 801abf6:	4635      	mov	r5, r6
 801abf8:	e7df      	b.n	801abba <_realloc_r+0x1e>

0801abfa <__ssputs_r>:
 801abfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abfe:	688e      	ldr	r6, [r1, #8]
 801ac00:	429e      	cmp	r6, r3
 801ac02:	4682      	mov	sl, r0
 801ac04:	460c      	mov	r4, r1
 801ac06:	4690      	mov	r8, r2
 801ac08:	461f      	mov	r7, r3
 801ac0a:	d838      	bhi.n	801ac7e <__ssputs_r+0x84>
 801ac0c:	898a      	ldrh	r2, [r1, #12]
 801ac0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ac12:	d032      	beq.n	801ac7a <__ssputs_r+0x80>
 801ac14:	6825      	ldr	r5, [r4, #0]
 801ac16:	6909      	ldr	r1, [r1, #16]
 801ac18:	eba5 0901 	sub.w	r9, r5, r1
 801ac1c:	6965      	ldr	r5, [r4, #20]
 801ac1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ac22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ac26:	3301      	adds	r3, #1
 801ac28:	444b      	add	r3, r9
 801ac2a:	106d      	asrs	r5, r5, #1
 801ac2c:	429d      	cmp	r5, r3
 801ac2e:	bf38      	it	cc
 801ac30:	461d      	movcc	r5, r3
 801ac32:	0553      	lsls	r3, r2, #21
 801ac34:	d531      	bpl.n	801ac9a <__ssputs_r+0xa0>
 801ac36:	4629      	mov	r1, r5
 801ac38:	f7ff f88c 	bl	8019d54 <_malloc_r>
 801ac3c:	4606      	mov	r6, r0
 801ac3e:	b950      	cbnz	r0, 801ac56 <__ssputs_r+0x5c>
 801ac40:	230c      	movs	r3, #12
 801ac42:	f8ca 3000 	str.w	r3, [sl]
 801ac46:	89a3      	ldrh	r3, [r4, #12]
 801ac48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ac4c:	81a3      	strh	r3, [r4, #12]
 801ac4e:	f04f 30ff 	mov.w	r0, #4294967295
 801ac52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac56:	6921      	ldr	r1, [r4, #16]
 801ac58:	464a      	mov	r2, r9
 801ac5a:	f7fe ffdf 	bl	8019c1c <memcpy>
 801ac5e:	89a3      	ldrh	r3, [r4, #12]
 801ac60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ac64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac68:	81a3      	strh	r3, [r4, #12]
 801ac6a:	6126      	str	r6, [r4, #16]
 801ac6c:	6165      	str	r5, [r4, #20]
 801ac6e:	444e      	add	r6, r9
 801ac70:	eba5 0509 	sub.w	r5, r5, r9
 801ac74:	6026      	str	r6, [r4, #0]
 801ac76:	60a5      	str	r5, [r4, #8]
 801ac78:	463e      	mov	r6, r7
 801ac7a:	42be      	cmp	r6, r7
 801ac7c:	d900      	bls.n	801ac80 <__ssputs_r+0x86>
 801ac7e:	463e      	mov	r6, r7
 801ac80:	6820      	ldr	r0, [r4, #0]
 801ac82:	4632      	mov	r2, r6
 801ac84:	4641      	mov	r1, r8
 801ac86:	f7fe ffd7 	bl	8019c38 <memmove>
 801ac8a:	68a3      	ldr	r3, [r4, #8]
 801ac8c:	1b9b      	subs	r3, r3, r6
 801ac8e:	60a3      	str	r3, [r4, #8]
 801ac90:	6823      	ldr	r3, [r4, #0]
 801ac92:	4433      	add	r3, r6
 801ac94:	6023      	str	r3, [r4, #0]
 801ac96:	2000      	movs	r0, #0
 801ac98:	e7db      	b.n	801ac52 <__ssputs_r+0x58>
 801ac9a:	462a      	mov	r2, r5
 801ac9c:	f7ff ff7e 	bl	801ab9c <_realloc_r>
 801aca0:	4606      	mov	r6, r0
 801aca2:	2800      	cmp	r0, #0
 801aca4:	d1e1      	bne.n	801ac6a <__ssputs_r+0x70>
 801aca6:	6921      	ldr	r1, [r4, #16]
 801aca8:	4650      	mov	r0, sl
 801acaa:	f7fe ffe7 	bl	8019c7c <_free_r>
 801acae:	e7c7      	b.n	801ac40 <__ssputs_r+0x46>

0801acb0 <_svfiprintf_r>:
 801acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acb4:	4698      	mov	r8, r3
 801acb6:	898b      	ldrh	r3, [r1, #12]
 801acb8:	061b      	lsls	r3, r3, #24
 801acba:	b09d      	sub	sp, #116	; 0x74
 801acbc:	4607      	mov	r7, r0
 801acbe:	460d      	mov	r5, r1
 801acc0:	4614      	mov	r4, r2
 801acc2:	d50e      	bpl.n	801ace2 <_svfiprintf_r+0x32>
 801acc4:	690b      	ldr	r3, [r1, #16]
 801acc6:	b963      	cbnz	r3, 801ace2 <_svfiprintf_r+0x32>
 801acc8:	2140      	movs	r1, #64	; 0x40
 801acca:	f7ff f843 	bl	8019d54 <_malloc_r>
 801acce:	6028      	str	r0, [r5, #0]
 801acd0:	6128      	str	r0, [r5, #16]
 801acd2:	b920      	cbnz	r0, 801acde <_svfiprintf_r+0x2e>
 801acd4:	230c      	movs	r3, #12
 801acd6:	603b      	str	r3, [r7, #0]
 801acd8:	f04f 30ff 	mov.w	r0, #4294967295
 801acdc:	e0d1      	b.n	801ae82 <_svfiprintf_r+0x1d2>
 801acde:	2340      	movs	r3, #64	; 0x40
 801ace0:	616b      	str	r3, [r5, #20]
 801ace2:	2300      	movs	r3, #0
 801ace4:	9309      	str	r3, [sp, #36]	; 0x24
 801ace6:	2320      	movs	r3, #32
 801ace8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801acec:	f8cd 800c 	str.w	r8, [sp, #12]
 801acf0:	2330      	movs	r3, #48	; 0x30
 801acf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ae9c <_svfiprintf_r+0x1ec>
 801acf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801acfa:	f04f 0901 	mov.w	r9, #1
 801acfe:	4623      	mov	r3, r4
 801ad00:	469a      	mov	sl, r3
 801ad02:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad06:	b10a      	cbz	r2, 801ad0c <_svfiprintf_r+0x5c>
 801ad08:	2a25      	cmp	r2, #37	; 0x25
 801ad0a:	d1f9      	bne.n	801ad00 <_svfiprintf_r+0x50>
 801ad0c:	ebba 0b04 	subs.w	fp, sl, r4
 801ad10:	d00b      	beq.n	801ad2a <_svfiprintf_r+0x7a>
 801ad12:	465b      	mov	r3, fp
 801ad14:	4622      	mov	r2, r4
 801ad16:	4629      	mov	r1, r5
 801ad18:	4638      	mov	r0, r7
 801ad1a:	f7ff ff6e 	bl	801abfa <__ssputs_r>
 801ad1e:	3001      	adds	r0, #1
 801ad20:	f000 80aa 	beq.w	801ae78 <_svfiprintf_r+0x1c8>
 801ad24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad26:	445a      	add	r2, fp
 801ad28:	9209      	str	r2, [sp, #36]	; 0x24
 801ad2a:	f89a 3000 	ldrb.w	r3, [sl]
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	f000 80a2 	beq.w	801ae78 <_svfiprintf_r+0x1c8>
 801ad34:	2300      	movs	r3, #0
 801ad36:	f04f 32ff 	mov.w	r2, #4294967295
 801ad3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad3e:	f10a 0a01 	add.w	sl, sl, #1
 801ad42:	9304      	str	r3, [sp, #16]
 801ad44:	9307      	str	r3, [sp, #28]
 801ad46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ad4a:	931a      	str	r3, [sp, #104]	; 0x68
 801ad4c:	4654      	mov	r4, sl
 801ad4e:	2205      	movs	r2, #5
 801ad50:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad54:	4851      	ldr	r0, [pc, #324]	; (801ae9c <_svfiprintf_r+0x1ec>)
 801ad56:	f7e5 fa5b 	bl	8000210 <memchr>
 801ad5a:	9a04      	ldr	r2, [sp, #16]
 801ad5c:	b9d8      	cbnz	r0, 801ad96 <_svfiprintf_r+0xe6>
 801ad5e:	06d0      	lsls	r0, r2, #27
 801ad60:	bf44      	itt	mi
 801ad62:	2320      	movmi	r3, #32
 801ad64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad68:	0711      	lsls	r1, r2, #28
 801ad6a:	bf44      	itt	mi
 801ad6c:	232b      	movmi	r3, #43	; 0x2b
 801ad6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad72:	f89a 3000 	ldrb.w	r3, [sl]
 801ad76:	2b2a      	cmp	r3, #42	; 0x2a
 801ad78:	d015      	beq.n	801ada6 <_svfiprintf_r+0xf6>
 801ad7a:	9a07      	ldr	r2, [sp, #28]
 801ad7c:	4654      	mov	r4, sl
 801ad7e:	2000      	movs	r0, #0
 801ad80:	f04f 0c0a 	mov.w	ip, #10
 801ad84:	4621      	mov	r1, r4
 801ad86:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad8a:	3b30      	subs	r3, #48	; 0x30
 801ad8c:	2b09      	cmp	r3, #9
 801ad8e:	d94e      	bls.n	801ae2e <_svfiprintf_r+0x17e>
 801ad90:	b1b0      	cbz	r0, 801adc0 <_svfiprintf_r+0x110>
 801ad92:	9207      	str	r2, [sp, #28]
 801ad94:	e014      	b.n	801adc0 <_svfiprintf_r+0x110>
 801ad96:	eba0 0308 	sub.w	r3, r0, r8
 801ad9a:	fa09 f303 	lsl.w	r3, r9, r3
 801ad9e:	4313      	orrs	r3, r2
 801ada0:	9304      	str	r3, [sp, #16]
 801ada2:	46a2      	mov	sl, r4
 801ada4:	e7d2      	b.n	801ad4c <_svfiprintf_r+0x9c>
 801ada6:	9b03      	ldr	r3, [sp, #12]
 801ada8:	1d19      	adds	r1, r3, #4
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	9103      	str	r1, [sp, #12]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	bfbb      	ittet	lt
 801adb2:	425b      	neglt	r3, r3
 801adb4:	f042 0202 	orrlt.w	r2, r2, #2
 801adb8:	9307      	strge	r3, [sp, #28]
 801adba:	9307      	strlt	r3, [sp, #28]
 801adbc:	bfb8      	it	lt
 801adbe:	9204      	strlt	r2, [sp, #16]
 801adc0:	7823      	ldrb	r3, [r4, #0]
 801adc2:	2b2e      	cmp	r3, #46	; 0x2e
 801adc4:	d10c      	bne.n	801ade0 <_svfiprintf_r+0x130>
 801adc6:	7863      	ldrb	r3, [r4, #1]
 801adc8:	2b2a      	cmp	r3, #42	; 0x2a
 801adca:	d135      	bne.n	801ae38 <_svfiprintf_r+0x188>
 801adcc:	9b03      	ldr	r3, [sp, #12]
 801adce:	1d1a      	adds	r2, r3, #4
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	9203      	str	r2, [sp, #12]
 801add4:	2b00      	cmp	r3, #0
 801add6:	bfb8      	it	lt
 801add8:	f04f 33ff 	movlt.w	r3, #4294967295
 801addc:	3402      	adds	r4, #2
 801adde:	9305      	str	r3, [sp, #20]
 801ade0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801aeac <_svfiprintf_r+0x1fc>
 801ade4:	7821      	ldrb	r1, [r4, #0]
 801ade6:	2203      	movs	r2, #3
 801ade8:	4650      	mov	r0, sl
 801adea:	f7e5 fa11 	bl	8000210 <memchr>
 801adee:	b140      	cbz	r0, 801ae02 <_svfiprintf_r+0x152>
 801adf0:	2340      	movs	r3, #64	; 0x40
 801adf2:	eba0 000a 	sub.w	r0, r0, sl
 801adf6:	fa03 f000 	lsl.w	r0, r3, r0
 801adfa:	9b04      	ldr	r3, [sp, #16]
 801adfc:	4303      	orrs	r3, r0
 801adfe:	3401      	adds	r4, #1
 801ae00:	9304      	str	r3, [sp, #16]
 801ae02:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae06:	4826      	ldr	r0, [pc, #152]	; (801aea0 <_svfiprintf_r+0x1f0>)
 801ae08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ae0c:	2206      	movs	r2, #6
 801ae0e:	f7e5 f9ff 	bl	8000210 <memchr>
 801ae12:	2800      	cmp	r0, #0
 801ae14:	d038      	beq.n	801ae88 <_svfiprintf_r+0x1d8>
 801ae16:	4b23      	ldr	r3, [pc, #140]	; (801aea4 <_svfiprintf_r+0x1f4>)
 801ae18:	bb1b      	cbnz	r3, 801ae62 <_svfiprintf_r+0x1b2>
 801ae1a:	9b03      	ldr	r3, [sp, #12]
 801ae1c:	3307      	adds	r3, #7
 801ae1e:	f023 0307 	bic.w	r3, r3, #7
 801ae22:	3308      	adds	r3, #8
 801ae24:	9303      	str	r3, [sp, #12]
 801ae26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae28:	4433      	add	r3, r6
 801ae2a:	9309      	str	r3, [sp, #36]	; 0x24
 801ae2c:	e767      	b.n	801acfe <_svfiprintf_r+0x4e>
 801ae2e:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae32:	460c      	mov	r4, r1
 801ae34:	2001      	movs	r0, #1
 801ae36:	e7a5      	b.n	801ad84 <_svfiprintf_r+0xd4>
 801ae38:	2300      	movs	r3, #0
 801ae3a:	3401      	adds	r4, #1
 801ae3c:	9305      	str	r3, [sp, #20]
 801ae3e:	4619      	mov	r1, r3
 801ae40:	f04f 0c0a 	mov.w	ip, #10
 801ae44:	4620      	mov	r0, r4
 801ae46:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae4a:	3a30      	subs	r2, #48	; 0x30
 801ae4c:	2a09      	cmp	r2, #9
 801ae4e:	d903      	bls.n	801ae58 <_svfiprintf_r+0x1a8>
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	d0c5      	beq.n	801ade0 <_svfiprintf_r+0x130>
 801ae54:	9105      	str	r1, [sp, #20]
 801ae56:	e7c3      	b.n	801ade0 <_svfiprintf_r+0x130>
 801ae58:	fb0c 2101 	mla	r1, ip, r1, r2
 801ae5c:	4604      	mov	r4, r0
 801ae5e:	2301      	movs	r3, #1
 801ae60:	e7f0      	b.n	801ae44 <_svfiprintf_r+0x194>
 801ae62:	ab03      	add	r3, sp, #12
 801ae64:	9300      	str	r3, [sp, #0]
 801ae66:	462a      	mov	r2, r5
 801ae68:	4b0f      	ldr	r3, [pc, #60]	; (801aea8 <_svfiprintf_r+0x1f8>)
 801ae6a:	a904      	add	r1, sp, #16
 801ae6c:	4638      	mov	r0, r7
 801ae6e:	f3af 8000 	nop.w
 801ae72:	1c42      	adds	r2, r0, #1
 801ae74:	4606      	mov	r6, r0
 801ae76:	d1d6      	bne.n	801ae26 <_svfiprintf_r+0x176>
 801ae78:	89ab      	ldrh	r3, [r5, #12]
 801ae7a:	065b      	lsls	r3, r3, #25
 801ae7c:	f53f af2c 	bmi.w	801acd8 <_svfiprintf_r+0x28>
 801ae80:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ae82:	b01d      	add	sp, #116	; 0x74
 801ae84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae88:	ab03      	add	r3, sp, #12
 801ae8a:	9300      	str	r3, [sp, #0]
 801ae8c:	462a      	mov	r2, r5
 801ae8e:	4b06      	ldr	r3, [pc, #24]	; (801aea8 <_svfiprintf_r+0x1f8>)
 801ae90:	a904      	add	r1, sp, #16
 801ae92:	4638      	mov	r0, r7
 801ae94:	f7ff f99a 	bl	801a1cc <_printf_i>
 801ae98:	e7eb      	b.n	801ae72 <_svfiprintf_r+0x1c2>
 801ae9a:	bf00      	nop
 801ae9c:	0801e1d8 	.word	0x0801e1d8
 801aea0:	0801e1e2 	.word	0x0801e1e2
 801aea4:	00000000 	.word	0x00000000
 801aea8:	0801abfb 	.word	0x0801abfb
 801aeac:	0801e1de 	.word	0x0801e1de

0801aeb0 <__sread>:
 801aeb0:	b510      	push	{r4, lr}
 801aeb2:	460c      	mov	r4, r1
 801aeb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aeb8:	f000 f89c 	bl	801aff4 <_read_r>
 801aebc:	2800      	cmp	r0, #0
 801aebe:	bfab      	itete	ge
 801aec0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801aec2:	89a3      	ldrhlt	r3, [r4, #12]
 801aec4:	181b      	addge	r3, r3, r0
 801aec6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801aeca:	bfac      	ite	ge
 801aecc:	6563      	strge	r3, [r4, #84]	; 0x54
 801aece:	81a3      	strhlt	r3, [r4, #12]
 801aed0:	bd10      	pop	{r4, pc}

0801aed2 <__swrite>:
 801aed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aed6:	461f      	mov	r7, r3
 801aed8:	898b      	ldrh	r3, [r1, #12]
 801aeda:	05db      	lsls	r3, r3, #23
 801aedc:	4605      	mov	r5, r0
 801aede:	460c      	mov	r4, r1
 801aee0:	4616      	mov	r6, r2
 801aee2:	d505      	bpl.n	801aef0 <__swrite+0x1e>
 801aee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aee8:	2302      	movs	r3, #2
 801aeea:	2200      	movs	r2, #0
 801aeec:	f000 f868 	bl	801afc0 <_lseek_r>
 801aef0:	89a3      	ldrh	r3, [r4, #12]
 801aef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aef6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801aefa:	81a3      	strh	r3, [r4, #12]
 801aefc:	4632      	mov	r2, r6
 801aefe:	463b      	mov	r3, r7
 801af00:	4628      	mov	r0, r5
 801af02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af06:	f000 b817 	b.w	801af38 <_write_r>

0801af0a <__sseek>:
 801af0a:	b510      	push	{r4, lr}
 801af0c:	460c      	mov	r4, r1
 801af0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af12:	f000 f855 	bl	801afc0 <_lseek_r>
 801af16:	1c43      	adds	r3, r0, #1
 801af18:	89a3      	ldrh	r3, [r4, #12]
 801af1a:	bf15      	itete	ne
 801af1c:	6560      	strne	r0, [r4, #84]	; 0x54
 801af1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801af22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801af26:	81a3      	strheq	r3, [r4, #12]
 801af28:	bf18      	it	ne
 801af2a:	81a3      	strhne	r3, [r4, #12]
 801af2c:	bd10      	pop	{r4, pc}

0801af2e <__sclose>:
 801af2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af32:	f000 b813 	b.w	801af5c <_close_r>
	...

0801af38 <_write_r>:
 801af38:	b538      	push	{r3, r4, r5, lr}
 801af3a:	4d07      	ldr	r5, [pc, #28]	; (801af58 <_write_r+0x20>)
 801af3c:	4604      	mov	r4, r0
 801af3e:	4608      	mov	r0, r1
 801af40:	4611      	mov	r1, r2
 801af42:	2200      	movs	r2, #0
 801af44:	602a      	str	r2, [r5, #0]
 801af46:	461a      	mov	r2, r3
 801af48:	f7e7 f967 	bl	800221a <_write>
 801af4c:	1c43      	adds	r3, r0, #1
 801af4e:	d102      	bne.n	801af56 <_write_r+0x1e>
 801af50:	682b      	ldr	r3, [r5, #0]
 801af52:	b103      	cbz	r3, 801af56 <_write_r+0x1e>
 801af54:	6023      	str	r3, [r4, #0]
 801af56:	bd38      	pop	{r3, r4, r5, pc}
 801af58:	20001e9c 	.word	0x20001e9c

0801af5c <_close_r>:
 801af5c:	b538      	push	{r3, r4, r5, lr}
 801af5e:	4d06      	ldr	r5, [pc, #24]	; (801af78 <_close_r+0x1c>)
 801af60:	2300      	movs	r3, #0
 801af62:	4604      	mov	r4, r0
 801af64:	4608      	mov	r0, r1
 801af66:	602b      	str	r3, [r5, #0]
 801af68:	f7e7 f973 	bl	8002252 <_close>
 801af6c:	1c43      	adds	r3, r0, #1
 801af6e:	d102      	bne.n	801af76 <_close_r+0x1a>
 801af70:	682b      	ldr	r3, [r5, #0]
 801af72:	b103      	cbz	r3, 801af76 <_close_r+0x1a>
 801af74:	6023      	str	r3, [r4, #0]
 801af76:	bd38      	pop	{r3, r4, r5, pc}
 801af78:	20001e9c 	.word	0x20001e9c

0801af7c <_fstat_r>:
 801af7c:	b538      	push	{r3, r4, r5, lr}
 801af7e:	4d07      	ldr	r5, [pc, #28]	; (801af9c <_fstat_r+0x20>)
 801af80:	2300      	movs	r3, #0
 801af82:	4604      	mov	r4, r0
 801af84:	4608      	mov	r0, r1
 801af86:	4611      	mov	r1, r2
 801af88:	602b      	str	r3, [r5, #0]
 801af8a:	f7e7 f96e 	bl	800226a <_fstat>
 801af8e:	1c43      	adds	r3, r0, #1
 801af90:	d102      	bne.n	801af98 <_fstat_r+0x1c>
 801af92:	682b      	ldr	r3, [r5, #0]
 801af94:	b103      	cbz	r3, 801af98 <_fstat_r+0x1c>
 801af96:	6023      	str	r3, [r4, #0]
 801af98:	bd38      	pop	{r3, r4, r5, pc}
 801af9a:	bf00      	nop
 801af9c:	20001e9c 	.word	0x20001e9c

0801afa0 <_isatty_r>:
 801afa0:	b538      	push	{r3, r4, r5, lr}
 801afa2:	4d06      	ldr	r5, [pc, #24]	; (801afbc <_isatty_r+0x1c>)
 801afa4:	2300      	movs	r3, #0
 801afa6:	4604      	mov	r4, r0
 801afa8:	4608      	mov	r0, r1
 801afaa:	602b      	str	r3, [r5, #0]
 801afac:	f7e7 f96d 	bl	800228a <_isatty>
 801afb0:	1c43      	adds	r3, r0, #1
 801afb2:	d102      	bne.n	801afba <_isatty_r+0x1a>
 801afb4:	682b      	ldr	r3, [r5, #0]
 801afb6:	b103      	cbz	r3, 801afba <_isatty_r+0x1a>
 801afb8:	6023      	str	r3, [r4, #0]
 801afba:	bd38      	pop	{r3, r4, r5, pc}
 801afbc:	20001e9c 	.word	0x20001e9c

0801afc0 <_lseek_r>:
 801afc0:	b538      	push	{r3, r4, r5, lr}
 801afc2:	4d07      	ldr	r5, [pc, #28]	; (801afe0 <_lseek_r+0x20>)
 801afc4:	4604      	mov	r4, r0
 801afc6:	4608      	mov	r0, r1
 801afc8:	4611      	mov	r1, r2
 801afca:	2200      	movs	r2, #0
 801afcc:	602a      	str	r2, [r5, #0]
 801afce:	461a      	mov	r2, r3
 801afd0:	f7e7 f966 	bl	80022a0 <_lseek>
 801afd4:	1c43      	adds	r3, r0, #1
 801afd6:	d102      	bne.n	801afde <_lseek_r+0x1e>
 801afd8:	682b      	ldr	r3, [r5, #0]
 801afda:	b103      	cbz	r3, 801afde <_lseek_r+0x1e>
 801afdc:	6023      	str	r3, [r4, #0]
 801afde:	bd38      	pop	{r3, r4, r5, pc}
 801afe0:	20001e9c 	.word	0x20001e9c

0801afe4 <_malloc_usable_size_r>:
 801afe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801afe8:	1f18      	subs	r0, r3, #4
 801afea:	2b00      	cmp	r3, #0
 801afec:	bfbc      	itt	lt
 801afee:	580b      	ldrlt	r3, [r1, r0]
 801aff0:	18c0      	addlt	r0, r0, r3
 801aff2:	4770      	bx	lr

0801aff4 <_read_r>:
 801aff4:	b538      	push	{r3, r4, r5, lr}
 801aff6:	4d07      	ldr	r5, [pc, #28]	; (801b014 <_read_r+0x20>)
 801aff8:	4604      	mov	r4, r0
 801affa:	4608      	mov	r0, r1
 801affc:	4611      	mov	r1, r2
 801affe:	2200      	movs	r2, #0
 801b000:	602a      	str	r2, [r5, #0]
 801b002:	461a      	mov	r2, r3
 801b004:	f7e7 f8ec 	bl	80021e0 <_read>
 801b008:	1c43      	adds	r3, r0, #1
 801b00a:	d102      	bne.n	801b012 <_read_r+0x1e>
 801b00c:	682b      	ldr	r3, [r5, #0]
 801b00e:	b103      	cbz	r3, 801b012 <_read_r+0x1e>
 801b010:	6023      	str	r3, [r4, #0]
 801b012:	bd38      	pop	{r3, r4, r5, pc}
 801b014:	20001e9c 	.word	0x20001e9c

0801b018 <_init>:
 801b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b01a:	bf00      	nop
 801b01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b01e:	bc08      	pop	{r3}
 801b020:	469e      	mov	lr, r3
 801b022:	4770      	bx	lr

0801b024 <_fini>:
 801b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b026:	bf00      	nop
 801b028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b02a:	bc08      	pop	{r3}
 801b02c:	469e      	mov	lr, r3
 801b02e:	4770      	bx	lr
